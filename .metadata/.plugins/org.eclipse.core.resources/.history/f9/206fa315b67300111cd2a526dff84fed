#include "anneal_template.cpp"
#include "lattice_exchange.h"
#include "lattice_anneal.h"


//#include <sys/time.h>
//#include <sys/resource.h>


//unsigned long RunTime();  


Exchange::Exchange(Spherical_Protein_Lattice *sdata, Graph<Abund_Node> *graph, int n_proteins, BOOL omit_non) 
{
	search_data=new Spherical_Protein_Lattice(sdata->get_radius());
	(*search_data) = (*sdata);
	the_graph=graph; num_proteins=n_proteins;
	omit_noninteractors=omit_non;
}

Lattice_Arrange_point::Lattice_Arrange_point(Exchange *cexchange)
{
  	int i;
  
	curr_exchange=new Exchange(cexchange->search_data, cexchange->the_graph, cexchange->num_proteins, cexchange->omit_noninteractors);
	curr_exchange->max_id_neighbors=cexchange->max_id_neighbors;
	
	the_lattice=new Spherical_Protein_Lattice(curr_exchange->search_data->get_radius());
	the_lattice->set_max_pos_score(curr_exchange->search_data->get_max_pos_score());
	the_lattice->set_max_id(curr_exchange->max_id_neighbors);
	the_graph=curr_exchange->the_graph;
  
	//Copies the exchange object into the new exchange
	//(Prevents conflicts between the exchanges of different walkers)
	(*curr_exchange)=(*cexchange);
	curr_exchange->search_data=0;
}


Lattice_Arrange_point& Lattice_Arrange_point::operator=(Lattice_Arrange_point & assign_from)
{
  int i;

	(*curr_exchange)=(*assign_from.curr_exchange);
	(*the_lattice)=(*assign_from.the_lattice);
	
	return(*this);
}



Lattice_Arrange_point::~Lattice_Arrange_point ()
{
  delete curr_exchange;
}





void Lattice_anneal::move(int walker)
{
	int i, j, val1, val2, score_change=0;
	double tempscore, prescore, pre_up, precalc, pre1, pre2, preneigh, s1,s2;
	ThreeDim_Lattice_Point<Node<Abund_Node> > *point1,  *point2;
	Node<Abund_Node> * temp, *ele1, *ele2;
	
	curr_move=(*current_walkers)[walker];
	//precalc=(*current_walkers)[walker]->point->the_lattice->get_max_pos_score() - (*current_walkers)[walker]->point->the_lattice->compute_total_score();  
	
	
	curr_move->point->the_lattice->my_twin=pre_move->point->the_lattice;
	
	//prescore=curr_move->score;
	
    val1 =ignuin(0, (*current_walkers)[walker]->point->the_lattice->get_num_points()-1);
	do {
		 val2 =ignuin(0, (*current_walkers)[walker]->point->the_lattice->get_num_points()-1);
	} while( (val2 == val1) || ((*current_walkers)[walker]->point->the_lattice->get_nth_point(val1)->get_element() == 
								(*current_walkers)[walker]->point->the_lattice->get_nth_point(val2)->get_element()) || 
			(((*current_walkers)[walker]->point->the_lattice->get_nth_point(val1)->get_element() == 0) &&
							   ((*current_walkers)[walker]->point->the_lattice->get_nth_point(val2)->get_element() == 0)));
    pre_move->score=(*current_walkers)[walker]->score;
	pre_move->point->the_lattice->swap1=val1;
	pre_move->point->the_lattice->swap2=val2;
	curr_move->point->the_lattice->swap1=val1;
	curr_move->point->the_lattice->swap2=val2;
	
	
	
	point1=curr_move->point->the_lattice->get_nth_point(val1);
	point2=curr_move->point->the_lattice->get_nth_point(val2);
	
	//pre1=point1->get_score();
	//pre2=point2->get_score();
	
	curr_move->new_score=(*current_walkers)[walker]->score;
	//curr_move->new_score += point1->get_score();
	//curr_move->new_score += point2->get_score();
	for(i=0; i<point1->get_num_neighbors(); i++) { 
		if (point1->get_neighbor(i) !=0) point1->get_neighbor(i)->visited=FALSE;
	}
	for(i=0; i<point2->get_num_neighbors(); i++) { 
		if (point2->get_neighbor(i) !=0) point2->get_neighbor(i)->visited=FALSE;
	}
	score_change -= point1->get_score();
	score_change -= point2->get_score();
	point1->visited=TRUE;
	point2->visited=TRUE;
	
	
	for(i=0; i<point1->get_num_neighbors(); i++) { 
		if ((point1->get_neighbor(i) !=0) && (point1->get_neighbor(i)->visited == FALSE)) {
			score_change -= point1->get_neighbor(i)->get_score();
			point1->get_neighbor(i)->visited=TRUE;
		}
	}
	for(i=0; i<point2->get_num_neighbors(); i++) { 
		if ((point2->get_neighbor(i) !=0) && (point2->get_neighbor(i)->visited == FALSE)) {
			score_change -= point2->get_neighbor(i)->get_score();
			point2->get_neighbor(i)->visited=TRUE;
		}
	}
	
#if 0	
	for(i=0; i<point1->get_num_neighbors(); i++) {
		if ((point1->get_neighbor(i) !=0) && (point1->get_neighbor(i)->get_element() !=0) && (point1->get_neighbor(i) != point2)) {
			if (point1->get_neighbor(i)->get_element()->edge_exists(point1->get_element()) == TRUE) {
				//(*current_walkers)[walker]->new_score++;
				score_change--;
				point1->get_neighbor(i)->subtract_score();
				
			}
		}
	}
	
	for(i=0; i<point2->get_num_neighbors(); i++) {
		if ((point2->get_neighbor(i) !=0) && (point2->get_neighbor(i)->get_element() !=0) && (point2->get_neighbor(i) != point1)) {
			if (point2->get_neighbor(i)->get_element()->edge_exists(point2->get_element()) == TRUE) {
				//(*current_walkers)[walker]->new_score++;
				score_change--;
				point2->get_neighbor(i)->subtract_score();
			}
		}
	}
#endif
	
	//ele1=point1->get_element();
	//ele2=point2->get_element();	
	//pre_up=(*current_walkers)[walker]->new_score;
	temp=point1->get_element();
	point1->set_element(point2->get_element());
	point2->set_element(temp);
	
	
	//s1=curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap1);
	//s2=curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap2);
	//curr_move->new_score -= (s1+s2);
	for(i=0; i<point1->get_num_neighbors(); i++) { 
		if (point1->get_neighbor(i) !=0) point1->get_neighbor(i)->visited=FALSE;
	}
	for(i=0; i<point2->get_num_neighbors(); i++) { 
		if (point2->get_neighbor(i) !=0) point2->get_neighbor(i)->visited=FALSE;
	}
	score_change += curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap1);
	score_change += curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap2);
	point1->visited=TRUE;
	point2->visited=TRUE;
	
	for(i=0; i<point1->get_num_neighbors(); i++) { 
		if ((point1->get_neighbor(i) !=0) && (point1->get_neighbor(i)->visited == FALSE)) {
			score_change +=curr_move->point->the_lattice->calc_point_score(point1->get_neighbor(i));
			point1->get_neighbor(i)->visited=TRUE;
		}
	}
	for(i=0; i<point2->get_num_neighbors(); i++) { 
		if ((point2->get_neighbor(i) !=0) && (point2->get_neighbor(i)->visited == FALSE)) {
			score_change +=curr_move->point->the_lattice->calc_point_score(point2->get_neighbor(i));
			point2->get_neighbor(i)->visited=TRUE;
		}
	}
	
	//curr_move->new_score -= curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap1);
	//curr_move->new_score -= curr_move->point->the_lattice->calc_point_score(curr_move->point->the_lattice->swap2);
	//preneigh=curr_move->new_score;
#if 0
	for(i=0; i<point1->get_num_neighbors(); i++) {
		if ((point1->get_neighbor(i) !=0) && (point1->get_neighbor(i)->get_element() !=0) && (point1->get_neighbor(i) != point2)) {
			if (point1->get_neighbor(i)->get_element()->edge_exists(point1->get_element()) == TRUE) {
				//(*current_walkers)[walker]->new_score--;
				score_change++;
				point1->get_neighbor(i)->add_score();
			}
		}
	}
	
	for(i=0; i<point2->get_num_neighbors(); i++) {
		if ((point2->get_neighbor(i) !=0) && (point2->get_neighbor(i)->get_element() !=0) && (point2->get_neighbor(i) != point1)) {
			if (point2->get_neighbor(i)->get_element()->edge_exists(point2->get_element()) == TRUE) {
				//(*current_walkers)[walker]->new_score--;
				score_change++;
				point2->get_neighbor(i)->add_score();
			}
		}
	}
#endif

	(*current_walkers)[walker]->new_score =(*current_walkers)[walker]->score - score_change;
	
	//tempscore=(*current_walkers)[walker]->new_score;
	
	//(*current_walkers)[walker]->new_score=(*current_walkers)[walker]->point->the_lattice->get_max_pos_score() - (*current_walkers)[walker]->point->the_lattice->compute_total_score();    
	
	//if ((tempscore != (*current_walkers)[walker]->new_score) || (prescore != precalc)) 
	//	cout<<"Error: "<<walker<<": "<<val1<<", "<<val2<<": "<<tempscore<<"/ "<<(*current_walkers)[walker]->new_score<<" OLD: "
	//		<<prescore<<" PREUP: "<<pre_up<<" TRUE PRECALC: "<<precalc<<" PRENEIGH: "<<preneigh<<" 1: "<<point1->get_score()
	//		<<"/ "<<s1<<"/ "<<pre1<<" 2: "<<point2->get_score()<<"/ "<<s2<<"/ "<<pre2<<" P1: "<<point1->get_element()<<" || "<<ele1<<" || "
	//	<<curr_move->point->the_lattice->get_nth_point(curr_move->point->the_lattice->swap1)->get_element()<<
	//	" P2: "<<point2->get_element()<<" || "<<ele2<<" || "
	//	<<curr_move->point->the_lattice->get_nth_point(curr_move->point->the_lattice->swap2)->get_element()<<" POINT1: "<<point1<<" $$ "
	//	<<curr_move->point->the_lattice->get_nth_point(curr_move->point->the_lattice->swap1)
	//	<<" POINT2: "<<point2<<" $$ "
	//	<<curr_move->point->the_lattice->get_nth_point(curr_move->point->the_lattice->swap2)<<endl;
}  //End Groups_anneal::move




void Lattice_anneal::average_energies()
{
	int i;
		
	average_e=varience_e=0.0;
	
	for (i=0; i<num_walkers; i++)
    {
	//	cout<<i<<": "<<(*current_walkers)[i]->score<<endl;
		average_e+=(*current_walkers)[i]->score;
		varience_e+=SQR((*current_walkers)[i]->score);
    }
	
	average_e= (average_e/((double)num_walkers));
	varience_e=((double)num_walkers/((double)num_walkers-1.0))*((varience_e/((double)num_walkers))-SQR(average_e));
	
	heat_capacity = last_heat_cap = 1;
	
	//cout<<"AVGE: "<<average_e<<" VAR: "<<varience_e<<" LAST: "<<last_var<<endl;
	//if (last_var == 0) 
	//	heat_capacity = last_heat_cap = 1;
	//else {
	//	if (last_var > varience_e) heat_capacity = heat_capacity * 0.98;
	//	else if (last_var < varience_e) heat_capacity = heat_capacity * 1.02; 
		
	//}
	//last_var=varience_e;
	//heat_capacity= varience_e/(k_boltz*SQR(temp));
	
	//cout<<"HC: "<<heat_capacity<<endl;
	
	relax_time=last_relax;
	
	if (end_avge->avg_val!=0) {
		net_avg_e-=end_avge->last->avg_val-end_avge->avg_val;
		net_var_delta-=(end_avge->var_val-(end_avge->avg_val*end_avge->avg_val));
	}
	else
		times_so_far++;
	
	end_avge->avg_val=exp(average_e);
	end_avge->var_val=exp(varience_e); 
	start_avge=end_avge;
	end_avge=end_avge->last;
	
	
	
	if (fabs(start_avge->next->avg_val-0)>0.001)
    { 
		net_avg_e+=start_avge->avg_val-start_avge->next->avg_val;
    }
	
	net_var_delta+=start_avge->var_val-(start_avge->avg_val*start_avge->avg_val);
	
	
	if ((heat_capacity>1e-4) && (heat_capacity<=1e3))  last_heat_cap=heat_capacity;
	else heat_capacity=last_heat_cap;
    
}  //End Anneal::average_energies





void Lattice_anneal::set_params(Space_point<Lattice_Arrange_point> *values)
{
  int i; 

  

}



void Lattice_anneal::initialize_params(Space_point<Lattice_Arrange_point> *curr_condition)
{
  int i;

	curr_condition->point->the_lattice->intialize_random_lattice(curr_condition->point->the_graph, curr_condition->point->curr_exchange->num_proteins, curr_condition->point->curr_exchange->omit_noninteractors);
	cout<<"New lattice has "<<curr_condition->point->the_lattice->get_num_nonnull_points()<<" proteins\n";
	curr_condition->point->the_lattice->compute_total_score();
	cout<<"Created lattice with "<<curr_condition->point->the_lattice->get_total_score()<<endl;
	//curr_condition->new_score=-1.0*curr_condition->point->the_lattice->get_total_score();
	curr_condition->new_score = curr_condition->point->the_lattice->get_max_pos_score() - curr_condition->point->the_lattice->get_total_score();
	curr_condition->score=curr_condition->new_score;
 // curr_condition->score=(double)curr_condition->point->curr_exchange->search_data->get_best_score();
	  
}



void Lattice_anneal::output ()
{
  int i; 

	cout<<"Best lattice has a score of "<<(int)(best->score)<<" meaning "<<best->point->the_lattice->compute_total_score()<<" neighbors ("<<best->point->the_lattice->get_max_pos_score()<<")\n";
	//best->point->curr_exchange->search_data->print_perm(best->point->curr_exchange->search_data->best_permutation);
	for (i=0; i< num_walkers; i++) cout<<"Walker "<<i<<": "<<(*current_walkers)[i]->score<<endl;
}
