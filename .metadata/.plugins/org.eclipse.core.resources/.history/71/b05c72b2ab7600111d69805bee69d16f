/*
 * IMU.c
 *
 *  Created on: Feb 4, 2012
 *      Author: Administrator
 */


#include "IMU.h"
#include "can.h"

uint8_t ProcessCanMsg(CAN_packet *pkt);

#define UART_BAUD 115200
FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

#define GYR_RD	0xD0
#define GYR_WR	0xD1

#define X_OFFSET	-46
#define X_MUL_NUM	945 // multiplier = X_MUL_NUM/1000
#define Y_OFFSET	-30
#define Y_MUL_NUM	953 // multiplier = X_MUL_NUM/1000
#define Z_OFFSET	-19
#define Z_MUL_NUM	980 // multiplier = X_MUL_NUM/1000

#define ch2word(msb,lsb)	((((uint16_t)(msb) & 0x00FF) << 8) + lsb)
#define ch2dblword(b3,b2,b1,b0)	((((uint32_t)(b3) & 0x000000FF) << 24) + (((uint32_t)(b2) & 0x000000FF) << 16) + (((uint32_t)(b1) & 0x000000FF) << 8) + b0)

int main(void)
{
	DDRD|=_BV(PD7);
	DDRE|=_BV(PE6);

	CAN_packet imu2,sts3,sts4,sts5;

	uint8_t mob = 0;
	uint8_t i;

	stdout = stdin = &uart_str;
	uart_init(UART1_BAUD);
	i2c_init(100000UL);
	can_init();

	uint8_t id1,id2;



//	i2c_start(I2C_WRITE);
//	i2c_write(0b00100000 || 0x0E);
//	i2c_rep_start(I2C_READ);
//	id1 = i2c_read(ACK);
//	id2 = i2c_read(ACK);
//	i2c_read(ACK);
//	i2c_stop();
//
//
//	printf("ADDR: 0x%02X 0x%02X\n",id1,id2);
//	while(1);
	if(acl_init())	printf("ACL initialization error\n");

	if(!temp_init(TMP_FLI_ADDR))	printf("FLI initialized\n");
	if(!temp_init(TMP_FLM_ADDR))	printf("FLM  initialized\n");
	if(!temp_init(TMP_FLO_ADDR))	printf("FLO  initialized\n");
	if(!temp_init(TMP_FRI_ADDR))	printf("FRI  initialized\n");
	if(!temp_init(TMP_FRM_ADDR))	printf("FRM  initialized\n");
	if(!temp_init(TMP_FRO_ADDR))	printf("FRO  initialized\n");

	if(!temp_init(TMP_RLI_ADDR))	printf("RLI  initialized\n");
	if(!temp_init(TMP_RLM_ADDR))	printf("RLM  initialized\n");
	if(!temp_init(TMP_RLO_ADDR))	printf("RLO  initialized\n");

	if(!temp_init(TMP_RRI_ADDR))	printf("RRI  initialized\n");
	if(!temp_init(TMP_RRM_ADDR))	printf("RRM  initialized\n");
	if(!temp_init(TMP_RRO_ADDR))	printf("RRO initialized\n");



	imu2.id_type = CAN_EXT_MSG;
	imu2.id = CAN_DATA_IMU2;
	imu2.id = (imu2.id << 8);
	imu2.length = 6;

	sts3.id_type = CAN_EXT_MSG;
	sts3.id = CAN_DATA_STS3;
	sts3.id = (sts3.id << 8);
	sts3.length = 8;
	for(i = 0;i<8;i++)
	{
		sts3.data[i] = 0;
	}

	sts4.id_type = CAN_EXT_MSG;
	sts4.id = CAN_DATA_STS4;
	sts4.id = (sts4.id << 8);
	sts4.length = 8;
	for(i = 0;i<8;i++)
	{
		sts4.data[i] = 0;
	}

	sts5.id_type = CAN_EXT_MSG;
	sts5.id = CAN_DATA_STS5;
	sts5.id = (sts5.id << 8);
	sts5.length = 8;
	sts5.msg_type = CAN_TX_MSG;
	for(i = 0;i<8;i++)
	{
		sts5.data[i] = 0;
	}

	sei();
	while(1)
	{
		PORTE |= _BV(PE6);
		_delay_ms(1);
		temp_get_value(TMP_FLI_ADDR,TMP_FLI);
		_delay_ms(1);
		temp_get_value(TMP_FLM_ADDR,TMP_FLM);
		temp_get_value(TMP_FLO_ADDR,TMP_FLO);

		temp_get_value(TMP_FRI_ADDR,TMP_FRI);
		temp_get_value(TMP_FRM_ADDR,TMP_FRM);
		temp_get_value(TMP_FRO_ADDR,TMP_FRO);

		temp_get_value(TMP_RLI_ADDR,TMP_RLI);
		temp_get_value(TMP_RLM_ADDR,TMP_RLM);
		temp_get_value(TMP_RLO_ADDR,TMP_RLO);

		temp_get_value(TMP_RRI_ADDR,TMP_RRI);
		temp_get_value(TMP_RRM_ADDR,TMP_RRM);
		temp_get_value(TMP_RRO_ADDR,TMP_RRO);
		PORTE &= ~_BV(PE6);

		sts3.data[1] = temps[TMP_FLI];
		sts3.data[3] = temps[TMP_FRI];
		sts3.data[5] = temps[TMP_RLI];
		sts3.data[7] = temps[TMP_RRI];


		sts4.data[1] = temps[TMP_FLM];
		sts4.data[3] = temps[TMP_FRM];
		sts4.data[5] = temps[TMP_RLM];
		sts4.data[7] = temps[TMP_RRM];

		sts5.data[1] = temps[TMP_FLO];
		sts5.data[3] = temps[TMP_FRO];
		sts5.data[5] = temps[TMP_RLO];
		sts5.data[7] = temps[TMP_RRO];

		mob = get_open_mob();

		if(mob < 15)
		{
			can_tx(mob,&sts3);
		}

		mob = get_open_mob();

		if(mob < 15)
		{
			can_tx(mob,&sts4);
		}

		mob = get_open_mob();

		if(mob < 15)
		{
			can_tx(mob,&sts5);
		}

		_delay_ms(50);
		_delay_ms(50);

	}
}

//! CAN interrupt service routine
ISR( CANIT_vect)
{
	unsigned char i;
	CAN_packet packet;
	unsigned char save_canpage;
	unsigned char mob;
	unsigned char length;

	PORTD |= _BV(PD7);
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];

	if(packet.msg_type == CAN_TX_MSG)
	{
		CANSTMOB = 0;
		CANCDMOB = 0;

		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
		{
			packet.id_type = CAN_EXT_MSG;
			packet.id = 	(((uint32_t)CANIDT1) << 21)
						| (((uint32_t)CANIDT2) << 13)
						| (((uint32_t)CANIDT3) << 5)
						| (((uint32_t)CANIDT4) >> 3);
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE

	/*-------------Device Specific-----------------*/
	PORTD &= ~_BV(PD7);
	/*---------------------------------------------*/
}

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
	return 0;
}
