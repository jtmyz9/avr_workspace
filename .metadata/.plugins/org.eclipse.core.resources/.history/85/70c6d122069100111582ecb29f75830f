/*
 * SWTest.c
 *
 * Created: 9/22/2011 11:17:36 PM
 *  Author: Administrator
 */

#define F_CPU 16000000UL

/*
 * SW.c
 *
 *  Created on: Jan 9, 2012
 *      Author: Mark
 */

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <avr/interrupt.h>
#include "uart.h"
#include "ui.h"
#include "can.h"
#include "ZOUnet_defs.h"
#include "systimer.h"
#include "svn_seg.h"

#include "can.h"

void handle_10ms_tick(void);

#define UART_BAUD 115200
//FILE uart_str = FDEV_SETUP_STREAM(uart_putchar, uart_getchar, _FDEV_SETUP_RW);

void handle_10ms_tick(void)
{
	/*
	if(systimer_10ms %10 == 0)
	{
		// Send 100Hz Data
		//led_ctrl(LED1,LED_ON,LED_NO_TMR);
	}

	if(systimer_10ms %20 == 0)
	{
		// Send 50Hz Data
		//led_ctrl(LED2,LED_ON,LED_NO_TMR);
	}

	if(systimer_10ms % 50 == 0)
	{
		// Send 20Hz Data
		//led_ctrl(LED3,LED_ON,LED_NO_TMR);
	}

	if(systimer_10ms % 100 == 0)
	{
		// Send 10Hz Data
		//led_ctrl(LED4,LED_ON,LED_NO_TMR);
	}

	if(systimer_10ms % 200 == 0)
	{
		// Send 5Hz Data
		//led_ctrl(LED5,LED_ON,LED_NO_TMR);
	}
	if(systimer_10ms % 500 == 0)
	{
		// Send 2Hz Data
		//led_ctrl(LED6,LED_ON,LED_NO_TMR);
	}
	if(systimer_10ms % 1000 == 0)
	{
		// Send 1Hz Data
		//led_ctrl(LED7,LED_ON,LED_NO_TMR);
	}
	*/
}

//! CAN interrupt service routine
ISR( CANIT_vect)
{
	unsigned char i;
	CAN_packet packet;
	unsigned char save_canpage;
	unsigned char mob;
	unsigned char length;

	/*-------------Device Specific-----------------*/
	led_ctrl(LED8,LED_ON,1);
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];

	if(packet.msg_type == CAN_TX_MSG)
	{
		CANSTMOB = 0;
		CANCDMOB = 0;

		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
		{
			packet.id_type = CAN_EXT_MSG;
			packet.id = 	(((uint32_t)CANIDT1) << 21)
						| (((uint32_t)CANIDT2) << 13)
						| (((uint32_t)CANIDT3) << 5)
						| (((uint32_t)CANIDT4) >> 3);
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE

	/*-------------Device Specific-----------------*/

	led_ctrl(LED8,LED_OFF,1);

	/*---------------------------------------------*/
}

#define ch2word(msb,lsb)	((((uint16_t)(msb) & 0x00FF) << 8) + lsb)
#define ch2dblword(b3,b2,b1,b0)	((((uint32_t)(b3) & 0x000000FF) << 24) + (((uint32_t)(b2) & 0x000000FF) << 16) + (((uint32_t)(b1) & 0x000000FF) << 8) + b0)

volatile uint8_t data_chg = 0;

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
	uint8_t msg_type;

	unsigned char i;

	// Get the Message Type
	msg_type = pkt->msg_type;
	// Clear the message type in the lookup table

	uint16_t id = (uint16_t)((uint32_t)(pkt->id)>>8);

	printf("CAN ID: %04X%04X\n",(uint16_t)(pkt->id >> 16),(uint16_t)pkt->id);

	switch(msg_type)
	{
		case CAN_MSGTYPE_NONE:
			return(0);
		case CAN_DATABRDCST:
			data_chg = 1;

			switch(id)
			{
				case CAN_DATA_PE1:
					//led_ctrl(LED1,LED_ON,LED_NO_TMR);
					data[0].rpm = ch2word(pkt->data[1],pkt->data[0]);
					data[0].tps = ch2word(pkt->data[3],pkt->data[2]);
					data[0].fuel_open_time = ch2word(pkt->data[5],pkt->data[4]);
					data[0].ign_angle = ch2word(pkt->data[7],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_PE2:
					data[0].barometer = ch2word(pkt->data[1],pkt->data[0]);
					data[0].map = ch2word(pkt->data[3],pkt->data[2]);
					data[0].lambda = ch2word(pkt->data[5],pkt->data[4]);
					return(msg_type);
				case CAN_DATA_PE3:
					data[0].pe3_a1 = ch2word(pkt->data[1],pkt->data[0]);
					data[0].pe3_a2 = ch2word(pkt->data[3],pkt->data[2]);
					data[0].pe3_a3 = ch2word(pkt->data[5],pkt->data[4]);
					data[0].pe3_a4 = ch2word(pkt->data[7],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_PE4:
					data[0].pe3_a5 = ch2word(pkt->data[1],pkt->data[0]);
					data[0].pe3_a6 = ch2word(pkt->data[3],pkt->data[2]);
					data[0].pe3_a7 = ch2word(pkt->data[5],pkt->data[4]);
					data[0].pe3_a8 = ch2word(pkt->data[7],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_PE5:
					data[0].freq1 = ch2word(pkt->data[1],pkt->data[0]);
					data[0].freq2 = ch2word(pkt->data[3],pkt->data[2]);
					data[0].freq3 = ch2word(pkt->data[5],pkt->data[4]);
					data[0].freq4 = ch2word(pkt->data[7],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_PE6:
					data[0].batt_volt = ch2word(pkt->data[1],pkt->data[0]);
					data[0].air_temp = ch2word(pkt->data[3],pkt->data[2]);
					data[0].wtr_temp = ch2word(pkt->data[5],pkt->data[4]);
					return(msg_type);
				case CAN_DATA_PE7:
					data[0].therm5 = ch2word(pkt->data[1],pkt->data[0]);
					data[0].therm6 = ch2word(pkt->data[3],pkt->data[2]);
					data[0].ver_mjr = pkt->data[4];
					data[0].ver_min = pkt->data[5];
					data[0].ver_bld = pkt->data[6];
					return(msg_type);
				case CAN_DATA_TCS1:
					data[0].TCS_status = pkt->data[0];
					data[0].trac_status = pkt->data[1];
					data[0].lnc_status = pkt->data[2];
					data[0].lnc_dsb_spd = ch2word(pkt->data[3],pkt->data[4]);
					return(msg_type);
				case CAN_DATA_TCS2:
					data[0].fuel_slip_err = ch2word(pkt->data[0],pkt->data[1]);
					data[0].fuel_comp = ch2word(pkt->data[2],pkt->data[3]);
					data[0].timing_err = ch2word(pkt->data[4],pkt->data[5]);
					data[0].timing_comp = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_TCS3:
					data[0].tcs_a0 = ch2word(pkt->data[0],pkt->data[1]);
					data[0].tcs_a1 = ch2word(pkt->data[2],pkt->data[3]);
					data[0].tcs_a2 = ch2word(pkt->data[4],pkt->data[5]);
					data[0].tcs_a3 = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_TCS4:
					data[0].fuel_kp = pkt->data[0];
					data[0].fuel_kd = pkt->data[1];
					data[0].fuel_ki = pkt->data[2];
					data[0].timing_kp = pkt->data[3];
					data[0].timing_kd = pkt->data[4];
					data[0].timing_ki = pkt->data[5];
					return(msg_type);
				case CAN_DATA_IMU1:
					data[0].IMU_status = pkt->data[0];
					data[0].x_comp = ch2word(pkt->data[1],pkt->data[2]);
					data[0].y_comp = ch2word(pkt->data[3],pkt->data[4]);
					data[0].z_comp = ch2word(pkt->data[5],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_IMU2:
					data[0].acl_x = ch2word(pkt->data[0],pkt->data[1]);
					data[0].acl_y = ch2word(pkt->data[2],pkt->data[3]);
					data[0].acl_z = ch2word(pkt->data[4],pkt->data[5]);
					return(msg_type);
				case CAN_DATA_IMU3:
					data[0].gyro_x = ch2word(pkt->data[0],pkt->data[1]);
					data[0].gyro_y = ch2word(pkt->data[2],pkt->data[3]);
					data[0].gyro_z = ch2word(pkt->data[4],pkt->data[5]);
					return(msg_type);
				case CAN_DATA_IMU4:
					data[0].mag_x = ch2word(pkt->data[0],pkt->data[1]);
					data[0].mag_y = ch2word(pkt->data[2],pkt->data[3]);
					data[0].mag_z = ch2word(pkt->data[4],pkt->data[5]);
					data[0].mag_heading = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_STS1:
					data[0].STS_status = ch2word(pkt->data[0],pkt->data[1]);
					return(msg_type);
				case CAN_DATA_STS2:
					data[0].susp_trvl_fl = 0x03FF & ch2word(pkt->data[0],pkt->data[1]);
					data[0].susp_trvl_fr = 0x03FF & ch2word(pkt->data[2],pkt->data[3]);
					data[0].susp_trvl_rl = 0x03FF & ch2word(pkt->data[4],pkt->data[5]);
					data[0].susp_trvl_rr = 0x03FF & ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_STS3:
					data[0].ttemp_inr_fl = ch2word(pkt->data[0],pkt->data[1]);
					data[0].ttemp_inr_fr = ch2word(pkt->data[2],pkt->data[3]);
					data[0].ttemp_inr_rl = ch2word(pkt->data[4],pkt->data[5]);
					data[0].ttemp_inr_rr = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_STS4:
					data[0].ttemp_mdl_fl = ch2word(pkt->data[0],pkt->data[1]);
					data[0].ttemp_mdl_fr = ch2word(pkt->data[2],pkt->data[3]);
					data[0].ttemp_mdl_rl = ch2word(pkt->data[4],pkt->data[5]);
					data[0].ttemp_mdl_rr = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_STS5:
					data[0].ttemp_otr_fl = ch2word(pkt->data[0],pkt->data[1]);
					data[0].ttemp_otr_fr = ch2word(pkt->data[2],pkt->data[3]);
					data[0].ttemp_otr_rl = ch2word(pkt->data[4],pkt->data[5]);
					data[0].ttemp_otr_rr = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_DLG1:
					data[0].DLG_status = pkt->data[0];
					data[0].hmsphr = pkt->data[1];
					data[0].pos_dil = pkt->data[2];
					data[0].time_dil = pkt->data[3];
					data[0].date = ch2word(pkt->data[4],pkt->data[5]);
					return(msg_type);
				case CAN_DATA_DLG2:
					data[0].lat = ch2dblword(pkt->data[0],pkt->data[1],pkt->data[2],pkt->data[3]);
					data[0].lng = ch2dblword(pkt->data[4],pkt->data[5],pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_DLG3:
					data[0].heading = ch2word(pkt->data[0],pkt->data[1]);
					data[0].speed = pkt->data[2];
					data[0].time = ch2dblword(pkt->data[3],pkt->data[4],pkt->data[5],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_DLG4:
					data[0].log_status = pkt->data[0];
					for(i = 0;i<7;i++)
					{
						data[0].log_name[i] = pkt->data[i+1];
					}
					data[0].log_name[7] = 0;
					return(msg_type);
				case CAN_DATA_STW1:
					data[0].STS_status = pkt->data[0];
					return(msg_type);
				case CAN_DATA_WRL1:
					data[0].STS_status = pkt->data[0];
					return(msg_type);
				default:
					return(0);
			}
			break;
		default:
			return(0);
	}
	return(0);
}

int main(void)
{
	DDRD |= _BV(PD7)|_BV(PD4);
	PORTE |= _BV(PE5);
	uint16_t i;

	ui_init();
	can_init();

	uint8_t frozen = 0;

	prepare_rx(0,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(1,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(2,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(3,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(4,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(5,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(6,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(7,0,0,CAN_EXT_MSG,CAN_DATABRDCST);

	sei();

	data_chg = 0;

	_delay_ms(100);

	i = 100;

	uint8_t page = 1;
	uint8_t page_update = 1;
	uint8_t updated = 0;

	int16_t last_wtr_temp = 0;
	int16_t last_air_temp = 0;
	int16_t new_val = 0;
	uint8_t b;

	int16_t last_temps[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

	frozen = 0;

	CAN_packet dlg_pkt;

	dlg_pkt.id = CAN_DATA_DLGR_TGL;
	dlg_pkt.id = dlg_pkt.id << 8;
	dlg_pkt.id_type = CAN_EXT_MSG;
	dlg_pkt.msg_type = CAN_TX_MSG;
	dlg_pkt.length = 2;
	dlg_pkt.data[0] = CAN_ADDR_STW;

	tach_off();

	data[0].rpm = 1500;

	while(1)
	{

		//page = 5;
		switch(page)
		{
		case 5:
			break;
		case 1:
			if(page_update == 1)
			{
				glcd_set(0,1);
				glcd_set(4,0);
				glcd_set(5,0);
				glcd_set(6,0);
				glcd_set(7,0);
				last_wtr_temp = 0;
				last_air_temp = 0;
				updated = 1;
				page_update = 0;
			}

			// Water Temp
			new_val = data[0].wtr_temp/10;
			if(new_val != last_wtr_temp)
			{
				glcd_set(4,new_val);
				last_wtr_temp = new_val;
				updated = 1;
			}

			new_val = data[0].air_temp/10;
			if(new_val != last_air_temp)
			{
				glcd_set(5,new_val);
				last_air_temp = new_val;
				updated = 1;
			}

			if(updated == 1)
			{
				glcd_update();
				updated = 0;
			}

			break;

		case 2:
			if(page_update == 1)
			{
				glcd_set(0,2);
				glcd_set(4,0);
				glcd_set(5,0);
				glcd_set(6,0);
				glcd_set(7,0);
				glcd_set(8,0);
				glcd_set(9,0);
				glcd_set(10,0);
				glcd_set(11,0);
				glcd_set(12,0);
				glcd_set(13,0);
				glcd_set(14,0);
				glcd_set(15,0);
				for(i = 0;i<12;i++)
				{
					last_temps[i]=0;
				}
				updated = 1;
				page_update = 0;
				frozen = 0;
			}

			if(!frozen)
			{
				new_val = data[0].ttemp_otr_fl;
				if(new_val != last_temps[0])
				{
					glcd_set(4,new_val);
					last_temps[0] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fl;
				if(new_val != last_temps[1])
				{
					glcd_set(5,new_val);
					last_temps[1] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fl;
				if(new_val != last_temps[2])
				{
					glcd_set(6,new_val);
					last_temps[2] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_otr_fr;
				if(new_val != last_temps[3])
				{
					glcd_set(7,new_val);
					last_temps[3] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fr;
				if(new_val != last_temps[4])
				{
					glcd_set(8,new_val);
					last_temps[4] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fr;
				if(new_val != last_temps[5])
				{
					glcd_set(9,new_val);
					last_temps[5] = new_val;
					updated = 1;
				}
				//-------------
				new_val = data[0].ttemp_otr_rl;
				if(new_val != last_temps[6])
				{
					glcd_set(10,new_val);
					last_temps[6] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rl;
				if(new_val != last_temps[7])
				{
					glcd_set(11,new_val);
					last_temps[7] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rl;
				if(new_val != last_temps[8])
				{
					glcd_set(12,new_val);
					last_temps[8] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_otr_rr;
				if(new_val != last_temps[9])
				{
					glcd_set(13,new_val);
					last_temps[9] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rr;
				if(new_val != last_temps[10])
				{
					glcd_set(14,new_val);
					last_temps[10] = new_val;
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rr;
				if(new_val != last_temps[11])
				{
					glcd_set(15,new_val);
					last_temps[11] = new_val;
					updated = 1;
				}
			}

			if(updated == 1)
			{
				glcd_update();
				updated = 0;
			}
			break;
		default:
			break;
		}

		if(last_btn != 0)
		{
			b = last_btn;
			last_btn = 0;

			if(b == BTN_R_PSHD)
			{
				if(page != 2)
				{
					page = 2;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_L_PSHD)
			{
				if(page != 1)
				{
					page = 1;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_1_PSHD)
			{
				dlg_pkt.id = CAN_DATA_DLGR_TGL;
				dlg_pkt.id = dlg_pkt.id <<8;
				can_tx(get_open_mob(),&dlg_pkt);
			}
			else if((b == BTN_2_PSHD))
			{
				dlg_pkt.id = CAN_DATA_TC_TGL;
				dlg_pkt.id = 0x8000000 | dlg_pkt.id <<8;
				can_tx(get_open_mob(),&dlg_pkt);
				dlg_pkt.id = CAN_DATA_LC_TGL;
				dlg_pkt.id = 0x8000000 | dlg_pkt.id <<8;
				can_tx(get_open_mob(),&dlg_pkt);
			}
			else if((b==BTN_3_PSHD))
			{
				 if(frozen == 1) frozen = 0;
				 else if(frozen == 0) frozen = 1;
			}
//			else if(b==BTN_U_PSHD)
//			{
//				if(pot_disp > 1)
//				{
//					pot_disp--;
//				}
//			}
//			else if(b == BTN_D_PSHD)
//			{
//
//				if(pot_disp < 4)
//				{
//					pot_disp++;
//				}
//			}

		}
	}

}
