
DLGR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00009058  000090ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009058  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000743  00800134  00800134  00009120  2**0
                  ALLOC
  3 .stab         00007aac  00000000  00000000  00009120  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000045ad  00000000  00000000  00010bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  00015179  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000005f  00000000  00000000  000151d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000504  00000000  00000000  00015238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002cc  00000000  00000000  0001573c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000025d  00000000  00000000  00015a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00015c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000127  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002bc  00000000  00000000  00015def  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 09 01 	jmp	0x212	; 0x212 <__ctors_end>
       4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
       8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
       c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      10:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      14:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      18:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      1c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      20:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      24:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      28:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      2c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      30:	0c 94 9c 41 	jmp	0x8338	; 0x8338 <__vector_12>
      34:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      38:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      3c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      40:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      44:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      48:	0c 94 cd 34 	jmp	0x699a	; 0x699a <__vector_18>
      4c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      50:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      54:	0c 94 d4 3d 	jmp	0x7ba8	; 0x7ba8 <__vector_21>
      58:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      5c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      60:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      64:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      68:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      6c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      70:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      74:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      78:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      7c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      80:	0c 94 85 30 	jmp	0x610a	; 0x610a <__vector_32>
      84:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      88:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      8c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      90:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
      94:	fc 32       	cpi	r31, 0x2C	; 44
      96:	09 33       	cpi	r16, 0x39	; 57
      98:	2e 33       	cpi	r18, 0x3E	; 62
      9a:	38 33       	cpi	r19, 0x38	; 56
      9c:	5d 33       	cpi	r21, 0x3D	; 61
      9e:	7c 33       	cpi	r23, 0x3C	; 60
      a0:	98 33       	cpi	r25, 0x38	; 56
      a2:	c8 34       	cpi	r28, 0x48	; 72
      a4:	b4 33       	cpi	r27, 0x34	; 52
      a6:	b8 33       	cpi	r27, 0x38	; 56
      a8:	dd 33       	cpi	r29, 0x3D	; 61
      aa:	02 34       	cpi	r16, 0x42	; 66
      ac:	27 34       	cpi	r18, 0x47	; 71
      ae:	4c 34       	cpi	r20, 0x4C	; 76
      b0:	56 34       	cpi	r21, 0x46	; 70
      b2:	af 34       	cpi	r26, 0x4F	; 79
      b4:	c7 34       	cpi	r28, 0x47	; 71
      b6:	bf 34       	cpi	r27, 0x4F	; 79
      b8:	c3 34       	cpi	r28, 0x43	; 67
      ba:	30 32       	cpi	r19, 0x20	; 32
      bc:	c7 34       	cpi	r28, 0x47	; 71
      be:	c7 34       	cpi	r28, 0x47	; 71
      c0:	c7 34       	cpi	r28, 0x47	; 71
      c2:	c7 34       	cpi	r28, 0x47	; 71
      c4:	c7 34       	cpi	r28, 0x47	; 71
      c6:	c7 34       	cpi	r28, 0x47	; 71
      c8:	c7 34       	cpi	r28, 0x47	; 71
      ca:	c7 34       	cpi	r28, 0x47	; 71
      cc:	c7 34       	cpi	r28, 0x47	; 71
      ce:	c7 34       	cpi	r28, 0x47	; 71
      d0:	c7 34       	cpi	r28, 0x47	; 71
      d2:	c7 34       	cpi	r28, 0x47	; 71
      d4:	41 32       	cpi	r20, 0x21	; 33
      d6:	66 32       	cpi	r22, 0x26	; 38
      d8:	79 32       	cpi	r23, 0x29	; 41
      da:	9e 32       	cpi	r25, 0x2E	; 46
      dc:	a8 32       	cpi	r26, 0x28	; 40
      de:	cd 32       	cpi	r28, 0x2D	; 45
      e0:	e9 32       	cpi	r30, 0x29	; 41
      e2:	d1 36       	cpi	r29, 0x61	; 97
      e4:	f2 36       	cpi	r31, 0x62	; 98
      e6:	0e 37       	cpi	r16, 0x7E	; 126
      e8:	34 37       	cpi	r19, 0x74	; 116
      ea:	d6 37       	cpi	r29, 0x76	; 118
      ec:	a1 38       	cpi	r26, 0x81	; 129
      ee:	c7 38       	cpi	r28, 0x87	; 135
      f0:	0d 3a       	cpi	r16, 0xAD	; 173
      f2:	25 3a       	cpi	r18, 0xA5	; 165
      f4:	77 3b       	cpi	r23, 0xB7	; 183
      f6:	8f 3b       	cpi	r24, 0xBF	; 191
      f8:	a7 3b       	cpi	r26, 0xB7	; 183
      fa:	be 3b       	cpi	r27, 0xBE	; 190
      fc:	cb 3b       	cpi	r28, 0xBB	; 187
      fe:	d8 3b       	cpi	r29, 0xB8	; 184
     100:	cd 36       	cpi	r28, 0x6D	; 109
     102:	cf 36       	cpi	r28, 0x6F	; 111

00000104 <__c.2035>:
     104:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     114:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0a 00        ectory failed..

00000123 <__c.2033>:
     123:	47 65 74 20 70 61 74 68 20 66 61 69 6c 65 64 0a     Get path failed.
	...

00000134 <__c.2031>:
     134:	46 41 54 20 45 72 72 6f 72 0a 00                    FAT Error..

0000013f <__c.1996>:
     13f:	43 72 65 61 74 69 6e 67 20 46 69 6c 65 20 4f 70     Creating File Op
     14f:	65 6e 65 64 0a 00                                   ened..

00000155 <__c.1994>:
     155:	46 69 6c 65 20 43 72 65 61 74 65 64 0a 00           File Created..

00000163 <__c.1990>:
     163:	43 61 6e 6e 6f 74 20 4f 70 65 6e 20 46 69 6c 65     Cannot Open File
     173:	0a 00                                               ..

00000175 <__c.1988>:
     175:	4f 70 65 6e 69 6e 67 20 4e 65 77 20 6c 6f 67 0a     Opening New log.
	...

00000186 <__c.1940>:
     186:	46 69 6c 65 73 79 73 74 65 6d 20 4f 70 65 6e 65     Filesystem Opene
     196:	64 0a 00                                            d..

00000199 <__c.1938>:
     199:	4f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     Opening filesyst
     1a9:	65 6d 20 46 61 69 6c 65 64 0a 00                    em Failed..

000001b4 <__c.1936>:
     1b4:	50 61 72 74 69 74 69 6f 6e 20 4f 70 65 6e 65 64     Partition Opened
     1c4:	0a 00                                               ..

000001c6 <__c.1934>:
     1c6:	46 69 72 73 74 20 70 61 72 74 69 74 69 6f 6e 20     First partition 
     1d6:	4f 70 65 6e 20 66 61 69 6c 65 64 2c 20 74 72 79     Open failed, try
     1e6:	69 6e 67 20 73 6f 6d 65 74 68 69 6e 67 20 65 6c     ing something el
     1f6:	73 65 0a 00                                         se..

000001fa <__c.1932>:
     1fa:	52 61 77 20 53 44 20 49 6e 69 74 20 73 75 63 63     Raw SD Init succ
     20a:	65 65 64 65 64 0a 00 00                             eeded...

00000212 <__ctors_end>:
     212:	11 24       	eor	r1, r1
     214:	1f be       	out	0x3f, r1	; 63
     216:	cf ef       	ldi	r28, 0xFF	; 255
     218:	d0 e1       	ldi	r29, 0x10	; 16
     21a:	de bf       	out	0x3e, r29	; 62
     21c:	cd bf       	out	0x3d, r28	; 61

0000021e <__do_copy_data>:
     21e:	11 e0       	ldi	r17, 0x01	; 1
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b1 e0       	ldi	r27, 0x01	; 1
     224:	e8 e5       	ldi	r30, 0x58	; 88
     226:	f0 e9       	ldi	r31, 0x90	; 144
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	0b bf       	out	0x3b, r16	; 59
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x14>
     22e:	07 90       	elpm	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	a4 33       	cpi	r26, 0x34	; 52
     234:	b1 07       	cpc	r27, r17
     236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0x10>

00000238 <__do_clear_bss>:
     238:	18 e0       	ldi	r17, 0x08	; 8
     23a:	a4 e3       	ldi	r26, 0x34	; 52
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
     240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
     242:	a7 37       	cpi	r26, 0x77	; 119
     244:	b1 07       	cpc	r27, r17
     246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>
     248:	0e 94 09 3c 	call	0x7812	; 0x7812 <main>
     24c:	0c 94 2a 48 	jmp	0x9054	; 0x9054 <_exit>

00000250 <__bad_interrupt>:
     250:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000254 <fat_close>:
     254:	fc 01       	movw	r30, r24
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	11 f0       	breq	.+4      	; 0x25e <fat_close+0xa>
     25a:	11 82       	std	Z+1, r1	; 0x01
     25c:	10 82       	st	Z, r1
     25e:	08 95       	ret

00000260 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
     260:	2f 92       	push	r2
     262:	3f 92       	push	r3
     264:	4f 92       	push	r4
     266:	5f 92       	push	r5
     268:	6f 92       	push	r6
     26a:	7f 92       	push	r7
     26c:	8f 92       	push	r8
     26e:	9f 92       	push	r9
     270:	af 92       	push	r10
     272:	bf 92       	push	r11
     274:	cf 92       	push	r12
     276:	df 92       	push	r13
     278:	ef 92       	push	r14
     27a:	ff 92       	push	r15
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	28 97       	sbiw	r28, 0x08	; 8
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	f8 94       	cli
     28e:	de bf       	out	0x3e, r29	; 62
     290:	0f be       	out	0x3f, r0	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	fc 01       	movw	r30, r24
    if(!fs || cluster_num < 2)
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	09 f4       	brne	.+2      	; 0x29c <fat_get_next_cluster+0x3c>
     29a:	40 c1       	rjmp	.+640    	; 0x51c <fat_get_next_cluster+0x2bc>
     29c:	42 30       	cpi	r20, 0x02	; 2
     29e:	51 05       	cpc	r21, r1
     2a0:	61 05       	cpc	r22, r1
     2a2:	71 05       	cpc	r23, r1
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <fat_get_next_cluster+0x48>
     2a6:	3a c1       	rjmp	.+628    	; 0x51c <fat_get_next_cluster+0x2bc>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
     2a8:	80 80       	ld	r8, Z
     2aa:	91 80       	ldd	r9, Z+1	; 0x01
     2ac:	d4 01       	movw	r26, r8
     2ae:	18 96       	adiw	r26, 0x08	; 8
     2b0:	8c 91       	ld	r24, X
     2b2:	5a 01       	movw	r10, r20
     2b4:	6b 01       	movw	r12, r22
     2b6:	62 84       	ldd	r6, Z+10	; 0x0a
     2b8:	53 84       	ldd	r5, Z+11	; 0x0b
     2ba:	44 84       	ldd	r4, Z+12	; 0x0c
     2bc:	35 84       	ldd	r3, Z+13	; 0x0d
     2be:	26 84       	ldd	r2, Z+14	; 0x0e
     2c0:	b7 85       	ldd	r27, Z+15	; 0x0f
     2c2:	bf 83       	std	Y+7, r27	; 0x07
     2c4:	90 89       	ldd	r25, Z+16	; 0x10
     2c6:	98 87       	std	Y+8, r25	; 0x08
     2c8:	71 88       	ldd	r7, Z+17	; 0x11
     2ca:	8b 30       	cpi	r24, 0x0B	; 11
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <fat_get_next_cluster+0x70>
     2ce:	93 c0       	rjmp	.+294    	; 0x3f6 <fat_get_next_cluster+0x196>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     2d0:	9a 01       	movw	r18, r20
     2d2:	a6 01       	movw	r20, r12
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	02 e0       	ldi	r16, 0x02	; 2
     2de:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     2e2:	e3 2f       	mov	r30, r19
     2e4:	f4 2f       	mov	r31, r20
     2e6:	a5 2f       	mov	r26, r21
     2e8:	b6 2f       	mov	r27, r22
     2ea:	17 2f       	mov	r17, r23
     2ec:	08 2f       	mov	r16, r24
     2ee:	e9 2e       	mov	r14, r25
     2f0:	f2 2e       	mov	r15, r18
     2f2:	f6 0c       	add	r15, r6
     2f4:	31 e0       	ldi	r19, 0x01	; 1
     2f6:	f2 16       	cp	r15, r18
     2f8:	08 f0       	brcs	.+2      	; 0x2fc <fat_get_next_cluster+0x9c>
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	2e 2f       	mov	r18, r30
     2fe:	25 0d       	add	r18, r5
     300:	41 e0       	ldi	r20, 0x01	; 1
     302:	2e 17       	cp	r18, r30
     304:	08 f0       	brcs	.+2      	; 0x308 <fat_get_next_cluster+0xa8>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	32 0f       	add	r19, r18
     30a:	e1 e0       	ldi	r30, 0x01	; 1
     30c:	32 17       	cp	r19, r18
     30e:	08 f0       	brcs	.+2      	; 0x312 <fat_get_next_cluster+0xb2>
     310:	e0 e0       	ldi	r30, 0x00	; 0
     312:	4e 2b       	or	r20, r30
     314:	2f 2f       	mov	r18, r31
     316:	24 0d       	add	r18, r4
     318:	51 e0       	ldi	r21, 0x01	; 1
     31a:	2f 17       	cp	r18, r31
     31c:	08 f0       	brcs	.+2      	; 0x320 <fat_get_next_cluster+0xc0>
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	42 0f       	add	r20, r18
     322:	e1 e0       	ldi	r30, 0x01	; 1
     324:	42 17       	cp	r20, r18
     326:	08 f0       	brcs	.+2      	; 0x32a <fat_get_next_cluster+0xca>
     328:	e0 e0       	ldi	r30, 0x00	; 0
     32a:	5e 2b       	or	r21, r30
     32c:	2a 2f       	mov	r18, r26
     32e:	23 0d       	add	r18, r3
     330:	61 e0       	ldi	r22, 0x01	; 1
     332:	2a 17       	cp	r18, r26
     334:	08 f0       	brcs	.+2      	; 0x338 <fat_get_next_cluster+0xd8>
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	52 0f       	add	r21, r18
     33a:	e1 e0       	ldi	r30, 0x01	; 1
     33c:	52 17       	cp	r21, r18
     33e:	08 f0       	brcs	.+2      	; 0x342 <fat_get_next_cluster+0xe2>
     340:	e0 e0       	ldi	r30, 0x00	; 0
     342:	6e 2b       	or	r22, r30
     344:	2b 2f       	mov	r18, r27
     346:	22 0d       	add	r18, r2
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	2b 17       	cp	r18, r27
     34c:	08 f0       	brcs	.+2      	; 0x350 <fat_get_next_cluster+0xf0>
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	62 0f       	add	r22, r18
     352:	e1 e0       	ldi	r30, 0x01	; 1
     354:	62 17       	cp	r22, r18
     356:	08 f0       	brcs	.+2      	; 0x35a <fat_get_next_cluster+0xfa>
     358:	e0 e0       	ldi	r30, 0x00	; 0
     35a:	7e 2b       	or	r23, r30
     35c:	2f 81       	ldd	r18, Y+7	; 0x07
     35e:	21 0f       	add	r18, r17
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	21 17       	cp	r18, r17
     364:	08 f0       	brcs	.+2      	; 0x368 <fat_get_next_cluster+0x108>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	72 0f       	add	r23, r18
     36a:	e1 e0       	ldi	r30, 0x01	; 1
     36c:	72 17       	cp	r23, r18
     36e:	08 f0       	brcs	.+2      	; 0x372 <fat_get_next_cluster+0x112>
     370:	e0 e0       	ldi	r30, 0x00	; 0
     372:	8e 2b       	or	r24, r30
     374:	28 85       	ldd	r18, Y+8	; 0x08
     376:	20 0f       	add	r18, r16
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	20 17       	cp	r18, r16
     37c:	08 f0       	brcs	.+2      	; 0x380 <fat_get_next_cluster+0x120>
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	82 0f       	add	r24, r18
     382:	e1 e0       	ldi	r30, 0x01	; 1
     384:	82 17       	cp	r24, r18
     386:	08 f0       	brcs	.+2      	; 0x38a <fat_get_next_cluster+0x12a>
     388:	e0 e0       	ldi	r30, 0x00	; 0
     38a:	9e 2b       	or	r25, r30
     38c:	7e 0c       	add	r7, r14
     38e:	d4 01       	movw	r26, r8
     390:	ed 91       	ld	r30, X+
     392:	fc 91       	ld	r31, X
     394:	2f 2d       	mov	r18, r15
     396:	97 0d       	add	r25, r7
     398:	8e 01       	movw	r16, r28
     39a:	0d 5f       	subi	r16, 0xFD	; 253
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	b4 e0       	ldi	r27, 0x04	; 4
     3a0:	eb 2e       	mov	r14, r27
     3a2:	f1 2c       	mov	r15, r1
     3a4:	09 95       	icall
     3a6:	88 23       	and	r24, r24
     3a8:	09 f4       	brne	.+2      	; 0x3ac <fat_get_next_cluster+0x14c>
     3aa:	b8 c0       	rjmp	.+368    	; 0x51c <fat_get_next_cluster+0x2bc>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
     3ac:	2b 81       	ldd	r18, Y+3	; 0x03
     3ae:	3c 81       	ldd	r19, Y+4	; 0x04
     3b0:	4d 81       	ldd	r20, Y+5	; 0x05
     3b2:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
     3b4:	21 15       	cp	r18, r1
     3b6:	31 05       	cpc	r19, r1
     3b8:	41 05       	cpc	r20, r1
     3ba:	51 05       	cpc	r21, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <fat_get_next_cluster+0x160>
     3be:	b2 c0       	rjmp	.+356    	; 0x524 <fat_get_next_cluster+0x2c4>
     3c0:	27 3f       	cpi	r18, 0xF7	; 247
     3c2:	bf ef       	ldi	r27, 0xFF	; 255
     3c4:	3b 07       	cpc	r19, r27
     3c6:	bf ef       	ldi	r27, 0xFF	; 255
     3c8:	4b 07       	cpc	r20, r27
     3ca:	bf e0       	ldi	r27, 0x0F	; 15
     3cc:	5b 07       	cpc	r21, r27
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <fat_get_next_cluster+0x172>
     3d0:	a5 c0       	rjmp	.+330    	; 0x51c <fat_get_next_cluster+0x2bc>
     3d2:	da 01       	movw	r26, r20
     3d4:	c9 01       	movw	r24, r18
     3d6:	80 5f       	subi	r24, 0xF0	; 240
     3d8:	9f 4f       	sbci	r25, 0xFF	; 255
     3da:	af 4f       	sbci	r26, 0xFF	; 255
     3dc:	bf 40       	sbci	r27, 0x0F	; 15
     3de:	07 97       	sbiw	r24, 0x07	; 7
     3e0:	a1 05       	cpc	r26, r1
     3e2:	b1 05       	cpc	r27, r1
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <fat_get_next_cluster+0x188>
     3e6:	9a c0       	rjmp	.+308    	; 0x51c <fat_get_next_cluster+0x2bc>
     3e8:	da 01       	movw	r26, r20
     3ea:	c9 01       	movw	r24, r18
     3ec:	88 5f       	subi	r24, 0xF8	; 248
     3ee:	9f 4f       	sbci	r25, 0xFF	; 255
     3f0:	af 4f       	sbci	r26, 0xFF	; 255
     3f2:	bf 40       	sbci	r27, 0x0F	; 15
     3f4:	8f c0       	rjmp	.+286    	; 0x514 <fat_get_next_cluster+0x2b4>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     3f6:	9a 01       	movw	r18, r20
     3f8:	a6 01       	movw	r20, r12
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	01 e0       	ldi	r16, 0x01	; 1
     404:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     408:	e3 2f       	mov	r30, r19
     40a:	f4 2f       	mov	r31, r20
     40c:	a5 2f       	mov	r26, r21
     40e:	b6 2f       	mov	r27, r22
     410:	17 2f       	mov	r17, r23
     412:	08 2f       	mov	r16, r24
     414:	e9 2e       	mov	r14, r25
     416:	f2 2e       	mov	r15, r18
     418:	f6 0c       	add	r15, r6
     41a:	31 e0       	ldi	r19, 0x01	; 1
     41c:	f2 16       	cp	r15, r18
     41e:	08 f0       	brcs	.+2      	; 0x422 <fat_get_next_cluster+0x1c2>
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	2e 2f       	mov	r18, r30
     424:	25 0d       	add	r18, r5
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	2e 17       	cp	r18, r30
     42a:	08 f0       	brcs	.+2      	; 0x42e <fat_get_next_cluster+0x1ce>
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	32 0f       	add	r19, r18
     430:	e1 e0       	ldi	r30, 0x01	; 1
     432:	32 17       	cp	r19, r18
     434:	08 f0       	brcs	.+2      	; 0x438 <fat_get_next_cluster+0x1d8>
     436:	e0 e0       	ldi	r30, 0x00	; 0
     438:	4e 2b       	or	r20, r30
     43a:	2f 2f       	mov	r18, r31
     43c:	24 0d       	add	r18, r4
     43e:	51 e0       	ldi	r21, 0x01	; 1
     440:	2f 17       	cp	r18, r31
     442:	08 f0       	brcs	.+2      	; 0x446 <fat_get_next_cluster+0x1e6>
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	42 0f       	add	r20, r18
     448:	e1 e0       	ldi	r30, 0x01	; 1
     44a:	42 17       	cp	r20, r18
     44c:	08 f0       	brcs	.+2      	; 0x450 <fat_get_next_cluster+0x1f0>
     44e:	e0 e0       	ldi	r30, 0x00	; 0
     450:	5e 2b       	or	r21, r30
     452:	2a 2f       	mov	r18, r26
     454:	23 0d       	add	r18, r3
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	2a 17       	cp	r18, r26
     45a:	08 f0       	brcs	.+2      	; 0x45e <fat_get_next_cluster+0x1fe>
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	52 0f       	add	r21, r18
     460:	e1 e0       	ldi	r30, 0x01	; 1
     462:	52 17       	cp	r21, r18
     464:	08 f0       	brcs	.+2      	; 0x468 <fat_get_next_cluster+0x208>
     466:	e0 e0       	ldi	r30, 0x00	; 0
     468:	6e 2b       	or	r22, r30
     46a:	2b 2f       	mov	r18, r27
     46c:	22 0d       	add	r18, r2
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	2b 17       	cp	r18, r27
     472:	08 f0       	brcs	.+2      	; 0x476 <fat_get_next_cluster+0x216>
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	62 0f       	add	r22, r18
     478:	e1 e0       	ldi	r30, 0x01	; 1
     47a:	62 17       	cp	r22, r18
     47c:	08 f0       	brcs	.+2      	; 0x480 <fat_get_next_cluster+0x220>
     47e:	e0 e0       	ldi	r30, 0x00	; 0
     480:	7e 2b       	or	r23, r30
     482:	2f 81       	ldd	r18, Y+7	; 0x07
     484:	21 0f       	add	r18, r17
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	21 17       	cp	r18, r17
     48a:	08 f0       	brcs	.+2      	; 0x48e <fat_get_next_cluster+0x22e>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	72 0f       	add	r23, r18
     490:	e1 e0       	ldi	r30, 0x01	; 1
     492:	72 17       	cp	r23, r18
     494:	08 f0       	brcs	.+2      	; 0x498 <fat_get_next_cluster+0x238>
     496:	e0 e0       	ldi	r30, 0x00	; 0
     498:	8e 2b       	or	r24, r30
     49a:	28 85       	ldd	r18, Y+8	; 0x08
     49c:	20 0f       	add	r18, r16
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	20 17       	cp	r18, r16
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <fat_get_next_cluster+0x246>
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	82 0f       	add	r24, r18
     4a8:	e1 e0       	ldi	r30, 0x01	; 1
     4aa:	82 17       	cp	r24, r18
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <fat_get_next_cluster+0x250>
     4ae:	e0 e0       	ldi	r30, 0x00	; 0
     4b0:	9e 2b       	or	r25, r30
     4b2:	7e 0c       	add	r7, r14
     4b4:	d4 01       	movw	r26, r8
     4b6:	ed 91       	ld	r30, X+
     4b8:	fc 91       	ld	r31, X
     4ba:	2f 2d       	mov	r18, r15
     4bc:	97 0d       	add	r25, r7
     4be:	8e 01       	movw	r16, r28
     4c0:	0f 5f       	subi	r16, 0xFF	; 255
     4c2:	1f 4f       	sbci	r17, 0xFF	; 255
     4c4:	a2 e0       	ldi	r26, 0x02	; 2
     4c6:	ea 2e       	mov	r14, r26
     4c8:	f1 2c       	mov	r15, r1
     4ca:	09 95       	icall
     4cc:	88 23       	and	r24, r24
     4ce:	31 f1       	breq	.+76     	; 0x51c <fat_get_next_cluster+0x2bc>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	9c 01       	movw	r18, r24
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
     4da:	21 15       	cp	r18, r1
     4dc:	31 05       	cpc	r19, r1
     4de:	41 05       	cpc	r20, r1
     4e0:	51 05       	cpc	r21, r1
     4e2:	01 f1       	breq	.+64     	; 0x524 <fat_get_next_cluster+0x2c4>
     4e4:	27 3f       	cpi	r18, 0xF7	; 247
     4e6:	bf ef       	ldi	r27, 0xFF	; 255
     4e8:	3b 07       	cpc	r19, r27
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	4b 07       	cpc	r20, r27
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	5b 07       	cpc	r21, r27
     4f2:	a1 f0       	breq	.+40     	; 0x51c <fat_get_next_cluster+0x2bc>
     4f4:	da 01       	movw	r26, r20
     4f6:	c9 01       	movw	r24, r18
     4f8:	80 5f       	subi	r24, 0xF0	; 240
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	a0 40       	sbci	r26, 0x00	; 0
     4fe:	b0 40       	sbci	r27, 0x00	; 0
     500:	07 97       	sbiw	r24, 0x07	; 7
     502:	a1 05       	cpc	r26, r1
     504:	b1 05       	cpc	r27, r1
     506:	50 f0       	brcs	.+20     	; 0x51c <fat_get_next_cluster+0x2bc>
     508:	da 01       	movw	r26, r20
     50a:	c9 01       	movw	r24, r18
     50c:	88 5f       	subi	r24, 0xF8	; 248
     50e:	9f 4f       	sbci	r25, 0xFF	; 255
     510:	a0 40       	sbci	r26, 0x00	; 0
     512:	b0 40       	sbci	r27, 0x00	; 0
     514:	08 97       	sbiw	r24, 0x08	; 8
     516:	a1 05       	cpc	r26, r1
     518:	b1 05       	cpc	r27, r1
     51a:	20 f4       	brcc	.+8      	; 0x524 <fat_get_next_cluster+0x2c4>
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	50 e0       	ldi	r21, 0x00	; 0
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    }

    return cluster_num;
}
     524:	b9 01       	movw	r22, r18
     526:	ca 01       	movw	r24, r20
     528:	28 96       	adiw	r28, 0x08	; 8
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	1f 91       	pop	r17
     53a:	0f 91       	pop	r16
     53c:	ff 90       	pop	r15
     53e:	ef 90       	pop	r14
     540:	df 90       	pop	r13
     542:	cf 90       	pop	r12
     544:	bf 90       	pop	r11
     546:	af 90       	pop	r10
     548:	9f 90       	pop	r9
     54a:	8f 90       	pop	r8
     54c:	7f 90       	pop	r7
     54e:	6f 90       	pop	r6
     550:	5f 90       	pop	r5
     552:	4f 90       	pop	r4
     554:	3f 90       	pop	r3
     556:	2f 90       	pop	r2
     558:	08 95       	ret

0000055a <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
     55a:	2f 92       	push	r2
     55c:	3f 92       	push	r3
     55e:	4f 92       	push	r4
     560:	5f 92       	push	r5
     562:	6f 92       	push	r6
     564:	7f 92       	push	r7
     566:	8f 92       	push	r8
     568:	9f 92       	push	r9
     56a:	af 92       	push	r10
     56c:	bf 92       	push	r11
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	64 97       	sbiw	r28, 0x14	; 20
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	2c 01       	movw	r4, r24
     590:	3a 01       	movw	r6, r20
     592:	4b 01       	movw	r8, r22
    if(!fs || cluster_num < 2)
     594:	00 97       	sbiw	r24, 0x00	; 0
     596:	09 f4       	brne	.+2      	; 0x59a <fat_free_clusters+0x40>
     598:	a9 c1       	rjmp	.+850    	; 0x8ec <fat_free_clusters+0x392>
     59a:	42 30       	cpi	r20, 0x02	; 2
     59c:	51 05       	cpc	r21, r1
     59e:	61 05       	cpc	r22, r1
     5a0:	71 05       	cpc	r23, r1
     5a2:	08 f4       	brcc	.+2      	; 0x5a6 <fat_free_clusters+0x4c>
     5a4:	a3 c1       	rjmp	.+838    	; 0x8ec <fat_free_clusters+0x392>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
     5a6:	d2 01       	movw	r26, r4
     5a8:	1a 96       	adiw	r26, 0x0a	; 10
     5aa:	bc 91       	ld	r27, X
     5ac:	bc 87       	std	Y+12, r27	; 0x0c
     5ae:	f2 01       	movw	r30, r4
     5b0:	f3 85       	ldd	r31, Z+11	; 0x0b
     5b2:	fd 87       	std	Y+13, r31	; 0x0d
     5b4:	d2 01       	movw	r26, r4
     5b6:	1c 96       	adiw	r26, 0x0c	; 12
     5b8:	bc 91       	ld	r27, X
     5ba:	be 87       	std	Y+14, r27	; 0x0e
     5bc:	f2 01       	movw	r30, r4
     5be:	f5 85       	ldd	r31, Z+13	; 0x0d
     5c0:	ff 87       	std	Y+15, r31	; 0x0f
     5c2:	d2 01       	movw	r26, r4
     5c4:	1e 96       	adiw	r26, 0x0e	; 14
     5c6:	bc 91       	ld	r27, X
     5c8:	b8 8b       	std	Y+16, r27	; 0x10
     5ca:	f2 01       	movw	r30, r4
     5cc:	f7 85       	ldd	r31, Z+15	; 0x0f
     5ce:	f9 8b       	std	Y+17, r31	; 0x11
     5d0:	d2 01       	movw	r26, r4
     5d2:	50 96       	adiw	r26, 0x10	; 16
     5d4:	bc 91       	ld	r27, X
     5d6:	ba 8b       	std	Y+18, r27	; 0x12
     5d8:	f2 01       	movw	r30, r4
     5da:	f1 89       	ldd	r31, Z+17	; 0x11
     5dc:	fb 8b       	std	Y+19, r31	; 0x13
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
     5de:	d2 01       	movw	r26, r4
     5e0:	ed 91       	ld	r30, X+
     5e2:	fc 91       	ld	r31, X
     5e4:	80 85       	ldd	r24, Z+8	; 0x08
     5e6:	8b 30       	cpi	r24, 0x0B	; 11
     5e8:	09 f0       	breq	.+2      	; 0x5ec <fat_free_clusters+0x92>
     5ea:	d6 c0       	rjmp	.+428    	; 0x798 <fat_free_clusters+0x23e>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     5ec:	64 01       	movw	r12, r8
     5ee:	53 01       	movw	r10, r6
     5f0:	93 01       	movw	r18, r6
     5f2:	a6 01       	movw	r20, r12
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	02 e0       	ldi	r16, 0x02	; 2
     5fe:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     602:	e3 2f       	mov	r30, r19
     604:	f4 2f       	mov	r31, r20
     606:	b5 2f       	mov	r27, r21
     608:	16 2f       	mov	r17, r22
     60a:	07 2f       	mov	r16, r23
     60c:	f8 2e       	mov	r15, r24
     60e:	a9 2f       	mov	r26, r25
     610:	8c 85       	ldd	r24, Y+12	; 0x0c
     612:	82 0f       	add	r24, r18
     614:	8c 8b       	std	Y+20, r24	; 0x14
     616:	31 e0       	ldi	r19, 0x01	; 1
     618:	82 17       	cp	r24, r18
     61a:	08 f0       	brcs	.+2      	; 0x61e <fat_free_clusters+0xc4>
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	2d 85       	ldd	r18, Y+13	; 0x0d
     620:	2e 0f       	add	r18, r30
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	2e 17       	cp	r18, r30
     626:	08 f0       	brcs	.+2      	; 0x62a <fat_free_clusters+0xd0>
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	32 0f       	add	r19, r18
     62c:	3f 83       	std	Y+7, r19	; 0x07
     62e:	31 e0       	ldi	r19, 0x01	; 1
     630:	9f 81       	ldd	r25, Y+7	; 0x07
     632:	92 17       	cp	r25, r18
     634:	08 f0       	brcs	.+2      	; 0x638 <fat_free_clusters+0xde>
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	43 2b       	or	r20, r19
     63a:	2e 85       	ldd	r18, Y+14	; 0x0e
     63c:	2f 0f       	add	r18, r31
     63e:	51 e0       	ldi	r21, 0x01	; 1
     640:	2f 17       	cp	r18, r31
     642:	08 f0       	brcs	.+2      	; 0x646 <fat_free_clusters+0xec>
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	42 0f       	add	r20, r18
     648:	48 87       	std	Y+8, r20	; 0x08
     64a:	31 e0       	ldi	r19, 0x01	; 1
     64c:	42 17       	cp	r20, r18
     64e:	08 f0       	brcs	.+2      	; 0x652 <fat_free_clusters+0xf8>
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	53 2b       	or	r21, r19
     654:	2f 85       	ldd	r18, Y+15	; 0x0f
     656:	2b 0f       	add	r18, r27
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	2b 17       	cp	r18, r27
     65c:	08 f0       	brcs	.+2      	; 0x660 <fat_free_clusters+0x106>
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	52 0f       	add	r21, r18
     662:	59 87       	std	Y+9, r21	; 0x09
     664:	31 e0       	ldi	r19, 0x01	; 1
     666:	52 17       	cp	r21, r18
     668:	08 f0       	brcs	.+2      	; 0x66c <fat_free_clusters+0x112>
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	63 2b       	or	r22, r19
     66e:	28 89       	ldd	r18, Y+16	; 0x10
     670:	21 0f       	add	r18, r17
     672:	71 e0       	ldi	r23, 0x01	; 1
     674:	21 17       	cp	r18, r17
     676:	08 f0       	brcs	.+2      	; 0x67a <fat_free_clusters+0x120>
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	62 0f       	add	r22, r18
     67c:	6a 87       	std	Y+10, r22	; 0x0a
     67e:	31 e0       	ldi	r19, 0x01	; 1
     680:	62 17       	cp	r22, r18
     682:	08 f0       	brcs	.+2      	; 0x686 <fat_free_clusters+0x12c>
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	73 2b       	or	r23, r19
     688:	29 89       	ldd	r18, Y+17	; 0x11
     68a:	20 0f       	add	r18, r16
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	20 17       	cp	r18, r16
     690:	08 f0       	brcs	.+2      	; 0x694 <fat_free_clusters+0x13a>
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	72 0f       	add	r23, r18
     696:	7b 87       	std	Y+11, r23	; 0x0b
     698:	31 e0       	ldi	r19, 0x01	; 1
     69a:	72 17       	cp	r23, r18
     69c:	08 f0       	brcs	.+2      	; 0x6a0 <fat_free_clusters+0x146>
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	83 2b       	or	r24, r19
     6a2:	2a 89       	ldd	r18, Y+18	; 0x12
     6a4:	2f 0d       	add	r18, r15
     6a6:	31 e0       	ldi	r19, 0x01	; 1
     6a8:	2f 15       	cp	r18, r15
     6aa:	08 f0       	brcs	.+2      	; 0x6ae <fat_free_clusters+0x154>
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	28 2e       	mov	r2, r24
     6b0:	22 0e       	add	r2, r18
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	22 16       	cp	r2, r18
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <fat_free_clusters+0x160>
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	33 2e       	mov	r3, r19
     6bc:	39 2a       	or	r3, r25
     6be:	bb 89       	ldd	r27, Y+19	; 0x13
     6c0:	ab 0f       	add	r26, r27
     6c2:	3a 0e       	add	r3, r26
     6c4:	d2 01       	movw	r26, r4
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	01 90       	ld	r0, Z+
     6cc:	f0 81       	ld	r31, Z
     6ce:	e0 2d       	mov	r30, r0
     6d0:	2c 89       	ldd	r18, Y+20	; 0x14
     6d2:	3f 81       	ldd	r19, Y+7	; 0x07
     6d4:	48 85       	ldd	r20, Y+8	; 0x08
     6d6:	59 85       	ldd	r21, Y+9	; 0x09
     6d8:	6a 85       	ldd	r22, Y+10	; 0x0a
     6da:	7b 85       	ldd	r23, Y+11	; 0x0b
     6dc:	c1 01       	movw	r24, r2
     6de:	8e 01       	movw	r16, r28
     6e0:	0d 5f       	subi	r16, 0xFD	; 253
     6e2:	1f 4f       	sbci	r17, 0xFF	; 255
     6e4:	b4 e0       	ldi	r27, 0x04	; 4
     6e6:	eb 2e       	mov	r14, r27
     6e8:	f1 2c       	mov	r15, r1
     6ea:	09 95       	icall
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <fat_free_clusters+0x198>
     6f0:	fd c0       	rjmp	.+506    	; 0x8ec <fat_free_clusters+0x392>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
     6f2:	ab 80       	ldd	r10, Y+3	; 0x03
     6f4:	bc 80       	ldd	r11, Y+4	; 0x04
     6f6:	cd 80       	ldd	r12, Y+5	; 0x05
     6f8:	de 80       	ldd	r13, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
     6fa:	a1 14       	cp	r10, r1
     6fc:	b1 04       	cpc	r11, r1
     6fe:	c1 04       	cpc	r12, r1
     700:	d1 04       	cpc	r13, r1
     702:	09 f4       	brne	.+2      	; 0x706 <fat_free_clusters+0x1ac>
     704:	f5 c0       	rjmp	.+490    	; 0x8f0 <fat_free_clusters+0x396>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
     706:	d6 01       	movw	r26, r12
     708:	c5 01       	movw	r24, r10
     70a:	80 5f       	subi	r24, 0xF0	; 240
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	af 4f       	sbci	r26, 0xFF	; 255
     710:	bf 40       	sbci	r27, 0x0F	; 15
     712:	08 97       	sbiw	r24, 0x08	; 8
     714:	a1 05       	cpc	r26, r1
     716:	b1 05       	cpc	r27, r1
     718:	08 f4       	brcc	.+2      	; 0x71c <fat_free_clusters+0x1c2>
     71a:	e8 c0       	rjmp	.+464    	; 0x8ec <fat_free_clusters+0x392>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
     71c:	d6 01       	movw	r26, r12
     71e:	c5 01       	movw	r24, r10
     720:	88 5f       	subi	r24, 0xF8	; 248
     722:	9f 4f       	sbci	r25, 0xFF	; 255
     724:	af 4f       	sbci	r26, 0xFF	; 255
     726:	bf 40       	sbci	r27, 0x0F	; 15
     728:	08 97       	sbiw	r24, 0x08	; 8
     72a:	a1 05       	cpc	r26, r1
     72c:	b1 05       	cpc	r27, r1
     72e:	18 f4       	brcc	.+6      	; 0x736 <fat_free_clusters+0x1dc>
     730:	aa 24       	eor	r10, r10
     732:	bb 24       	eor	r11, r11
     734:	65 01       	movw	r12, r10
                cluster_num_next = 0;

            /* We know we will free the cluster, so remember it as
             * free for the next allocation.
             */
            if(!fs->cluster_free)
     736:	f2 01       	movw	r30, r4
     738:	86 a5       	ldd	r24, Z+46	; 0x2e
     73a:	97 a5       	ldd	r25, Z+47	; 0x2f
     73c:	a0 a9       	ldd	r26, Z+48	; 0x30
     73e:	b1 a9       	ldd	r27, Z+49	; 0x31
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	a1 05       	cpc	r26, r1
     744:	b1 05       	cpc	r27, r1
     746:	39 f4       	brne	.+14     	; 0x756 <fat_free_clusters+0x1fc>
                fs->cluster_free = cluster_num;
     748:	d2 01       	movw	r26, r4
     74a:	9e 96       	adiw	r26, 0x2e	; 46
     74c:	6d 92       	st	X+, r6
     74e:	7d 92       	st	X+, r7
     750:	8d 92       	st	X+, r8
     752:	9c 92       	st	X, r9
     754:	d1 97       	sbiw	r26, 0x31	; 49

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
     756:	1b 82       	std	Y+3, r1	; 0x03
     758:	1c 82       	std	Y+4, r1	; 0x04
     75a:	1d 82       	std	Y+5, r1	; 0x05
     75c:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     75e:	d2 01       	movw	r26, r4
     760:	ed 91       	ld	r30, X+
     762:	fc 91       	ld	r31, X
     764:	04 80       	ldd	r0, Z+4	; 0x04
     766:	f5 81       	ldd	r31, Z+5	; 0x05
     768:	e0 2d       	mov	r30, r0
     76a:	2c 89       	ldd	r18, Y+20	; 0x14
     76c:	3f 81       	ldd	r19, Y+7	; 0x07
     76e:	48 85       	ldd	r20, Y+8	; 0x08
     770:	59 85       	ldd	r21, Y+9	; 0x09
     772:	6a 85       	ldd	r22, Y+10	; 0x0a
     774:	7b 85       	ldd	r23, Y+11	; 0x0b
     776:	c1 01       	movw	r24, r2
     778:	8e 01       	movw	r16, r28
     77a:	0d 5f       	subi	r16, 0xFD	; 253
     77c:	1f 4f       	sbci	r17, 0xFF	; 255
     77e:	a4 e0       	ldi	r26, 0x04	; 4
     780:	ea 2e       	mov	r14, r26
     782:	f1 2c       	mov	r15, r1
     784:	09 95       	icall
     786:	35 01       	movw	r6, r10
     788:	46 01       	movw	r8, r12
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
     78a:	a1 14       	cp	r10, r1
     78c:	b1 04       	cpc	r11, r1
     78e:	c1 04       	cpc	r12, r1
     790:	d1 04       	cpc	r13, r1
     792:	09 f0       	breq	.+2      	; 0x796 <fat_free_clusters+0x23c>
     794:	2b cf       	rjmp	.-426    	; 0x5ec <fat_free_clusters+0x92>
     796:	ac c0       	rjmp	.+344    	; 0x8f0 <fat_free_clusters+0x396>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
     798:	64 01       	movw	r12, r8
     79a:	53 01       	movw	r10, r6
     79c:	93 01       	movw	r18, r6
     79e:	a6 01       	movw	r20, r12
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	01 e0       	ldi	r16, 0x01	; 1
     7aa:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     7ae:	e3 2f       	mov	r30, r19
     7b0:	f4 2f       	mov	r31, r20
     7b2:	b5 2f       	mov	r27, r21
     7b4:	16 2f       	mov	r17, r22
     7b6:	07 2f       	mov	r16, r23
     7b8:	f8 2e       	mov	r15, r24
     7ba:	a9 2f       	mov	r26, r25
     7bc:	2c 84       	ldd	r2, Y+12	; 0x0c
     7be:	22 0e       	add	r2, r18
     7c0:	31 e0       	ldi	r19, 0x01	; 1
     7c2:	22 16       	cp	r2, r18
     7c4:	08 f0       	brcs	.+2      	; 0x7c8 <fat_free_clusters+0x26e>
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     7ca:	2e 0f       	add	r18, r30
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	2e 17       	cp	r18, r30
     7d0:	08 f0       	brcs	.+2      	; 0x7d4 <fat_free_clusters+0x27a>
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	33 2e       	mov	r3, r19
     7d6:	32 0e       	add	r3, r18
     7d8:	31 e0       	ldi	r19, 0x01	; 1
     7da:	32 16       	cp	r3, r18
     7dc:	08 f0       	brcs	.+2      	; 0x7e0 <fat_free_clusters+0x286>
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	43 2b       	or	r20, r19
     7e2:	2e 85       	ldd	r18, Y+14	; 0x0e
     7e4:	2f 0f       	add	r18, r31
     7e6:	51 e0       	ldi	r21, 0x01	; 1
     7e8:	2f 17       	cp	r18, r31
     7ea:	08 f0       	brcs	.+2      	; 0x7ee <fat_free_clusters+0x294>
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	64 2e       	mov	r6, r20
     7f0:	62 0e       	add	r6, r18
     7f2:	31 e0       	ldi	r19, 0x01	; 1
     7f4:	62 16       	cp	r6, r18
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <fat_free_clusters+0x2a0>
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	53 2b       	or	r21, r19
     7fc:	2f 85       	ldd	r18, Y+15	; 0x0f
     7fe:	2b 0f       	add	r18, r27
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	2b 17       	cp	r18, r27
     804:	08 f0       	brcs	.+2      	; 0x808 <fat_free_clusters+0x2ae>
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	75 2e       	mov	r7, r21
     80a:	72 0e       	add	r7, r18
     80c:	31 e0       	ldi	r19, 0x01	; 1
     80e:	72 16       	cp	r7, r18
     810:	08 f0       	brcs	.+2      	; 0x814 <fat_free_clusters+0x2ba>
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	63 2b       	or	r22, r19
     816:	28 89       	ldd	r18, Y+16	; 0x10
     818:	21 0f       	add	r18, r17
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	21 17       	cp	r18, r17
     81e:	08 f0       	brcs	.+2      	; 0x822 <fat_free_clusters+0x2c8>
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	86 2e       	mov	r8, r22
     824:	82 0e       	add	r8, r18
     826:	31 e0       	ldi	r19, 0x01	; 1
     828:	82 16       	cp	r8, r18
     82a:	08 f0       	brcs	.+2      	; 0x82e <fat_free_clusters+0x2d4>
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	73 2b       	or	r23, r19
     830:	29 89       	ldd	r18, Y+17	; 0x11
     832:	20 0f       	add	r18, r16
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	20 17       	cp	r18, r16
     838:	08 f0       	brcs	.+2      	; 0x83c <fat_free_clusters+0x2e2>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	97 2e       	mov	r9, r23
     83e:	92 0e       	add	r9, r18
     840:	31 e0       	ldi	r19, 0x01	; 1
     842:	92 16       	cp	r9, r18
     844:	08 f0       	brcs	.+2      	; 0x848 <fat_free_clusters+0x2ee>
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	83 2b       	or	r24, r19
     84a:	2a 89       	ldd	r18, Y+18	; 0x12
     84c:	2f 0d       	add	r18, r15
     84e:	31 e0       	ldi	r19, 0x01	; 1
     850:	2f 15       	cp	r18, r15
     852:	08 f0       	brcs	.+2      	; 0x856 <fat_free_clusters+0x2fc>
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a8 2e       	mov	r10, r24
     858:	a2 0e       	add	r10, r18
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	a2 16       	cp	r10, r18
     85e:	08 f0       	brcs	.+2      	; 0x862 <fat_free_clusters+0x308>
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	b3 2e       	mov	r11, r19
     864:	b9 2a       	or	r11, r25
     866:	bb 89       	ldd	r27, Y+19	; 0x13
     868:	ab 0f       	add	r26, r27
     86a:	ba 0e       	add	r11, r26
     86c:	d2 01       	movw	r26, r4
     86e:	ed 91       	ld	r30, X+
     870:	fc 91       	ld	r31, X
     872:	01 90       	ld	r0, Z+
     874:	f0 81       	ld	r31, Z
     876:	e0 2d       	mov	r30, r0
     878:	91 01       	movw	r18, r2
     87a:	a3 01       	movw	r20, r6
     87c:	b4 01       	movw	r22, r8
     87e:	c5 01       	movw	r24, r10
     880:	8e 01       	movw	r16, r28
     882:	0f 5f       	subi	r16, 0xFF	; 255
     884:	1f 4f       	sbci	r17, 0xFF	; 255
     886:	b2 e0       	ldi	r27, 0x02	; 2
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	09 95       	icall
     88e:	88 23       	and	r24, r24
     890:	69 f1       	breq	.+90     	; 0x8ec <fat_free_clusters+0x392>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
     892:	c9 80       	ldd	r12, Y+1	; 0x01
     894:	da 80       	ldd	r13, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
     896:	c1 14       	cp	r12, r1
     898:	d1 04       	cpc	r13, r1
     89a:	51 f1       	breq	.+84     	; 0x8f0 <fat_free_clusters+0x396>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
     89c:	c6 01       	movw	r24, r12
     89e:	40 96       	adiw	r24, 0x10	; 16
     8a0:	08 97       	sbiw	r24, 0x08	; 8
     8a2:	20 f1       	brcs	.+72     	; 0x8ec <fat_free_clusters+0x392>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
     8a4:	b8 ef       	ldi	r27, 0xF8	; 248
     8a6:	cb 16       	cp	r12, r27
     8a8:	bf ef       	ldi	r27, 0xFF	; 255
     8aa:	db 06       	cpc	r13, r27
     8ac:	10 f0       	brcs	.+4      	; 0x8b2 <fat_free_clusters+0x358>
     8ae:	cc 24       	eor	r12, r12
     8b0:	dd 24       	eor	r13, r13
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
     8b2:	1a 82       	std	Y+2, r1	; 0x02
     8b4:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
     8b6:	d2 01       	movw	r26, r4
     8b8:	ed 91       	ld	r30, X+
     8ba:	fc 91       	ld	r31, X
     8bc:	04 80       	ldd	r0, Z+4	; 0x04
     8be:	f5 81       	ldd	r31, Z+5	; 0x05
     8c0:	e0 2d       	mov	r30, r0
     8c2:	91 01       	movw	r18, r2
     8c4:	a3 01       	movw	r20, r6
     8c6:	b4 01       	movw	r22, r8
     8c8:	c5 01       	movw	r24, r10
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5f       	subi	r16, 0xFF	; 255
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	a2 e0       	ldi	r26, 0x02	; 2
     8d2:	ea 2e       	mov	r14, r26
     8d4:	f1 2c       	mov	r15, r1
     8d6:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
     8d8:	36 01       	movw	r6, r12
     8da:	88 24       	eor	r8, r8
     8dc:	99 24       	eor	r9, r9
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
     8de:	61 14       	cp	r6, r1
     8e0:	71 04       	cpc	r7, r1
     8e2:	81 04       	cpc	r8, r1
     8e4:	91 04       	cpc	r9, r1
     8e6:	09 f0       	breq	.+2      	; 0x8ea <fat_free_clusters+0x390>
     8e8:	57 cf       	rjmp	.-338    	; 0x798 <fat_free_clusters+0x23e>
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <fat_free_clusters+0x396>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <fat_free_clusters+0x398>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
     8f2:	64 96       	adiw	r28, 0x14	; 20
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	de bf       	out	0x3e, r29	; 62
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	cd bf       	out	0x3d, r28	; 61
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	1f 91       	pop	r17
     904:	0f 91       	pop	r16
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	7f 90       	pop	r7
     918:	6f 90       	pop	r6
     91a:	5f 90       	pop	r5
     91c:	4f 90       	pop	r4
     91e:	3f 90       	pop	r3
     920:	2f 90       	pop	r2
     922:	08 95       	ret

00000924 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
     924:	2f 92       	push	r2
     926:	3f 92       	push	r3
     928:	4f 92       	push	r4
     92a:	5f 92       	push	r5
     92c:	6f 92       	push	r6
     92e:	7f 92       	push	r7
     930:	8f 92       	push	r8
     932:	9f 92       	push	r9
     934:	af 92       	push	r10
     936:	bf 92       	push	r11
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	df 93       	push	r29
     946:	cf 93       	push	r28
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	ad 97       	sbiw	r28, 0x2d	; 45
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	99 8f       	std	Y+25, r25	; 0x19
     95a:	88 8f       	std	Y+24, r24	; 0x18
     95c:	4a 8f       	std	Y+26, r20	; 0x1a
     95e:	5b 8f       	std	Y+27, r21	; 0x1b
     960:	6c 8f       	std	Y+28, r22	; 0x1c
     962:	7d 8f       	std	Y+29, r23	; 0x1d
     964:	b9 01       	movw	r22, r18
    if(!fs)
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	09 f4       	brne	.+2      	; 0x96c <fat_append_clusters+0x48>
     96a:	1b c3       	rjmp	.+1590   	; 0xfa2 <fat_append_clusters+0x67e>
        return 0;

    device_read_t device_read = fs->partition->device_read;
     96c:	dc 01       	movw	r26, r24
     96e:	ed 91       	ld	r30, X+
     970:	fc 91       	ld	r31, X
     972:	11 97       	sbiw	r26, 0x01	; 1
     974:	20 81       	ld	r18, Z
     976:	31 81       	ldd	r19, Z+1	; 0x01
     978:	3f 8b       	std	Y+23, r19	; 0x17
     97a:	2e 8b       	std	Y+22, r18	; 0x16
    device_write_t device_write = fs->partition->device_write;
     97c:	44 81       	ldd	r20, Z+4	; 0x04
     97e:	55 81       	ldd	r21, Z+5	; 0x05
     980:	5d 8b       	std	Y+21, r21	; 0x15
     982:	4c 8b       	std	Y+20, r20	; 0x14
    offset_t fat_offset = fs->header.fat_offset;
     984:	1a 96       	adiw	r26, 0x0a	; 10
     986:	5c 91       	ld	r21, X
     988:	1a 97       	sbiw	r26, 0x0a	; 10
     98a:	5c a3       	std	Y+36, r21	; 0x24
     98c:	1b 96       	adiw	r26, 0x0b	; 11
     98e:	8c 91       	ld	r24, X
     990:	1b 97       	sbiw	r26, 0x0b	; 11
     992:	8d a3       	std	Y+37, r24	; 0x25
     994:	1c 96       	adiw	r26, 0x0c	; 12
     996:	9c 91       	ld	r25, X
     998:	1c 97       	sbiw	r26, 0x0c	; 12
     99a:	9e a3       	std	Y+38, r25	; 0x26
     99c:	1d 96       	adiw	r26, 0x0d	; 13
     99e:	ac 91       	ld	r26, X
     9a0:	af a3       	std	Y+39, r26	; 0x27
     9a2:	a8 8d       	ldd	r26, Y+24	; 0x18
     9a4:	b9 8d       	ldd	r27, Y+25	; 0x19
     9a6:	1e 96       	adiw	r26, 0x0e	; 14
     9a8:	bc 91       	ld	r27, X
     9aa:	b8 a7       	std	Y+40, r27	; 0x28
     9ac:	a8 8d       	ldd	r26, Y+24	; 0x18
     9ae:	b9 8d       	ldd	r27, Y+25	; 0x19
     9b0:	1f 96       	adiw	r26, 0x0f	; 15
     9b2:	bc 91       	ld	r27, X
     9b4:	b9 a7       	std	Y+41, r27	; 0x29
     9b6:	a8 8d       	ldd	r26, Y+24	; 0x18
     9b8:	b9 8d       	ldd	r27, Y+25	; 0x19
     9ba:	50 96       	adiw	r26, 0x10	; 16
     9bc:	bc 91       	ld	r27, X
     9be:	ba a7       	std	Y+42, r27	; 0x2a
     9c0:	a8 8d       	ldd	r26, Y+24	; 0x18
     9c2:	b9 8d       	ldd	r27, Y+25	; 0x19
     9c4:	51 96       	adiw	r26, 0x11	; 17
     9c6:	bc 91       	ld	r27, X
     9c8:	bb a7       	std	Y+43, r27	; 0x2b
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
     9ca:	a8 8d       	ldd	r26, Y+24	; 0x18
     9cc:	b9 8d       	ldd	r27, Y+25	; 0x19
     9ce:	9e 96       	adiw	r26, 0x2e	; 46
     9d0:	2d 90       	ld	r2, X+
     9d2:	3d 90       	ld	r3, X+
     9d4:	4d 90       	ld	r4, X+
     9d6:	5c 90       	ld	r5, X
     9d8:	d1 97       	sbiw	r26, 0x31	; 49
    cluster_t cluster_next = 0;
    cluster_t cluster_count;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
     9da:	1b 86       	std	Y+11, r1	; 0x0b
     9dc:	80 85       	ldd	r24, Z+8	; 0x08
     9de:	8b 30       	cpi	r24, 0x0B	; 11
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <fat_append_clusters+0xc2>
     9e2:	b1 e0       	ldi	r27, 0x01	; 1
     9e4:	bb 87       	std	Y+11, r27	; 0x0b
     9e6:	e8 8d       	ldd	r30, Y+24	; 0x18
     9e8:	f9 8d       	ldd	r31, Y+25	; 0x19
     9ea:	82 89       	ldd	r24, Z+18	; 0x12
     9ec:	93 89       	ldd	r25, Z+19	; 0x13
     9ee:	a4 89       	ldd	r26, Z+20	; 0x14
     9f0:	b5 89       	ldd	r27, Z+21	; 0x15

    if(is_fat32)
     9f2:	fb 85       	ldd	r31, Y+11	; 0x0b
     9f4:	ff 23       	and	r31, r31
     9f6:	51 f0       	breq	.+20     	; 0xa0c <fat_append_clusters+0xe8>
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
     9f8:	9c 01       	movw	r18, r24
     9fa:	ad 01       	movw	r20, r26
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	56 95       	lsr	r21
     a00:	47 95       	ror	r20
     a02:	37 95       	ror	r19
     a04:	27 95       	ror	r18
     a06:	8a 95       	dec	r24
     a08:	d1 f7       	brne	.-12     	; 0x9fe <fat_append_clusters+0xda>
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <fat_append_clusters+0xf4>
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
     a0c:	9c 01       	movw	r18, r24
     a0e:	ad 01       	movw	r20, r26
     a10:	56 95       	lsr	r21
     a12:	47 95       	ror	r20
     a14:	37 95       	ror	r19
     a16:	27 95       	ror	r18
     a18:	2c 87       	std	Y+12, r18	; 0x0c
     a1a:	3d 87       	std	Y+13, r19	; 0x0d
     a1c:	4e 87       	std	Y+14, r20	; 0x0e
     a1e:	5f 87       	std	Y+15, r21	; 0x0f

    fs->cluster_free = 0;
     a20:	a8 8d       	ldd	r26, Y+24	; 0x18
     a22:	b9 8d       	ldd	r27, Y+25	; 0x19
     a24:	9e 96       	adiw	r26, 0x2e	; 46
     a26:	1d 92       	st	X+, r1
     a28:	1d 92       	st	X+, r1
     a2a:	1d 92       	st	X+, r1
     a2c:	1c 92       	st	X, r1
     a2e:	d1 97       	sbiw	r26, 0x31	; 49
     a30:	c8 01       	movw	r24, r16
     a32:	db 01       	movw	r26, r22
     a34:	88 8b       	std	Y+16, r24	; 0x10
     a36:	99 8b       	std	Y+17, r25	; 0x11
     a38:	aa 8b       	std	Y+18, r26	; 0x12
     a3a:	bb 8b       	std	Y+19, r27	; 0x13
     a3c:	2c 85       	ldd	r18, Y+12	; 0x0c
     a3e:	3d 85       	ldd	r19, Y+13	; 0x0d
     a40:	4e 85       	ldd	r20, Y+14	; 0x0e
     a42:	5f 85       	ldd	r21, Y+15	; 0x0f
     a44:	2f 83       	std	Y+7, r18	; 0x07
     a46:	38 87       	std	Y+8, r19	; 0x08
     a48:	49 87       	std	Y+9, r20	; 0x09
     a4a:	5a 87       	std	Y+10, r21	; 0x0a
     a4c:	66 24       	eor	r6, r6
     a4e:	77 24       	eor	r7, r7
     a50:	43 01       	movw	r8, r6
     a52:	9d c1       	rjmp	.+826    	; 0xd8e <fat_append_clusters+0x46a>
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
     a54:	32 e0       	ldi	r19, 0x02	; 2
     a56:	23 16       	cp	r2, r19
     a58:	31 04       	cpc	r3, r1
     a5a:	41 04       	cpc	r4, r1
     a5c:	51 04       	cpc	r5, r1
     a5e:	48 f0       	brcs	.+18     	; 0xa72 <fat_append_clusters+0x14e>
     a60:	8c 85       	ldd	r24, Y+12	; 0x0c
     a62:	9d 85       	ldd	r25, Y+13	; 0x0d
     a64:	ae 85       	ldd	r26, Y+14	; 0x0e
     a66:	bf 85       	ldd	r27, Y+15	; 0x0f
     a68:	28 16       	cp	r2, r24
     a6a:	39 06       	cpc	r3, r25
     a6c:	4a 06       	cpc	r4, r26
     a6e:	5b 06       	cpc	r5, r27
     a70:	28 f0       	brcs	.+10     	; 0xa7c <fat_append_clusters+0x158>
     a72:	a2 e0       	ldi	r26, 0x02	; 2
     a74:	2a 2e       	mov	r2, r26
     a76:	31 2c       	mov	r3, r1
     a78:	41 2c       	mov	r4, r1
     a7a:	51 2c       	mov	r5, r1
     a7c:	62 01       	movw	r12, r4
     a7e:	51 01       	movw	r10, r2
            cluster_current = 2;

#if FAT_FAT32_SUPPORT
        if(is_fat32)
     a80:	9b 85       	ldd	r25, Y+11	; 0x0b
     a82:	99 23       	and	r25, r25
     a84:	09 f4       	brne	.+2      	; 0xa88 <fat_append_clusters+0x164>
     a86:	7f c0       	rjmp	.+254    	; 0xb86 <fat_append_clusters+0x262>
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     a88:	91 01       	movw	r18, r2
     a8a:	a6 01       	movw	r20, r12
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	02 e0       	ldi	r16, 0x02	; 2
     a96:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     a9a:	e3 2f       	mov	r30, r19
     a9c:	f4 2f       	mov	r31, r20
     a9e:	b5 2f       	mov	r27, r21
     aa0:	16 2f       	mov	r17, r22
     aa2:	07 2f       	mov	r16, r23
     aa4:	f8 2e       	mov	r15, r24
     aa6:	a9 2f       	mov	r26, r25
     aa8:	3c a1       	ldd	r19, Y+36	; 0x24
     aaa:	32 0f       	add	r19, r18
     aac:	3c a7       	std	Y+44, r19	; 0x2c
     aae:	31 e0       	ldi	r19, 0x01	; 1
     ab0:	4c a5       	ldd	r20, Y+44	; 0x2c
     ab2:	42 17       	cp	r20, r18
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <fat_append_clusters+0x194>
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	2d a1       	ldd	r18, Y+37	; 0x25
     aba:	2e 0f       	add	r18, r30
     abc:	41 e0       	ldi	r20, 0x01	; 1
     abe:	2e 17       	cp	r18, r30
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <fat_append_clusters+0x1a0>
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	32 0f       	add	r19, r18
     ac6:	3e 8f       	std	Y+30, r19	; 0x1e
     ac8:	31 e0       	ldi	r19, 0x01	; 1
     aca:	5e 8d       	ldd	r21, Y+30	; 0x1e
     acc:	52 17       	cp	r21, r18
     ace:	08 f0       	brcs	.+2      	; 0xad2 <fat_append_clusters+0x1ae>
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	43 2b       	or	r20, r19
     ad4:	2e a1       	ldd	r18, Y+38	; 0x26
     ad6:	2f 0f       	add	r18, r31
     ad8:	51 e0       	ldi	r21, 0x01	; 1
     ada:	2f 17       	cp	r18, r31
     adc:	08 f0       	brcs	.+2      	; 0xae0 <fat_append_clusters+0x1bc>
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	42 0f       	add	r20, r18
     ae2:	4f 8f       	std	Y+31, r20	; 0x1f
     ae4:	31 e0       	ldi	r19, 0x01	; 1
     ae6:	42 17       	cp	r20, r18
     ae8:	08 f0       	brcs	.+2      	; 0xaec <fat_append_clusters+0x1c8>
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	53 2b       	or	r21, r19
     aee:	2f a1       	ldd	r18, Y+39	; 0x27
     af0:	2b 0f       	add	r18, r27
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	2b 17       	cp	r18, r27
     af6:	08 f0       	brcs	.+2      	; 0xafa <fat_append_clusters+0x1d6>
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	52 0f       	add	r21, r18
     afc:	58 a3       	std	Y+32, r21	; 0x20
     afe:	31 e0       	ldi	r19, 0x01	; 1
     b00:	52 17       	cp	r21, r18
     b02:	08 f0       	brcs	.+2      	; 0xb06 <fat_append_clusters+0x1e2>
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	63 2b       	or	r22, r19
     b08:	28 a5       	ldd	r18, Y+40	; 0x28
     b0a:	21 0f       	add	r18, r17
     b0c:	71 e0       	ldi	r23, 0x01	; 1
     b0e:	21 17       	cp	r18, r17
     b10:	08 f0       	brcs	.+2      	; 0xb14 <fat_append_clusters+0x1f0>
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	a6 2e       	mov	r10, r22
     b16:	a2 0e       	add	r10, r18
     b18:	31 e0       	ldi	r19, 0x01	; 1
     b1a:	a2 16       	cp	r10, r18
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <fat_append_clusters+0x1fc>
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	73 2b       	or	r23, r19
     b22:	29 a5       	ldd	r18, Y+41	; 0x29
     b24:	20 0f       	add	r18, r16
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	20 17       	cp	r18, r16
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <fat_append_clusters+0x20a>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	b7 2e       	mov	r11, r23
     b30:	b2 0e       	add	r11, r18
     b32:	31 e0       	ldi	r19, 0x01	; 1
     b34:	b2 16       	cp	r11, r18
     b36:	08 f0       	brcs	.+2      	; 0xb3a <fat_append_clusters+0x216>
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	83 2b       	or	r24, r19
     b3c:	2a a5       	ldd	r18, Y+42	; 0x2a
     b3e:	2f 0d       	add	r18, r15
     b40:	31 e0       	ldi	r19, 0x01	; 1
     b42:	2f 15       	cp	r18, r15
     b44:	08 f0       	brcs	.+2      	; 0xb48 <fat_append_clusters+0x224>
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	c8 2e       	mov	r12, r24
     b4a:	c2 0e       	add	r12, r18
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	c2 16       	cp	r12, r18
     b50:	08 f0       	brcs	.+2      	; 0xb54 <fat_append_clusters+0x230>
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	d3 2e       	mov	r13, r19
     b56:	d9 2a       	or	r13, r25
     b58:	8b a5       	ldd	r24, Y+43	; 0x2b
     b5a:	a8 0f       	add	r26, r24
     b5c:	da 0e       	add	r13, r26
     b5e:	2c a5       	ldd	r18, Y+44	; 0x2c
     b60:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b62:	4f 8d       	ldd	r20, Y+31	; 0x1f
     b64:	58 a1       	ldd	r21, Y+32	; 0x20
     b66:	b5 01       	movw	r22, r10
     b68:	c6 01       	movw	r24, r12
     b6a:	8e 01       	movw	r16, r28
     b6c:	0d 5f       	subi	r16, 0xFD	; 253
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
     b70:	f4 e0       	ldi	r31, 0x04	; 4
     b72:	ef 2e       	mov	r14, r31
     b74:	f1 2c       	mov	r15, r1
     b76:	ae 89       	ldd	r26, Y+22	; 0x16
     b78:	bf 89       	ldd	r27, Y+23	; 0x17
     b7a:	fd 01       	movw	r30, r26
     b7c:	09 95       	icall
     b7e:	88 23       	and	r24, r24
     b80:	09 f0       	breq	.+2      	; 0xb84 <fat_append_clusters+0x260>
     b82:	85 c0       	rjmp	.+266    	; 0xc8e <fat_append_clusters+0x36a>
     b84:	0e c2       	rjmp	.+1052   	; 0xfa2 <fat_append_clusters+0x67e>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     b86:	91 01       	movw	r18, r2
     b88:	a6 01       	movw	r20, r12
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	01 e0       	ldi	r16, 0x01	; 1
     b94:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     b98:	e3 2f       	mov	r30, r19
     b9a:	f4 2f       	mov	r31, r20
     b9c:	b5 2f       	mov	r27, r21
     b9e:	16 2f       	mov	r17, r22
     ba0:	07 2f       	mov	r16, r23
     ba2:	f8 2e       	mov	r15, r24
     ba4:	a9 2f       	mov	r26, r25
     ba6:	3c a1       	ldd	r19, Y+36	; 0x24
     ba8:	32 0f       	add	r19, r18
     baa:	3d a7       	std	Y+45, r19	; 0x2d
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	4d a5       	ldd	r20, Y+45	; 0x2d
     bb0:	42 17       	cp	r20, r18
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <fat_append_clusters+0x292>
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	2d a1       	ldd	r18, Y+37	; 0x25
     bb8:	2e 0f       	add	r18, r30
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	2e 17       	cp	r18, r30
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <fat_append_clusters+0x29e>
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	32 0f       	add	r19, r18
     bc4:	39 a3       	std	Y+33, r19	; 0x21
     bc6:	31 e0       	ldi	r19, 0x01	; 1
     bc8:	59 a1       	ldd	r21, Y+33	; 0x21
     bca:	52 17       	cp	r21, r18
     bcc:	08 f0       	brcs	.+2      	; 0xbd0 <fat_append_clusters+0x2ac>
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	43 2b       	or	r20, r19
     bd2:	2e a1       	ldd	r18, Y+38	; 0x26
     bd4:	2f 0f       	add	r18, r31
     bd6:	51 e0       	ldi	r21, 0x01	; 1
     bd8:	2f 17       	cp	r18, r31
     bda:	08 f0       	brcs	.+2      	; 0xbde <fat_append_clusters+0x2ba>
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	42 0f       	add	r20, r18
     be0:	4a a3       	std	Y+34, r20	; 0x22
     be2:	31 e0       	ldi	r19, 0x01	; 1
     be4:	42 17       	cp	r20, r18
     be6:	08 f0       	brcs	.+2      	; 0xbea <fat_append_clusters+0x2c6>
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	53 2b       	or	r21, r19
     bec:	2f a1       	ldd	r18, Y+39	; 0x27
     bee:	2b 0f       	add	r18, r27
     bf0:	61 e0       	ldi	r22, 0x01	; 1
     bf2:	2b 17       	cp	r18, r27
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <fat_append_clusters+0x2d4>
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	52 0f       	add	r21, r18
     bfa:	5b a3       	std	Y+35, r21	; 0x23
     bfc:	31 e0       	ldi	r19, 0x01	; 1
     bfe:	52 17       	cp	r21, r18
     c00:	08 f0       	brcs	.+2      	; 0xc04 <fat_append_clusters+0x2e0>
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	63 2b       	or	r22, r19
     c06:	28 a5       	ldd	r18, Y+40	; 0x28
     c08:	21 0f       	add	r18, r17
     c0a:	71 e0       	ldi	r23, 0x01	; 1
     c0c:	21 17       	cp	r18, r17
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <fat_append_clusters+0x2ee>
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	a6 2e       	mov	r10, r22
     c14:	a2 0e       	add	r10, r18
     c16:	31 e0       	ldi	r19, 0x01	; 1
     c18:	a2 16       	cp	r10, r18
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <fat_append_clusters+0x2fa>
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	73 2b       	or	r23, r19
     c20:	29 a5       	ldd	r18, Y+41	; 0x29
     c22:	20 0f       	add	r18, r16
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	20 17       	cp	r18, r16
     c28:	08 f0       	brcs	.+2      	; 0xc2c <fat_append_clusters+0x308>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	b7 2e       	mov	r11, r23
     c2e:	b2 0e       	add	r11, r18
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	b2 16       	cp	r11, r18
     c34:	08 f0       	brcs	.+2      	; 0xc38 <fat_append_clusters+0x314>
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	83 2b       	or	r24, r19
     c3a:	2a a5       	ldd	r18, Y+42	; 0x2a
     c3c:	2f 0d       	add	r18, r15
     c3e:	31 e0       	ldi	r19, 0x01	; 1
     c40:	2f 15       	cp	r18, r15
     c42:	08 f0       	brcs	.+2      	; 0xc46 <fat_append_clusters+0x322>
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	c8 2e       	mov	r12, r24
     c48:	c2 0e       	add	r12, r18
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	c2 16       	cp	r12, r18
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <fat_append_clusters+0x32e>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	d3 2e       	mov	r13, r19
     c54:	d9 2a       	or	r13, r25
     c56:	8b a5       	ldd	r24, Y+43	; 0x2b
     c58:	a8 0f       	add	r26, r24
     c5a:	da 0e       	add	r13, r26
     c5c:	2d a5       	ldd	r18, Y+45	; 0x2d
     c5e:	39 a1       	ldd	r19, Y+33	; 0x21
     c60:	4a a1       	ldd	r20, Y+34	; 0x22
     c62:	5b a1       	ldd	r21, Y+35	; 0x23
     c64:	b5 01       	movw	r22, r10
     c66:	c6 01       	movw	r24, r12
     c68:	8e 01       	movw	r16, r28
     c6a:	0f 5f       	subi	r16, 0xFF	; 255
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	e2 e0       	ldi	r30, 0x02	; 2
     c70:	ee 2e       	mov	r14, r30
     c72:	f1 2c       	mov	r15, r1
     c74:	ae 89       	ldd	r26, Y+22	; 0x16
     c76:	bf 89       	ldd	r27, Y+23	; 0x17
     c78:	fd 01       	movw	r30, r26
     c7a:	09 95       	icall
     c7c:	88 23       	and	r24, r24
     c7e:	09 f4       	brne	.+2      	; 0xc82 <fat_append_clusters+0x35e>
     c80:	90 c1       	rjmp	.+800    	; 0xfa2 <fat_append_clusters+0x67e>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	89 2b       	or	r24, r25
     c88:	09 f0       	breq	.+2      	; 0xc8c <fat_append_clusters+0x368>
     c8a:	71 c0       	rjmp	.+226    	; 0xd6e <fat_append_clusters+0x44a>
     c8c:	31 c0       	rjmp	.+98     	; 0xcf0 <fat_append_clusters+0x3cc>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	ad 81       	ldd	r26, Y+5	; 0x05
     c94:	be 81       	ldd	r27, Y+6	; 0x06
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	a1 05       	cpc	r26, r1
     c9a:	b1 05       	cpc	r27, r1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <fat_append_clusters+0x37c>
     c9e:	67 c0       	rjmp	.+206    	; 0xd6e <fat_append_clusters+0x44a>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     ca0:	28 89       	ldd	r18, Y+16	; 0x10
     ca2:	39 89       	ldd	r19, Y+17	; 0x11
     ca4:	4a 89       	ldd	r20, Y+18	; 0x12
     ca6:	5b 89       	ldd	r21, Y+19	; 0x13
     ca8:	21 15       	cp	r18, r1
     caa:	31 05       	cpc	r19, r1
     cac:	41 05       	cpc	r20, r1
     cae:	51 05       	cpc	r21, r1
     cb0:	41 f1       	breq	.+80     	; 0xd02 <fat_append_clusters+0x3de>
                fs->cluster_free = cluster_current;
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
     cb2:	61 14       	cp	r6, r1
     cb4:	71 04       	cpc	r7, r1
     cb6:	81 04       	cpc	r8, r1
     cb8:	91 04       	cpc	r9, r1
     cba:	49 f4       	brne	.+18     	; 0xcce <fat_append_clusters+0x3aa>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
     cbe:	3f ef       	ldi	r19, 0xFF	; 255
     cc0:	4f ef       	ldi	r20, 0xFF	; 255
     cc2:	5f e0       	ldi	r21, 0x0F	; 15
     cc4:	2b 83       	std	Y+3, r18	; 0x03
     cc6:	3c 83       	std	Y+4, r19	; 0x04
     cc8:	4d 83       	std	Y+5, r20	; 0x05
     cca:	5e 83       	std	Y+6, r21	; 0x06
     ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <fat_append_clusters+0x3b2>
            else
                fat_entry32 = htol32(cluster_next);
     cce:	6b 82       	std	Y+3, r6	; 0x03
     cd0:	7c 82       	std	Y+4, r7	; 0x04
     cd2:	8d 82       	std	Y+5, r8	; 0x05
     cd4:	9e 82       	std	Y+6, r9	; 0x06

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     cd6:	2c a5       	ldd	r18, Y+44	; 0x2c
     cd8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     cda:	4f 8d       	ldd	r20, Y+31	; 0x1f
     cdc:	58 a1       	ldd	r21, Y+32	; 0x20
     cde:	b5 01       	movw	r22, r10
     ce0:	c6 01       	movw	r24, r12
     ce2:	8e 01       	movw	r16, r28
     ce4:	0d 5f       	subi	r16, 0xFD	; 253
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	b4 e0       	ldi	r27, 0x04	; 4
     cea:	eb 2e       	mov	r14, r27
     cec:	f1 2c       	mov	r15, r1
     cee:	2a c0       	rjmp	.+84     	; 0xd44 <fat_append_clusters+0x420>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
     cf0:	28 89       	ldd	r18, Y+16	; 0x10
     cf2:	39 89       	ldd	r19, Y+17	; 0x11
     cf4:	4a 89       	ldd	r20, Y+18	; 0x12
     cf6:	5b 89       	ldd	r21, Y+19	; 0x13
     cf8:	21 15       	cp	r18, r1
     cfa:	31 05       	cpc	r19, r1
     cfc:	41 05       	cpc	r20, r1
     cfe:	51 05       	cpc	r21, r1
     d00:	49 f4       	brne	.+18     	; 0xd14 <fat_append_clusters+0x3f0>
            {
                fs->cluster_free = cluster_current;
     d02:	a8 8d       	ldd	r26, Y+24	; 0x18
     d04:	b9 8d       	ldd	r27, Y+25	; 0x19
     d06:	9e 96       	adiw	r26, 0x2e	; 46
     d08:	2d 92       	st	X+, r2
     d0a:	3d 92       	st	X+, r3
     d0c:	4d 92       	st	X+, r4
     d0e:	5c 92       	st	X, r5
     d10:	d1 97       	sbiw	r26, 0x31	; 49
     d12:	50 c0       	rjmp	.+160    	; 0xdb4 <fat_append_clusters+0x490>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
     d14:	61 14       	cp	r6, r1
     d16:	71 04       	cpc	r7, r1
     d18:	81 04       	cpc	r8, r1
     d1a:	91 04       	cpc	r9, r1
     d1c:	29 f4       	brne	.+10     	; 0xd28 <fat_append_clusters+0x404>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
     d1e:	ef ef       	ldi	r30, 0xFF	; 255
     d20:	ff ef       	ldi	r31, 0xFF	; 255
     d22:	fa 83       	std	Y+2, r31	; 0x02
     d24:	e9 83       	std	Y+1, r30	; 0x01
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <fat_append_clusters+0x408>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
     d28:	7a 82       	std	Y+2, r7	; 0x02
     d2a:	69 82       	std	Y+1, r6	; 0x01

            if(!device_write(fat_offset + (offset_t) cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     d2c:	2d a5       	ldd	r18, Y+45	; 0x2d
     d2e:	39 a1       	ldd	r19, Y+33	; 0x21
     d30:	4a a1       	ldd	r20, Y+34	; 0x22
     d32:	5b a1       	ldd	r21, Y+35	; 0x23
     d34:	b5 01       	movw	r22, r10
     d36:	c6 01       	movw	r24, r12
     d38:	8e 01       	movw	r16, r28
     d3a:	0f 5f       	subi	r16, 0xFF	; 255
     d3c:	1f 4f       	sbci	r17, 0xFF	; 255
     d3e:	a2 e0       	ldi	r26, 0x02	; 2
     d40:	ea 2e       	mov	r14, r26
     d42:	f1 2c       	mov	r15, r1
     d44:	ac 89       	ldd	r26, Y+20	; 0x14
     d46:	bd 89       	ldd	r27, Y+21	; 0x15
     d48:	fd 01       	movw	r30, r26
     d4a:	09 95       	icall
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <fat_append_clusters+0x42e>
     d50:	22 c1       	rjmp	.+580    	; 0xf96 <fat_append_clusters+0x672>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
     d52:	28 89       	ldd	r18, Y+16	; 0x10
     d54:	39 89       	ldd	r19, Y+17	; 0x11
     d56:	4a 89       	ldd	r20, Y+18	; 0x12
     d58:	5b 89       	ldd	r21, Y+19	; 0x13
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	30 40       	sbci	r19, 0x00	; 0
     d5e:	40 40       	sbci	r20, 0x00	; 0
     d60:	50 40       	sbci	r21, 0x00	; 0
     d62:	28 8b       	std	Y+16, r18	; 0x10
     d64:	39 8b       	std	Y+17, r19	; 0x11
     d66:	4a 8b       	std	Y+18, r20	; 0x12
     d68:	5b 8b       	std	Y+19, r21	; 0x13
     d6a:	42 01       	movw	r8, r4
     d6c:	31 01       	movw	r6, r2
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    for(cluster_t cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
     d6e:	8f 81       	ldd	r24, Y+7	; 0x07
     d70:	98 85       	ldd	r25, Y+8	; 0x08
     d72:	a9 85       	ldd	r26, Y+9	; 0x09
     d74:	ba 85       	ldd	r27, Y+10	; 0x0a
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	a1 09       	sbc	r26, r1
     d7a:	b1 09       	sbc	r27, r1
     d7c:	8f 83       	std	Y+7, r24	; 0x07
     d7e:	98 87       	std	Y+8, r25	; 0x08
     d80:	a9 87       	std	Y+9, r26	; 0x09
     d82:	ba 87       	std	Y+10, r27	; 0x0a
     d84:	08 94       	sec
     d86:	21 1c       	adc	r2, r1
     d88:	31 1c       	adc	r3, r1
     d8a:	41 1c       	adc	r4, r1
     d8c:	51 1c       	adc	r5, r1
     d8e:	2f 81       	ldd	r18, Y+7	; 0x07
     d90:	38 85       	ldd	r19, Y+8	; 0x08
     d92:	49 85       	ldd	r20, Y+9	; 0x09
     d94:	5a 85       	ldd	r21, Y+10	; 0x0a
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	41 05       	cpc	r20, r1
     d9c:	51 05       	cpc	r21, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <fat_append_clusters+0x47e>
     da0:	59 ce       	rjmp	.-846    	; 0xa54 <fat_append_clusters+0x130>
        --count_left;
    }

    do
    {
        if(count_left > 0)
     da2:	88 89       	ldd	r24, Y+16	; 0x10
     da4:	99 89       	ldd	r25, Y+17	; 0x11
     da6:	aa 89       	ldd	r26, Y+18	; 0x12
     da8:	bb 89       	ldd	r27, Y+19	; 0x13
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	a1 05       	cpc	r26, r1
     dae:	b1 05       	cpc	r27, r1
     db0:	09 f0       	breq	.+2      	; 0xdb4 <fat_append_clusters+0x490>
     db2:	f1 c0       	rjmp	.+482    	; 0xf96 <fat_append_clusters+0x672>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
     db4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     db6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     db8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     dba:	5d 8d       	ldd	r21, Y+29	; 0x1d
     dbc:	22 30       	cpi	r18, 0x02	; 2
     dbe:	31 05       	cpc	r19, r1
     dc0:	41 05       	cpc	r20, r1
     dc2:	51 05       	cpc	r21, r1
     dc4:	08 f4       	brcc	.+2      	; 0xdc8 <fat_append_clusters+0x4a4>
     dc6:	f0 c0       	rjmp	.+480    	; 0xfa8 <fat_append_clusters+0x684>
     dc8:	59 01       	movw	r10, r18
     dca:	6a 01       	movw	r12, r20
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
     dcc:	3b 85       	ldd	r19, Y+11	; 0x0b
     dce:	33 23       	and	r19, r19
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <fat_append_clusters+0x4b0>
     dd2:	70 c0       	rjmp	.+224    	; 0xeb4 <fat_append_clusters+0x590>
            {
                fat_entry32 = htol32(cluster_next);
     dd4:	6b 82       	std	Y+3, r6	; 0x03
     dd6:	7c 82       	std	Y+4, r7	; 0x04
     dd8:	8d 82       	std	Y+5, r8	; 0x05
     dda:	9e 82       	std	Y+6, r9	; 0x06

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
     ddc:	95 01       	movw	r18, r10
     dde:	a6 01       	movw	r20, r12
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 e0       	ldi	r16, 0x02	; 2
     dea:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     dee:	e3 2f       	mov	r30, r19
     df0:	f4 2f       	mov	r31, r20
     df2:	a5 2f       	mov	r26, r21
     df4:	b6 2f       	mov	r27, r22
     df6:	17 2f       	mov	r17, r23
     df8:	08 2f       	mov	r16, r24
     dfa:	e9 2e       	mov	r14, r25
     dfc:	fc a0       	ldd	r15, Y+36	; 0x24
     dfe:	f2 0e       	add	r15, r18
     e00:	31 e0       	ldi	r19, 0x01	; 1
     e02:	f2 16       	cp	r15, r18
     e04:	08 f0       	brcs	.+2      	; 0xe08 <fat_append_clusters+0x4e4>
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	2d a1       	ldd	r18, Y+37	; 0x25
     e0a:	2e 0f       	add	r18, r30
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	2e 17       	cp	r18, r30
     e10:	08 f0       	brcs	.+2      	; 0xe14 <fat_append_clusters+0x4f0>
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	32 0f       	add	r19, r18
     e16:	e1 e0       	ldi	r30, 0x01	; 1
     e18:	32 17       	cp	r19, r18
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <fat_append_clusters+0x4fa>
     e1c:	e0 e0       	ldi	r30, 0x00	; 0
     e1e:	4e 2b       	or	r20, r30
     e20:	2e a1       	ldd	r18, Y+38	; 0x26
     e22:	2f 0f       	add	r18, r31
     e24:	51 e0       	ldi	r21, 0x01	; 1
     e26:	2f 17       	cp	r18, r31
     e28:	08 f0       	brcs	.+2      	; 0xe2c <fat_append_clusters+0x508>
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	42 0f       	add	r20, r18
     e2e:	e1 e0       	ldi	r30, 0x01	; 1
     e30:	42 17       	cp	r20, r18
     e32:	08 f0       	brcs	.+2      	; 0xe36 <fat_append_clusters+0x512>
     e34:	e0 e0       	ldi	r30, 0x00	; 0
     e36:	5e 2b       	or	r21, r30
     e38:	2f a1       	ldd	r18, Y+39	; 0x27
     e3a:	2a 0f       	add	r18, r26
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	2a 17       	cp	r18, r26
     e40:	08 f0       	brcs	.+2      	; 0xe44 <fat_append_clusters+0x520>
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	52 0f       	add	r21, r18
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	52 17       	cp	r21, r18
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <fat_append_clusters+0x52a>
     e4c:	e0 e0       	ldi	r30, 0x00	; 0
     e4e:	6e 2b       	or	r22, r30
     e50:	28 a5       	ldd	r18, Y+40	; 0x28
     e52:	2b 0f       	add	r18, r27
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	2b 17       	cp	r18, r27
     e58:	08 f0       	brcs	.+2      	; 0xe5c <fat_append_clusters+0x538>
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	62 0f       	add	r22, r18
     e5e:	e1 e0       	ldi	r30, 0x01	; 1
     e60:	62 17       	cp	r22, r18
     e62:	08 f0       	brcs	.+2      	; 0xe66 <fat_append_clusters+0x542>
     e64:	e0 e0       	ldi	r30, 0x00	; 0
     e66:	7e 2b       	or	r23, r30
     e68:	29 a5       	ldd	r18, Y+41	; 0x29
     e6a:	21 0f       	add	r18, r17
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	21 17       	cp	r18, r17
     e70:	08 f0       	brcs	.+2      	; 0xe74 <fat_append_clusters+0x550>
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	72 0f       	add	r23, r18
     e76:	e1 e0       	ldi	r30, 0x01	; 1
     e78:	72 17       	cp	r23, r18
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <fat_append_clusters+0x55a>
     e7c:	e0 e0       	ldi	r30, 0x00	; 0
     e7e:	8e 2b       	or	r24, r30
     e80:	2a a5       	ldd	r18, Y+42	; 0x2a
     e82:	20 0f       	add	r18, r16
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	20 17       	cp	r18, r16
     e88:	08 f0       	brcs	.+2      	; 0xe8c <fat_append_clusters+0x568>
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	82 0f       	add	r24, r18
     e8e:	e1 e0       	ldi	r30, 0x01	; 1
     e90:	82 17       	cp	r24, r18
     e92:	08 f0       	brcs	.+2      	; 0xe96 <fat_append_clusters+0x572>
     e94:	e0 e0       	ldi	r30, 0x00	; 0
     e96:	9e 2b       	or	r25, r30
     e98:	ab a5       	ldd	r26, Y+43	; 0x2b
     e9a:	ae 0d       	add	r26, r14
     e9c:	2f 2d       	mov	r18, r15
     e9e:	9a 0f       	add	r25, r26
     ea0:	8e 01       	movw	r16, r28
     ea2:	0d 5f       	subi	r16, 0xFD	; 253
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	f4 e0       	ldi	r31, 0x04	; 4
     ea8:	ef 2e       	mov	r14, r31
     eaa:	f1 2c       	mov	r15, r1
     eac:	ec 89       	ldd	r30, Y+20	; 0x14
     eae:	fd 89       	ldd	r31, Y+21	; 0x15
     eb0:	09 95       	icall
     eb2:	6f c0       	rjmp	.+222    	; 0xf92 <fat_append_clusters+0x66e>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
     eb4:	c3 01       	movw	r24, r6
     eb6:	69 82       	std	Y+1, r6	; 0x01
     eb8:	9a 83       	std	Y+2, r25	; 0x02

                if(!device_write(fat_offset + (offset_t) cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
     eba:	95 01       	movw	r18, r10
     ebc:	a6 01       	movw	r20, r12
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	01 e0       	ldi	r16, 0x01	; 1
     ec8:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
     ecc:	e3 2f       	mov	r30, r19
     ece:	f4 2f       	mov	r31, r20
     ed0:	a5 2f       	mov	r26, r21
     ed2:	b6 2f       	mov	r27, r22
     ed4:	17 2f       	mov	r17, r23
     ed6:	08 2f       	mov	r16, r24
     ed8:	e9 2e       	mov	r14, r25
     eda:	fc a0       	ldd	r15, Y+36	; 0x24
     edc:	f2 0e       	add	r15, r18
     ede:	31 e0       	ldi	r19, 0x01	; 1
     ee0:	f2 16       	cp	r15, r18
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <fat_append_clusters+0x5c2>
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	2d a1       	ldd	r18, Y+37	; 0x25
     ee8:	2e 0f       	add	r18, r30
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	2e 17       	cp	r18, r30
     eee:	08 f0       	brcs	.+2      	; 0xef2 <fat_append_clusters+0x5ce>
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	32 0f       	add	r19, r18
     ef4:	e1 e0       	ldi	r30, 0x01	; 1
     ef6:	32 17       	cp	r19, r18
     ef8:	08 f0       	brcs	.+2      	; 0xefc <fat_append_clusters+0x5d8>
     efa:	e0 e0       	ldi	r30, 0x00	; 0
     efc:	4e 2b       	or	r20, r30
     efe:	2e a1       	ldd	r18, Y+38	; 0x26
     f00:	2f 0f       	add	r18, r31
     f02:	51 e0       	ldi	r21, 0x01	; 1
     f04:	2f 17       	cp	r18, r31
     f06:	08 f0       	brcs	.+2      	; 0xf0a <fat_append_clusters+0x5e6>
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	42 0f       	add	r20, r18
     f0c:	e1 e0       	ldi	r30, 0x01	; 1
     f0e:	42 17       	cp	r20, r18
     f10:	08 f0       	brcs	.+2      	; 0xf14 <fat_append_clusters+0x5f0>
     f12:	e0 e0       	ldi	r30, 0x00	; 0
     f14:	5e 2b       	or	r21, r30
     f16:	2f a1       	ldd	r18, Y+39	; 0x27
     f18:	2a 0f       	add	r18, r26
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	2a 17       	cp	r18, r26
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <fat_append_clusters+0x5fe>
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	52 0f       	add	r21, r18
     f24:	e1 e0       	ldi	r30, 0x01	; 1
     f26:	52 17       	cp	r21, r18
     f28:	08 f0       	brcs	.+2      	; 0xf2c <fat_append_clusters+0x608>
     f2a:	e0 e0       	ldi	r30, 0x00	; 0
     f2c:	6e 2b       	or	r22, r30
     f2e:	28 a5       	ldd	r18, Y+40	; 0x28
     f30:	2b 0f       	add	r18, r27
     f32:	71 e0       	ldi	r23, 0x01	; 1
     f34:	2b 17       	cp	r18, r27
     f36:	08 f0       	brcs	.+2      	; 0xf3a <fat_append_clusters+0x616>
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	62 0f       	add	r22, r18
     f3c:	e1 e0       	ldi	r30, 0x01	; 1
     f3e:	62 17       	cp	r22, r18
     f40:	08 f0       	brcs	.+2      	; 0xf44 <fat_append_clusters+0x620>
     f42:	e0 e0       	ldi	r30, 0x00	; 0
     f44:	7e 2b       	or	r23, r30
     f46:	29 a5       	ldd	r18, Y+41	; 0x29
     f48:	21 0f       	add	r18, r17
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	21 17       	cp	r18, r17
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <fat_append_clusters+0x62e>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	72 0f       	add	r23, r18
     f54:	e1 e0       	ldi	r30, 0x01	; 1
     f56:	72 17       	cp	r23, r18
     f58:	08 f0       	brcs	.+2      	; 0xf5c <fat_append_clusters+0x638>
     f5a:	e0 e0       	ldi	r30, 0x00	; 0
     f5c:	8e 2b       	or	r24, r30
     f5e:	2a a5       	ldd	r18, Y+42	; 0x2a
     f60:	20 0f       	add	r18, r16
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	20 17       	cp	r18, r16
     f66:	08 f0       	brcs	.+2      	; 0xf6a <fat_append_clusters+0x646>
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	82 0f       	add	r24, r18
     f6c:	e1 e0       	ldi	r30, 0x01	; 1
     f6e:	82 17       	cp	r24, r18
     f70:	08 f0       	brcs	.+2      	; 0xf74 <fat_append_clusters+0x650>
     f72:	e0 e0       	ldi	r30, 0x00	; 0
     f74:	9e 2b       	or	r25, r30
     f76:	fb a5       	ldd	r31, Y+43	; 0x2b
     f78:	fe 0d       	add	r31, r14
     f7a:	2f 2d       	mov	r18, r15
     f7c:	9f 0f       	add	r25, r31
     f7e:	8e 01       	movw	r16, r28
     f80:	0f 5f       	subi	r16, 0xFF	; 255
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	e2 e0       	ldi	r30, 0x02	; 2
     f86:	ee 2e       	mov	r14, r30
     f88:	f1 2c       	mov	r15, r1
     f8a:	ac 89       	ldd	r26, Y+20	; 0x14
     f8c:	bd 89       	ldd	r27, Y+21	; 0x15
     f8e:	fd 01       	movw	r30, r26
     f90:	09 95       	icall
     f92:	88 23       	and	r24, r24
     f94:	49 f4       	brne	.+18     	; 0xfa8 <fat_append_clusters+0x684>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
     f96:	88 8d       	ldd	r24, Y+24	; 0x18
     f98:	99 8d       	ldd	r25, Y+25	; 0x19
     f9a:	b4 01       	movw	r22, r8
     f9c:	a3 01       	movw	r20, r6
     f9e:	0e 94 ad 02 	call	0x55a	; 0x55a <fat_free_clusters>

    return 0;
     fa2:	66 24       	eor	r6, r6
     fa4:	77 24       	eor	r7, r7
     fa6:	43 01       	movw	r8, r6
}
     fa8:	b3 01       	movw	r22, r6
     faa:	c4 01       	movw	r24, r8
     fac:	ad 96       	adiw	r28, 0x2d	; 45
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	ff 90       	pop	r15
     fc2:	ef 90       	pop	r14
     fc4:	df 90       	pop	r13
     fc6:	cf 90       	pop	r12
     fc8:	bf 90       	pop	r11
     fca:	af 90       	pop	r10
     fcc:	9f 90       	pop	r9
     fce:	8f 90       	pop	r8
     fd0:	7f 90       	pop	r7
     fd2:	6f 90       	pop	r6
     fd4:	5f 90       	pop	r5
     fd6:	4f 90       	pop	r4
     fd8:	3f 90       	pop	r3
     fda:	2f 90       	pop	r2
     fdc:	08 95       	ret

00000fde <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
     fde:	80 e1       	ldi	r24, 0x10	; 16
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <fat_close_file>:
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
     fe4:	fc 01       	movw	r30, r24
    if(fd)
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	11 f0       	breq	.+4      	; 0xfee <fat_close_file+0xa>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
     fea:	11 82       	std	Z+1, r1	; 0x01
     fec:	10 82       	st	Z, r1
     fee:	08 95       	ret

00000ff0 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
     ff0:	2f 92       	push	r2
     ff2:	3f 92       	push	r3
     ff4:	4f 92       	push	r4
     ff6:	5f 92       	push	r5
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	68 97       	sbiw	r28, 0x18	; 24
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	98 8f       	std	Y+24, r25	; 0x18
    1026:	8f 8b       	std	Y+23, r24	; 0x17
    1028:	7e 87       	std	Y+14, r23	; 0x0e
    102a:	6d 87       	std	Y+13, r22	; 0x0d
    102c:	58 8b       	std	Y+16, r21	; 0x10
    102e:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	09 f4       	brne	.+2      	; 0x1036 <fat_read_file+0x46>
    1034:	1e c3       	rjmp	.+1596   	; 0x1672 <__stack+0x573>
    1036:	67 2b       	or	r22, r23
    1038:	09 f4       	brne	.+2      	; 0x103c <fat_read_file+0x4c>
    103a:	1b c3       	rjmp	.+1590   	; 0x1672 <__stack+0x573>
    103c:	41 15       	cp	r20, r1
    103e:	51 05       	cpc	r21, r1
    1040:	09 f4       	brne	.+2      	; 0x1044 <fat_read_file+0x54>
    1042:	17 c3       	rjmp	.+1582   	; 0x1672 <__stack+0x573>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    1044:	dc 01       	movw	r26, r24
    1046:	d3 96       	adiw	r26, 0x33	; 51
    1048:	ac 90       	ld	r10, X
    104a:	d3 97       	sbiw	r26, 0x33	; 51
    104c:	d4 96       	adiw	r26, 0x34	; 52
    104e:	bc 90       	ld	r11, X
    1050:	d4 97       	sbiw	r26, 0x34	; 52
    1052:	d5 96       	adiw	r26, 0x35	; 53
    1054:	cc 90       	ld	r12, X
    1056:	d5 97       	sbiw	r26, 0x35	; 53
    1058:	d6 96       	adiw	r26, 0x36	; 54
    105a:	dc 90       	ld	r13, X
    105c:	d6 97       	sbiw	r26, 0x36	; 54
    105e:	d7 96       	adiw	r26, 0x37	; 55
    1060:	ec 90       	ld	r14, X
    1062:	d7 97       	sbiw	r26, 0x37	; 55
    1064:	d8 96       	adiw	r26, 0x38	; 56
    1066:	fc 90       	ld	r15, X
    1068:	d8 97       	sbiw	r26, 0x38	; 56
    106a:	d9 96       	adiw	r26, 0x39	; 57
    106c:	0c 91       	ld	r16, X
    106e:	d9 97       	sbiw	r26, 0x39	; 57
    1070:	da 96       	adiw	r26, 0x3a	; 58
    1072:	1c 91       	ld	r17, X
    1074:	da 97       	sbiw	r26, 0x3a	; 58
    1076:	97 96       	adiw	r26, 0x27	; 39
    1078:	2d 90       	ld	r2, X+
    107a:	3d 90       	ld	r3, X+
    107c:	4d 90       	ld	r4, X+
    107e:	5c 90       	ld	r5, X
    1080:	9a 97       	sbiw	r26, 0x2a	; 42
    1082:	9a 01       	movw	r18, r20
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	b2 2f       	mov	r27, r18
    1092:	ba 0d       	add	r27, r10
    1094:	ba 8b       	std	Y+18, r27	; 0x12
    1096:	f1 e0       	ldi	r31, 0x01	; 1
    1098:	b2 17       	cp	r27, r18
    109a:	08 f0       	brcs	.+2      	; 0x109e <fat_read_file+0xae>
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	e3 2f       	mov	r30, r19
    10a0:	eb 0d       	add	r30, r11
    10a2:	99 24       	eor	r9, r9
    10a4:	93 94       	inc	r9
    10a6:	e3 17       	cp	r30, r19
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <fat_read_file+0xbc>
    10aa:	99 24       	eor	r9, r9
    10ac:	fe 0f       	add	r31, r30
    10ae:	f9 8b       	std	Y+17, r31	; 0x11
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	a9 89       	ldd	r26, Y+17	; 0x11
    10b4:	ae 17       	cp	r26, r30
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <fat_read_file+0xca>
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	9f 2a       	or	r9, r31
    10bc:	e4 2f       	mov	r30, r20
    10be:	ec 0d       	add	r30, r12
    10c0:	b1 e0       	ldi	r27, 0x01	; 1
    10c2:	e4 17       	cp	r30, r20
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <fat_read_file+0xd8>
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	69 2c       	mov	r6, r9
    10ca:	6e 0e       	add	r6, r30
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	6e 16       	cp	r6, r30
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <fat_read_file+0xe4>
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	bf 2b       	or	r27, r31
    10d6:	e5 2f       	mov	r30, r21
    10d8:	ed 0d       	add	r30, r13
    10da:	a1 e0       	ldi	r26, 0x01	; 1
    10dc:	e5 17       	cp	r30, r21
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <fat_read_file+0xf2>
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	7b 2e       	mov	r7, r27
    10e4:	7e 0e       	add	r7, r30
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	7e 16       	cp	r7, r30
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <fat_read_file+0xfe>
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	af 2b       	or	r26, r31
    10f0:	e6 2f       	mov	r30, r22
    10f2:	ee 0d       	add	r30, r14
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
    10f6:	e6 17       	cp	r30, r22
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <fat_read_file+0x10c>
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	8a 2e       	mov	r8, r26
    10fe:	8e 0e       	add	r8, r30
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	8e 16       	cp	r8, r30
    1104:	08 f0       	brcs	.+2      	; 0x1108 <__stack+0x9>
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	bf 2b       	or	r27, r31
    110a:	e7 2f       	mov	r30, r23
    110c:	ef 0d       	add	r30, r15
    110e:	a1 e0       	ldi	r26, 0x01	; 1
    1110:	e7 17       	cp	r30, r23
    1112:	08 f0       	brcs	.+2      	; 0x1116 <__stack+0x17>
    1114:	a0 e0       	ldi	r26, 0x00	; 0
    1116:	9b 2e       	mov	r9, r27
    1118:	9e 0e       	add	r9, r30
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	9e 16       	cp	r9, r30
    111e:	08 f0       	brcs	.+2      	; 0x1122 <__stack+0x23>
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	af 2b       	or	r26, r31
    1124:	e8 2f       	mov	r30, r24
    1126:	e0 0f       	add	r30, r16
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	e8 17       	cp	r30, r24
    112c:	08 f0       	brcs	.+2      	; 0x1130 <__stack+0x31>
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	ae 0f       	add	r26, r30
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	ae 17       	cp	r26, r30
    1136:	08 f0       	brcs	.+2      	; 0x113a <__stack+0x3b>
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	eb 2f       	mov	r30, r27
    113c:	ef 2b       	or	r30, r31
    113e:	89 2f       	mov	r24, r25
    1140:	81 0f       	add	r24, r17
    1142:	e8 0f       	add	r30, r24
    1144:	a2 01       	movw	r20, r4
    1146:	91 01       	movw	r18, r2
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9e 17       	cp	r25, r30
    1152:	f0 f0       	brcs	.+60     	; 0x1190 <__stack+0x91>
    1154:	e9 17       	cp	r30, r25
    1156:	21 f5       	brne	.+72     	; 0x11a0 <__stack+0xa1>
    1158:	8a 17       	cp	r24, r26
    115a:	d0 f0       	brcs	.+52     	; 0x1190 <__stack+0x91>
    115c:	a8 17       	cp	r26, r24
    115e:	01 f5       	brne	.+64     	; 0x11a0 <__stack+0xa1>
    1160:	79 15       	cp	r23, r9
    1162:	b0 f0       	brcs	.+44     	; 0x1190 <__stack+0x91>
    1164:	97 16       	cp	r9, r23
    1166:	e1 f4       	brne	.+56     	; 0x11a0 <__stack+0xa1>
    1168:	68 15       	cp	r22, r8
    116a:	90 f0       	brcs	.+36     	; 0x1190 <__stack+0x91>
    116c:	86 16       	cp	r8, r22
    116e:	c1 f4       	brne	.+48     	; 0x11a0 <__stack+0xa1>
    1170:	57 15       	cp	r21, r7
    1172:	70 f0       	brcs	.+28     	; 0x1190 <__stack+0x91>
    1174:	75 16       	cp	r7, r21
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <__stack+0xa1>
    1178:	46 15       	cp	r20, r6
    117a:	50 f0       	brcs	.+20     	; 0x1190 <__stack+0x91>
    117c:	64 16       	cp	r6, r20
    117e:	81 f4       	brne	.+32     	; 0x11a0 <__stack+0xa1>
    1180:	b9 89       	ldd	r27, Y+17	; 0x11
    1182:	3b 17       	cp	r19, r27
    1184:	28 f0       	brcs	.+10     	; 0x1190 <__stack+0x91>
    1186:	b3 17       	cp	r27, r19
    1188:	59 f4       	brne	.+22     	; 0x11a0 <__stack+0xa1>
    118a:	ea 89       	ldd	r30, Y+18	; 0x12
    118c:	2e 16       	cp	r2, r30
    118e:	40 f4       	brcc	.+16     	; 0x11a0 <__stack+0xa1>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    1190:	91 01       	movw	r18, r2
    1192:	2a 19       	sub	r18, r10
    1194:	3b 09       	sbc	r19, r11
    1196:	38 8b       	std	Y+16, r19	; 0x10
    1198:	2f 87       	std	Y+15, r18	; 0x0f
    if(buffer_len == 0)
    119a:	23 2b       	or	r18, r19
    119c:	09 f4       	brne	.+2      	; 0x11a0 <__stack+0xa1>
    119e:	6c c2       	rjmp	.+1240   	; 0x1678 <__stack+0x579>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    11a0:	af 89       	ldd	r26, Y+23	; 0x17
    11a2:	b8 8d       	ldd	r27, Y+24	; 0x18
    11a4:	ed 91       	ld	r30, X+
    11a6:	fc 91       	ld	r31, X
    11a8:	11 97       	sbiw	r26, 0x01	; 1
    11aa:	20 8d       	ldd	r18, Z+24	; 0x18
    11ac:	31 8d       	ldd	r19, Z+25	; 0x19
    11ae:	3c 87       	std	Y+12, r19	; 0x0c
    11b0:	2b 87       	std	Y+11, r18	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    11b2:	db 96       	adiw	r26, 0x3b	; 59
    11b4:	8d 91       	ld	r24, X+
    11b6:	9d 91       	ld	r25, X+
    11b8:	0d 90       	ld	r0, X+
    11ba:	bc 91       	ld	r27, X
    11bc:	a0 2d       	mov	r26, r0
    11be:	8f 83       	std	Y+7, r24	; 0x07
    11c0:	98 87       	std	Y+8, r25	; 0x08
    11c2:	a9 87       	std	Y+9, r26	; 0x09
    11c4:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	a1 05       	cpc	r26, r1
    11ca:	b1 05       	cpc	r27, r1
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__stack+0xd1>
    11ce:	59 c0       	rjmp	.+178    	; 0x1282 <__stack+0x183>
    {
        cluster_num = fd->dir_entry.cluster;
    11d0:	af 89       	ldd	r26, Y+23	; 0x17
    11d2:	b8 8d       	ldd	r27, Y+24	; 0x18
    11d4:	93 96       	adiw	r26, 0x23	; 35
    11d6:	2d 91       	ld	r18, X+
    11d8:	3d 91       	ld	r19, X+
    11da:	4d 91       	ld	r20, X+
    11dc:	5c 91       	ld	r21, X
    11de:	96 97       	sbiw	r26, 0x26	; 38
    11e0:	2f 83       	std	Y+7, r18	; 0x07
    11e2:	38 87       	std	Y+8, r19	; 0x08
    11e4:	49 87       	std	Y+9, r20	; 0x09
    11e6:	5a 87       	std	Y+10, r21	; 0x0a
        
        if(!cluster_num)
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	41 05       	cpc	r20, r1
    11ee:	51 05       	cpc	r21, r1
    11f0:	59 f4       	brne	.+22     	; 0x1208 <__stack+0x109>
        {
            if(!fd->pos)
    11f2:	8a 2d       	mov	r24, r10
    11f4:	8b 29       	or	r24, r11
    11f6:	8c 29       	or	r24, r12
    11f8:	8d 29       	or	r24, r13
    11fa:	8e 29       	or	r24, r14
    11fc:	8f 29       	or	r24, r15
    11fe:	80 2b       	or	r24, r16
    1200:	81 2b       	or	r24, r17
    1202:	09 f4       	brne	.+2      	; 0x1206 <__stack+0x107>
    1204:	39 c2       	rjmp	.+1138   	; 0x1678 <__stack+0x579>
    1206:	35 c2       	rjmp	.+1130   	; 0x1672 <__stack+0x573>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    1208:	8a 2d       	mov	r24, r10
    120a:	8b 29       	or	r24, r11
    120c:	8c 29       	or	r24, r12
    120e:	8d 29       	or	r24, r13
    1210:	8e 29       	or	r24, r14
    1212:	8f 29       	or	r24, r15
    1214:	80 2b       	or	r24, r16
    1216:	81 2b       	or	r24, r17
    1218:	a1 f1       	breq	.+104    	; 0x1282 <__stack+0x183>
        {
            uint32_t pos = fd->pos;
    121a:	35 01       	movw	r6, r10
    121c:	46 01       	movw	r8, r12
            while(pos >= cluster_size)
    121e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1220:	fc 85       	ldd	r31, Y+12	; 0x0c
    1222:	1f 01       	movw	r2, r30
    1224:	44 24       	eor	r4, r4
    1226:	55 24       	eor	r5, r5
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
    1228:	22 27       	eor	r18, r18
    122a:	33 27       	eor	r19, r19
    122c:	a9 01       	movw	r20, r18
    122e:	22 19       	sub	r18, r2
    1230:	33 09       	sbc	r19, r3
    1232:	44 09       	sbc	r20, r4
    1234:	55 09       	sbc	r21, r5
    1236:	2b 8b       	std	Y+19, r18	; 0x13
    1238:	3c 8b       	std	Y+20, r19	; 0x14
    123a:	4d 8b       	std	Y+21, r20	; 0x15
    123c:	5e 8b       	std	Y+22, r21	; 0x16
    123e:	1c c0       	rjmp	.+56     	; 0x1278 <__stack+0x179>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    1240:	af 89       	ldd	r26, Y+23	; 0x17
    1242:	b8 8d       	ldd	r27, Y+24	; 0x18
    1244:	8d 91       	ld	r24, X+
    1246:	9c 91       	ld	r25, X
    1248:	4f 81       	ldd	r20, Y+7	; 0x07
    124a:	58 85       	ldd	r21, Y+8	; 0x08
    124c:	69 85       	ldd	r22, Y+9	; 0x09
    124e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1250:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
    1254:	6f 83       	std	Y+7, r22	; 0x07
    1256:	78 87       	std	Y+8, r23	; 0x08
    1258:	89 87       	std	Y+9, r24	; 0x09
    125a:	9a 87       	std	Y+10, r25	; 0x0a
                if(!cluster_num)
    125c:	61 15       	cp	r22, r1
    125e:	71 05       	cpc	r23, r1
    1260:	81 05       	cpc	r24, r1
    1262:	91 05       	cpc	r25, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <__stack+0x169>
    1266:	05 c2       	rjmp	.+1034   	; 0x1672 <__stack+0x573>
    1268:	2b 89       	ldd	r18, Y+19	; 0x13
    126a:	3c 89       	ldd	r19, Y+20	; 0x14
    126c:	4d 89       	ldd	r20, Y+21	; 0x15
    126e:	5e 89       	ldd	r21, Y+22	; 0x16
    1270:	62 0e       	add	r6, r18
    1272:	73 1e       	adc	r7, r19
    1274:	84 1e       	adc	r8, r20
    1276:	95 1e       	adc	r9, r21
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    1278:	62 14       	cp	r6, r2
    127a:	73 04       	cpc	r7, r3
    127c:	84 04       	cpc	r8, r4
    127e:	95 04       	cpc	r9, r5
    1280:	f8 f6       	brcc	.-66     	; 0x1240 <__stack+0x141>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    1282:	4b 85       	ldd	r20, Y+11	; 0x0b
    1284:	5c 85       	ldd	r21, Y+12	; 0x0c
    1286:	41 50       	subi	r20, 0x01	; 1
    1288:	50 40       	sbci	r21, 0x00	; 0
    128a:	5c 87       	std	Y+12, r21	; 0x0c
    128c:	4b 87       	std	Y+11, r20	; 0x0b
    128e:	4a 21       	and	r20, r10
    1290:	5b 21       	and	r21, r11
    1292:	5c 83       	std	Y+4, r21	; 0x04
    1294:	4b 83       	std	Y+3, r20	; 0x03
    1296:	8b 85       	ldd	r24, Y+11	; 0x0b
    1298:	9c 85       	ldd	r25, Y+12	; 0x0c
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	9c 87       	std	Y+12, r25	; 0x0c
    129e:	8b 87       	std	Y+11, r24	; 0x0b
    12a0:	af 85       	ldd	r26, Y+15	; 0x0f
    12a2:	b8 89       	ldd	r27, Y+16	; 0x10
    12a4:	be 83       	std	Y+6, r27	; 0x06
    12a6:	ad 83       	std	Y+5, r26	; 0x05
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    12a8:	ef 89       	ldd	r30, Y+23	; 0x17
    12aa:	f8 8d       	ldd	r31, Y+24	; 0x18
    12ac:	01 90       	ld	r0, Z+
    12ae:	f0 81       	ld	r31, Z
    12b0:	e0 2d       	mov	r30, r0
    12b2:	fa 83       	std	Y+2, r31	; 0x02
    12b4:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    12b6:	30 97       	sbiw	r30, 0x00	; 0
    12b8:	09 f4       	brne	.+2      	; 0x12bc <__stack+0x1bd>
    12ba:	8e c0       	rjmp	.+284    	; 0x13d8 <__stack+0x2d9>
    12bc:	2f 81       	ldd	r18, Y+7	; 0x07
    12be:	38 85       	ldd	r19, Y+8	; 0x08
    12c0:	49 85       	ldd	r20, Y+9	; 0x09
    12c2:	5a 85       	ldd	r21, Y+10	; 0x0a
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	41 05       	cpc	r20, r1
    12ca:	51 05       	cpc	r21, r1
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__stack+0x1d1>
    12ce:	84 c0       	rjmp	.+264    	; 0x13d8 <__stack+0x2d9>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    12d0:	22 50       	subi	r18, 0x02	; 2
    12d2:	30 40       	sbci	r19, 0x00	; 0
    12d4:	40 40       	sbci	r20, 0x00	; 0
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	59 01       	movw	r10, r18
    12da:	6a 01       	movw	r12, r20
    12dc:	2e 5f       	subi	r18, 0xFE	; 254
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	4f 4f       	sbci	r20, 0xFF	; 255
    12e2:	5f 4f       	sbci	r21, 0xFF	; 255
    12e4:	2f 83       	std	Y+7, r18	; 0x07
    12e6:	38 87       	std	Y+8, r19	; 0x08
    12e8:	49 87       	std	Y+9, r20	; 0x09
    12ea:	5a 87       	std	Y+10, r21	; 0x0a
    12ec:	20 8c       	ldd	r2, Z+24	; 0x18
    12ee:	31 8c       	ldd	r3, Z+25	; 0x19
    12f0:	95 01       	movw	r18, r10
    12f2:	a6 01       	movw	r20, r12
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	51 01       	movw	r10, r2
    12fe:	cc 24       	eor	r12, r12
    1300:	dd 24       	eor	r13, r13
    1302:	ee 24       	eor	r14, r14
    1304:	ff 24       	eor	r15, r15
    1306:	00 e0       	ldi	r16, 0x00	; 0
    1308:	10 e0       	ldi	r17, 0x00	; 0
    130a:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    130e:	e9 81       	ldd	r30, Y+1	; 0x01
    1310:	fa 81       	ldd	r31, Y+2	; 0x02
    1312:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1314:	f3 8c       	ldd	r15, Z+27	; 0x1b
    1316:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1318:	05 8d       	ldd	r16, Z+29	; 0x1d
    131a:	e6 8c       	ldd	r14, Z+30	; 0x1e
    131c:	d7 8c       	ldd	r13, Z+31	; 0x1f
    131e:	c0 a0       	ldd	r12, Z+32	; 0x20
    1320:	11 a1       	ldd	r17, Z+33	; 0x21
    1322:	a2 0f       	add	r26, r18
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	a2 17       	cp	r26, r18
    1328:	08 f0       	brcs	.+2      	; 0x132c <__stack+0x22d>
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	23 2f       	mov	r18, r19
    132e:	2f 0d       	add	r18, r15
    1330:	e1 e0       	ldi	r30, 0x01	; 1
    1332:	23 17       	cp	r18, r19
    1334:	08 f0       	brcs	.+2      	; 0x1338 <__stack+0x239>
    1336:	e0 e0       	ldi	r30, 0x00	; 0
    1338:	ff 2e       	mov	r15, r31
    133a:	f2 0e       	add	r15, r18
    133c:	31 e0       	ldi	r19, 0x01	; 1
    133e:	f2 16       	cp	r15, r18
    1340:	08 f0       	brcs	.+2      	; 0x1344 <__stack+0x245>
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	e3 2b       	or	r30, r19
    1346:	24 2f       	mov	r18, r20
    1348:	2b 0f       	add	r18, r27
    134a:	f1 e0       	ldi	r31, 0x01	; 1
    134c:	24 17       	cp	r18, r20
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__stack+0x253>
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	be 2f       	mov	r27, r30
    1354:	b2 0f       	add	r27, r18
    1356:	31 e0       	ldi	r19, 0x01	; 1
    1358:	b2 17       	cp	r27, r18
    135a:	08 f0       	brcs	.+2      	; 0x135e <__stack+0x25f>
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	f3 2b       	or	r31, r19
    1360:	25 2f       	mov	r18, r21
    1362:	20 0f       	add	r18, r16
    1364:	41 e0       	ldi	r20, 0x01	; 1
    1366:	25 17       	cp	r18, r21
    1368:	08 f0       	brcs	.+2      	; 0x136c <__stack+0x26d>
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	f2 0f       	add	r31, r18
    136e:	31 e0       	ldi	r19, 0x01	; 1
    1370:	f2 17       	cp	r31, r18
    1372:	08 f0       	brcs	.+2      	; 0x1376 <__stack+0x277>
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	43 2b       	or	r20, r19
    1378:	26 2f       	mov	r18, r22
    137a:	2e 0d       	add	r18, r14
    137c:	51 e0       	ldi	r21, 0x01	; 1
    137e:	26 17       	cp	r18, r22
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__stack+0x285>
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	e4 2f       	mov	r30, r20
    1386:	e2 0f       	add	r30, r18
    1388:	31 e0       	ldi	r19, 0x01	; 1
    138a:	e2 17       	cp	r30, r18
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__stack+0x291>
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	53 2b       	or	r21, r19
    1392:	27 2f       	mov	r18, r23
    1394:	2d 0d       	add	r18, r13
    1396:	41 e0       	ldi	r20, 0x01	; 1
    1398:	27 17       	cp	r18, r23
    139a:	08 f0       	brcs	.+2      	; 0x139e <__stack+0x29f>
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	52 0f       	add	r21, r18
    13a0:	31 e0       	ldi	r19, 0x01	; 1
    13a2:	52 17       	cp	r21, r18
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <__stack+0x2a9>
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	43 2b       	or	r20, r19
    13aa:	28 2f       	mov	r18, r24
    13ac:	2c 0d       	add	r18, r12
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	28 17       	cp	r18, r24
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <__stack+0x2b7>
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	42 0f       	add	r20, r18
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	42 17       	cp	r20, r18
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <__stack+0x2c1>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	73 2e       	mov	r7, r19
    13c2:	78 2a       	or	r7, r24
    13c4:	19 0f       	add	r17, r25
    13c6:	2a 2f       	mov	r18, r26
    13c8:	9f 2d       	mov	r25, r15
    13ca:	6b 2f       	mov	r22, r27
    13cc:	7f 2f       	mov	r23, r31
    13ce:	ae 2f       	mov	r26, r30
    13d0:	b5 2f       	mov	r27, r21
    13d2:	34 2e       	mov	r3, r20
    13d4:	71 0e       	add	r7, r17
    13d6:	08 c0       	rjmp	.+16     	; 0x13e8 <__stack+0x2e9>
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	33 24       	eor	r3, r3
    13e6:	77 24       	eor	r7, r7
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
    13e8:	8b 84       	ldd	r8, Y+11	; 0x0b
    13ea:	9c 84       	ldd	r9, Y+12	; 0x0c
    13ec:	4b 81       	ldd	r20, Y+3	; 0x03
    13ee:	5c 81       	ldd	r21, Y+4	; 0x04
    13f0:	84 1a       	sub	r8, r20
    13f2:	95 0a       	sbc	r9, r21
    13f4:	ed 81       	ldd	r30, Y+5	; 0x05
    13f6:	fe 81       	ldd	r31, Y+6	; 0x06
    13f8:	e8 15       	cp	r30, r8
    13fa:	f9 05       	cpc	r31, r9
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <__stack+0x301>
    13fe:	4f 01       	movw	r8, r30
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    1400:	e9 81       	ldd	r30, Y+1	; 0x01
    1402:	fa 81       	ldd	r31, Y+2	; 0x02
    1404:	40 80       	ld	r4, Z
    1406:	51 80       	ldd	r5, Z+1	; 0x01
    1408:	4b 81       	ldd	r20, Y+3	; 0x03
    140a:	5c 81       	ldd	r21, Y+4	; 0x04
    140c:	5a 01       	movw	r10, r20
    140e:	cc 24       	eor	r12, r12
    1410:	dd 24       	eor	r13, r13
    1412:	ee 24       	eor	r14, r14
    1414:	ff 24       	eor	r15, r15
    1416:	87 01       	movw	r16, r14
    1418:	62 2e       	mov	r6, r18
    141a:	64 0e       	add	r6, r20
    141c:	31 e0       	ldi	r19, 0x01	; 1
    141e:	62 16       	cp	r6, r18
    1420:	08 f0       	brcs	.+2      	; 0x1424 <__stack+0x325>
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	89 2f       	mov	r24, r25
    1426:	8b 0d       	add	r24, r11
    1428:	41 e0       	ldi	r20, 0x01	; 1
    142a:	89 17       	cp	r24, r25
    142c:	08 f0       	brcs	.+2      	; 0x1430 <__stack+0x331>
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	38 0f       	add	r19, r24
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	38 17       	cp	r19, r24
    1436:	08 f0       	brcs	.+2      	; 0x143a <__stack+0x33b>
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	49 2b       	or	r20, r25
    143c:	86 2f       	mov	r24, r22
    143e:	8c 0d       	add	r24, r12
    1440:	51 e0       	ldi	r21, 0x01	; 1
    1442:	86 17       	cp	r24, r22
    1444:	08 f0       	brcs	.+2      	; 0x1448 <__stack+0x349>
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	48 0f       	add	r20, r24
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	48 17       	cp	r20, r24
    144e:	08 f0       	brcs	.+2      	; 0x1452 <__stack+0x353>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	59 2b       	or	r21, r25
    1454:	87 2f       	mov	r24, r23
    1456:	8d 0d       	add	r24, r13
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	87 17       	cp	r24, r23
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__stack+0x361>
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	58 0f       	add	r21, r24
    1462:	91 e0       	ldi	r25, 0x01	; 1
    1464:	58 17       	cp	r21, r24
    1466:	08 f0       	brcs	.+2      	; 0x146a <__stack+0x36b>
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	69 2b       	or	r22, r25
    146c:	8a 2f       	mov	r24, r26
    146e:	8e 0d       	add	r24, r14
    1470:	71 e0       	ldi	r23, 0x01	; 1
    1472:	8a 17       	cp	r24, r26
    1474:	08 f0       	brcs	.+2      	; 0x1478 <__stack+0x379>
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	68 0f       	add	r22, r24
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	68 17       	cp	r22, r24
    147e:	08 f0       	brcs	.+2      	; 0x1482 <__stack+0x383>
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	79 2b       	or	r23, r25
    1484:	9b 2f       	mov	r25, r27
    1486:	9f 0d       	add	r25, r15
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	9b 17       	cp	r25, r27
    148c:	08 f0       	brcs	.+2      	; 0x1490 <__stack+0x391>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	79 0f       	add	r23, r25
    1492:	a1 e0       	ldi	r26, 0x01	; 1
    1494:	79 17       	cp	r23, r25
    1496:	08 f0       	brcs	.+2      	; 0x149a <__stack+0x39b>
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	8a 2b       	or	r24, r26
    149c:	a3 2d       	mov	r26, r3
    149e:	a0 0f       	add	r26, r16
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	a3 15       	cp	r26, r3
    14a4:	08 f0       	brcs	.+2      	; 0x14a8 <__stack+0x3a9>
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	8a 0f       	add	r24, r26
    14aa:	b1 e0       	ldi	r27, 0x01	; 1
    14ac:	8a 17       	cp	r24, r26
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <__stack+0x3b3>
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	9b 2b       	or	r25, r27
    14b4:	71 0e       	add	r7, r17
    14b6:	d2 01       	movw	r26, r4
    14b8:	ed 91       	ld	r30, X+
    14ba:	fc 91       	ld	r31, X
    14bc:	26 2d       	mov	r18, r6
    14be:	97 0d       	add	r25, r7
    14c0:	0d 85       	ldd	r16, Y+13	; 0x0d
    14c2:	1e 85       	ldd	r17, Y+14	; 0x0e
    14c4:	74 01       	movw	r14, r8
    14c6:	09 95       	icall
    14c8:	88 23       	and	r24, r24
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__stack+0x3cf>
    14cc:	af c0       	rjmp	.+350    	; 0x162c <__stack+0x52d>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    14ce:	2d 81       	ldd	r18, Y+5	; 0x05
    14d0:	3e 81       	ldd	r19, Y+6	; 0x06
    14d2:	28 19       	sub	r18, r8
    14d4:	39 09       	sbc	r19, r9
    14d6:	3e 83       	std	Y+6, r19	; 0x06
    14d8:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += copy_length;
    14da:	94 01       	movw	r18, r8
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	af 89       	ldd	r26, Y+23	; 0x17
    14ea:	b8 8d       	ldd	r27, Y+24	; 0x18
    14ec:	d3 96       	adiw	r26, 0x33	; 51
    14ee:	1c 91       	ld	r17, X
    14f0:	d3 97       	sbiw	r26, 0x33	; 51
    14f2:	d4 96       	adiw	r26, 0x34	; 52
    14f4:	dc 90       	ld	r13, X
    14f6:	d4 97       	sbiw	r26, 0x34	; 52
    14f8:	d5 96       	adiw	r26, 0x35	; 53
    14fa:	bc 91       	ld	r27, X
    14fc:	ef 89       	ldd	r30, Y+23	; 0x17
    14fe:	f8 8d       	ldd	r31, Y+24	; 0x18
    1500:	06 a9       	ldd	r16, Z+54	; 0x36
    1502:	e7 a8       	ldd	r14, Z+55	; 0x37
    1504:	a0 ac       	ldd	r10, Z+56	; 0x38
    1506:	71 ac       	ldd	r7, Z+57	; 0x39
    1508:	f2 ac       	ldd	r15, Z+58	; 0x3a
    150a:	18 0d       	add	r17, r8
    150c:	f1 e0       	ldi	r31, 0x01	; 1
    150e:	18 15       	cp	r17, r8
    1510:	08 f0       	brcs	.+2      	; 0x1514 <__stack+0x415>
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	ed 2d       	mov	r30, r13
    1516:	e3 0f       	add	r30, r19
    1518:	a1 e0       	ldi	r26, 0x01	; 1
    151a:	e3 17       	cp	r30, r19
    151c:	08 f0       	brcs	.+2      	; 0x1520 <__stack+0x421>
    151e:	a0 e0       	ldi	r26, 0x00	; 0
    1520:	bf 2e       	mov	r11, r31
    1522:	be 0e       	add	r11, r30
    1524:	f1 e0       	ldi	r31, 0x01	; 1
    1526:	be 16       	cp	r11, r30
    1528:	08 f0       	brcs	.+2      	; 0x152c <__stack+0x42d>
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	af 2b       	or	r26, r31
    152e:	e4 2f       	mov	r30, r20
    1530:	eb 0f       	add	r30, r27
    1532:	b1 e0       	ldi	r27, 0x01	; 1
    1534:	e4 17       	cp	r30, r20
    1536:	08 f0       	brcs	.+2      	; 0x153a <__stack+0x43b>
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ca 2e       	mov	r12, r26
    153c:	ce 0e       	add	r12, r30
    153e:	f1 e0       	ldi	r31, 0x01	; 1
    1540:	ce 16       	cp	r12, r30
    1542:	08 f0       	brcs	.+2      	; 0x1546 <__stack+0x447>
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	bf 2b       	or	r27, r31
    1548:	e5 2f       	mov	r30, r21
    154a:	e0 0f       	add	r30, r16
    154c:	a1 e0       	ldi	r26, 0x01	; 1
    154e:	e5 17       	cp	r30, r21
    1550:	08 f0       	brcs	.+2      	; 0x1554 <__stack+0x455>
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	db 2e       	mov	r13, r27
    1556:	de 0e       	add	r13, r30
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	de 16       	cp	r13, r30
    155c:	08 f0       	brcs	.+2      	; 0x1560 <__stack+0x461>
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	af 2b       	or	r26, r31
    1562:	e6 2f       	mov	r30, r22
    1564:	ee 0d       	add	r30, r14
    1566:	b1 e0       	ldi	r27, 0x01	; 1
    1568:	e6 17       	cp	r30, r22
    156a:	08 f0       	brcs	.+2      	; 0x156e <__stack+0x46f>
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	ea 2e       	mov	r14, r26
    1570:	ee 0e       	add	r14, r30
    1572:	f1 e0       	ldi	r31, 0x01	; 1
    1574:	ee 16       	cp	r14, r30
    1576:	08 f0       	brcs	.+2      	; 0x157a <__stack+0x47b>
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	bf 2b       	or	r27, r31
    157c:	e7 2f       	mov	r30, r23
    157e:	ea 0d       	add	r30, r10
    1580:	a1 e0       	ldi	r26, 0x01	; 1
    1582:	e7 17       	cp	r30, r23
    1584:	08 f0       	brcs	.+2      	; 0x1588 <__stack+0x489>
    1586:	a0 e0       	ldi	r26, 0x00	; 0
    1588:	0b 2f       	mov	r16, r27
    158a:	0e 0f       	add	r16, r30
    158c:	f1 e0       	ldi	r31, 0x01	; 1
    158e:	0e 17       	cp	r16, r30
    1590:	08 f0       	brcs	.+2      	; 0x1594 <__stack+0x495>
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	af 2b       	or	r26, r31
    1596:	e8 2f       	mov	r30, r24
    1598:	e7 0d       	add	r30, r7
    159a:	f1 e0       	ldi	r31, 0x01	; 1
    159c:	e8 17       	cp	r30, r24
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <__stack+0x4a3>
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	aa 2e       	mov	r10, r26
    15a4:	ae 0e       	add	r10, r30
    15a6:	a1 e0       	ldi	r26, 0x01	; 1
    15a8:	ae 16       	cp	r10, r30
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <__stack+0x4af>
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	fa 2b       	or	r31, r26
    15b0:	f9 0e       	add	r15, r25
    15b2:	ff 0d       	add	r31, r15
    15b4:	af 89       	ldd	r26, Y+23	; 0x17
    15b6:	b8 8d       	ldd	r27, Y+24	; 0x18
    15b8:	d3 96       	adiw	r26, 0x33	; 51
    15ba:	1c 93       	st	X, r17
    15bc:	d3 97       	sbiw	r26, 0x33	; 51
    15be:	d4 96       	adiw	r26, 0x34	; 52
    15c0:	bc 92       	st	X, r11
    15c2:	d4 97       	sbiw	r26, 0x34	; 52
    15c4:	d5 96       	adiw	r26, 0x35	; 53
    15c6:	cc 92       	st	X, r12
    15c8:	d5 97       	sbiw	r26, 0x35	; 53
    15ca:	d6 96       	adiw	r26, 0x36	; 54
    15cc:	dc 92       	st	X, r13
    15ce:	d6 97       	sbiw	r26, 0x36	; 54
    15d0:	d7 96       	adiw	r26, 0x37	; 55
    15d2:	ec 92       	st	X, r14
    15d4:	d7 97       	sbiw	r26, 0x37	; 55
    15d6:	d8 96       	adiw	r26, 0x38	; 56
    15d8:	0c 93       	st	X, r16
    15da:	d8 97       	sbiw	r26, 0x38	; 56
    15dc:	d9 96       	adiw	r26, 0x39	; 57
    15de:	ac 92       	st	X, r10
    15e0:	d9 97       	sbiw	r26, 0x39	; 57
    15e2:	da 96       	adiw	r26, 0x3a	; 58
    15e4:	fc 93       	st	X, r31
    15e6:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + copy_length >= cluster_size)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	88 0d       	add	r24, r8
    15ee:	99 1d       	adc	r25, r9
    15f0:	eb 85       	ldd	r30, Y+11	; 0x0b
    15f2:	fc 85       	ldd	r31, Y+12	; 0x0c
    15f4:	8e 17       	cp	r24, r30
    15f6:	9f 07       	cpc	r25, r31
    15f8:	10 f1       	brcs	.+68     	; 0x163e <__stack+0x53f>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    15fa:	8d 91       	ld	r24, X+
    15fc:	9c 91       	ld	r25, X
    15fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1600:	58 85       	ldd	r21, Y+8	; 0x08
    1602:	69 85       	ldd	r22, Y+9	; 0x09
    1604:	7a 85       	ldd	r23, Y+10	; 0x0a
    1606:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
    160a:	6f 83       	std	Y+7, r22	; 0x07
    160c:	78 87       	std	Y+8, r23	; 0x08
    160e:	89 87       	std	Y+9, r24	; 0x09
    1610:	9a 87       	std	Y+10, r25	; 0x0a
    1612:	61 15       	cp	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	81 05       	cpc	r24, r1
    1618:	91 05       	cpc	r25, r1
    161a:	79 f4       	brne	.+30     	; 0x163a <__stack+0x53b>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    161c:	af 89       	ldd	r26, Y+23	; 0x17
    161e:	b8 8d       	ldd	r27, Y+24	; 0x18
    1620:	db 96       	adiw	r26, 0x3b	; 59
    1622:	1d 92       	st	X+, r1
    1624:	1d 92       	st	X+, r1
    1626:	1d 92       	st	X+, r1
    1628:	1c 92       	st	X, r1
    162a:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    162c:	4f 85       	ldd	r20, Y+15	; 0x0f
    162e:	58 89       	ldd	r21, Y+16	; 0x10
    1630:	ed 81       	ldd	r30, Y+5	; 0x05
    1632:	fe 81       	ldd	r31, Y+6	; 0x06
    1634:	4e 1b       	sub	r20, r30
    1636:	5f 0b       	sbc	r21, r31
    1638:	21 c0       	rjmp	.+66     	; 0x167c <__stack+0x57d>
    163a:	1c 82       	std	Y+4, r1	; 0x04
    163c:	1b 82       	std	Y+3, r1	; 0x03
            }
        }

        fd->pos_cluster = cluster_num;
    163e:	2f 81       	ldd	r18, Y+7	; 0x07
    1640:	38 85       	ldd	r19, Y+8	; 0x08
    1642:	49 85       	ldd	r20, Y+9	; 0x09
    1644:	5a 85       	ldd	r21, Y+10	; 0x0a
    1646:	af 89       	ldd	r26, Y+23	; 0x17
    1648:	b8 8d       	ldd	r27, Y+24	; 0x18
    164a:	db 96       	adiw	r26, 0x3b	; 59
    164c:	2d 93       	st	X+, r18
    164e:	3d 93       	st	X+, r19
    1650:	4d 93       	st	X+, r20
    1652:	5c 93       	st	X, r21
    1654:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    1656:	ed 81       	ldd	r30, Y+5	; 0x05
    1658:	fe 81       	ldd	r31, Y+6	; 0x06
    165a:	ef 2b       	or	r30, r31
    165c:	39 f0       	breq	.+14     	; 0x166c <__stack+0x56d>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    165e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1660:	3e 85       	ldd	r19, Y+14	; 0x0e
    1662:	28 0d       	add	r18, r8
    1664:	39 1d       	adc	r19, r9
    1666:	3e 87       	std	Y+14, r19	; 0x0e
    1668:	2d 87       	std	Y+13, r18	; 0x0d
    166a:	1e ce       	rjmp	.-964    	; 0x12a8 <__stack+0x1a9>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    166c:	4f 85       	ldd	r20, Y+15	; 0x0f
    166e:	58 89       	ldd	r21, Y+16	; 0x10
    1670:	05 c0       	rjmp	.+10     	; 0x167c <__stack+0x57d>
    1672:	4f ef       	ldi	r20, 0xFF	; 255
    1674:	5f ef       	ldi	r21, 0xFF	; 255
    1676:	02 c0       	rjmp	.+4      	; 0x167c <__stack+0x57d>
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
}
    167c:	ca 01       	movw	r24, r20
    167e:	68 96       	adiw	r28, 0x18	; 24
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	7f 90       	pop	r7
    16a4:	6f 90       	pop	r6
    16a6:	5f 90       	pop	r5
    16a8:	4f 90       	pop	r4
    16aa:	3f 90       	pop	r3
    16ac:	2f 90       	pop	r2
    16ae:	08 95       	ret

000016b0 <fat_close_dir>:
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    16b0:	fc 01       	movw	r30, r24
    if(dd)
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	11 f0       	breq	.+4      	; 0x16ba <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    16b6:	11 82       	std	Z+1, r1	; 0x01
    16b8:	10 82       	st	Z, r1
    16ba:	08 95       	ret

000016bc <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    16bc:	fc 01       	movw	r30, r24
    if(!dd)
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <fat_reset_dir+0xa>
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	08 95       	ret
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    16c6:	83 a1       	ldd	r24, Z+35	; 0x23
    16c8:	94 a1       	ldd	r25, Z+36	; 0x24
    16ca:	a5 a1       	ldd	r26, Z+37	; 0x25
    16cc:	b6 a1       	ldd	r27, Z+38	; 0x26
    16ce:	83 ab       	std	Z+51, r24	; 0x33
    16d0:	94 ab       	std	Z+52, r25	; 0x34
    16d2:	a5 ab       	std	Z+53, r26	; 0x35
    16d4:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    16d6:	10 ae       	std	Z+56, r1	; 0x38
    16d8:	17 aa       	std	Z+55, r1	; 0x37
    16da:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}
    16dc:	08 95       	ret

000016de <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    16de:	2f 92       	push	r2
    16e0:	3f 92       	push	r3
    16e2:	4f 92       	push	r4
    16e4:	5f 92       	push	r5
    16e6:	6f 92       	push	r6
    16e8:	7f 92       	push	r7
    16ea:	8f 92       	push	r8
    16ec:	9f 92       	push	r9
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	2c 97       	sbiw	r28, 0x0c	; 12
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	3c 01       	movw	r6, r24
    1714:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	09 f4       	brne	.+2      	; 0x171c <fat_delete_file+0x3e>
    171a:	9c c0       	rjmp	.+312    	; 0x1854 <fat_delete_file+0x176>
    171c:	61 15       	cp	r22, r1
    171e:	71 05       	cpc	r23, r1
    1720:	09 f4       	brne	.+2      	; 0x1724 <fat_delete_file+0x46>
    1722:	98 c0       	rjmp	.+304    	; 0x1854 <fat_delete_file+0x176>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    1724:	db 01       	movw	r26, r22
    1726:	99 96       	adiw	r26, 0x29	; 41
    1728:	bc 90       	ld	r11, X
    172a:	99 97       	sbiw	r26, 0x29	; 41
    172c:	9a 96       	adiw	r26, 0x2a	; 42
    172e:	ac 90       	ld	r10, X
    1730:	9a 97       	sbiw	r26, 0x2a	; 42
    1732:	9b 96       	adiw	r26, 0x2b	; 43
    1734:	9c 90       	ld	r9, X
    1736:	9b 97       	sbiw	r26, 0x2b	; 43
    1738:	9c 96       	adiw	r26, 0x2c	; 44
    173a:	8c 90       	ld	r8, X
    173c:	9c 97       	sbiw	r26, 0x2c	; 44
    173e:	9d 96       	adiw	r26, 0x2d	; 45
    1740:	5c 90       	ld	r5, X
    1742:	9d 97       	sbiw	r26, 0x2d	; 45
    1744:	9e 96       	adiw	r26, 0x2e	; 46
    1746:	4c 90       	ld	r4, X
    1748:	9e 97       	sbiw	r26, 0x2e	; 46
    174a:	9f 96       	adiw	r26, 0x2f	; 47
    174c:	3c 90       	ld	r3, X
    174e:	9f 97       	sbiw	r26, 0x2f	; 47
    1750:	d0 96       	adiw	r26, 0x30	; 48
    1752:	2c 90       	ld	r2, X
    if(!dir_entry_offset)
    1754:	8b 2d       	mov	r24, r11
    1756:	8a 29       	or	r24, r10
    1758:	89 29       	or	r24, r9
    175a:	88 29       	or	r24, r8
    175c:	85 29       	or	r24, r5
    175e:	84 29       	or	r24, r4
    1760:	83 29       	or	r24, r3
    1762:	82 29       	or	r24, r2
    1764:	09 f4       	brne	.+2      	; 0x1768 <fat_delete_file+0x8a>
    1766:	76 c0       	rjmp	.+236    	; 0x1854 <fat_delete_file+0x176>
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    1768:	d3 01       	movw	r26, r6
    176a:	ed 91       	ld	r30, X+
    176c:	fc 91       	ld	r31, X
    176e:	01 90       	ld	r0, Z+
    1770:	f0 81       	ld	r31, Z
    1772:	e0 2d       	mov	r30, r0
    1774:	2b 2d       	mov	r18, r11
    1776:	3a 2d       	mov	r19, r10
    1778:	49 2d       	mov	r20, r9
    177a:	58 2d       	mov	r21, r8
    177c:	65 2d       	mov	r22, r5
    177e:	74 2d       	mov	r23, r4
    1780:	83 2d       	mov	r24, r3
    1782:	92 2d       	mov	r25, r2
    1784:	8e 01       	movw	r16, r28
    1786:	0f 5f       	subi	r16, 0xFF	; 255
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	ac e0       	ldi	r26, 0x0C	; 12
    178c:	ea 2e       	mov	r14, r26
    178e:	f1 2c       	mov	r15, r1
    1790:	09 95       	icall
    1792:	88 23       	and	r24, r24
    1794:	09 f4       	brne	.+2      	; 0x1798 <fat_delete_file+0xba>
    1796:	5e c0       	rjmp	.+188    	; 0x1854 <fat_delete_file+0x176>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    1798:	b5 ee       	ldi	r27, 0xE5	; 229
    179a:	b9 83       	std	Y+1, r27	; 0x01
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    179c:	d3 01       	movw	r26, r6
    179e:	ed 91       	ld	r30, X+
    17a0:	fc 91       	ld	r31, X
    17a2:	04 80       	ldd	r0, Z+4	; 0x04
    17a4:	f5 81       	ldd	r31, Z+5	; 0x05
    17a6:	e0 2d       	mov	r30, r0
    17a8:	2b 2d       	mov	r18, r11
    17aa:	3a 2d       	mov	r19, r10
    17ac:	49 2d       	mov	r20, r9
    17ae:	58 2d       	mov	r21, r8
    17b0:	65 2d       	mov	r22, r5
    17b2:	74 2d       	mov	r23, r4
    17b4:	83 2d       	mov	r24, r3
    17b6:	92 2d       	mov	r25, r2
    17b8:	8e 01       	movw	r16, r28
    17ba:	0f 5f       	subi	r16, 0xFF	; 255
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	09 95       	icall
    17c0:	88 23       	and	r24, r24
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <fat_delete_file+0xe8>
    17c4:	47 c0       	rjmp	.+142    	; 0x1854 <fat_delete_file+0x176>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    17c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17c8:	8f 30       	cpi	r24, 0x0F	; 15
    17ca:	79 f5       	brne	.+94     	; 0x182a <fat_delete_file+0x14c>
            break;

        dir_entry_offset += 32;
    17cc:	7b 2d       	mov	r23, r11
    17ce:	70 5e       	subi	r23, 0xE0	; 224
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	7b 15       	cp	r23, r11
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <fat_delete_file+0xfa>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	68 2f       	mov	r22, r24
    17da:	6a 0d       	add	r22, r10
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	6a 15       	cp	r22, r10
    17e0:	08 f0       	brcs	.+2      	; 0x17e4 <fat_delete_file+0x106>
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	58 2f       	mov	r21, r24
    17e6:	59 0d       	add	r21, r9
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	59 15       	cp	r21, r9
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <fat_delete_file+0x112>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	48 2f       	mov	r20, r24
    17f2:	48 0d       	add	r20, r8
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	48 15       	cp	r20, r8
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <fat_delete_file+0x11e>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	38 2f       	mov	r19, r24
    17fe:	35 0d       	add	r19, r5
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	35 15       	cp	r19, r5
    1804:	08 f0       	brcs	.+2      	; 0x1808 <fat_delete_file+0x12a>
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	28 2f       	mov	r18, r24
    180a:	24 0d       	add	r18, r4
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	24 15       	cp	r18, r4
    1810:	08 f0       	brcs	.+2      	; 0x1814 <fat_delete_file+0x136>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	83 0d       	add	r24, r3
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	83 15       	cp	r24, r3
    181a:	08 f0       	brcs	.+2      	; 0x181e <fat_delete_file+0x140>
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	5b 01       	movw	r10, r22
    1820:	4a 01       	movw	r8, r20
    1822:	29 01       	movw	r4, r18
    1824:	38 2e       	mov	r3, r24
    1826:	29 0e       	add	r2, r25
    1828:	9f cf       	rjmp	.-194    	; 0x1768 <fat_delete_file+0x8a>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    182a:	f6 01       	movw	r30, r12
    182c:	41 a1       	ldd	r20, Z+33	; 0x21
    182e:	52 a1       	ldd	r21, Z+34	; 0x22
    1830:	63 a1       	ldd	r22, Z+35	; 0x23
    1832:	74 a1       	ldd	r23, Z+36	; 0x24
    1834:	41 15       	cp	r20, r1
    1836:	51 05       	cpc	r21, r1
    1838:	61 05       	cpc	r22, r1
    183a:	71 05       	cpc	r23, r1
    183c:	39 f0       	breq	.+14     	; 0x184c <fat_delete_file+0x16e>
    183e:	c3 01       	movw	r24, r6
    1840:	0e 94 ad 02 	call	0x55a	; 0x55a <fat_free_clusters>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	88 23       	and	r24, r24
    184a:	11 f0       	breq	.+4      	; 0x1850 <fat_delete_file+0x172>
    184c:	21 e0       	ldi	r18, 0x01	; 1
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	82 2f       	mov	r24, r18
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <fat_delete_file+0x178>
    1854:	80 e0       	ldi	r24, 0x00	; 0
}
    1856:	2c 96       	adiw	r28, 0x0c	; 12
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	9f 90       	pop	r9
    1878:	8f 90       	pop	r8
    187a:	7f 90       	pop	r7
    187c:	6f 90       	pop	r6
    187e:	5f 90       	pop	r5
    1880:	4f 90       	pop	r4
    1882:	3f 90       	pop	r3
    1884:	2f 90       	pop	r2
    1886:	08 95       	ret

00001888 <fat_get_fs_size>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    1888:	2f 92       	push	r2
    188a:	3f 92       	push	r3
    188c:	4f 92       	push	r4
    188e:	5f 92       	push	r5
    1890:	6f 92       	push	r6
    1892:	7f 92       	push	r7
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	dc 01       	movw	r26, r24
    if(!fs)
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	49 f4       	brne	.+18     	; 0x18c0 <fat_get_fs_size+0x38>
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	30 c0       	rjmp	.+96     	; 0x1920 <fat_get_fs_size+0x98>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    18c0:	ed 91       	ld	r30, X+
    18c2:	fc 91       	ld	r31, X
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	80 85       	ldd	r24, Z+8	; 0x08
    18c8:	52 96       	adiw	r26, 0x12	; 18
    18ca:	2d 91       	ld	r18, X+
    18cc:	3d 91       	ld	r19, X+
    18ce:	4d 91       	ld	r20, X+
    18d0:	5c 91       	ld	r21, X
    18d2:	55 97       	sbiw	r26, 0x15	; 21
    18d4:	58 96       	adiw	r26, 0x18	; 24
    18d6:	ed 91       	ld	r30, X+
    18d8:	fc 91       	ld	r31, X
    18da:	59 97       	sbiw	r26, 0x19	; 25
    18dc:	8b 30       	cpi	r24, 0x0B	; 11
    18de:	41 f4       	brne	.+16     	; 0x18f0 <fat_get_fs_size+0x68>
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    18e0:	12 e0       	ldi	r17, 0x02	; 2
    18e2:	56 95       	lsr	r21
    18e4:	47 95       	ror	r20
    18e6:	37 95       	ror	r19
    18e8:	27 95       	ror	r18
    18ea:	1a 95       	dec	r17
    18ec:	d1 f7       	brne	.-12     	; 0x18e2 <fat_get_fs_size+0x5a>
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <fat_get_fs_size+0x70>
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    18f0:	56 95       	lsr	r21
    18f2:	47 95       	ror	r20
    18f4:	37 95       	ror	r19
    18f6:	27 95       	ror	r18
    18f8:	22 50       	subi	r18, 0x02	; 2
    18fa:	30 40       	sbci	r19, 0x00	; 0
    18fc:	40 40       	sbci	r20, 0x00	; 0
    18fe:	50 40       	sbci	r21, 0x00	; 0
    1900:	59 01       	movw	r10, r18
    1902:	6a 01       	movw	r12, r20
    1904:	a6 01       	movw	r20, r12
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	5f 01       	movw	r10, r30
    1910:	cc 24       	eor	r12, r12
    1912:	dd 24       	eor	r13, r13
    1914:	ee 24       	eor	r14, r14
    1916:	ff 24       	eor	r15, r15
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
}
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	ff 90       	pop	r15
    1926:	ef 90       	pop	r14
    1928:	df 90       	pop	r13
    192a:	cf 90       	pop	r12
    192c:	bf 90       	pop	r11
    192e:	af 90       	pop	r10
    1930:	9f 90       	pop	r9
    1932:	8f 90       	pop	r8
    1934:	7f 90       	pop	r7
    1936:	6f 90       	pop	r6
    1938:	5f 90       	pop	r5
    193a:	4f 90       	pop	r4
    193c:	3f 90       	pop	r3
    193e:	2f 90       	pop	r2
    1940:	08 95       	ret

00001942 <fat_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
offset_t fat_get_fs_free(const struct fat_fs_struct* fs)
{
    1942:	2f 92       	push	r2
    1944:	3f 92       	push	r3
    1946:	4f 92       	push	r4
    1948:	5f 92       	push	r5
    194a:	6f 92       	push	r6
    194c:	7f 92       	push	r7
    194e:	8f 92       	push	r8
    1950:	9f 92       	push	r9
    1952:	af 92       	push	r10
    1954:	bf 92       	push	r11
    1956:	cf 92       	push	r12
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	e0 97       	sbiw	r28, 0x30	; 48
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	3c 01       	movw	r6, r24
    if(!fs)
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	09 f4       	brne	.+2      	; 0x197e <fat_get_fs_free+0x3c>
    197c:	f8 c0       	rjmp	.+496    	; 0x1b6e <fat_get_fs_free+0x22c>
        return 0;

    uint8_t fat[32];
    struct fat_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	1a 82       	std	Y+2, r1	; 0x02
    1982:	1b 82       	std	Y+3, r1	; 0x03
    1984:	1c 82       	std	Y+4, r1	; 0x04
    count_arg.buffer_size = sizeof(fat);
    1986:	80 e2       	ldi	r24, 0x20	; 32
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05

    offset_t fat_offset = fs->header.fat_offset;
    198e:	d3 01       	movw	r26, r6
    1990:	1a 96       	adiw	r26, 0x0a	; 10
    1992:	bc 91       	ld	r27, X
    1994:	b9 a7       	std	Y+41, r27	; 0x29
    1996:	f3 01       	movw	r30, r6
    1998:	f3 85       	ldd	r31, Z+11	; 0x0b
    199a:	fa a7       	std	Y+42, r31	; 0x2a
    199c:	d3 01       	movw	r26, r6
    199e:	1c 96       	adiw	r26, 0x0c	; 12
    19a0:	bc 91       	ld	r27, X
    19a2:	bb a7       	std	Y+43, r27	; 0x2b
    19a4:	f3 01       	movw	r30, r6
    19a6:	f5 85       	ldd	r31, Z+13	; 0x0d
    19a8:	fc a7       	std	Y+44, r31	; 0x2c
    19aa:	d3 01       	movw	r26, r6
    19ac:	1e 96       	adiw	r26, 0x0e	; 14
    19ae:	bc 91       	ld	r27, X
    19b0:	bd a7       	std	Y+45, r27	; 0x2d
    19b2:	f3 01       	movw	r30, r6
    19b4:	f7 85       	ldd	r31, Z+15	; 0x0f
    19b6:	fe a7       	std	Y+46, r31	; 0x2e
    19b8:	d3 01       	movw	r26, r6
    19ba:	50 96       	adiw	r26, 0x10	; 16
    19bc:	bc 91       	ld	r27, X
    19be:	bf a7       	std	Y+47, r27	; 0x2f
    19c0:	f3 01       	movw	r30, r6
    19c2:	f1 89       	ldd	r31, Z+17	; 0x11
    19c4:	f8 ab       	std	Y+48, r31	; 0x30
    uint32_t fat_size = fs->header.fat_size;
    19c6:	d3 01       	movw	r26, r6
    19c8:	52 96       	adiw	r26, 0x12	; 18
    19ca:	2d 90       	ld	r2, X+
    19cc:	3d 90       	ld	r3, X+
    19ce:	4d 90       	ld	r4, X+
    19d0:	5c 90       	ld	r5, X
    19d2:	55 97       	sbiw	r26, 0x15	; 21
    19d4:	ad c0       	rjmp	.+346    	; 0x1b30 <fat_get_fs_free+0x1ee>
    while(fat_size > 0)
    {
        uintptr_t length = UINTPTR_MAX - 1;
        if(fat_size < length)
    19d6:	be ef       	ldi	r27, 0xFE	; 254
    19d8:	2b 16       	cp	r2, r27
    19da:	bf ef       	ldi	r27, 0xFF	; 255
    19dc:	3b 06       	cpc	r3, r27
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	4b 06       	cpc	r4, r27
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	5b 06       	cpc	r5, r27
    19e6:	28 f0       	brcs	.+10     	; 0x19f2 <fat_get_fs_free+0xb0>
    19e8:	ee ef       	ldi	r30, 0xFE	; 254
    19ea:	ff ef       	ldi	r31, 0xFF	; 255
    19ec:	f8 a7       	std	Y+40, r31	; 0x28
    19ee:	ef a3       	std	Y+39, r30	; 0x27
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <fat_get_fs_free+0xb4>
            length = fat_size;
    19f2:	38 a6       	std	Y+40, r3	; 0x28
    19f4:	2f a2       	std	Y+39, r2	; 0x27

        if(!fs->partition->device_read_interval(fat_offset,
    19f6:	d3 01       	movw	r26, r6
    19f8:	ed 91       	ld	r30, X+
    19fa:	fc 91       	ld	r31, X
    19fc:	a2 81       	ldd	r26, Z+2	; 0x02
    19fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1a00:	80 85       	ldd	r24, Z+8	; 0x08
    1a02:	86 30       	cpi	r24, 0x06	; 6
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <fat_get_fs_free+0xca>
    1a06:	ee ef       	ldi	r30, 0xFE	; 254
    1a08:	fd e0       	ldi	r31, 0x0D	; 13
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <fat_get_fs_free+0xce>
    1a0c:	e8 ed       	ldi	r30, 0xD8	; 216
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	29 a5       	ldd	r18, Y+41	; 0x29
    1a12:	3a a5       	ldd	r19, Y+42	; 0x2a
    1a14:	4b a5       	ldd	r20, Y+43	; 0x2b
    1a16:	5c a5       	ldd	r21, Y+44	; 0x2c
    1a18:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a1a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a20:	8e 01       	movw	r16, r28
    1a22:	09 5f       	subi	r16, 0xF9	; 249
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	ee 24       	eor	r14, r14
    1a28:	ff 24       	eor	r15, r15
    1a2a:	68 94       	set
    1a2c:	e5 f8       	bld	r14, 5
    1a2e:	cf a0       	ldd	r12, Y+39	; 0x27
    1a30:	d8 a4       	ldd	r13, Y+40	; 0x28
    1a32:	5f 01       	movw	r10, r30
    1a34:	4e 01       	movw	r8, r28
    1a36:	08 94       	sec
    1a38:	81 1c       	adc	r8, r1
    1a3a:	91 1c       	adc	r9, r1
    1a3c:	fd 01       	movw	r30, r26
    1a3e:	09 95       	icall
    1a40:	88 23       	and	r24, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <fat_get_fs_free+0x104>
    1a44:	94 c0       	rjmp	.+296    	; 0x1b6e <fat_get_fs_free+0x22c>
                                                &count_arg
                                               )
          )
            return 0;

        fat_offset += length;
    1a46:	cf a0       	ldd	r12, Y+39	; 0x27
    1a48:	d8 a4       	ldd	r13, Y+40	; 0x28
    1a4a:	56 01       	movw	r10, r12
    1a4c:	cc 24       	eor	r12, r12
    1a4e:	dd 24       	eor	r13, r13
    1a50:	ee 24       	eor	r14, r14
    1a52:	ff 24       	eor	r15, r15
    1a54:	87 01       	movw	r16, r14
    1a56:	f9 a5       	ldd	r31, Y+41	; 0x29
    1a58:	fa 0d       	add	r31, r10
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	b9 a5       	ldd	r27, Y+41	; 0x29
    1a5e:	fb 17       	cp	r31, r27
    1a60:	08 f0       	brcs	.+2      	; 0x1a64 <fat_get_fs_free+0x122>
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a66:	8b 0d       	add	r24, r11
    1a68:	21 e0       	ldi	r18, 0x01	; 1
    1a6a:	ea a5       	ldd	r30, Y+42	; 0x2a
    1a6c:	8e 17       	cp	r24, r30
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <fat_get_fs_free+0x130>
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	39 2f       	mov	r19, r25
    1a74:	38 0f       	add	r19, r24
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	38 17       	cp	r19, r24
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <fat_get_fs_free+0x13c>
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	29 2b       	or	r18, r25
    1a80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a82:	8c 0d       	add	r24, r12
    1a84:	51 e0       	ldi	r21, 0x01	; 1
    1a86:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a88:	89 17       	cp	r24, r25
    1a8a:	08 f0       	brcs	.+2      	; 0x1a8e <fat_get_fs_free+0x14c>
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	42 2f       	mov	r20, r18
    1a90:	48 0f       	add	r20, r24
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	48 17       	cp	r20, r24
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <fat_get_fs_free+0x158>
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	59 2b       	or	r21, r25
    1a9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a9e:	8d 0d       	add	r24, r13
    1aa0:	21 e0       	ldi	r18, 0x01	; 1
    1aa2:	ac a5       	ldd	r26, Y+44	; 0x2c
    1aa4:	8a 17       	cp	r24, r26
    1aa6:	08 f0       	brcs	.+2      	; 0x1aaa <fat_get_fs_free+0x168>
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	58 0f       	add	r21, r24
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	58 17       	cp	r21, r24
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <fat_get_fs_free+0x172>
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	29 2b       	or	r18, r25
    1ab6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab8:	8e 0d       	add	r24, r14
    1aba:	71 e0       	ldi	r23, 0x01	; 1
    1abc:	bd a5       	ldd	r27, Y+45	; 0x2d
    1abe:	8b 17       	cp	r24, r27
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <fat_get_fs_free+0x182>
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	62 2f       	mov	r22, r18
    1ac6:	68 0f       	add	r22, r24
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	68 17       	cp	r22, r24
    1acc:	08 f0       	brcs	.+2      	; 0x1ad0 <fat_get_fs_free+0x18e>
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	79 2b       	or	r23, r25
    1ad2:	8e a5       	ldd	r24, Y+46	; 0x2e
    1ad4:	8f 0d       	add	r24, r15
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	ee a5       	ldd	r30, Y+46	; 0x2e
    1ada:	8e 17       	cp	r24, r30
    1adc:	08 f0       	brcs	.+2      	; 0x1ae0 <fat_get_fs_free+0x19e>
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	78 0f       	add	r23, r24
    1ae2:	91 e0       	ldi	r25, 0x01	; 1
    1ae4:	78 17       	cp	r23, r24
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <fat_get_fs_free+0x1a8>
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	29 2b       	or	r18, r25
    1aec:	9f a5       	ldd	r25, Y+47	; 0x2f
    1aee:	90 0f       	add	r25, r16
    1af0:	e1 e0       	ldi	r30, 0x01	; 1
    1af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af4:	98 17       	cp	r25, r24
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <fat_get_fs_free+0x1b8>
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	82 2f       	mov	r24, r18
    1afc:	89 0f       	add	r24, r25
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	89 17       	cp	r24, r25
    1b02:	08 f0       	brcs	.+2      	; 0x1b06 <fat_get_fs_free+0x1c4>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	e2 2b       	or	r30, r18
    1b08:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0a:	91 0f       	add	r25, r17
    1b0c:	f9 a7       	std	Y+41, r31	; 0x29
    1b0e:	3a a7       	std	Y+42, r19	; 0x2a
    1b10:	4b a7       	std	Y+43, r20	; 0x2b
    1b12:	5c a7       	std	Y+44, r21	; 0x2c
    1b14:	6d a7       	std	Y+45, r22	; 0x2d
    1b16:	7e a7       	std	Y+46, r23	; 0x2e
    1b18:	8f a7       	std	Y+47, r24	; 0x2f
    1b1a:	9e 0f       	add	r25, r30
    1b1c:	98 ab       	std	Y+48, r25	; 0x30
        fat_size -= length;
    1b1e:	ef a1       	ldd	r30, Y+39	; 0x27
    1b20:	f8 a5       	ldd	r31, Y+40	; 0x28
    1b22:	cf 01       	movw	r24, r30
    1b24:	a0 e0       	ldi	r26, 0x00	; 0
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	28 1a       	sub	r2, r24
    1b2a:	39 0a       	sbc	r3, r25
    1b2c:	4a 0a       	sbc	r4, r26
    1b2e:	5b 0a       	sbc	r5, r27
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    offset_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    1b30:	21 14       	cp	r2, r1
    1b32:	31 04       	cpc	r3, r1
    1b34:	41 04       	cpc	r4, r1
    1b36:	51 04       	cpc	r5, r1
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <fat_get_fs_free+0x1fa>
    1b3a:	4d cf       	rjmp	.-358    	; 0x19d6 <fat_get_fs_free+0x94>

        fat_offset += length;
        fat_size -= length;
    }

    return (offset_t) count_arg.cluster_count * fs->header.cluster_size;
    1b3c:	d3 01       	movw	r26, r6
    1b3e:	58 96       	adiw	r26, 0x18	; 24
    1b40:	4d 91       	ld	r20, X+
    1b42:	5c 91       	ld	r21, X
    1b44:	59 97       	sbiw	r26, 0x19	; 25
    1b46:	29 80       	ldd	r2, Y+1	; 0x01
    1b48:	3a 80       	ldd	r3, Y+2	; 0x02
    1b4a:	4b 80       	ldd	r4, Y+3	; 0x03
    1b4c:	5c 80       	ldd	r5, Y+4	; 0x04
    1b4e:	9a 01       	movw	r18, r20
    1b50:	40 e0       	ldi	r20, 0x00	; 0
    1b52:	50 e0       	ldi	r21, 0x00	; 0
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	51 01       	movw	r10, r2
    1b5e:	62 01       	movw	r12, r4
    1b60:	ee 24       	eor	r14, r14
    1b62:	ff 24       	eor	r15, r15
    1b64:	00 e0       	ldi	r16, 0x00	; 0
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <fat_get_fs_free+0x23c>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
}
    1b7e:	e0 96       	adiw	r28, 0x30	; 48
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	df 90       	pop	r13
    1b98:	cf 90       	pop	r12
    1b9a:	bf 90       	pop	r11
    1b9c:	af 90       	pop	r10
    1b9e:	9f 90       	pop	r9
    1ba0:	8f 90       	pop	r8
    1ba2:	7f 90       	pop	r7
    1ba4:	6f 90       	pop	r6
    1ba6:	5f 90       	pop	r5
    1ba8:	4f 90       	pop	r4
    1baa:	3f 90       	pop	r3
    1bac:	2f 90       	pop	r2
    1bae:	08 95       	ret

00001bb0 <fat_get_fs_free_16_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT.
 */
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    1bba:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    1bbc:	44 81       	ldd	r20, Z+4	; 0x04
    1bbe:	55 81       	ldd	r21, Z+5	; 0x05
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	12 c0       	rjmp	.+36     	; 0x1bea <fat_get_fs_free_16_callback+0x3a>

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    {
        uint16_t cluster = read16(buffer);
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
    1bc6:	88 81       	ld	r24, Y
    1bc8:	99 81       	ldd	r25, Y+1	; 0x01
    1bca:	89 2b       	or	r24, r25
    1bcc:	59 f4       	brne	.+22     	; 0x1be4 <fat_get_fs_free_16_callback+0x34>
            ++(count_arg->cluster_count);
    1bce:	80 81       	ld	r24, Z
    1bd0:	91 81       	ldd	r25, Z+1	; 0x01
    1bd2:	a2 81       	ldd	r26, Z+2	; 0x02
    1bd4:	b3 81       	ldd	r27, Z+3	; 0x03
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	a1 1d       	adc	r26, r1
    1bda:	b1 1d       	adc	r27, r1
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_16_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 2, buffer += 2)
    1be4:	2e 5f       	subi	r18, 0xFE	; 254
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	22 96       	adiw	r28, 0x02	; 2
    1bea:	24 17       	cp	r18, r20
    1bec:	35 07       	cpc	r19, r21
    1bee:	58 f3       	brcs	.-42     	; 0x1bc6 <fat_get_fs_free_16_callback+0x16>
        if(cluster == HTOL16(FAT16_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	08 95       	ret

00001bfc <fat_get_fs_free_32_callback>:
/**
 * \ingroup fat_fs
 * Callback function used for counting free clusters in a FAT32.
 */
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    1c06:	f7 01       	movw	r30, r14
    uintptr_t buffer_size = count_arg->buffer_size;
    1c08:	44 81       	ldd	r20, Z+4	; 0x04
    1c0a:	55 81       	ldd	r21, Z+5	; 0x05
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	16 c0       	rjmp	.+44     	; 0x1c3e <fat_get_fs_free_32_callback+0x42>

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    {
        uint32_t cluster = read32(buffer);
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
    1c12:	88 81       	ld	r24, Y
    1c14:	99 81       	ldd	r25, Y+1	; 0x01
    1c16:	aa 81       	ldd	r26, Y+2	; 0x02
    1c18:	bb 81       	ldd	r27, Y+3	; 0x03
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	a1 05       	cpc	r26, r1
    1c1e:	b1 05       	cpc	r27, r1
    1c20:	59 f4       	brne	.+22     	; 0x1c38 <fat_get_fs_free_32_callback+0x3c>
            ++(count_arg->cluster_count);
    1c22:	80 81       	ld	r24, Z
    1c24:	91 81       	ldd	r25, Z+1	; 0x01
    1c26:	a2 81       	ldd	r26, Z+2	; 0x02
    1c28:	b3 81       	ldd	r27, Z+3	; 0x03
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	a1 1d       	adc	r26, r1
    1c2e:	b1 1d       	adc	r27, r1
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
uint8_t fat_get_fs_free_32_callback(uint8_t* buffer, offset_t offset, void* p)
{
    struct fat_usage_count_callback_arg* count_arg = (struct fat_usage_count_callback_arg*) p;
    uintptr_t buffer_size = count_arg->buffer_size;

    for(uintptr_t i = 0; i < buffer_size; i += 4, buffer += 4)
    1c38:	2c 5f       	subi	r18, 0xFC	; 252
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	24 96       	adiw	r28, 0x04	; 4
    1c3e:	24 17       	cp	r18, r20
    1c40:	35 07       	cpc	r19, r21
    1c42:	38 f3       	brcs	.-50     	; 0x1c12 <fat_get_fs_free_32_callback+0x16>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	08 95       	ret

00001c50 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    1c50:	2f 92       	push	r2
    1c52:	3f 92       	push	r3
    1c54:	4f 92       	push	r4
    1c56:	5f 92       	push	r5
    1c58:	6f 92       	push	r6
    1c5a:	7f 92       	push	r7
    1c5c:	8f 92       	push	r8
    1c5e:	9f 92       	push	r9
    1c60:	af 92       	push	r10
    1c62:	bf 92       	push	r11
    1c64:	cf 92       	push	r12
    1c66:	df 92       	push	r13
    1c68:	ef 92       	push	r14
    1c6a:	ff 92       	push	r15
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
    1c78:	62 97       	sbiw	r28, 0x12	; 18
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	9a 8b       	std	Y+18, r25	; 0x12
    1c86:	89 8b       	std	Y+17, r24	; 0x11
    if(cluster_num < 2)
    1c88:	42 30       	cpi	r20, 0x02	; 2
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	61 05       	cpc	r22, r1
    1c8e:	71 05       	cpc	r23, r1
    1c90:	10 f4       	brcc	.+4      	; 0x1c96 <fat_clear_cluster+0x46>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	a2 c0       	rjmp	.+324    	; 0x1dda <fat_clear_cluster+0x18a>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    1c96:	89 89       	ldd	r24, Y+17	; 0x11
    1c98:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9a:	89 2b       	or	r24, r25
    1c9c:	49 f4       	brne	.+18     	; 0x1cb0 <fat_clear_cluster+0x60>
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	7b c0       	rjmp	.+246    	; 0x1da6 <fat_clear_cluster+0x156>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    1cb0:	42 50       	subi	r20, 0x02	; 2
    1cb2:	50 40       	sbci	r21, 0x00	; 0
    1cb4:	60 40       	sbci	r22, 0x00	; 0
    1cb6:	70 40       	sbci	r23, 0x00	; 0
    1cb8:	5a 01       	movw	r10, r20
    1cba:	6b 01       	movw	r12, r22
    1cbc:	e9 89       	ldd	r30, Y+17	; 0x11
    1cbe:	fa 89       	ldd	r31, Y+18	; 0x12
    1cc0:	20 8c       	ldd	r2, Z+24	; 0x18
    1cc2:	31 8c       	ldd	r3, Z+25	; 0x19
    1cc4:	9a 01       	movw	r18, r20
    1cc6:	a6 01       	movw	r20, r12
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	51 01       	movw	r10, r2
    1cd2:	cc 24       	eor	r12, r12
    1cd4:	dd 24       	eor	r13, r13
    1cd6:	ee 24       	eor	r14, r14
    1cd8:	ff 24       	eor	r15, r15
    1cda:	00 e0       	ldi	r16, 0x00	; 0
    1cdc:	10 e0       	ldi	r17, 0x00	; 0
    1cde:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    1ce2:	c9 2e       	mov	r12, r25
    1ce4:	e9 89       	ldd	r30, Y+17	; 0x11
    1ce6:	fa 89       	ldd	r31, Y+18	; 0x12
    1ce8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1cea:	b3 8c       	ldd	r11, Z+27	; 0x1b
    1cec:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1cee:	15 8d       	ldd	r17, Z+29	; 0x1d
    1cf0:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1cf2:	e7 8c       	ldd	r14, Z+31	; 0x1f
    1cf4:	d0 a0       	ldd	r13, Z+32	; 0x20
    1cf6:	01 a1       	ldd	r16, Z+33	; 0x21
    1cf8:	b2 0f       	add	r27, r18
    1cfa:	e1 e0       	ldi	r30, 0x01	; 1
    1cfc:	b2 17       	cp	r27, r18
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <fat_clear_cluster+0xb2>
    1d00:	e0 e0       	ldi	r30, 0x00	; 0
    1d02:	23 2f       	mov	r18, r19
    1d04:	2b 0d       	add	r18, r11
    1d06:	f1 e0       	ldi	r31, 0x01	; 1
    1d08:	23 17       	cp	r18, r19
    1d0a:	08 f0       	brcs	.+2      	; 0x1d0e <fat_clear_cluster+0xbe>
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	3e 2f       	mov	r19, r30
    1d10:	32 0f       	add	r19, r18
    1d12:	e1 e0       	ldi	r30, 0x01	; 1
    1d14:	32 17       	cp	r19, r18
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <fat_clear_cluster+0xca>
    1d18:	e0 e0       	ldi	r30, 0x00	; 0
    1d1a:	fe 2b       	or	r31, r30
    1d1c:	24 2f       	mov	r18, r20
    1d1e:	2a 0f       	add	r18, r26
    1d20:	a1 e0       	ldi	r26, 0x01	; 1
    1d22:	24 17       	cp	r18, r20
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <fat_clear_cluster+0xd8>
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	4f 2f       	mov	r20, r31
    1d2a:	42 0f       	add	r20, r18
    1d2c:	e1 e0       	ldi	r30, 0x01	; 1
    1d2e:	42 17       	cp	r20, r18
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <fat_clear_cluster+0xe4>
    1d32:	e0 e0       	ldi	r30, 0x00	; 0
    1d34:	ae 2b       	or	r26, r30
    1d36:	25 2f       	mov	r18, r21
    1d38:	21 0f       	add	r18, r17
    1d3a:	f1 e0       	ldi	r31, 0x01	; 1
    1d3c:	25 17       	cp	r18, r21
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <fat_clear_cluster+0xf2>
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	5a 2f       	mov	r21, r26
    1d44:	52 0f       	add	r21, r18
    1d46:	e1 e0       	ldi	r30, 0x01	; 1
    1d48:	52 17       	cp	r21, r18
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <fat_clear_cluster+0xfe>
    1d4c:	e0 e0       	ldi	r30, 0x00	; 0
    1d4e:	fe 2b       	or	r31, r30
    1d50:	26 2f       	mov	r18, r22
    1d52:	2f 0d       	add	r18, r15
    1d54:	a1 e0       	ldi	r26, 0x01	; 1
    1d56:	26 17       	cp	r18, r22
    1d58:	08 f0       	brcs	.+2      	; 0x1d5c <fat_clear_cluster+0x10c>
    1d5a:	a0 e0       	ldi	r26, 0x00	; 0
    1d5c:	6f 2f       	mov	r22, r31
    1d5e:	62 0f       	add	r22, r18
    1d60:	e1 e0       	ldi	r30, 0x01	; 1
    1d62:	62 17       	cp	r22, r18
    1d64:	08 f0       	brcs	.+2      	; 0x1d68 <fat_clear_cluster+0x118>
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	ae 2b       	or	r26, r30
    1d6a:	27 2f       	mov	r18, r23
    1d6c:	2e 0d       	add	r18, r14
    1d6e:	f1 e0       	ldi	r31, 0x01	; 1
    1d70:	27 17       	cp	r18, r23
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <fat_clear_cluster+0x126>
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	7a 2f       	mov	r23, r26
    1d78:	72 0f       	add	r23, r18
    1d7a:	e1 e0       	ldi	r30, 0x01	; 1
    1d7c:	72 17       	cp	r23, r18
    1d7e:	08 f0       	brcs	.+2      	; 0x1d82 <fat_clear_cluster+0x132>
    1d80:	e0 e0       	ldi	r30, 0x00	; 0
    1d82:	fe 2b       	or	r31, r30
    1d84:	28 2f       	mov	r18, r24
    1d86:	2d 0d       	add	r18, r13
    1d88:	e1 e0       	ldi	r30, 0x01	; 1
    1d8a:	28 17       	cp	r18, r24
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <fat_clear_cluster+0x140>
    1d8e:	e0 e0       	ldi	r30, 0x00	; 0
    1d90:	8f 2f       	mov	r24, r31
    1d92:	82 0f       	add	r24, r18
    1d94:	91 e0       	ldi	r25, 0x01	; 1
    1d96:	82 17       	cp	r24, r18
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <fat_clear_cluster+0x14c>
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9e 2b       	or	r25, r30
    1d9e:	0c 0d       	add	r16, r12
    1da0:	2b 2f       	mov	r18, r27
    1da2:	18 2f       	mov	r17, r24
    1da4:	90 0f       	add	r25, r16
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    1da6:	de 01       	movw	r26, r28
    1da8:	11 96       	adiw	r26, 0x01	; 1
    1daa:	80 e1       	ldi	r24, 0x10	; 16
    1dac:	fd 01       	movw	r30, r26
    1dae:	11 92       	st	Z+, r1
    1db0:	8a 95       	dec	r24
    1db2:	e9 f7       	brne	.-6      	; 0x1dae <fat_clear_cluster+0x15e>
    return fs->partition->device_write_interval(cluster_offset,
    1db4:	e9 89       	ldd	r30, Y+17	; 0x11
    1db6:	fa 89       	ldd	r31, Y+18	; 0x12
    1db8:	c0 80       	ld	r12, Z
    1dba:	d1 80       	ldd	r13, Z+1	; 0x01
    1dbc:	e0 8c       	ldd	r14, Z+24	; 0x18
    1dbe:	f1 8c       	ldd	r15, Z+25	; 0x19
    1dc0:	f6 01       	movw	r30, r12
    1dc2:	86 80       	ldd	r8, Z+6	; 0x06
    1dc4:	97 80       	ldd	r9, Z+7	; 0x07
    1dc6:	81 2f       	mov	r24, r17
    1dc8:	8d 01       	movw	r16, r26
    1dca:	ef ee       	ldi	r30, 0xEF	; 239
    1dcc:	ce 2e       	mov	r12, r30
    1dce:	e7 e0       	ldi	r30, 0x07	; 7
    1dd0:	de 2e       	mov	r13, r30
    1dd2:	aa 24       	eor	r10, r10
    1dd4:	bb 24       	eor	r11, r11
    1dd6:	f4 01       	movw	r30, r8
    1dd8:	09 95       	icall
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    1dda:	62 96       	adiw	r28, 0x12	; 18
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	cf 91       	pop	r28
    1de8:	df 91       	pop	r29
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	df 90       	pop	r13
    1df4:	cf 90       	pop	r12
    1df6:	bf 90       	pop	r11
    1df8:	af 90       	pop	r10
    1dfa:	9f 90       	pop	r9
    1dfc:	8f 90       	pop	r8
    1dfe:	7f 90       	pop	r7
    1e00:	6f 90       	pop	r6
    1e02:	5f 90       	pop	r5
    1e04:	4f 90       	pop	r4
    1e06:	3f 90       	pop	r3
    1e08:	2f 90       	pop	r2
    1e0a:	08 95       	ret

00001e0c <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    1e0c:	2f 92       	push	r2
    1e0e:	3f 92       	push	r3
    1e10:	4f 92       	push	r4
    1e12:	5f 92       	push	r5
    1e14:	6f 92       	push	r6
    1e16:	7f 92       	push	r7
    1e18:	8f 92       	push	r8
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	c2 54       	subi	r28, 0x42	; 66
    1e36:	d0 40       	sbci	r29, 0x00	; 0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
    1e42:	9a af       	std	Y+58, r25	; 0x3a
    1e44:	89 af       	std	Y+57, r24	; 0x39
    1e46:	db 01       	movw	r26, r22
    if(!dd || !dir_entry)
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <fat_read_dir+0x42>
    1e4c:	63 c2       	rjmp	.+1222   	; 0x2314 <fat_read_dir+0x508>
    1e4e:	61 15       	cp	r22, r1
    1e50:	71 05       	cpc	r23, r1
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <fat_read_dir+0x4a>
    1e54:	5f c2       	rjmp	.+1214   	; 0x2314 <fat_read_dir+0x508>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    1e56:	fc 01       	movw	r30, r24
    1e58:	01 90       	ld	r0, Z+
    1e5a:	f0 81       	ld	r31, Z
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	f8 af       	std	Y+56, r31	; 0x38
    1e60:	ef ab       	std	Y+55, r30	; 0x37
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    1e62:	20 8d       	ldd	r18, Z+24	; 0x18
    1e64:	31 8d       	ldd	r19, Z+25	; 0x19
    1e66:	3e ab       	std	Y+54, r19	; 0x36
    1e68:	2d ab       	std	Y+53, r18	; 0x35
    cluster_t cluster_num = dd->entry_cluster;
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	43 a9       	ldd	r20, Z+51	; 0x33
    1e6e:	54 a9       	ldd	r21, Z+52	; 0x34
    1e70:	65 a9       	ldd	r22, Z+53	; 0x35
    1e72:	76 a9       	ldd	r23, Z+54	; 0x36
    1e74:	49 ab       	std	Y+49, r20	; 0x31
    1e76:	5a ab       	std	Y+50, r21	; 0x32
    1e78:	6b ab       	std	Y+51, r22	; 0x33
    1e7a:	7c ab       	std	Y+52, r23	; 0x34
    uint16_t cluster_offset = dd->entry_offset;
    1e7c:	27 a9       	ldd	r18, Z+55	; 0x37
    1e7e:	30 ad       	ldd	r19, Z+56	; 0x38
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    1e80:	4d a9       	ldd	r20, Y+53	; 0x35
    1e82:	5e a9       	ldd	r21, Y+54	; 0x36
    1e84:	24 17       	cp	r18, r20
    1e86:	35 07       	cpc	r19, r21
    1e88:	08 f0       	brcs	.+2      	; 0x1e8c <fat_read_dir+0x80>
    1e8a:	f2 c1       	rjmp	.+996    	; 0x2270 <fat_read_dir+0x464>
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    1e8c:	ae 01       	movw	r20, r28
    1e8e:	4f 5f       	subi	r20, 0xFF	; 255
    1e90:	5f 4f       	sbci	r21, 0xFF	; 255
    1e92:	86 e0       	ldi	r24, 0x06	; 6
    1e94:	fa 01       	movw	r30, r20
    1e96:	11 92       	st	Z+, r1
    1e98:	8a 95       	dec	r24
    1e9a:	e9 f7       	brne	.-6      	; 0x1e96 <fat_read_dir+0x8a>
    memset(dir_entry, 0, sizeof(*dir_entry));
    1e9c:	81 e3       	ldi	r24, 0x31	; 49
    1e9e:	fd 01       	movw	r30, r26
    1ea0:	11 92       	st	Z+, r1
    1ea2:	8a 95       	dec	r24
    1ea4:	e9 f7       	brne	.-6      	; 0x1ea0 <fat_read_dir+0x94>
    arg.dir_entry = dir_entry;

    /* check if we read from the root directory */
    if(cluster_num == 0)
    1ea6:	49 a9       	ldd	r20, Y+49	; 0x31
    1ea8:	5a a9       	ldd	r21, Y+50	; 0x32
    1eaa:	6b a9       	ldd	r22, Y+51	; 0x33
    1eac:	7c a9       	ldd	r23, Y+52	; 0x34
    1eae:	41 15       	cp	r20, r1
    1eb0:	51 05       	cpc	r21, r1
    1eb2:	61 05       	cpc	r22, r1
    1eb4:	71 05       	cpc	r23, r1
    1eb6:	09 f0       	breq	.+2      	; 0x1eba <fat_read_dir+0xae>
    1eb8:	e6 c1       	rjmp	.+972    	; 0x2286 <fat_read_dir+0x47a>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    1eba:	ef a9       	ldd	r30, Y+55	; 0x37
    1ebc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ebe:	80 81       	ld	r24, Z
    1ec0:	91 81       	ldd	r25, Z+1	; 0x01
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	80 85       	ldd	r24, Z+8	; 0x08
    1ec6:	8b 30       	cpi	r24, 0x0B	; 11
    1ec8:	59 f4       	brne	.+22     	; 0x1ee0 <fat_read_dir+0xd4>
            cluster_num = header->root_dir_cluster;
    1eca:	ef a9       	ldd	r30, Y+55	; 0x37
    1ecc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ece:	42 a5       	ldd	r20, Z+42	; 0x2a
    1ed0:	53 a5       	ldd	r21, Z+43	; 0x2b
    1ed2:	64 a5       	ldd	r22, Z+44	; 0x2c
    1ed4:	75 a5       	ldd	r23, Z+45	; 0x2d
    1ed6:	49 ab       	std	Y+49, r20	; 0x31
    1ed8:	5a ab       	std	Y+50, r21	; 0x32
    1eda:	6b ab       	std	Y+51, r22	; 0x33
    1edc:	7c ab       	std	Y+52, r23	; 0x34
    1ede:	d3 c1       	rjmp	.+934    	; 0x2286 <fat_read_dir+0x47a>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    1ee0:	ef a9       	ldd	r30, Y+55	; 0x37
    1ee2:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ee4:	02 8c       	ldd	r0, Z+26	; 0x1a
    1ee6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1ee8:	e0 2d       	mov	r30, r0
    1eea:	fe ab       	std	Y+54, r31	; 0x36
    1eec:	ed ab       	std	Y+53, r30	; 0x35
    1eee:	ef a9       	ldd	r30, Y+55	; 0x37
    1ef0:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ef2:	82 a1       	ldd	r24, Z+34	; 0x22
    1ef4:	93 a1       	ldd	r25, Z+35	; 0x23
    1ef6:	4d a9       	ldd	r20, Y+53	; 0x35
    1ef8:	5e a9       	ldd	r21, Y+54	; 0x36
    1efa:	48 1b       	sub	r20, r24
    1efc:	59 0b       	sbc	r21, r25
    1efe:	5e ab       	std	Y+54, r21	; 0x36
    1f00:	4d ab       	std	Y+53, r20	; 0x35
    1f02:	c1 c1       	rjmp	.+898    	; 0x2286 <fat_read_dir+0x47a>
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
    1f04:	4f a5       	ldd	r20, Y+47	; 0x2f
    1f06:	58 a9       	ldd	r21, Y+48	; 0x30
    1f08:	9a 01       	movw	r18, r20
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	2f a3       	std	Y+39, r18	; 0x27
    1f18:	38 a7       	std	Y+40, r19	; 0x28
    1f1a:	49 a7       	std	Y+41, r20	; 0x29
    1f1c:	5a a7       	std	Y+42, r21	; 0x2a
    1f1e:	6b a7       	std	Y+43, r22	; 0x2b
    1f20:	7c a7       	std	Y+44, r23	; 0x2c
    1f22:	8d a7       	std	Y+45, r24	; 0x2d
    1f24:	9e a7       	std	Y+46, r25	; 0x2e
        if(cluster_num == 0)
    1f26:	69 a9       	ldd	r22, Y+49	; 0x31
    1f28:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2e:	61 15       	cp	r22, r1
    1f30:	71 05       	cpc	r23, r1
    1f32:	81 05       	cpc	r24, r1
    1f34:	91 05       	cpc	r25, r1
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <fat_read_dir+0x12e>
    1f38:	72 c0       	rjmp	.+228    	; 0x201e <fat_read_dir+0x212>
            pos += header->root_dir_offset;
    1f3a:	af a9       	ldd	r26, Y+55	; 0x37
    1f3c:	b8 ad       	ldd	r27, Y+56	; 0x38
    1f3e:	92 96       	adiw	r26, 0x22	; 34
    1f40:	2c 91       	ld	r18, X
    1f42:	92 97       	sbiw	r26, 0x22	; 34
    1f44:	93 96       	adiw	r26, 0x23	; 35
    1f46:	8c 91       	ld	r24, X
    1f48:	93 97       	sbiw	r26, 0x23	; 35
    1f4a:	94 96       	adiw	r26, 0x24	; 36
    1f4c:	5c 91       	ld	r21, X
    1f4e:	94 97       	sbiw	r26, 0x24	; 36
    1f50:	95 96       	adiw	r26, 0x25	; 37
    1f52:	6c 91       	ld	r22, X
    1f54:	95 97       	sbiw	r26, 0x25	; 37
    1f56:	96 96       	adiw	r26, 0x26	; 38
    1f58:	7c 91       	ld	r23, X
    1f5a:	96 97       	sbiw	r26, 0x26	; 38
    1f5c:	97 96       	adiw	r26, 0x27	; 39
    1f5e:	1c 91       	ld	r17, X
    1f60:	97 97       	sbiw	r26, 0x27	; 39
    1f62:	98 96       	adiw	r26, 0x28	; 40
    1f64:	ac 91       	ld	r26, X
    1f66:	ef a9       	ldd	r30, Y+55	; 0x37
    1f68:	f8 ad       	ldd	r31, Y+56	; 0x38
    1f6a:	b1 a5       	ldd	r27, Z+41	; 0x29
    1f6c:	ff a1       	ldd	r31, Y+39	; 0x27
    1f6e:	2f 0f       	add	r18, r31
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	2f 17       	cp	r18, r31
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <fat_read_dir+0x16c>
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	48 a5       	ldd	r20, Y+40	; 0x28
    1f7a:	84 0f       	add	r24, r20
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	e8 a5       	ldd	r30, Y+40	; 0x28
    1f80:	8e 17       	cp	r24, r30
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <fat_read_dir+0x17a>
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	39 2f       	mov	r19, r25
    1f88:	38 0f       	add	r19, r24
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	38 17       	cp	r19, r24
    1f8e:	08 f0       	brcs	.+2      	; 0x1f92 <fat_read_dir+0x186>
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	49 2b       	or	r20, r25
    1f94:	89 a5       	ldd	r24, Y+41	; 0x29
    1f96:	85 0f       	add	r24, r21
    1f98:	51 e0       	ldi	r21, 0x01	; 1
    1f9a:	f9 a5       	ldd	r31, Y+41	; 0x29
    1f9c:	8f 17       	cp	r24, r31
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <fat_read_dir+0x196>
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	48 0f       	add	r20, r24
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	48 17       	cp	r20, r24
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <fat_read_dir+0x1a0>
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	59 2b       	or	r21, r25
    1fae:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fb0:	86 0f       	add	r24, r22
    1fb2:	61 e0       	ldi	r22, 0x01	; 1
    1fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb6:	89 17       	cp	r24, r25
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <fat_read_dir+0x1b0>
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	58 0f       	add	r21, r24
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	58 17       	cp	r21, r24
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <fat_read_dir+0x1ba>
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	69 2b       	or	r22, r25
    1fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fca:	87 0f       	add	r24, r23
    1fcc:	71 e0       	ldi	r23, 0x01	; 1
    1fce:	eb a5       	ldd	r30, Y+43	; 0x2b
    1fd0:	8e 17       	cp	r24, r30
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <fat_read_dir+0x1ca>
    1fd4:	70 e0       	ldi	r23, 0x00	; 0
    1fd6:	68 0f       	add	r22, r24
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	68 17       	cp	r22, r24
    1fdc:	08 f0       	brcs	.+2      	; 0x1fe0 <fat_read_dir+0x1d4>
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	79 2b       	or	r23, r25
    1fe2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fe4:	81 0f       	add	r24, r17
    1fe6:	f1 e0       	ldi	r31, 0x01	; 1
    1fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fea:	89 17       	cp	r24, r25
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <fat_read_dir+0x1e4>
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	78 0f       	add	r23, r24
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	78 17       	cp	r23, r24
    1ff6:	08 f0       	brcs	.+2      	; 0x1ffa <fat_read_dir+0x1ee>
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	f9 2b       	or	r31, r25
    1ffc:	ed a5       	ldd	r30, Y+45	; 0x2d
    1ffe:	ea 0f       	add	r30, r26
    2000:	a1 e0       	ldi	r26, 0x01	; 1
    2002:	8d a5       	ldd	r24, Y+45	; 0x2d
    2004:	e8 17       	cp	r30, r24
    2006:	08 f0       	brcs	.+2      	; 0x200a <fat_read_dir+0x1fe>
    2008:	a0 e0       	ldi	r26, 0x00	; 0
    200a:	8f 2f       	mov	r24, r31
    200c:	8e 0f       	add	r24, r30
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	8e 17       	cp	r24, r30
    2012:	08 f0       	brcs	.+2      	; 0x2016 <fat_read_dir+0x20a>
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9a 2b       	or	r25, r26
    2018:	ae a5       	ldd	r26, Y+46	; 0x2e
    201a:	ba 0f       	add	r27, r26
    201c:	e0 c0       	rjmp	.+448    	; 0x21de <fat_read_dir+0x3d2>
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    201e:	ef a9       	ldd	r30, Y+55	; 0x37
    2020:	f8 ad       	ldd	r31, Y+56	; 0x38
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	09 f4       	brne	.+2      	; 0x2028 <fat_read_dir+0x21c>
    2026:	81 c0       	rjmp	.+258    	; 0x212a <fat_read_dir+0x31e>
    2028:	29 a9       	ldd	r18, Y+49	; 0x31
    202a:	3a a9       	ldd	r19, Y+50	; 0x32
    202c:	4b a9       	ldd	r20, Y+51	; 0x33
    202e:	5c a9       	ldd	r21, Y+52	; 0x34
    2030:	22 30       	cpi	r18, 0x02	; 2
    2032:	31 05       	cpc	r19, r1
    2034:	41 05       	cpc	r20, r1
    2036:	51 05       	cpc	r21, r1
    2038:	08 f4       	brcc	.+2      	; 0x203c <fat_read_dir+0x230>
    203a:	77 c0       	rjmp	.+238    	; 0x212a <fat_read_dir+0x31e>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    203c:	20 8c       	ldd	r2, Z+24	; 0x18
    203e:	31 8c       	ldd	r3, Z+25	; 0x19
    2040:	2b ad       	ldd	r18, Y+59	; 0x3b
    2042:	3c ad       	ldd	r19, Y+60	; 0x3c
    2044:	4d ad       	ldd	r20, Y+61	; 0x3d
    2046:	5e ad       	ldd	r21, Y+62	; 0x3e
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	70 e0       	ldi	r23, 0x00	; 0
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	51 01       	movw	r10, r2
    2052:	cc 24       	eor	r12, r12
    2054:	dd 24       	eor	r13, r13
    2056:	ee 24       	eor	r14, r14
    2058:	ff 24       	eor	r15, r15
    205a:	00 e0       	ldi	r16, 0x00	; 0
    205c:	10 e0       	ldi	r17, 0x00	; 0
    205e:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2062:	ef a9       	ldd	r30, Y+55	; 0x37
    2064:	f8 ad       	ldd	r31, Y+56	; 0x38
    2066:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2068:	f3 8c       	ldd	r15, Z+27	; 0x1b
    206a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    206c:	15 8d       	ldd	r17, Z+29	; 0x1d
    206e:	d6 8c       	ldd	r13, Z+30	; 0x1e
    2070:	c7 8c       	ldd	r12, Z+31	; 0x1f
    2072:	b0 a0       	ldd	r11, Z+32	; 0x20
    2074:	01 a1       	ldd	r16, Z+33	; 0x21
    2076:	a2 0f       	add	r26, r18
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	a2 17       	cp	r26, r18
    207c:	08 f0       	brcs	.+2      	; 0x2080 <fat_read_dir+0x274>
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	23 2f       	mov	r18, r19
    2082:	2f 0d       	add	r18, r15
    2084:	e1 e0       	ldi	r30, 0x01	; 1
    2086:	23 17       	cp	r18, r19
    2088:	08 f0       	brcs	.+2      	; 0x208c <fat_read_dir+0x280>
    208a:	e0 e0       	ldi	r30, 0x00	; 0
    208c:	ef 2e       	mov	r14, r31
    208e:	e2 0e       	add	r14, r18
    2090:	31 e0       	ldi	r19, 0x01	; 1
    2092:	e2 16       	cp	r14, r18
    2094:	08 f0       	brcs	.+2      	; 0x2098 <fat_read_dir+0x28c>
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	e3 2b       	or	r30, r19
    209a:	24 2f       	mov	r18, r20
    209c:	2b 0f       	add	r18, r27
    209e:	f1 e0       	ldi	r31, 0x01	; 1
    20a0:	24 17       	cp	r18, r20
    20a2:	08 f0       	brcs	.+2      	; 0x20a6 <fat_read_dir+0x29a>
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	fe 2e       	mov	r15, r30
    20a8:	f2 0e       	add	r15, r18
    20aa:	31 e0       	ldi	r19, 0x01	; 1
    20ac:	f2 16       	cp	r15, r18
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <fat_read_dir+0x2a6>
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	f3 2b       	or	r31, r19
    20b4:	25 2f       	mov	r18, r21
    20b6:	21 0f       	add	r18, r17
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	25 17       	cp	r18, r21
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <fat_read_dir+0x2b4>
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	f2 0f       	add	r31, r18
    20c2:	31 e0       	ldi	r19, 0x01	; 1
    20c4:	f2 17       	cp	r31, r18
    20c6:	08 f0       	brcs	.+2      	; 0x20ca <fat_read_dir+0x2be>
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	43 2b       	or	r20, r19
    20cc:	26 2f       	mov	r18, r22
    20ce:	2d 0d       	add	r18, r13
    20d0:	51 e0       	ldi	r21, 0x01	; 1
    20d2:	26 17       	cp	r18, r22
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <fat_read_dir+0x2cc>
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	e4 2f       	mov	r30, r20
    20da:	e2 0f       	add	r30, r18
    20dc:	31 e0       	ldi	r19, 0x01	; 1
    20de:	e2 17       	cp	r30, r18
    20e0:	08 f0       	brcs	.+2      	; 0x20e4 <fat_read_dir+0x2d8>
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	53 2b       	or	r21, r19
    20e6:	27 2f       	mov	r18, r23
    20e8:	2c 0d       	add	r18, r12
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	27 17       	cp	r18, r23
    20ee:	08 f0       	brcs	.+2      	; 0x20f2 <fat_read_dir+0x2e6>
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	52 0f       	add	r21, r18
    20f4:	31 e0       	ldi	r19, 0x01	; 1
    20f6:	52 17       	cp	r21, r18
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <fat_read_dir+0x2f0>
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	43 2b       	or	r20, r19
    20fe:	28 2f       	mov	r18, r24
    2100:	2b 0d       	add	r18, r11
    2102:	31 e0       	ldi	r19, 0x01	; 1
    2104:	28 17       	cp	r18, r24
    2106:	08 f0       	brcs	.+2      	; 0x210a <fat_read_dir+0x2fe>
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	42 0f       	add	r20, r18
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	42 17       	cp	r20, r18
    2110:	08 f0       	brcs	.+2      	; 0x2114 <fat_read_dir+0x308>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	b3 2f       	mov	r27, r19
    2116:	b8 2b       	or	r27, r24
    2118:	09 0f       	add	r16, r25
    211a:	2a 2f       	mov	r18, r26
    211c:	9e 2d       	mov	r25, r14
    211e:	6f 2d       	mov	r22, r15
    2120:	7f 2f       	mov	r23, r31
    2122:	a5 2f       	mov	r26, r21
    2124:	14 2f       	mov	r17, r20
    2126:	b0 0f       	add	r27, r16
    2128:	08 c0       	rjmp	.+16     	; 0x213a <fat_read_dir+0x32e>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	60 e0       	ldi	r22, 0x00	; 0
    2130:	70 e0       	ldi	r23, 0x00	; 0
    2132:	e0 e0       	ldi	r30, 0x00	; 0
    2134:	a0 e0       	ldi	r26, 0x00	; 0
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	b0 e0       	ldi	r27, 0x00	; 0
        uint16_t cluster_left = cluster_size - cluster_offset;
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);
    213a:	0f a1       	ldd	r16, Y+39	; 0x27
    213c:	02 0f       	add	r16, r18
    213e:	31 e0       	ldi	r19, 0x01	; 1
    2140:	02 17       	cp	r16, r18
    2142:	08 f0       	brcs	.+2      	; 0x2146 <fat_read_dir+0x33a>
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	88 a5       	ldd	r24, Y+40	; 0x28
    2148:	89 0f       	add	r24, r25
    214a:	41 e0       	ldi	r20, 0x01	; 1
    214c:	89 17       	cp	r24, r25
    214e:	08 f0       	brcs	.+2      	; 0x2152 <fat_read_dir+0x346>
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	38 0f       	add	r19, r24
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	38 17       	cp	r19, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <fat_read_dir+0x350>
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	49 2b       	or	r20, r25
    215e:	89 a5       	ldd	r24, Y+41	; 0x29
    2160:	86 0f       	add	r24, r22
    2162:	51 e0       	ldi	r21, 0x01	; 1
    2164:	86 17       	cp	r24, r22
    2166:	08 f0       	brcs	.+2      	; 0x216a <fat_read_dir+0x35e>
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	48 0f       	add	r20, r24
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	48 17       	cp	r20, r24
    2170:	08 f0       	brcs	.+2      	; 0x2174 <fat_read_dir+0x368>
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	59 2b       	or	r21, r25
    2176:	8a a5       	ldd	r24, Y+42	; 0x2a
    2178:	87 0f       	add	r24, r23
    217a:	61 e0       	ldi	r22, 0x01	; 1
    217c:	87 17       	cp	r24, r23
    217e:	08 f0       	brcs	.+2      	; 0x2182 <fat_read_dir+0x376>
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	58 0f       	add	r21, r24
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	58 17       	cp	r21, r24
    2188:	08 f0       	brcs	.+2      	; 0x218c <fat_read_dir+0x380>
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	69 2b       	or	r22, r25
    218e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2190:	8e 0f       	add	r24, r30
    2192:	71 e0       	ldi	r23, 0x01	; 1
    2194:	8e 17       	cp	r24, r30
    2196:	08 f0       	brcs	.+2      	; 0x219a <fat_read_dir+0x38e>
    2198:	70 e0       	ldi	r23, 0x00	; 0
    219a:	68 0f       	add	r22, r24
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	68 17       	cp	r22, r24
    21a0:	08 f0       	brcs	.+2      	; 0x21a4 <fat_read_dir+0x398>
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	79 2b       	or	r23, r25
    21a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    21a8:	8a 0f       	add	r24, r26
    21aa:	f1 e0       	ldi	r31, 0x01	; 1
    21ac:	8a 17       	cp	r24, r26
    21ae:	08 f0       	brcs	.+2      	; 0x21b2 <fat_read_dir+0x3a6>
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	78 0f       	add	r23, r24
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	78 17       	cp	r23, r24
    21b8:	08 f0       	brcs	.+2      	; 0x21bc <fat_read_dir+0x3b0>
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	f9 2b       	or	r31, r25
    21be:	ed a5       	ldd	r30, Y+45	; 0x2d
    21c0:	e1 0f       	add	r30, r17
    21c2:	a1 e0       	ldi	r26, 0x01	; 1
    21c4:	e1 17       	cp	r30, r17
    21c6:	08 f0       	brcs	.+2      	; 0x21ca <fat_read_dir+0x3be>
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	8f 2f       	mov	r24, r31
    21cc:	8e 0f       	add	r24, r30
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	8e 17       	cp	r24, r30
    21d2:	08 f0       	brcs	.+2      	; 0x21d6 <fat_read_dir+0x3ca>
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9a 2b       	or	r25, r26
    21d8:	fe a5       	ldd	r31, Y+46	; 0x2e
    21da:	bf 0f       	add	r27, r31
    21dc:	20 2f       	mov	r18, r16
    21de:	9b 0f       	add	r25, r27

        arg.bytes_read = 0;
    21e0:	1c 82       	std	Y+4, r1	; 0x04
    21e2:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    21e4:	af a9       	ldd	r26, Y+55	; 0x37
    21e6:	b8 ad       	ldd	r27, Y+56	; 0x38
    21e8:	ed 91       	ld	r30, X+
    21ea:	fc 91       	ld	r31, X
    21ec:	cd a8       	ldd	r12, Y+53	; 0x35
    21ee:	de a8       	ldd	r13, Y+54	; 0x36
    21f0:	af a5       	ldd	r26, Y+47	; 0x2f
    21f2:	b8 a9       	ldd	r27, Y+48	; 0x30
    21f4:	ca 1a       	sub	r12, r26
    21f6:	db 0a       	sbc	r13, r27
    21f8:	02 80       	ldd	r0, Z+2	; 0x02
    21fa:	f3 81       	ldd	r31, Z+3	; 0x03
    21fc:	e0 2d       	mov	r30, r0
    21fe:	8e 01       	movw	r16, r28
    2200:	09 5f       	subi	r16, 0xF9	; 249
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	b0 e2       	ldi	r27, 0x20	; 32
    2206:	eb 2e       	mov	r14, r27
    2208:	f1 2c       	mov	r15, r1
    220a:	a5 ea       	ldi	r26, 0xA5	; 165
    220c:	aa 2e       	mov	r10, r26
    220e:	a1 e1       	ldi	r26, 0x11	; 17
    2210:	ba 2e       	mov	r11, r26
    2212:	4e 01       	movw	r8, r28
    2214:	08 94       	sec
    2216:	81 1c       	adc	r8, r1
    2218:	91 1c       	adc	r9, r1
    221a:	09 95       	icall
    221c:	88 23       	and	r24, r24
    221e:	09 f4       	brne	.+2      	; 0x2222 <fat_read_dir+0x416>
    2220:	79 c0       	rjmp	.+242    	; 0x2314 <fat_read_dir+0x508>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	ef a5       	ldd	r30, Y+47	; 0x2f
    2228:	f8 a9       	ldd	r31, Y+48	; 0x30
    222a:	e8 0f       	add	r30, r24
    222c:	f9 1f       	adc	r31, r25
    222e:	f8 ab       	std	Y+48, r31	; 0x30
    2230:	ef a7       	std	Y+47, r30	; 0x2f

        if(cluster_offset >= cluster_size)
    2232:	2d a9       	ldd	r18, Y+53	; 0x35
    2234:	3e a9       	ldd	r19, Y+54	; 0x36
    2236:	e2 17       	cp	r30, r18
    2238:	f3 07       	cpc	r31, r19
    223a:	08 f4       	brcc	.+2      	; 0x223e <fat_read_dir+0x432>
    223c:	53 c0       	rjmp	.+166    	; 0x22e4 <fat_read_dir+0x4d8>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    223e:	8f a9       	ldd	r24, Y+55	; 0x37
    2240:	98 ad       	ldd	r25, Y+56	; 0x38
    2242:	49 a9       	ldd	r20, Y+49	; 0x31
    2244:	5a a9       	ldd	r21, Y+50	; 0x32
    2246:	6b a9       	ldd	r22, Y+51	; 0x33
    2248:	7c a9       	ldd	r23, Y+52	; 0x34
    224a:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
    224e:	69 ab       	std	Y+49, r22	; 0x31
    2250:	7a ab       	std	Y+50, r23	; 0x32
    2252:	8b ab       	std	Y+51, r24	; 0x33
    2254:	9c ab       	std	Y+52, r25	; 0x34
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	61 15       	cp	r22, r1
    225c:	71 05       	cpc	r23, r1
    225e:	81 05       	cpc	r24, r1
    2260:	91 05       	cpc	r25, r1
    2262:	99 f4       	brne	.+38     	; 0x228a <fat_read_dir+0x47e>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    2264:	8e 81       	ldd	r24, Y+6	; 0x06
    2266:	88 23       	and	r24, r24
    2268:	09 f0       	breq	.+2      	; 0x226c <fat_read_dir+0x460>
    226a:	40 c0       	rjmp	.+128    	; 0x22ec <fat_read_dir+0x4e0>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    226c:	e9 ad       	ldd	r30, Y+57	; 0x39
    226e:	fa ad       	ldd	r31, Y+58	; 0x3a
    2270:	83 a1       	ldd	r24, Z+35	; 0x23
    2272:	94 a1       	ldd	r25, Z+36	; 0x24
    2274:	a5 a1       	ldd	r26, Z+37	; 0x25
    2276:	b6 a1       	ldd	r27, Z+38	; 0x26
    2278:	83 ab       	std	Z+51, r24	; 0x33
    227a:	94 ab       	std	Z+52, r25	; 0x34
    227c:	a5 ab       	std	Z+53, r26	; 0x35
    227e:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    2280:	10 ae       	std	Z+56, r1	; 0x38
    2282:	17 aa       	std	Z+55, r1	; 0x37
    2284:	47 c0       	rjmp	.+142    	; 0x2314 <fat_read_dir+0x508>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    memset(dir_entry, 0, sizeof(*dir_entry));
    arg.dir_entry = dir_entry;
    2286:	ba 83       	std	Y+2, r27	; 0x02
    2288:	a9 83       	std	Y+1, r26	; 0x01
    228a:	38 ab       	std	Y+48, r19	; 0x30
    228c:	2f a7       	std	Y+47, r18	; 0x2f
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    228e:	29 a9       	ldd	r18, Y+49	; 0x31
    2290:	3a a9       	ldd	r19, Y+50	; 0x32
    2292:	4b a9       	ldd	r20, Y+51	; 0x33
    2294:	5c a9       	ldd	r21, Y+52	; 0x34
    2296:	22 50       	subi	r18, 0x02	; 2
    2298:	30 40       	sbci	r19, 0x00	; 0
    229a:	40 40       	sbci	r20, 0x00	; 0
    229c:	50 40       	sbci	r21, 0x00	; 0
    229e:	29 ab       	std	Y+49, r18	; 0x31
    22a0:	3a ab       	std	Y+50, r19	; 0x32
    22a2:	4b ab       	std	Y+51, r20	; 0x33
    22a4:	5c ab       	std	Y+52, r21	; 0x34
    22a6:	ba 01       	movw	r22, r20
    22a8:	a9 01       	movw	r20, r18
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e0       	ldi	r26, 0x00	; 0
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	4b af       	std	Y+59, r20	; 0x3b
    22b4:	5c af       	std	Y+60, r21	; 0x3c
    22b6:	6d af       	std	Y+61, r22	; 0x3d
    22b8:	7e af       	std	Y+62, r23	; 0x3e
    22ba:	8f af       	std	Y+63, r24	; 0x3f
    22bc:	21 96       	adiw	r28, 0x01	; 1
    22be:	9f af       	std	Y+63, r25	; 0x3f
    22c0:	21 97       	sbiw	r28, 0x01	; 1
    22c2:	22 96       	adiw	r28, 0x02	; 2
    22c4:	af af       	std	Y+63, r26	; 0x3f
    22c6:	22 97       	sbiw	r28, 0x02	; 2
    22c8:	23 96       	adiw	r28, 0x03	; 3
    22ca:	bf af       	std	Y+63, r27	; 0x3f
    22cc:	23 97       	sbiw	r28, 0x03	; 3
    22ce:	89 a9       	ldd	r24, Y+49	; 0x31
    22d0:	9a a9       	ldd	r25, Y+50	; 0x32
    22d2:	ab a9       	ldd	r26, Y+51	; 0x33
    22d4:	bc a9       	ldd	r27, Y+52	; 0x34
    22d6:	02 96       	adiw	r24, 0x02	; 2
    22d8:	a1 1d       	adc	r26, r1
    22da:	b1 1d       	adc	r27, r1
    22dc:	89 ab       	std	Y+49, r24	; 0x31
    22de:	9a ab       	std	Y+50, r25	; 0x32
    22e0:	ab ab       	std	Y+51, r26	; 0x33
    22e2:	bc ab       	std	Y+52, r27	; 0x34
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    22e4:	8e 81       	ldd	r24, Y+6	; 0x06
    22e6:	88 23       	and	r24, r24
    22e8:	09 f4       	brne	.+2      	; 0x22ec <fat_read_dir+0x4e0>
    22ea:	0c ce       	rjmp	.-1000   	; 0x1f04 <fat_read_dir+0xf8>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    22ec:	29 a9       	ldd	r18, Y+49	; 0x31
    22ee:	3a a9       	ldd	r19, Y+50	; 0x32
    22f0:	4b a9       	ldd	r20, Y+51	; 0x33
    22f2:	5c a9       	ldd	r21, Y+52	; 0x34
    22f4:	a9 ad       	ldd	r26, Y+57	; 0x39
    22f6:	ba ad       	ldd	r27, Y+58	; 0x3a
    22f8:	d3 96       	adiw	r26, 0x33	; 51
    22fa:	2d 93       	st	X+, r18
    22fc:	3d 93       	st	X+, r19
    22fe:	4d 93       	st	X+, r20
    2300:	5c 93       	st	X, r21
    2302:	d6 97       	sbiw	r26, 0x36	; 54
    dd->entry_offset = cluster_offset;
    2304:	ef a5       	ldd	r30, Y+47	; 0x2f
    2306:	f8 a9       	ldd	r31, Y+48	; 0x30
    2308:	d8 96       	adiw	r26, 0x38	; 56
    230a:	fc 93       	st	X, r31
    230c:	ee 93       	st	-X, r30
    230e:	d7 97       	sbiw	r26, 0x37	; 55

    return arg.finished;
    2310:	8e 81       	ldd	r24, Y+6	; 0x06
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <fat_read_dir+0x50a>
    2314:	80 e0       	ldi	r24, 0x00	; 0
}
    2316:	ce 5b       	subi	r28, 0xBE	; 190
    2318:	df 4f       	sbci	r29, 0xFF	; 255
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	de bf       	out	0x3e, r29	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	cd bf       	out	0x3d, r28	; 61
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	1f 91       	pop	r17
    232a:	0f 91       	pop	r16
    232c:	ff 90       	pop	r15
    232e:	ef 90       	pop	r14
    2330:	df 90       	pop	r13
    2332:	cf 90       	pop	r12
    2334:	bf 90       	pop	r11
    2336:	af 90       	pop	r10
    2338:	9f 90       	pop	r9
    233a:	8f 90       	pop	r8
    233c:	7f 90       	pop	r7
    233e:	6f 90       	pop	r6
    2340:	5f 90       	pop	r5
    2342:	4f 90       	pop	r4
    2344:	3f 90       	pop	r3
    2346:	2f 90       	pop	r2
    2348:	08 95       	ret

0000234a <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    234a:	af 92       	push	r10
    234c:	bf 92       	push	r11
    234e:	cf 92       	push	r12
    2350:	df 92       	push	r13
    2352:	ef 92       	push	r14
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	6c 01       	movw	r12, r24
    2360:	b6 2e       	mov	r11, r22
    2362:	a7 2e       	mov	r10, r23
    struct fat_read_dir_callback_arg* arg = p;
    2364:	b7 01       	movw	r22, r14
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    2366:	d7 01       	movw	r26, r14
    2368:	cd 91       	ld	r28, X+
    236a:	dc 91       	ld	r29, X
    236c:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    236e:	12 96       	adiw	r26, 0x02	; 2
    2370:	8d 91       	ld	r24, X+
    2372:	9c 91       	ld	r25, X
    2374:	13 97       	sbiw	r26, 0x03	; 3
    2376:	80 96       	adiw	r24, 0x20	; 32
    2378:	13 96       	adiw	r26, 0x03	; 3
    237a:	9c 93       	st	X, r25
    237c:	8e 93       	st	-X, r24
    237e:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    2380:	f6 01       	movw	r30, r12
    2382:	90 81       	ld	r25, Z
    2384:	95 3e       	cpi	r25, 0xE5	; 229
    2386:	11 f0       	breq	.+4      	; 0x238c <fat_dir_entry_read_callback+0x42>
    2388:	99 23       	and	r25, r25
    238a:	21 f4       	brne	.+8      	; 0x2394 <fat_dir_entry_read_callback+0x4a>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    238c:	db 01       	movw	r26, r22
    238e:	14 96       	adiw	r26, 0x04	; 4
    2390:	1c 92       	st	X, r1
    2392:	d9 c0       	rjmp	.+434    	; 0x2546 <fat_dir_entry_read_callback+0x1fc>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    2394:	f6 01       	movw	r30, r12
    2396:	83 85       	ldd	r24, Z+11	; 0x0b
    2398:	8f 30       	cpi	r24, 0x0F	; 15
    239a:	09 f0       	breq	.+2      	; 0x239e <fat_dir_entry_read_callback+0x54>
    239c:	40 c0       	rjmp	.+128    	; 0x241e <fat_dir_entry_read_callback+0xd4>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    239e:	d7 01       	movw	r26, r14
    23a0:	14 96       	adiw	r26, 0x04	; 4
    23a2:	9c 91       	ld	r25, X
    23a4:	99 23       	and	r25, r25
    23a6:	19 f0       	breq	.+6      	; 0x23ae <fat_dir_entry_read_callback+0x64>
    23a8:	85 85       	ldd	r24, Z+13	; 0x0d
    23aa:	98 17       	cp	r25, r24
    23ac:	91 f0       	breq	.+36     	; 0x23d2 <fat_dir_entry_read_callback+0x88>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    23ae:	81 e3       	ldi	r24, 0x31	; 49
    23b0:	fe 01       	movw	r30, r28
    23b2:	11 92       	st	Z+, r1
    23b4:	8a 95       	dec	r24
    23b6:	e9 f7       	brne	.-6      	; 0x23b2 <fat_dir_entry_read_callback+0x68>

            arg->checksum = buffer[13];
    23b8:	d6 01       	movw	r26, r12
    23ba:	1d 96       	adiw	r26, 0x0d	; 13
    23bc:	8c 91       	ld	r24, X
    23be:	fb 01       	movw	r30, r22
    23c0:	84 83       	std	Z+4, r24	; 0x04
            dir_entry->entry_offset = offset;
    23c2:	09 a7       	std	Y+41, r16	; 0x29
    23c4:	1a a7       	std	Y+42, r17	; 0x2a
    23c6:	2b a7       	std	Y+43, r18	; 0x2b
    23c8:	3c a7       	std	Y+44, r19	; 0x2c
    23ca:	4d a7       	std	Y+45, r20	; 0x2d
    23cc:	5e a7       	std	Y+46, r21	; 0x2e
    23ce:	bf a6       	std	Y+47, r11	; 0x2f
    23d0:	a8 aa       	std	Y+48, r10	; 0x30

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    23d2:	d6 01       	movw	r26, r12
    23d4:	8c 91       	ld	r24, X
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	8f 73       	andi	r24, 0x3F	; 63
    23da:	90 70       	andi	r25, 0x00	; 0
    23dc:	2d e0       	ldi	r18, 0x0D	; 13
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	82 9f       	mul	r24, r18
    23e2:	a0 01       	movw	r20, r0
    23e4:	83 9f       	mul	r24, r19
    23e6:	50 0d       	add	r21, r0
    23e8:	92 9f       	mul	r25, r18
    23ea:	50 0d       	add	r21, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	4d 50       	subi	r20, 0x0D	; 13
    23f0:	50 40       	sbci	r21, 0x00	; 0
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b1 e0       	ldi	r27, 0x01	; 1
    23f6:	c4 0f       	add	r28, r20
    23f8:	d5 1f       	adc	r29, r21
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <fat_dir_entry_read_callback+0xcc>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    23fc:	8d 91       	ld	r24, X+
    23fe:	f6 01       	movw	r30, r12
    2400:	e8 0f       	add	r30, r24
    2402:	f1 1d       	adc	r31, r1
    2404:	80 81       	ld	r24, Z
    2406:	89 93       	st	Y+, r24
    2408:	4f 5f       	subi	r20, 0xFF	; 255
    240a:	5f 4f       	sbci	r21, 0xFF	; 255
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    240c:	e1 e0       	ldi	r30, 0x01	; 1
    240e:	ad 30       	cpi	r26, 0x0D	; 13
    2410:	be 07       	cpc	r27, r30
    2412:	09 f4       	brne	.+2      	; 0x2416 <fat_dir_entry_read_callback+0xcc>
    2414:	98 c0       	rjmp	.+304    	; 0x2546 <fat_dir_entry_read_callback+0x1fc>
    2416:	4f 31       	cpi	r20, 0x1F	; 31
    2418:	51 05       	cpc	r21, r1
    241a:	80 f3       	brcs	.-32     	; 0x23fc <fat_dir_entry_read_callback+0xb2>
    241c:	94 c0       	rjmp	.+296    	; 0x2546 <fat_dir_entry_read_callback+0x1fc>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    241e:	88 81       	ld	r24, Y
    2420:	88 23       	and	r24, r24
    2422:	99 f0       	breq	.+38     	; 0x244a <fat_dir_entry_read_callback+0x100>
    2424:	f7 01       	movw	r30, r14
    2426:	b4 81       	ldd	r27, Z+4	; 0x04
    2428:	f6 01       	movw	r30, r12
    242a:	a1 e0       	ldi	r26, 0x01	; 1
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    242c:	89 2f       	mov	r24, r25
    242e:	86 95       	lsr	r24
    2430:	97 95       	ror	r25
    2432:	99 27       	eor	r25, r25
    2434:	97 95       	ror	r25
    2436:	98 2b       	or	r25, r24
    2438:	81 81       	ldd	r24, Z+1	; 0x01
    243a:	98 0f       	add	r25, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    243c:	af 5f       	subi	r26, 0xFF	; 255
    243e:	31 96       	adiw	r30, 0x01	; 1
    2440:	ab 30       	cpi	r26, 0x0B	; 11
    2442:	a1 f7       	brne	.-24     	; 0x242c <fat_dir_entry_read_callback+0xe2>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    2444:	b9 17       	cp	r27, r25
    2446:	09 f4       	brne	.+2      	; 0x244a <fat_dir_entry_read_callback+0x100>
    2448:	5a c0       	rjmp	.+180    	; 0x24fe <fat_dir_entry_read_callback+0x1b4>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    244a:	81 e3       	ldi	r24, 0x31	; 49
    244c:	de 01       	movw	r26, r28
    244e:	1d 92       	st	X+, r1
    2450:	8a 95       	dec	r24
    2452:	e9 f7       	brne	.-6      	; 0x244e <fat_dir_entry_read_callback+0x104>
            dir_entry->entry_offset = offset;
    2454:	09 a7       	std	Y+41, r16	; 0x29
    2456:	1a a7       	std	Y+42, r17	; 0x2a
    2458:	2b a7       	std	Y+43, r18	; 0x2b
    245a:	3c a7       	std	Y+44, r19	; 0x2c
    245c:	4d a7       	std	Y+45, r20	; 0x2d
    245e:	5e a7       	std	Y+46, r21	; 0x2e
    2460:	bf a6       	std	Y+47, r11	; 0x2f
    2462:	a8 aa       	std	Y+48, r10	; 0x30
    2464:	a6 01       	movw	r20, r12
    2466:	de 01       	movw	r26, r28
    2468:	86 01       	movw	r16, r12
    246a:	20 e0       	ldi	r18, 0x00	; 0

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    246c:	f8 01       	movw	r30, r16
    246e:	90 81       	ld	r25, Z
    2470:	90 32       	cpi	r25, 0x20	; 32
    2472:	99 f0       	breq	.+38     	; 0x249a <fat_dir_entry_read_callback+0x150>
                    break;
                long_name[i] = buffer[i];
    2474:	9c 93       	st	X, r25
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    2476:	f6 01       	movw	r30, r12
    2478:	84 85       	ldd	r24, Z+12	; 0x0c
    247a:	83 ff       	sbrs	r24, 3
    247c:	08 c0       	rjmp	.+16     	; 0x248e <fat_dir_entry_read_callback+0x144>
    247e:	f8 01       	movw	r30, r16
    2480:	80 81       	ld	r24, Z
    2482:	81 34       	cpi	r24, 0x41	; 65
    2484:	20 f0       	brcs	.+8      	; 0x248e <fat_dir_entry_read_callback+0x144>
    2486:	8b 35       	cpi	r24, 0x5B	; 91
    2488:	10 f4       	brcc	.+4      	; 0x248e <fat_dir_entry_read_callback+0x144>
                    long_name[i] += 'a' - 'A';
    248a:	90 5e       	subi	r25, 0xE0	; 224
    248c:	9c 93       	st	X, r25
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    248e:	2f 5f       	subi	r18, 0xFF	; 255
    2490:	0f 5f       	subi	r16, 0xFF	; 255
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	28 30       	cpi	r18, 0x08	; 8
    2498:	49 f7       	brne	.-46     	; 0x246c <fat_dir_entry_read_callback+0x122>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    249a:	88 81       	ld	r24, Y
    249c:	85 30       	cpi	r24, 0x05	; 5
    249e:	11 f4       	brne	.+4      	; 0x24a4 <fat_dir_entry_read_callback+0x15a>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    24a0:	85 ee       	ldi	r24, 0xE5	; 229
    24a2:	88 83       	st	Y, r24

            if(buffer[8] != ' ')
    24a4:	d6 01       	movw	r26, r12
    24a6:	18 96       	adiw	r26, 0x08	; 8
    24a8:	8c 91       	ld	r24, X
    24aa:	80 32       	cpi	r24, 0x20	; 32
    24ac:	21 f1       	breq	.+72     	; 0x24f6 <fat_dir_entry_read_callback+0x1ac>
            {
                long_name[i++] = '.';
    24ae:	fe 01       	movw	r30, r28
    24b0:	e2 0f       	add	r30, r18
    24b2:	f1 1d       	adc	r31, r1
    24b4:	8e e2       	ldi	r24, 0x2E	; 46
    24b6:	80 83       	st	Z, r24
    24b8:	32 2f       	mov	r19, r18
    24ba:	3f 5f       	subi	r19, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
    24bc:	2c 5f       	subi	r18, 0xFC	; 252
                {
                    if(buffer[j] == ' ')
    24be:	fa 01       	movw	r30, r20
    24c0:	90 85       	ldd	r25, Z+8	; 0x08
    24c2:	90 32       	cpi	r25, 0x20	; 32
    24c4:	b9 f0       	breq	.+46     	; 0x24f4 <fat_dir_entry_read_callback+0x1aa>
                        break;
                    long_name[i] = buffer[j];
    24c6:	fe 01       	movw	r30, r28
    24c8:	e3 0f       	add	r30, r19
    24ca:	f1 1d       	adc	r31, r1
    24cc:	90 83       	st	Z, r25

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    24ce:	d6 01       	movw	r26, r12
    24d0:	1c 96       	adiw	r26, 0x0c	; 12
    24d2:	8c 91       	ld	r24, X
    24d4:	84 ff       	sbrs	r24, 4
    24d6:	09 c0       	rjmp	.+18     	; 0x24ea <fat_dir_entry_read_callback+0x1a0>
    24d8:	da 01       	movw	r26, r20
    24da:	18 96       	adiw	r26, 0x08	; 8
    24dc:	8c 91       	ld	r24, X
    24de:	81 34       	cpi	r24, 0x41	; 65
    24e0:	20 f0       	brcs	.+8      	; 0x24ea <fat_dir_entry_read_callback+0x1a0>
    24e2:	8b 35       	cpi	r24, 0x5B	; 91
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <fat_dir_entry_read_callback+0x1a0>
                        long_name[i] += 'a' - 'A';
    24e6:	90 5e       	subi	r25, 0xE0	; 224
    24e8:	90 83       	st	Z, r25

                    ++i;
    24ea:	3f 5f       	subi	r19, 0xFF	; 255
    24ec:	4f 5f       	subi	r20, 0xFF	; 255
    24ee:	5f 4f       	sbci	r21, 0xFF	; 255
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    24f0:	32 17       	cp	r19, r18
    24f2:	29 f7       	brne	.-54     	; 0x24be <fat_dir_entry_read_callback+0x174>
    24f4:	23 2f       	mov	r18, r19

                    ++i;
                }
            } 

            long_name[i] = '\0';
    24f6:	fe 01       	movw	r30, r28
    24f8:	e2 0f       	add	r30, r18
    24fa:	f1 1d       	adc	r31, r1
    24fc:	10 82       	st	Z, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    24fe:	f6 01       	movw	r30, r12
    2500:	83 85       	ldd	r24, Z+11	; 0x0b
    2502:	88 a3       	std	Y+32, r24	; 0x20
        dir_entry->cluster = read16(&buffer[26]);
    2504:	22 8d       	ldd	r18, Z+26	; 0x1a
    2506:	33 8d       	ldd	r19, Z+27	; 0x1b
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) read16(&buffer[20])) << 16;
    250c:	84 89       	ldd	r24, Z+20	; 0x14
    250e:	95 89       	ldd	r25, Z+21	; 0x15
    2510:	a0 e0       	ldi	r26, 0x00	; 0
    2512:	b0 e0       	ldi	r27, 0x00	; 0
    2514:	dc 01       	movw	r26, r24
    2516:	99 27       	eor	r25, r25
    2518:	88 27       	eor	r24, r24
    251a:	82 2b       	or	r24, r18
    251c:	93 2b       	or	r25, r19
    251e:	a4 2b       	or	r26, r20
    2520:	b5 2b       	or	r27, r21
    2522:	89 a3       	std	Y+33, r24	; 0x21
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	ab a3       	std	Y+35, r26	; 0x23
    2528:	bc a3       	std	Y+36, r27	; 0x24
#endif
        dir_entry->file_size = read32(&buffer[28]);
    252a:	84 8d       	ldd	r24, Z+28	; 0x1c
    252c:	95 8d       	ldd	r25, Z+29	; 0x1d
    252e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2530:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2532:	8d a3       	std	Y+37, r24	; 0x25
    2534:	9e a3       	std	Y+38, r25	; 0x26
    2536:	af a3       	std	Y+39, r26	; 0x27
    2538:	b8 a7       	std	Y+40, r27	; 0x28
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = read16(&buffer[22]);
        dir_entry->modification_date = read16(&buffer[24]);
#endif

        arg->finished = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	db 01       	movw	r26, r22
    253e:	15 96       	adiw	r26, 0x05	; 5
    2540:	8c 93       	st	X, r24
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	01 c0       	rjmp	.+2      	; 0x2548 <fat_dir_entry_read_callback+0x1fe>
        return 0;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    }
}
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    254c:	1f 91       	pop	r17
    254e:	0f 91       	pop	r16
    2550:	ff 90       	pop	r15
    2552:	ef 90       	pop	r14
    2554:	df 90       	pop	r13
    2556:	cf 90       	pop	r12
    2558:	bf 90       	pop	r11
    255a:	af 90       	pop	r10
    255c:	08 95       	ret

0000255e <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    255e:	2f 92       	push	r2
    2560:	3f 92       	push	r3
    2562:	4f 92       	push	r4
    2564:	5f 92       	push	r5
    2566:	6f 92       	push	r6
    2568:	7f 92       	push	r7
    256a:	8f 92       	push	r8
    256c:	9f 92       	push	r9
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	cf 92       	push	r12
    2574:	df 92       	push	r13
    2576:	ef 92       	push	r14
    2578:	ff 92       	push	r15
    257a:	0f 93       	push	r16
    257c:	1f 93       	push	r17
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
    2586:	cd 54       	subi	r28, 0x4D	; 77
    2588:	d0 40       	sbci	r29, 0x00	; 0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	2c 01       	movw	r4, r24
    if(!partition ||
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	09 f4       	brne	.+2      	; 0x259c <fat_open+0x3e>
    259a:	d9 c3       	rjmp	.+1970   	; 0x2d4e <fat_open+0x7f0>
    259c:	dc 01       	movw	r26, r24
    259e:	14 96       	adiw	r26, 0x04	; 4
    25a0:	8d 91       	ld	r24, X+
    25a2:	9c 91       	ld	r25, X
    25a4:	15 97       	sbiw	r26, 0x05	; 5
    25a6:	89 2b       	or	r24, r25
    25a8:	09 f4       	brne	.+2      	; 0x25ac <fat_open+0x4e>
    25aa:	d1 c3       	rjmp	.+1954   	; 0x2d4e <fat_open+0x7f0>
    25ac:	16 96       	adiw	r26, 0x06	; 6
    25ae:	8d 91       	ld	r24, X+
    25b0:	9c 91       	ld	r25, X
    25b2:	17 97       	sbiw	r26, 0x07	; 7
    25b4:	89 2b       	or	r24, r25
    25b6:	09 f4       	brne	.+2      	; 0x25ba <fat_open+0x5c>
    25b8:	ca c3       	rjmp	.+1940   	; 0x2d4e <fat_open+0x7f0>
    25ba:	e6 c3       	rjmp	.+1996   	; 0x2d88 <fat_open+0x82a>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    25bc:	e4 e3       	ldi	r30, 0x34	; 52
    25be:	f1 e0       	ldi	r31, 0x01	; 1
    25c0:	82 e3       	ldi	r24, 0x32	; 50
    25c2:	df 01       	movw	r26, r30
    25c4:	1d 92       	st	X+, r1
    25c6:	8a 95       	dec	r24
    25c8:	e9 f7       	brne	.-6      	; 0x25c4 <fat_open+0x66>

    fs->partition = partition;
    25ca:	50 92 35 01 	sts	0x0135, r5
    25ce:	40 92 34 01 	sts	0x0134, r4
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    25d2:	f2 01       	movw	r30, r4
    25d4:	a1 84       	ldd	r10, Z+9	; 0x09
    25d6:	b2 84       	ldd	r11, Z+10	; 0x0a
    25d8:	c3 84       	ldd	r12, Z+11	; 0x0b
    25da:	d4 84       	ldd	r13, Z+12	; 0x0c
    25dc:	95 01       	movw	r18, r10
    25de:	a6 01       	movw	r20, r12
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	09 e0       	ldi	r16, 0x09	; 9
    25ea:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
    25ee:	2e af       	std	Y+62, r18	; 0x3e
    25f0:	3f af       	std	Y+63, r19	; 0x3f
    25f2:	21 96       	adiw	r28, 0x01	; 1
    25f4:	4f af       	std	Y+63, r20	; 0x3f
    25f6:	21 97       	sbiw	r28, 0x01	; 1
    25f8:	22 96       	adiw	r28, 0x02	; 2
    25fa:	5f af       	std	Y+63, r21	; 0x3f
    25fc:	22 97       	sbiw	r28, 0x02	; 2
    25fe:	23 96       	adiw	r28, 0x03	; 3
    2600:	6f af       	std	Y+63, r22	; 0x3f
    2602:	23 97       	sbiw	r28, 0x03	; 3
    2604:	24 96       	adiw	r28, 0x04	; 4
    2606:	7f af       	std	Y+63, r23	; 0x3f
    2608:	24 97       	sbiw	r28, 0x04	; 4
    260a:	25 96       	adiw	r28, 0x05	; 5
    260c:	8f af       	std	Y+63, r24	; 0x3f
    260e:	25 97       	sbiw	r28, 0x05	; 5
    2610:	26 96       	adiw	r28, 0x06	; 6
    2612:	9f af       	std	Y+63, r25	; 0x3f
    2614:	26 97       	sbiw	r28, 0x06	; 6
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    2616:	25 5f       	subi	r18, 0xF5	; 245
    2618:	31 e0       	ldi	r19, 0x01	; 1
    261a:	fe ad       	ldd	r31, Y+62	; 0x3e
    261c:	2f 17       	cp	r18, r31
    261e:	08 f0       	brcs	.+2      	; 0x2622 <fat_open+0xc4>
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	ef ac       	ldd	r14, Y+63	; 0x3f
    2624:	3e 0d       	add	r19, r14
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	3e 15       	cp	r19, r14
    262a:	08 f0       	brcs	.+2      	; 0x262e <fat_open+0xd0>
    262c:	40 e0       	ldi	r20, 0x00	; 0
    262e:	21 96       	adiw	r28, 0x01	; 1
    2630:	ff ac       	ldd	r15, Y+63	; 0x3f
    2632:	21 97       	sbiw	r28, 0x01	; 1
    2634:	4f 0d       	add	r20, r15
    2636:	51 e0       	ldi	r21, 0x01	; 1
    2638:	4f 15       	cp	r20, r15
    263a:	08 f0       	brcs	.+2      	; 0x263e <fat_open+0xe0>
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	22 96       	adiw	r28, 0x02	; 2
    2640:	0f ad       	ldd	r16, Y+63	; 0x3f
    2642:	22 97       	sbiw	r28, 0x02	; 2
    2644:	50 0f       	add	r21, r16
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	50 17       	cp	r21, r16
    264a:	08 f0       	brcs	.+2      	; 0x264e <fat_open+0xf0>
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	23 96       	adiw	r28, 0x03	; 3
    2650:	1f ad       	ldd	r17, Y+63	; 0x3f
    2652:	23 97       	sbiw	r28, 0x03	; 3
    2654:	61 0f       	add	r22, r17
    2656:	71 e0       	ldi	r23, 0x01	; 1
    2658:	61 17       	cp	r22, r17
    265a:	08 f0       	brcs	.+2      	; 0x265e <fat_open+0x100>
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	24 96       	adiw	r28, 0x04	; 4
    2660:	8f ad       	ldd	r24, Y+63	; 0x3f
    2662:	24 97       	sbiw	r28, 0x04	; 4
    2664:	78 0f       	add	r23, r24
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	24 96       	adiw	r28, 0x04	; 4
    266a:	9f ad       	ldd	r25, Y+63	; 0x3f
    266c:	24 97       	sbiw	r28, 0x04	; 4
    266e:	79 17       	cp	r23, r25
    2670:	08 f0       	brcs	.+2      	; 0x2674 <fat_open+0x116>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	25 96       	adiw	r28, 0x05	; 5
    2676:	af ad       	ldd	r26, Y+63	; 0x3f
    2678:	25 97       	sbiw	r28, 0x05	; 5
    267a:	8a 0f       	add	r24, r26
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	8a 17       	cp	r24, r26
    2680:	08 f0       	brcs	.+2      	; 0x2684 <fat_open+0x126>
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	d2 01       	movw	r26, r4
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	26 96       	adiw	r28, 0x06	; 6
    268c:	bf ad       	ldd	r27, Y+63	; 0x3f
    268e:	26 97       	sbiw	r28, 0x06	; 6
    2690:	9b 0f       	add	r25, r27
    2692:	8e 01       	movw	r16, r28
    2694:	0f 5f       	subi	r16, 0xFF	; 255
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	a5 e2       	ldi	r26, 0x25	; 37
    269a:	ea 2e       	mov	r14, r26
    269c:	f1 2c       	mov	r15, r1
    269e:	09 95       	icall
    26a0:	88 23       	and	r24, r24
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <fat_open+0x148>
    26a4:	78 c3       	rjmp	.+1776   	; 0x2d96 <fat_open+0x838>
        return 0;

    uint16_t bytes_per_sector = read16(&buffer[0x00]);
    26a6:	29 80       	ldd	r2, Y+1	; 0x01
    26a8:	3a 80       	ldd	r3, Y+2	; 0x02
    uint16_t reserved_sectors = read16(&buffer[0x03]);
    26aa:	ec 81       	ldd	r30, Y+4	; 0x04
    26ac:	fd 81       	ldd	r31, Y+5	; 0x05
    26ae:	ff a7       	std	Y+47, r31	; 0x2f
    26b0:	ee a7       	std	Y+46, r30	; 0x2e
    uint8_t sectors_per_cluster = buffer[0x02];
    26b2:	fb 81       	ldd	r31, Y+3	; 0x03
    26b4:	f8 ab       	std	Y+48, r31	; 0x30
    uint8_t fat_copies = buffer[0x05];
    26b6:	ee 80       	ldd	r14, Y+6	; 0x06
    26b8:	e9 aa       	std	Y+49, r14	; 0x31
    uint16_t max_root_entries = read16(&buffer[0x06]);
    26ba:	0f 81       	ldd	r16, Y+7	; 0x07
    26bc:	18 85       	ldd	r17, Y+8	; 0x08
    26be:	1b ab       	std	Y+51, r17	; 0x33
    26c0:	0a ab       	std	Y+50, r16	; 0x32
    uint16_t sector_count_16 = read16(&buffer[0x08]);
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    uint16_t sectors_per_fat = read16(&buffer[0x0b]);
    26c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    26c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    26ca:	3d ab       	std	Y+53, r19	; 0x35
    26cc:	2c ab       	std	Y+52, r18	; 0x34
    uint32_t sector_count = read32(&buffer[0x15]);
    26ce:	ae 88       	ldd	r10, Y+22	; 0x16
    26d0:	bf 88       	ldd	r11, Y+23	; 0x17
    26d2:	c8 8c       	ldd	r12, Y+24	; 0x18
    26d4:	d9 8c       	ldd	r13, Y+25	; 0x19
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = read32(&buffer[0x19]);
    26d6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    26d8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    26da:	6c 8d       	ldd	r22, Y+28	; 0x1c
    26dc:	7d 8d       	ldd	r23, Y+29	; 0x1d
    26de:	4e ab       	std	Y+54, r20	; 0x36
    26e0:	5f ab       	std	Y+55, r21	; 0x37
    26e2:	68 af       	std	Y+56, r22	; 0x38
    26e4:	79 af       	std	Y+57, r23	; 0x39
    uint32_t cluster_root_dir = read32(&buffer[0x21]);
    26e6:	ea a0       	ldd	r14, Y+34	; 0x22
    26e8:	fb a0       	ldd	r15, Y+35	; 0x23
    26ea:	0c a1       	ldd	r16, Y+36	; 0x24
    26ec:	1d a1       	ldd	r17, Y+37	; 0x25
    26ee:	ea ae       	std	Y+58, r14	; 0x3a
    26f0:	fb ae       	std	Y+59, r15	; 0x3b
    26f2:	0c af       	std	Y+60, r16	; 0x3c
    26f4:	1d af       	std	Y+61, r17	; 0x3d
#endif

    if(sector_count == 0)
    26f6:	a1 14       	cp	r10, r1
    26f8:	b1 04       	cpc	r11, r1
    26fa:	c1 04       	cpc	r12, r1
    26fc:	d1 04       	cpc	r13, r1
    26fe:	31 f4       	brne	.+12     	; 0x270c <fat_open+0x1ae>
    {
        if(sector_count_16 == 0)
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	09 f4       	brne	.+2      	; 0x2706 <fat_open+0x1a8>
    2704:	48 c3       	rjmp	.+1680   	; 0x2d96 <fat_open+0x838>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    2706:	5c 01       	movw	r10, r24
    2708:	cc 24       	eor	r12, r12
    270a:	dd 24       	eor	r13, r13
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    270c:	0c a9       	ldd	r16, Y+52	; 0x34
    270e:	1d a9       	ldd	r17, Y+53	; 0x35
    2710:	01 15       	cp	r16, r1
    2712:	11 05       	cpc	r17, r1
    2714:	41 f0       	breq	.+16     	; 0x2726 <fat_open+0x1c8>
        sectors_per_fat32 = sectors_per_fat;
    2716:	98 01       	movw	r18, r16
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	2e ab       	std	Y+54, r18	; 0x36
    271e:	3f ab       	std	Y+55, r19	; 0x37
    2720:	48 af       	std	Y+56, r20	; 0x38
    2722:	59 af       	std	Y+57, r21	; 0x39
    2724:	0a c0       	rjmp	.+20     	; 0x273a <fat_open+0x1dc>
    else if(sectors_per_fat32 == 0)
    2726:	6e a9       	ldd	r22, Y+54	; 0x36
    2728:	7f a9       	ldd	r23, Y+55	; 0x37
    272a:	88 ad       	ldd	r24, Y+56	; 0x38
    272c:	99 ad       	ldd	r25, Y+57	; 0x39
    272e:	61 15       	cp	r22, r1
    2730:	71 05       	cpc	r23, r1
    2732:	81 05       	cpc	r24, r1
    2734:	91 05       	cpc	r25, r1
    2736:	09 f4       	brne	.+2      	; 0x273a <fat_open+0x1dc>
    2738:	2e c3       	rjmp	.+1628   	; 0x2d96 <fat_open+0x838>
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    273a:	ee a5       	ldd	r30, Y+46	; 0x2e
    273c:	ff a5       	ldd	r31, Y+47	; 0x2f
    273e:	cf 01       	movw	r24, r30
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	86 01       	movw	r16, r12
    2746:	75 01       	movw	r14, r10
    2748:	e8 1a       	sub	r14, r24
    274a:	f9 0a       	sbc	r15, r25
    274c:	0a 0b       	sbc	r16, r26
    274e:	1b 0b       	sbc	r17, r27
    2750:	f9 a9       	ldd	r31, Y+49	; 0x31
    2752:	2f 2f       	mov	r18, r31
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	6e a9       	ldd	r22, Y+54	; 0x36
    275c:	7f a9       	ldd	r23, Y+55	; 0x37
    275e:	88 ad       	ldd	r24, Y+56	; 0x38
    2760:	99 ad       	ldd	r25, Y+57	; 0x39
    2762:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    2766:	e6 1a       	sub	r14, r22
    2768:	f7 0a       	sbc	r15, r23
    276a:	08 0b       	sbc	r16, r24
    276c:	19 0b       	sbc	r17, r25
    276e:	c1 01       	movw	r24, r2
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	2a a9       	ldd	r18, Y+50	; 0x32
    2774:	3b a9       	ldd	r19, Y+51	; 0x33
    2776:	45 e0       	ldi	r20, 0x05	; 5
    2778:	22 0f       	add	r18, r18
    277a:	33 1f       	adc	r19, r19
    277c:	4a 95       	dec	r20
    277e:	e1 f7       	brne	.-8      	; 0x2778 <fat_open+0x21a>
    2780:	82 0f       	add	r24, r18
    2782:	93 1f       	adc	r25, r19
    2784:	b1 01       	movw	r22, r2
    2786:	0e 94 25 44 	call	0x884a	; 0x884a <__udivmodhi4>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	e6 1a       	sub	r14, r22
    2790:	f7 0a       	sbc	r15, r23
    2792:	08 0b       	sbc	r16, r24
    2794:	19 0b       	sbc	r17, r25
    2796:	68 a9       	ldd	r22, Y+48	; 0x30
    2798:	26 2f       	mov	r18, r22
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	c8 01       	movw	r24, r16
    27a2:	b7 01       	movw	r22, r14
    27a4:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    27a8:	39 01       	movw	r6, r18
    27aa:	4a 01       	movw	r8, r20
    if(data_cluster_count < 4085)
    27ac:	75 ef       	ldi	r23, 0xF5	; 245
    27ae:	67 16       	cp	r6, r23
    27b0:	7f e0       	ldi	r23, 0x0F	; 15
    27b2:	77 06       	cpc	r7, r23
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	87 06       	cpc	r8, r23
    27b8:	70 e0       	ldi	r23, 0x00	; 0
    27ba:	97 06       	cpc	r9, r23
    27bc:	08 f4       	brcc	.+2      	; 0x27c0 <fat_open+0x262>
    27be:	eb c2       	rjmp	.+1494   	; 0x2d96 <fat_open+0x838>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    27c0:	85 ef       	ldi	r24, 0xF5	; 245
    27c2:	68 16       	cp	r6, r24
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	78 06       	cpc	r7, r24
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	88 06       	cpc	r8, r24
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	98 06       	cpc	r9, r24
    27d0:	28 f4       	brcc	.+10     	; 0x27dc <fat_open+0x27e>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    27d2:	86 e0       	ldi	r24, 0x06	; 6
    27d4:	d2 01       	movw	r26, r4
    27d6:	18 96       	adiw	r26, 0x08	; 8
    27d8:	8c 93       	st	X, r24
    27da:	03 c0       	rjmp	.+6      	; 0x27e2 <fat_open+0x284>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    27dc:	8b e0       	ldi	r24, 0x0B	; 11
    27de:	f2 01       	movw	r30, r4
    27e0:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    27e2:	8c e2       	ldi	r24, 0x2C	; 44
    27e4:	e6 e3       	ldi	r30, 0x36	; 54
    27e6:	f1 e0       	ldi	r31, 0x01	; 1
    27e8:	df 01       	movw	r26, r30
    27ea:	1d 92       	st	X+, r1
    27ec:	8a 95       	dec	r24
    27ee:	e9 f7       	brne	.-6      	; 0x27ea <fat_open+0x28c>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    27f0:	71 01       	movw	r14, r2
    27f2:	00 e0       	ldi	r16, 0x00	; 0
    27f4:	10 e0       	ldi	r17, 0x00	; 0
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e0       	ldi	r20, 0x00	; 0
    27fc:	50 e0       	ldi	r21, 0x00	; 0
    27fe:	2e a2       	std	Y+38, r2	; 0x26
    2800:	ff a2       	std	Y+39, r15	; 0x27
    2802:	08 a7       	std	Y+40, r16	; 0x28
    2804:	19 a7       	std	Y+41, r17	; 0x29
    2806:	2a a7       	std	Y+42, r18	; 0x2a
    2808:	3b a7       	std	Y+43, r19	; 0x2b
    280a:	4c a7       	std	Y+44, r20	; 0x2c
    280c:	5d a7       	std	Y+45, r21	; 0x2d
    280e:	95 01       	movw	r18, r10
    2810:	a6 01       	movw	r20, r12
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	ae a0       	ldd	r10, Y+38	; 0x26
    281c:	bf a0       	ldd	r11, Y+39	; 0x27
    281e:	cc 24       	eor	r12, r12
    2820:	dd 24       	eor	r13, r13
    2822:	ee 24       	eor	r14, r14
    2824:	ff 24       	eor	r15, r15
    2826:	00 e0       	ldi	r16, 0x00	; 0
    2828:	10 e0       	ldi	r17, 0x00	; 0
    282a:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    282e:	20 93 36 01 	sts	0x0136, r18
    2832:	30 93 37 01 	sts	0x0137, r19
    2836:	40 93 38 01 	sts	0x0138, r20
    283a:	50 93 39 01 	sts	0x0139, r21
    283e:	60 93 3a 01 	sts	0x013A, r22
    2842:	70 93 3b 01 	sts	0x013B, r23
    2846:	80 93 3c 01 	sts	0x013C, r24
    284a:	90 93 3d 01 	sts	0x013D, r25

    header->fat_offset = /* jump to partition */
    284e:	0e a5       	ldd	r16, Y+46	; 0x2e
    2850:	1f a5       	ldd	r17, Y+47	; 0x2f
    2852:	98 01       	movw	r18, r16
    2854:	40 e0       	ldi	r20, 0x00	; 0
    2856:	50 e0       	ldi	r21, 0x00	; 0
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	70 e0       	ldi	r23, 0x00	; 0
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	00 e0       	ldi	r16, 0x00	; 0
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2868:	a3 2f       	mov	r26, r19
    286a:	b4 2f       	mov	r27, r20
    286c:	15 2f       	mov	r17, r21
    286e:	06 2f       	mov	r16, r22
    2870:	f7 2e       	mov	r15, r23
    2872:	d8 2e       	mov	r13, r24
    2874:	ce ac       	ldd	r12, Y+62	; 0x3e
    2876:	c2 0e       	add	r12, r18
    2878:	f1 e0       	ldi	r31, 0x01	; 1
    287a:	c2 16       	cp	r12, r18
    287c:	08 f0       	brcs	.+2      	; 0x2880 <fat_open+0x322>
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	3f ad       	ldd	r19, Y+63	; 0x3f
    2882:	3a 0f       	add	r19, r26
    2884:	e1 e0       	ldi	r30, 0x01	; 1
    2886:	3a 17       	cp	r19, r26
    2888:	08 f0       	brcs	.+2      	; 0x288c <fat_open+0x32e>
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	ef 2e       	mov	r14, r31
    288e:	e3 0e       	add	r14, r19
    2890:	21 e0       	ldi	r18, 0x01	; 1
    2892:	e3 16       	cp	r14, r19
    2894:	08 f0       	brcs	.+2      	; 0x2898 <fat_open+0x33a>
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	e2 2b       	or	r30, r18
    289a:	21 96       	adiw	r28, 0x01	; 1
    289c:	4f ad       	ldd	r20, Y+63	; 0x3f
    289e:	21 97       	sbiw	r28, 0x01	; 1
    28a0:	4b 0f       	add	r20, r27
    28a2:	31 e0       	ldi	r19, 0x01	; 1
    28a4:	4b 17       	cp	r20, r27
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <fat_open+0x34c>
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	ae 2f       	mov	r26, r30
    28ac:	a4 0f       	add	r26, r20
    28ae:	21 e0       	ldi	r18, 0x01	; 1
    28b0:	a4 17       	cp	r26, r20
    28b2:	08 f0       	brcs	.+2      	; 0x28b6 <fat_open+0x358>
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	32 2b       	or	r19, r18
    28b8:	22 96       	adiw	r28, 0x02	; 2
    28ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    28bc:	22 97       	sbiw	r28, 0x02	; 2
    28be:	51 0f       	add	r21, r17
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	51 17       	cp	r21, r17
    28c4:	08 f0       	brcs	.+2      	; 0x28c8 <fat_open+0x36a>
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	f3 2f       	mov	r31, r19
    28ca:	f5 0f       	add	r31, r21
    28cc:	21 e0       	ldi	r18, 0x01	; 1
    28ce:	f5 17       	cp	r31, r21
    28d0:	08 f0       	brcs	.+2      	; 0x28d4 <fat_open+0x376>
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	42 2b       	or	r20, r18
    28d6:	23 96       	adiw	r28, 0x03	; 3
    28d8:	6f ad       	ldd	r22, Y+63	; 0x3f
    28da:	23 97       	sbiw	r28, 0x03	; 3
    28dc:	60 0f       	add	r22, r16
    28de:	31 e0       	ldi	r19, 0x01	; 1
    28e0:	60 17       	cp	r22, r16
    28e2:	08 f0       	brcs	.+2      	; 0x28e6 <fat_open+0x388>
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	e4 2f       	mov	r30, r20
    28e8:	e6 0f       	add	r30, r22
    28ea:	21 e0       	ldi	r18, 0x01	; 1
    28ec:	e6 17       	cp	r30, r22
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <fat_open+0x394>
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	32 2b       	or	r19, r18
    28f4:	24 96       	adiw	r28, 0x04	; 4
    28f6:	7f ad       	ldd	r23, Y+63	; 0x3f
    28f8:	24 97       	sbiw	r28, 0x04	; 4
    28fa:	7f 0d       	add	r23, r15
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	7f 15       	cp	r23, r15
    2900:	08 f0       	brcs	.+2      	; 0x2904 <fat_open+0x3a6>
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	53 2f       	mov	r21, r19
    2906:	57 0f       	add	r21, r23
    2908:	21 e0       	ldi	r18, 0x01	; 1
    290a:	57 17       	cp	r21, r23
    290c:	08 f0       	brcs	.+2      	; 0x2910 <fat_open+0x3b2>
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	42 2b       	or	r20, r18
    2912:	25 96       	adiw	r28, 0x05	; 5
    2914:	8f ad       	ldd	r24, Y+63	; 0x3f
    2916:	25 97       	sbiw	r28, 0x05	; 5
    2918:	8d 0d       	add	r24, r13
    291a:	21 e0       	ldi	r18, 0x01	; 1
    291c:	8d 15       	cp	r24, r13
    291e:	08 f0       	brcs	.+2      	; 0x2922 <fat_open+0x3c4>
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	48 0f       	add	r20, r24
    2924:	31 e0       	ldi	r19, 0x01	; 1
    2926:	48 17       	cp	r20, r24
    2928:	08 f0       	brcs	.+2      	; 0x292c <fat_open+0x3ce>
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	23 2b       	or	r18, r19
    292e:	26 96       	adiw	r28, 0x06	; 6
    2930:	1f ad       	ldd	r17, Y+63	; 0x3f
    2932:	26 97       	sbiw	r28, 0x06	; 6
    2934:	91 0f       	add	r25, r17
    2936:	29 0f       	add	r18, r25
    2938:	c0 92 3e 01 	sts	0x013E, r12
    293c:	e0 92 3f 01 	sts	0x013F, r14
    2940:	a0 93 40 01 	sts	0x0140, r26
    2944:	f0 93 41 01 	sts	0x0141, r31
    2948:	e0 93 42 01 	sts	0x0142, r30
    294c:	50 93 43 01 	sts	0x0143, r21
    2950:	40 93 44 01 	sts	0x0144, r20
    2954:	20 93 45 01 	sts	0x0145, r18
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    2958:	d2 01       	movw	r26, r4
    295a:	18 96       	adiw	r26, 0x08	; 8
    295c:	8c 91       	ld	r24, X
    295e:	86 30       	cpi	r24, 0x06	; 6
    2960:	29 f0       	breq	.+10     	; 0x296c <fat_open+0x40e>
    2962:	64 e0       	ldi	r22, 0x04	; 4
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	04 c0       	rjmp	.+8      	; 0x2974 <fat_open+0x416>
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	22 e0       	ldi	r18, 0x02	; 2
    2976:	e2 2e       	mov	r14, r18
    2978:	f1 2c       	mov	r15, r1
    297a:	01 2d       	mov	r16, r1
    297c:	11 2d       	mov	r17, r1
    297e:	6e 0c       	add	r6, r14
    2980:	7f 1c       	adc	r7, r15
    2982:	80 1e       	adc	r8, r16
    2984:	91 1e       	adc	r9, r17
    2986:	a4 01       	movw	r20, r8
    2988:	93 01       	movw	r18, r6
    298a:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    298e:	60 93 46 01 	sts	0x0146, r22
    2992:	70 93 47 01 	sts	0x0147, r23
    2996:	80 93 48 01 	sts	0x0148, r24
    299a:	90 93 49 01 	sts	0x0149, r25

    header->sector_size = bytes_per_sector;
    299e:	30 92 4b 01 	sts	0x014B, r3
    29a2:	20 92 4a 01 	sts	0x014A, r2
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    29a6:	f8 a8       	ldd	r15, Y+48	; 0x30
    29a8:	8f 2d       	mov	r24, r15
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	8c 01       	movw	r16, r24
    29ae:	02 9d       	mul	r16, r2
    29b0:	c0 01       	movw	r24, r0
    29b2:	03 9d       	mul	r16, r3
    29b4:	90 0d       	add	r25, r0
    29b6:	12 9d       	mul	r17, r2
    29b8:	90 0d       	add	r25, r0
    29ba:	11 24       	eor	r1, r1
    29bc:	90 93 4d 01 	sts	0x014D, r25
    29c0:	80 93 4c 01 	sts	0x014C, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    29c4:	d2 01       	movw	r26, r4
    29c6:	18 96       	adiw	r26, 0x08	; 8
    29c8:	8c 91       	ld	r24, X
    29ca:	f9 a8       	ldd	r15, Y+49	; 0x31
    29cc:	ef 2c       	mov	r14, r15
    29ce:	ff 24       	eor	r15, r15
    29d0:	00 e0       	ldi	r16, 0x00	; 0
    29d2:	10 e0       	ldi	r17, 0x00	; 0
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	27 96       	adiw	r28, 0x07	; 7
    29de:	ef ae       	std	Y+63, r14	; 0x3f
    29e0:	27 97       	sbiw	r28, 0x07	; 7
    29e2:	28 96       	adiw	r28, 0x08	; 8
    29e4:	ff ae       	std	Y+63, r15	; 0x3f
    29e6:	28 97       	sbiw	r28, 0x08	; 8
    29e8:	29 96       	adiw	r28, 0x09	; 9
    29ea:	0f af       	std	Y+63, r16	; 0x3f
    29ec:	29 97       	sbiw	r28, 0x09	; 9
    29ee:	2a 96       	adiw	r28, 0x0a	; 10
    29f0:	1f af       	std	Y+63, r17	; 0x3f
    29f2:	2a 97       	sbiw	r28, 0x0a	; 10
    29f4:	2b 96       	adiw	r28, 0x0b	; 11
    29f6:	2f af       	std	Y+63, r18	; 0x3f
    29f8:	2b 97       	sbiw	r28, 0x0b	; 11
    29fa:	2c 96       	adiw	r28, 0x0c	; 12
    29fc:	3f af       	std	Y+63, r19	; 0x3f
    29fe:	2c 97       	sbiw	r28, 0x0c	; 12
    2a00:	2d 96       	adiw	r28, 0x0d	; 13
    2a02:	4f af       	std	Y+63, r20	; 0x3f
    2a04:	2d 97       	sbiw	r28, 0x0d	; 13
    2a06:	2e 96       	adiw	r28, 0x0e	; 14
    2a08:	5f af       	std	Y+63, r21	; 0x3f
    2a0a:	2e 97       	sbiw	r28, 0x0e	; 14
    2a0c:	86 30       	cpi	r24, 0x06	; 6
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <fat_open+0x4b4>
    2a10:	fa c0       	rjmp	.+500    	; 0x2c06 <fat_open+0x6a8>
#endif
    {
        header->root_dir_offset = /* jump to fats */
    2a12:	0c a9       	ldd	r16, Y+52	; 0x34
    2a14:	1d a9       	ldd	r17, Y+53	; 0x35
    2a16:	2e a1       	ldd	r18, Y+38	; 0x26
    2a18:	3f a1       	ldd	r19, Y+39	; 0x27
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	50 e0       	ldi	r21, 0x00	; 0
    2a1e:	60 e0       	ldi	r22, 0x00	; 0
    2a20:	70 e0       	ldi	r23, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	58 01       	movw	r10, r16
    2a28:	cc 24       	eor	r12, r12
    2a2a:	dd 24       	eor	r13, r13
    2a2c:	ee 24       	eor	r14, r14
    2a2e:	ff 24       	eor	r15, r15
    2a30:	00 e0       	ldi	r16, 0x00	; 0
    2a32:	10 e0       	ldi	r17, 0x00	; 0
    2a34:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2a38:	27 96       	adiw	r28, 0x07	; 7
    2a3a:	af ac       	ldd	r10, Y+63	; 0x3f
    2a3c:	27 97       	sbiw	r28, 0x07	; 7
    2a3e:	bb 24       	eor	r11, r11
    2a40:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2a44:	f0 90 3e 01 	lds	r15, 0x013E
    2a48:	e0 91 3f 01 	lds	r30, 0x013F
    2a4c:	b0 91 40 01 	lds	r27, 0x0140
    2a50:	10 91 41 01 	lds	r17, 0x0141
    2a54:	00 91 42 01 	lds	r16, 0x0142
    2a58:	a0 90 43 01 	lds	r10, 0x0143
    2a5c:	90 90 44 01 	lds	r9, 0x0144
    2a60:	a0 91 45 01 	lds	r26, 0x0145
    2a64:	f2 0e       	add	r15, r18
    2a66:	f1 e0       	ldi	r31, 0x01	; 1
    2a68:	f2 16       	cp	r15, r18
    2a6a:	08 f0       	brcs	.+2      	; 0x2a6e <fat_open+0x510>
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	23 2f       	mov	r18, r19
    2a70:	2e 0f       	add	r18, r30
    2a72:	e1 e0       	ldi	r30, 0x01	; 1
    2a74:	23 17       	cp	r18, r19
    2a76:	08 f0       	brcs	.+2      	; 0x2a7a <fat_open+0x51c>
    2a78:	e0 e0       	ldi	r30, 0x00	; 0
    2a7a:	ef 2e       	mov	r14, r31
    2a7c:	e2 0e       	add	r14, r18
    2a7e:	31 e0       	ldi	r19, 0x01	; 1
    2a80:	e2 16       	cp	r14, r18
    2a82:	08 f0       	brcs	.+2      	; 0x2a86 <fat_open+0x528>
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	e3 2b       	or	r30, r19
    2a88:	24 2f       	mov	r18, r20
    2a8a:	2b 0f       	add	r18, r27
    2a8c:	f1 e0       	ldi	r31, 0x01	; 1
    2a8e:	24 17       	cp	r18, r20
    2a90:	08 f0       	brcs	.+2      	; 0x2a94 <fat_open+0x536>
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	de 2e       	mov	r13, r30
    2a96:	d2 0e       	add	r13, r18
    2a98:	31 e0       	ldi	r19, 0x01	; 1
    2a9a:	d2 16       	cp	r13, r18
    2a9c:	08 f0       	brcs	.+2      	; 0x2aa0 <fat_open+0x542>
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	f3 2b       	or	r31, r19
    2aa2:	25 2f       	mov	r18, r21
    2aa4:	21 0f       	add	r18, r17
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	25 17       	cp	r18, r21
    2aaa:	08 f0       	brcs	.+2      	; 0x2aae <fat_open+0x550>
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	cf 2e       	mov	r12, r31
    2ab0:	c2 0e       	add	r12, r18
    2ab2:	31 e0       	ldi	r19, 0x01	; 1
    2ab4:	c2 16       	cp	r12, r18
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <fat_open+0x55c>
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	43 2b       	or	r20, r19
    2abc:	26 2f       	mov	r18, r22
    2abe:	20 0f       	add	r18, r16
    2ac0:	51 e0       	ldi	r21, 0x01	; 1
    2ac2:	26 17       	cp	r18, r22
    2ac4:	08 f0       	brcs	.+2      	; 0x2ac8 <fat_open+0x56a>
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	b4 2e       	mov	r11, r20
    2aca:	b2 0e       	add	r11, r18
    2acc:	31 e0       	ldi	r19, 0x01	; 1
    2ace:	b2 16       	cp	r11, r18
    2ad0:	08 f0       	brcs	.+2      	; 0x2ad4 <fat_open+0x576>
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	53 2b       	or	r21, r19
    2ad6:	27 2f       	mov	r18, r23
    2ad8:	2a 0d       	add	r18, r10
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	27 17       	cp	r18, r23
    2ade:	08 f0       	brcs	.+2      	; 0x2ae2 <fat_open+0x584>
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	a5 2e       	mov	r10, r21
    2ae4:	a2 0e       	add	r10, r18
    2ae6:	31 e0       	ldi	r19, 0x01	; 1
    2ae8:	a2 16       	cp	r10, r18
    2aea:	08 f0       	brcs	.+2      	; 0x2aee <fat_open+0x590>
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	43 2b       	or	r20, r19
    2af0:	28 2f       	mov	r18, r24
    2af2:	29 0d       	add	r18, r9
    2af4:	31 e0       	ldi	r19, 0x01	; 1
    2af6:	28 17       	cp	r18, r24
    2af8:	08 f0       	brcs	.+2      	; 0x2afc <fat_open+0x59e>
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	94 2e       	mov	r9, r20
    2afe:	92 0e       	add	r9, r18
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	92 16       	cp	r9, r18
    2b04:	08 f0       	brcs	.+2      	; 0x2b08 <fat_open+0x5aa>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	13 2f       	mov	r17, r19
    2b0a:	18 2b       	or	r17, r24
    2b0c:	a9 0f       	add	r26, r25
    2b0e:	1a 0f       	add	r17, r26
    2b10:	f0 92 56 01 	sts	0x0156, r15
    2b14:	e0 92 57 01 	sts	0x0157, r14
    2b18:	d0 92 58 01 	sts	0x0158, r13
    2b1c:	c0 92 59 01 	sts	0x0159, r12
    2b20:	b0 92 5a 01 	sts	0x015A, r11
    2b24:	a0 92 5b 01 	sts	0x015B, r10
    2b28:	90 92 5c 01 	sts	0x015C, r9
    2b2c:	10 93 5d 01 	sts	0x015D, r17
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    2b30:	2a a9       	ldd	r18, Y+50	; 0x32
    2b32:	3b a9       	ldd	r19, Y+51	; 0x33
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	80 e0       	ldi	r24, 0x00	; 0
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	05 e0       	ldi	r16, 0x05	; 5
    2b42:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
    2b46:	2f 0d       	add	r18, r15
    2b48:	e1 e0       	ldi	r30, 0x01	; 1
    2b4a:	2f 15       	cp	r18, r15
    2b4c:	08 f0       	brcs	.+2      	; 0x2b50 <fat_open+0x5f2>
    2b4e:	e0 e0       	ldi	r30, 0x00	; 0
    2b50:	3e 0d       	add	r19, r14
    2b52:	f1 e0       	ldi	r31, 0x01	; 1
    2b54:	3e 15       	cp	r19, r14
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <fat_open+0x5fc>
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	be 2f       	mov	r27, r30
    2b5c:	b3 0f       	add	r27, r19
    2b5e:	e1 e0       	ldi	r30, 0x01	; 1
    2b60:	b3 17       	cp	r27, r19
    2b62:	08 f0       	brcs	.+2      	; 0x2b66 <fat_open+0x608>
    2b64:	e0 e0       	ldi	r30, 0x00	; 0
    2b66:	fe 2b       	or	r31, r30
    2b68:	4d 0d       	add	r20, r13
    2b6a:	e1 e0       	ldi	r30, 0x01	; 1
    2b6c:	4d 15       	cp	r20, r13
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <fat_open+0x614>
    2b70:	e0 e0       	ldi	r30, 0x00	; 0
    2b72:	af 2f       	mov	r26, r31
    2b74:	a4 0f       	add	r26, r20
    2b76:	31 e0       	ldi	r19, 0x01	; 1
    2b78:	a4 17       	cp	r26, r20
    2b7a:	08 f0       	brcs	.+2      	; 0x2b7e <fat_open+0x620>
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	e3 2b       	or	r30, r19
    2b80:	5c 0d       	add	r21, r12
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	5c 15       	cp	r21, r12
    2b86:	08 f0       	brcs	.+2      	; 0x2b8a <fat_open+0x62c>
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	fe 2f       	mov	r31, r30
    2b8c:	f5 0f       	add	r31, r21
    2b8e:	31 e0       	ldi	r19, 0x01	; 1
    2b90:	f5 17       	cp	r31, r21
    2b92:	08 f0       	brcs	.+2      	; 0x2b96 <fat_open+0x638>
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	43 2b       	or	r20, r19
    2b98:	6b 0d       	add	r22, r11
    2b9a:	51 e0       	ldi	r21, 0x01	; 1
    2b9c:	6b 15       	cp	r22, r11
    2b9e:	08 f0       	brcs	.+2      	; 0x2ba2 <fat_open+0x644>
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	e4 2f       	mov	r30, r20
    2ba4:	e6 0f       	add	r30, r22
    2ba6:	31 e0       	ldi	r19, 0x01	; 1
    2ba8:	e6 17       	cp	r30, r22
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <fat_open+0x650>
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	53 2b       	or	r21, r19
    2bb0:	7a 0d       	add	r23, r10
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	7a 15       	cp	r23, r10
    2bb6:	08 f0       	brcs	.+2      	; 0x2bba <fat_open+0x65c>
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	65 2f       	mov	r22, r21
    2bbc:	67 0f       	add	r22, r23
    2bbe:	31 e0       	ldi	r19, 0x01	; 1
    2bc0:	67 17       	cp	r22, r23
    2bc2:	08 f0       	brcs	.+2      	; 0x2bc6 <fat_open+0x668>
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	43 2b       	or	r20, r19
    2bc8:	89 0d       	add	r24, r9
    2bca:	31 e0       	ldi	r19, 0x01	; 1
    2bcc:	89 15       	cp	r24, r9
    2bce:	08 f0       	brcs	.+2      	; 0x2bd2 <fat_open+0x674>
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	54 2f       	mov	r21, r20
    2bd4:	58 0f       	add	r21, r24
    2bd6:	41 e0       	ldi	r20, 0x01	; 1
    2bd8:	58 17       	cp	r21, r24
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <fat_open+0x680>
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	34 2b       	or	r19, r20
    2be0:	19 0f       	add	r17, r25
    2be2:	31 0f       	add	r19, r17
    2be4:	20 93 4e 01 	sts	0x014E, r18
    2be8:	b0 93 4f 01 	sts	0x014F, r27
    2bec:	a0 93 50 01 	sts	0x0150, r26
    2bf0:	f0 93 51 01 	sts	0x0151, r31
    2bf4:	e0 93 52 01 	sts	0x0152, r30
    2bf8:	60 93 53 01 	sts	0x0153, r22
    2bfc:	50 93 54 01 	sts	0x0154, r21
    2c00:	30 93 55 01 	sts	0x0155, r19
    2c04:	a1 c0       	rjmp	.+322    	; 0x2d48 <fat_open+0x7ea>
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    2c06:	27 96       	adiw	r28, 0x07	; 7
    2c08:	af ac       	ldd	r10, Y+63	; 0x3f
    2c0a:	27 97       	sbiw	r28, 0x07	; 7
    2c0c:	2e a1       	ldd	r18, Y+38	; 0x26
    2c0e:	3f a1       	ldd	r19, Y+39	; 0x27
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	bb 24       	eor	r11, r11
    2c1e:	cc 24       	eor	r12, r12
    2c20:	dd 24       	eor	r13, r13
    2c22:	ee 24       	eor	r14, r14
    2c24:	ff 24       	eor	r15, r15
    2c26:	00 e0       	ldi	r16, 0x00	; 0
    2c28:	10 e0       	ldi	r17, 0x00	; 0
    2c2a:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2c2e:	ee a8       	ldd	r14, Y+54	; 0x36
    2c30:	ff a8       	ldd	r15, Y+55	; 0x37
    2c32:	08 ad       	ldd	r16, Y+56	; 0x38
    2c34:	19 ad       	ldd	r17, Y+57	; 0x39
    2c36:	17 01       	movw	r2, r14
    2c38:	28 01       	movw	r4, r16
    2c3a:	57 01       	movw	r10, r14
    2c3c:	62 01       	movw	r12, r4
    2c3e:	ee 24       	eor	r14, r14
    2c40:	ff 24       	eor	r15, r15
    2c42:	00 e0       	ldi	r16, 0x00	; 0
    2c44:	10 e0       	ldi	r17, 0x00	; 0
    2c46:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2c4a:	a0 91 3e 01 	lds	r26, 0x013E
    2c4e:	e0 91 3f 01 	lds	r30, 0x013F
    2c52:	10 91 40 01 	lds	r17, 0x0140
    2c56:	00 91 41 01 	lds	r16, 0x0141
    2c5a:	f0 90 42 01 	lds	r15, 0x0142
    2c5e:	d0 90 43 01 	lds	r13, 0x0143
    2c62:	c0 90 44 01 	lds	r12, 0x0144
    2c66:	b0 91 45 01 	lds	r27, 0x0145
    2c6a:	a2 0f       	add	r26, r18
    2c6c:	f1 e0       	ldi	r31, 0x01	; 1
    2c6e:	a2 17       	cp	r26, r18
    2c70:	08 f0       	brcs	.+2      	; 0x2c74 <fat_open+0x716>
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	23 2f       	mov	r18, r19
    2c76:	2e 0f       	add	r18, r30
    2c78:	e1 e0       	ldi	r30, 0x01	; 1
    2c7a:	23 17       	cp	r18, r19
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <fat_open+0x722>
    2c7e:	e0 e0       	ldi	r30, 0x00	; 0
    2c80:	ef 2e       	mov	r14, r31
    2c82:	e2 0e       	add	r14, r18
    2c84:	31 e0       	ldi	r19, 0x01	; 1
    2c86:	e2 16       	cp	r14, r18
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <fat_open+0x72e>
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	e3 2b       	or	r30, r19
    2c8e:	24 2f       	mov	r18, r20
    2c90:	21 0f       	add	r18, r17
    2c92:	f1 e0       	ldi	r31, 0x01	; 1
    2c94:	24 17       	cp	r18, r20
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <fat_open+0x73c>
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	1e 2f       	mov	r17, r30
    2c9c:	12 0f       	add	r17, r18
    2c9e:	31 e0       	ldi	r19, 0x01	; 1
    2ca0:	12 17       	cp	r17, r18
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <fat_open+0x748>
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	f3 2b       	or	r31, r19
    2ca8:	25 2f       	mov	r18, r21
    2caa:	20 0f       	add	r18, r16
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	25 17       	cp	r18, r21
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <fat_open+0x756>
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	ef 2f       	mov	r30, r31
    2cb6:	e2 0f       	add	r30, r18
    2cb8:	31 e0       	ldi	r19, 0x01	; 1
    2cba:	e2 17       	cp	r30, r18
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <fat_open+0x762>
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	43 2b       	or	r20, r19
    2cc2:	26 2f       	mov	r18, r22
    2cc4:	2f 0d       	add	r18, r15
    2cc6:	51 e0       	ldi	r21, 0x01	; 1
    2cc8:	26 17       	cp	r18, r22
    2cca:	08 f0       	brcs	.+2      	; 0x2cce <fat_open+0x770>
    2ccc:	50 e0       	ldi	r21, 0x00	; 0
    2cce:	64 2f       	mov	r22, r20
    2cd0:	62 0f       	add	r22, r18
    2cd2:	31 e0       	ldi	r19, 0x01	; 1
    2cd4:	62 17       	cp	r22, r18
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <fat_open+0x77c>
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	53 2b       	or	r21, r19
    2cdc:	27 2f       	mov	r18, r23
    2cde:	2d 0d       	add	r18, r13
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	27 17       	cp	r18, r23
    2ce4:	08 f0       	brcs	.+2      	; 0x2ce8 <fat_open+0x78a>
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	52 0f       	add	r21, r18
    2cea:	31 e0       	ldi	r19, 0x01	; 1
    2cec:	52 17       	cp	r21, r18
    2cee:	08 f0       	brcs	.+2      	; 0x2cf2 <fat_open+0x794>
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	43 2b       	or	r20, r19
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	2c 0d       	add	r18, r12
    2cf8:	31 e0       	ldi	r19, 0x01	; 1
    2cfa:	28 17       	cp	r18, r24
    2cfc:	08 f0       	brcs	.+2      	; 0x2d00 <fat_open+0x7a2>
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	42 0f       	add	r20, r18
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	42 17       	cp	r20, r18
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <fat_open+0x7ac>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	38 2b       	or	r19, r24
    2d0c:	b9 0f       	add	r27, r25
    2d0e:	3b 0f       	add	r19, r27
    2d10:	a0 93 4e 01 	sts	0x014E, r26
    2d14:	e0 92 4f 01 	sts	0x014F, r14
    2d18:	10 93 50 01 	sts	0x0150, r17
    2d1c:	e0 93 51 01 	sts	0x0151, r30
    2d20:	60 93 52 01 	sts	0x0152, r22
    2d24:	50 93 53 01 	sts	0x0153, r21
    2d28:	40 93 54 01 	sts	0x0154, r20
    2d2c:	30 93 55 01 	sts	0x0155, r19
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    2d30:	0a ad       	ldd	r16, Y+58	; 0x3a
    2d32:	1b ad       	ldd	r17, Y+59	; 0x3b
    2d34:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d36:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d38:	00 93 5e 01 	sts	0x015E, r16
    2d3c:	10 93 5f 01 	sts	0x015F, r17
    2d40:	20 93 60 01 	sts	0x0160, r18
    2d44:	30 93 61 01 	sts	0x0161, r19
    2d48:	24 e3       	ldi	r18, 0x34	; 52
    2d4a:	31 e0       	ldi	r19, 0x01	; 1
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <fat_open+0x7f4>
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    2d52:	c9 01       	movw	r24, r18
    2d54:	c3 5b       	subi	r28, 0xB3	; 179
    2d56:	df 4f       	sbci	r29, 0xFF	; 255
    2d58:	0f b6       	in	r0, 0x3f	; 63
    2d5a:	f8 94       	cli
    2d5c:	de bf       	out	0x3e, r29	; 62
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	1f 91       	pop	r17
    2d68:	0f 91       	pop	r16
    2d6a:	ff 90       	pop	r15
    2d6c:	ef 90       	pop	r14
    2d6e:	df 90       	pop	r13
    2d70:	cf 90       	pop	r12
    2d72:	bf 90       	pop	r11
    2d74:	af 90       	pop	r10
    2d76:	9f 90       	pop	r9
    2d78:	8f 90       	pop	r8
    2d7a:	7f 90       	pop	r7
    2d7c:	6f 90       	pop	r6
    2d7e:	5f 90       	pop	r5
    2d80:	4f 90       	pop	r4
    2d82:	3f 90       	pop	r3
    2d84:	2f 90       	pop	r2
    2d86:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!(fs->partition))
    2d88:	80 91 34 01 	lds	r24, 0x0134
    2d8c:	90 91 35 01 	lds	r25, 0x0135
    2d90:	89 2b       	or	r24, r25
    2d92:	e9 f6       	brne	.-70     	; 0x2d4e <fat_open+0x7f0>
    2d94:	13 cc       	rjmp	.-2010   	; 0x25bc <fat_open+0x5e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    2d96:	10 92 35 01 	sts	0x0135, r1
    2d9a:	10 92 34 01 	sts	0x0134, r1
    2d9e:	d7 cf       	rjmp	.-82     	; 0x2d4e <fat_open+0x7f0>

00002da0 <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    2da0:	2f 92       	push	r2
    2da2:	3f 92       	push	r3
    2da4:	4f 92       	push	r4
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	df 93       	push	r29
    2dc2:	cf 93       	push	r28
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	69 97       	sbiw	r28, 0x19	; 25
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	9d 87       	std	Y+13, r25	; 0x0d
    2dd6:	8c 87       	std	Y+12, r24	; 0x0c
    2dd8:	9b 01       	movw	r18, r22
    if(!fs || !dir_entry)
    2dda:	89 2b       	or	r24, r25
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <fat_find_offset_for_dir_entry+0x40>
    2dde:	e2 c2       	rjmp	.+1476   	; 0x33a4 <fat_find_offset_for_dir_entry+0x604>
    2de0:	41 15       	cp	r20, r1
    2de2:	51 05       	cpc	r21, r1
    2de4:	09 f4       	brne	.+2      	; 0x2de8 <fat_find_offset_for_dir_entry+0x48>
    2de6:	de c2       	rjmp	.+1468   	; 0x33a4 <fat_find_offset_for_dir_entry+0x604>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    2de8:	da 01       	movw	r26, r20
    2dea:	0d 90       	ld	r0, X+
    2dec:	00 20       	and	r0, r0
    2dee:	e9 f7       	brne	.-6      	; 0x2dea <fat_find_offset_for_dir_entry+0x4a>
    2df0:	a4 1b       	sub	r26, r20
    2df2:	b5 0b       	sbc	r27, r21
    2df4:	cd 01       	movw	r24, r26
    2df6:	0b 96       	adiw	r24, 0x0b	; 11
    2df8:	6d e0       	ldi	r22, 0x0D	; 13
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	0e 94 25 44 	call	0x884a	; 0x884a <__udivmodhi4>
    2e00:	46 2f       	mov	r20, r22
    2e02:	4f 5f       	subi	r20, 0xFF	; 255
    2e04:	4b 87       	std	Y+11, r20	; 0x0b
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    2e06:	d9 01       	movw	r26, r18
    2e08:	93 96       	adiw	r26, 0x23	; 35
    2e0a:	8d 91       	ld	r24, X+
    2e0c:	9d 91       	ld	r25, X+
    2e0e:	0d 90       	ld	r0, X+
    2e10:	bc 91       	ld	r27, X
    2e12:	a0 2d       	mov	r26, r0
    2e14:	8e 83       	std	Y+6, r24	; 0x06
    2e16:	9f 83       	std	Y+7, r25	; 0x07
    2e18:	a8 87       	std	Y+8, r26	; 0x08
    2e1a:	b9 87       	std	Y+9, r27	; 0x09
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    2e1c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e1e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e20:	ed 91       	ld	r30, X+
    2e22:	fc 91       	ld	r31, X
    2e24:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    2e26:	2e 81       	ldd	r18, Y+6	; 0x06
    2e28:	3f 81       	ldd	r19, Y+7	; 0x07
    2e2a:	48 85       	ldd	r20, Y+8	; 0x08
    2e2c:	59 85       	ldd	r21, Y+9	; 0x09
    2e2e:	21 15       	cp	r18, r1
    2e30:	31 05       	cpc	r19, r1
    2e32:	41 05       	cpc	r20, r1
    2e34:	51 05       	cpc	r21, r1
    2e36:	71 f4       	brne	.+28     	; 0x2e54 <fat_find_offset_for_dir_entry+0xb4>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    2e38:	8b 30       	cpi	r24, 0x0B	; 11
    2e3a:	29 f5       	brne	.+74     	; 0x2e86 <fat_find_offset_for_dir_entry+0xe6>
        {
            cluster_num = fs->header.root_dir_cluster;
    2e3c:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e3e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e40:	9a 96       	adiw	r26, 0x2a	; 42
    2e42:	8d 91       	ld	r24, X+
    2e44:	9d 91       	ld	r25, X+
    2e46:	0d 90       	ld	r0, X+
    2e48:	bc 91       	ld	r27, X
    2e4a:	a0 2d       	mov	r26, r0
    2e4c:	8e 83       	std	Y+6, r24	; 0x06
    2e4e:	9f 83       	std	Y+7, r25	; 0x07
    2e50:	a8 87       	std	Y+8, r26	; 0x08
    2e52:	b9 87       	std	Y+9, r27	; 0x09
    2e54:	1e 8a       	std	Y+22, r1	; 0x16
    2e56:	1f 8a       	std	Y+23, r1	; 0x17
    2e58:	18 8e       	std	Y+24, r1	; 0x18
    2e5a:	19 8e       	std	Y+25, r1	; 0x19
    2e5c:	33 24       	eor	r3, r3
    2e5e:	44 24       	eor	r4, r4
    2e60:	55 24       	eor	r5, r5
    2e62:	66 24       	eor	r6, r6
    2e64:	dd 24       	eor	r13, r13
    2e66:	cc 24       	eor	r12, r12
    2e68:	bb 24       	eor	r11, r11
    2e6a:	aa 24       	eor	r10, r10
    2e6c:	22 24       	eor	r2, r2
    2e6e:	99 24       	eor	r9, r9
    2e70:	88 24       	eor	r8, r8
    2e72:	77 24       	eor	r7, r7
    2e74:	1e 86       	std	Y+14, r1	; 0x0e
    2e76:	1f 86       	std	Y+15, r1	; 0x0f
    2e78:	18 8a       	std	Y+16, r1	; 0x10
    2e7a:	19 8a       	std	Y+17, r1	; 0x11
    2e7c:	1a 8a       	std	Y+18, r1	; 0x12
    2e7e:	1b 8a       	std	Y+19, r1	; 0x13
    2e80:	1c 8a       	std	Y+20, r1	; 0x14
    2e82:	1d 8a       	std	Y+21, r1	; 0x15
    2e84:	34 c0       	rjmp	.+104    	; 0x2eee <fat_find_offset_for_dir_entry+0x14e>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    2e86:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e88:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e8a:	d2 a0       	ldd	r13, Z+34	; 0x22
    2e8c:	c3 a0       	ldd	r12, Z+35	; 0x23
    2e8e:	b4 a0       	ldd	r11, Z+36	; 0x24
    2e90:	a5 a0       	ldd	r10, Z+37	; 0x25
    2e92:	26 a0       	ldd	r2, Z+38	; 0x26
    2e94:	97 a0       	ldd	r9, Z+39	; 0x27
    2e96:	80 a4       	ldd	r8, Z+40	; 0x28
    2e98:	71 a4       	ldd	r7, Z+41	; 0x29
            offset_to = fs->header.cluster_zero_offset;
    2e9a:	f2 8d       	ldd	r31, Z+26	; 0x1a
    2e9c:	fe 87       	std	Y+14, r31	; 0x0e
    2e9e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ea0:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ea2:	5b 96       	adiw	r26, 0x1b	; 27
    2ea4:	bc 91       	ld	r27, X
    2ea6:	bf 87       	std	Y+15, r27	; 0x0f
    2ea8:	ec 85       	ldd	r30, Y+12	; 0x0c
    2eaa:	fd 85       	ldd	r31, Y+13	; 0x0d
    2eac:	f4 8d       	ldd	r31, Z+28	; 0x1c
    2eae:	f8 8b       	std	Y+16, r31	; 0x10
    2eb0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2eb2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2eb4:	5d 96       	adiw	r26, 0x1d	; 29
    2eb6:	bc 91       	ld	r27, X
    2eb8:	b9 8b       	std	Y+17, r27	; 0x11
    2eba:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ebc:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ebe:	f6 8d       	ldd	r31, Z+30	; 0x1e
    2ec0:	fa 8b       	std	Y+18, r31	; 0x12
    2ec2:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ec4:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ec6:	5f 96       	adiw	r26, 0x1f	; 31
    2ec8:	bc 91       	ld	r27, X
    2eca:	bb 8b       	std	Y+19, r27	; 0x13
    2ecc:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ece:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ed0:	f0 a1       	ldd	r31, Z+32	; 0x20
    2ed2:	fc 8b       	std	Y+20, r31	; 0x14
    2ed4:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ed6:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ed8:	91 96       	adiw	r26, 0x21	; 33
    2eda:	bc 91       	ld	r27, X
    2edc:	bd 8b       	std	Y+21, r27	; 0x15
    2ede:	de 8a       	std	Y+22, r13	; 0x16
    2ee0:	cf 8a       	std	Y+23, r12	; 0x17
    2ee2:	b8 8e       	std	Y+24, r11	; 0x18
    2ee4:	a9 8e       	std	Y+25, r10	; 0x19
    2ee6:	32 2c       	mov	r3, r2
    2ee8:	49 2c       	mov	r4, r9
    2eea:	58 2c       	mov	r5, r8
    2eec:	67 2c       	mov	r6, r7
    2eee:	1a 86       	std	Y+10, r1	; 0x0a
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    2ef0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ef2:	de 16       	cp	r13, r30
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <fat_find_offset_for_dir_entry+0x158>
    2ef6:	d1 c1       	rjmp	.+930    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2ef8:	ff 85       	ldd	r31, Y+15	; 0x0f
    2efa:	cf 16       	cp	r12, r31
    2efc:	09 f0       	breq	.+2      	; 0x2f00 <fat_find_offset_for_dir_entry+0x160>
    2efe:	cd c1       	rjmp	.+922    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f00:	28 89       	ldd	r18, Y+16	; 0x10
    2f02:	b2 16       	cp	r11, r18
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <fat_find_offset_for_dir_entry+0x168>
    2f06:	c9 c1       	rjmp	.+914    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f08:	39 89       	ldd	r19, Y+17	; 0x11
    2f0a:	a3 16       	cp	r10, r19
    2f0c:	09 f0       	breq	.+2      	; 0x2f10 <fat_find_offset_for_dir_entry+0x170>
    2f0e:	c5 c1       	rjmp	.+906    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f10:	4a 89       	ldd	r20, Y+18	; 0x12
    2f12:	24 16       	cp	r2, r20
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <fat_find_offset_for_dir_entry+0x178>
    2f16:	c1 c1       	rjmp	.+898    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f18:	5b 89       	ldd	r21, Y+19	; 0x13
    2f1a:	95 16       	cp	r9, r21
    2f1c:	09 f0       	breq	.+2      	; 0x2f20 <fat_find_offset_for_dir_entry+0x180>
    2f1e:	bd c1       	rjmp	.+890    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f20:	8c 89       	ldd	r24, Y+20	; 0x14
    2f22:	88 16       	cp	r8, r24
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <fat_find_offset_for_dir_entry+0x188>
    2f26:	b9 c1       	rjmp	.+882    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
    2f28:	9d 89       	ldd	r25, Y+21	; 0x15
    2f2a:	79 16       	cp	r7, r25
    2f2c:	09 f0       	breq	.+2      	; 0x2f30 <fat_find_offset_for_dir_entry+0x190>
    2f2e:	b5 c1       	rjmp	.+874    	; 0x329a <fat_find_offset_for_dir_entry+0x4fa>
        {
            if(cluster_num == 0)
    2f30:	2e 81       	ldd	r18, Y+6	; 0x06
    2f32:	3f 81       	ldd	r19, Y+7	; 0x07
    2f34:	48 85       	ldd	r20, Y+8	; 0x08
    2f36:	59 85       	ldd	r21, Y+9	; 0x09
    2f38:	21 15       	cp	r18, r1
    2f3a:	31 05       	cpc	r19, r1
    2f3c:	41 05       	cpc	r20, r1
    2f3e:	51 05       	cpc	r21, r1
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <fat_find_offset_for_dir_entry+0x1a4>
    2f42:	30 c2       	rjmp	.+1120   	; 0x33a4 <fat_find_offset_for_dir_entry+0x604>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    2f44:	8d 2d       	mov	r24, r13
    2f46:	8c 29       	or	r24, r12
    2f48:	8b 29       	or	r24, r11
    2f4a:	8a 29       	or	r24, r10
    2f4c:	82 29       	or	r24, r2
    2f4e:	89 29       	or	r24, r9
    2f50:	88 29       	or	r24, r8
    2f52:	87 29       	or	r24, r7
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <fat_find_offset_for_dir_entry+0x1b8>
    2f56:	ba c0       	rjmp	.+372    	; 0x30cc <fat_find_offset_for_dir_entry+0x32c>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    2f58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f5c:	ba 01       	movw	r22, r20
    2f5e:	a9 01       	movw	r20, r18
    2f60:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
                if(!cluster_next)
    2f64:	61 15       	cp	r22, r1
    2f66:	71 05       	cpc	r23, r1
    2f68:	81 05       	cpc	r24, r1
    2f6a:	91 05       	cpc	r25, r1
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <fat_find_offset_for_dir_entry+0x1d0>
    2f6e:	aa c0       	rjmp	.+340    	; 0x30c4 <fat_find_offset_for_dir_entry+0x324>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    2f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f74:	4e 81       	ldd	r20, Y+6	; 0x06
    2f76:	5f 81       	ldd	r21, Y+7	; 0x07
    2f78:	68 85       	ldd	r22, Y+8	; 0x08
    2f7a:	79 85       	ldd	r23, Y+9	; 0x09
    2f7c:	01 e0       	ldi	r16, 0x01	; 1
    2f7e:	10 e0       	ldi	r17, 0x00	; 0
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
    2f88:	6a 83       	std	Y+2, r22	; 0x02
    2f8a:	7b 83       	std	Y+3, r23	; 0x03
    2f8c:	8c 83       	std	Y+4, r24	; 0x04
    2f8e:	9d 83       	std	Y+5, r25	; 0x05
                    if(!cluster_next)
    2f90:	61 15       	cp	r22, r1
    2f92:	71 05       	cpc	r23, r1
    2f94:	81 05       	cpc	r24, r1
    2f96:	91 05       	cpc	r25, r1
    2f98:	09 f4       	brne	.+2      	; 0x2f9c <fat_find_offset_for_dir_entry+0x1fc>
    2f9a:	04 c2       	rjmp	.+1032   	; 0x33a4 <fat_find_offset_for_dir_entry+0x604>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	02 97       	sbiw	r24, 0x02	; 2
    2fa2:	a1 09       	sbc	r26, r1
    2fa4:	b1 09       	sbc	r27, r1
    2fa6:	5c 01       	movw	r10, r24
    2fa8:	6d 01       	movw	r12, r26
    2faa:	02 96       	adiw	r24, 0x02	; 2
    2fac:	a1 1d       	adc	r26, r1
    2fae:	b1 1d       	adc	r27, r1
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
    2fb2:	9b 83       	std	Y+3, r25	; 0x03
    2fb4:	ac 83       	std	Y+4, r26	; 0x04
    2fb6:	bd 83       	std	Y+5, r27	; 0x05
    2fb8:	ac 85       	ldd	r26, Y+12	; 0x0c
    2fba:	bd 85       	ldd	r27, Y+13	; 0x0d
    2fbc:	58 96       	adiw	r26, 0x18	; 24
    2fbe:	2d 90       	ld	r2, X+
    2fc0:	3c 90       	ld	r3, X
    2fc2:	59 97       	sbiw	r26, 0x19	; 25
    2fc4:	95 01       	movw	r18, r10
    2fc6:	a6 01       	movw	r20, r12
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	51 01       	movw	r10, r2
    2fd2:	cc 24       	eor	r12, r12
    2fd4:	dd 24       	eor	r13, r13
    2fd6:	ee 24       	eor	r14, r14
    2fd8:	ff 24       	eor	r15, r15
    2fda:	00 e0       	ldi	r16, 0x00	; 0
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    2fe2:	c9 2e       	mov	r12, r25
    2fe4:	ec 85       	ldd	r30, Y+12	; 0x0c
    2fe6:	fd 85       	ldd	r31, Y+13	; 0x0d
    2fe8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2fea:	b3 8c       	ldd	r11, Z+27	; 0x1b
    2fec:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2fee:	05 8d       	ldd	r16, Z+29	; 0x1d
    2ff0:	f6 8c       	ldd	r15, Z+30	; 0x1e
    2ff2:	e7 8c       	ldd	r14, Z+31	; 0x1f
    2ff4:	d0 a0       	ldd	r13, Z+32	; 0x20
    2ff6:	11 a1       	ldd	r17, Z+33	; 0x21
    2ff8:	b2 0f       	add	r27, r18
    2ffa:	e1 e0       	ldi	r30, 0x01	; 1
    2ffc:	b2 17       	cp	r27, r18
    2ffe:	08 f0       	brcs	.+2      	; 0x3002 <fat_find_offset_for_dir_entry+0x262>
    3000:	e0 e0       	ldi	r30, 0x00	; 0
    3002:	23 2f       	mov	r18, r19
    3004:	2b 0d       	add	r18, r11
    3006:	f1 e0       	ldi	r31, 0x01	; 1
    3008:	23 17       	cp	r18, r19
    300a:	08 f0       	brcs	.+2      	; 0x300e <fat_find_offset_for_dir_entry+0x26e>
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	3e 2f       	mov	r19, r30
    3010:	32 0f       	add	r19, r18
    3012:	e1 e0       	ldi	r30, 0x01	; 1
    3014:	32 17       	cp	r19, r18
    3016:	08 f0       	brcs	.+2      	; 0x301a <fat_find_offset_for_dir_entry+0x27a>
    3018:	e0 e0       	ldi	r30, 0x00	; 0
    301a:	fe 2b       	or	r31, r30
    301c:	24 2f       	mov	r18, r20
    301e:	2a 0f       	add	r18, r26
    3020:	a1 e0       	ldi	r26, 0x01	; 1
    3022:	24 17       	cp	r18, r20
    3024:	08 f0       	brcs	.+2      	; 0x3028 <fat_find_offset_for_dir_entry+0x288>
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	4f 2f       	mov	r20, r31
    302a:	42 0f       	add	r20, r18
    302c:	e1 e0       	ldi	r30, 0x01	; 1
    302e:	42 17       	cp	r20, r18
    3030:	08 f0       	brcs	.+2      	; 0x3034 <fat_find_offset_for_dir_entry+0x294>
    3032:	e0 e0       	ldi	r30, 0x00	; 0
    3034:	ae 2b       	or	r26, r30
    3036:	25 2f       	mov	r18, r21
    3038:	20 0f       	add	r18, r16
    303a:	f1 e0       	ldi	r31, 0x01	; 1
    303c:	25 17       	cp	r18, r21
    303e:	08 f0       	brcs	.+2      	; 0x3042 <fat_find_offset_for_dir_entry+0x2a2>
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	5a 2f       	mov	r21, r26
    3044:	52 0f       	add	r21, r18
    3046:	e1 e0       	ldi	r30, 0x01	; 1
    3048:	52 17       	cp	r21, r18
    304a:	08 f0       	brcs	.+2      	; 0x304e <fat_find_offset_for_dir_entry+0x2ae>
    304c:	e0 e0       	ldi	r30, 0x00	; 0
    304e:	fe 2b       	or	r31, r30
    3050:	26 2f       	mov	r18, r22
    3052:	2f 0d       	add	r18, r15
    3054:	a1 e0       	ldi	r26, 0x01	; 1
    3056:	26 17       	cp	r18, r22
    3058:	08 f0       	brcs	.+2      	; 0x305c <fat_find_offset_for_dir_entry+0x2bc>
    305a:	a0 e0       	ldi	r26, 0x00	; 0
    305c:	6f 2f       	mov	r22, r31
    305e:	62 0f       	add	r22, r18
    3060:	e1 e0       	ldi	r30, 0x01	; 1
    3062:	62 17       	cp	r22, r18
    3064:	08 f0       	brcs	.+2      	; 0x3068 <fat_find_offset_for_dir_entry+0x2c8>
    3066:	e0 e0       	ldi	r30, 0x00	; 0
    3068:	ae 2b       	or	r26, r30
    306a:	27 2f       	mov	r18, r23
    306c:	2e 0d       	add	r18, r14
    306e:	f1 e0       	ldi	r31, 0x01	; 1
    3070:	27 17       	cp	r18, r23
    3072:	08 f0       	brcs	.+2      	; 0x3076 <fat_find_offset_for_dir_entry+0x2d6>
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	7a 2f       	mov	r23, r26
    3078:	72 0f       	add	r23, r18
    307a:	e1 e0       	ldi	r30, 0x01	; 1
    307c:	72 17       	cp	r23, r18
    307e:	08 f0       	brcs	.+2      	; 0x3082 <fat_find_offset_for_dir_entry+0x2e2>
    3080:	e0 e0       	ldi	r30, 0x00	; 0
    3082:	fe 2b       	or	r31, r30
    3084:	28 2f       	mov	r18, r24
    3086:	2d 0d       	add	r18, r13
    3088:	e1 e0       	ldi	r30, 0x01	; 1
    308a:	28 17       	cp	r18, r24
    308c:	08 f0       	brcs	.+2      	; 0x3090 <fat_find_offset_for_dir_entry+0x2f0>
    308e:	e0 e0       	ldi	r30, 0x00	; 0
    3090:	8f 2f       	mov	r24, r31
    3092:	82 0f       	add	r24, r18
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	82 17       	cp	r24, r18
    3098:	08 f0       	brcs	.+2      	; 0x309c <fat_find_offset_for_dir_entry+0x2fc>
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	6e 2e       	mov	r6, r30
    309e:	69 2a       	or	r6, r25
    30a0:	1c 0d       	add	r17, r12
    30a2:	be 8b       	std	Y+22, r27	; 0x16
    30a4:	3f 8b       	std	Y+23, r19	; 0x17
    30a6:	48 8f       	std	Y+24, r20	; 0x18
    30a8:	59 8f       	std	Y+25, r21	; 0x19
    30aa:	36 2e       	mov	r3, r22
    30ac:	47 2e       	mov	r4, r23
    30ae:	58 2e       	mov	r5, r24
    30b0:	61 0e       	add	r6, r17
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    30b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    30b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    30b6:	4a 81       	ldd	r20, Y+2	; 0x02
    30b8:	5b 81       	ldd	r21, Y+3	; 0x03
    30ba:	6c 81       	ldd	r22, Y+4	; 0x04
    30bc:	7d 81       	ldd	r23, Y+5	; 0x05
    30be:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fat_clear_cluster>
    30c2:	78 c1       	rjmp	.+752    	; 0x33b4 <fat_find_offset_for_dir_entry+0x614>

                    break;
    30c4:	6e 83       	std	Y+6, r22	; 0x06
    30c6:	7f 83       	std	Y+7, r23	; 0x07
    30c8:	88 87       	std	Y+8, r24	; 0x08
    30ca:	99 87       	std	Y+9, r25	; 0x09
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    30cc:	2e 81       	ldd	r18, Y+6	; 0x06
    30ce:	3f 81       	ldd	r19, Y+7	; 0x07
    30d0:	48 85       	ldd	r20, Y+8	; 0x08
    30d2:	59 85       	ldd	r21, Y+9	; 0x09
    30d4:	22 30       	cpi	r18, 0x02	; 2
    30d6:	31 05       	cpc	r19, r1
    30d8:	41 05       	cpc	r20, r1
    30da:	51 05       	cpc	r21, r1
    30dc:	48 f4       	brcc	.+18     	; 0x30f0 <fat_find_offset_for_dir_entry+0x350>
    30de:	dd 24       	eor	r13, r13
    30e0:	cc 24       	eor	r12, r12
    30e2:	bb 24       	eor	r11, r11
    30e4:	aa 24       	eor	r10, r10
    30e6:	22 24       	eor	r2, r2
    30e8:	99 24       	eor	r9, r9
    30ea:	88 24       	eor	r8, r8
    30ec:	77 24       	eor	r7, r7
    30ee:	8d c0       	rjmp	.+282    	; 0x320a <fat_find_offset_for_dir_entry+0x46a>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    30f0:	8e 81       	ldd	r24, Y+6	; 0x06
    30f2:	9f 81       	ldd	r25, Y+7	; 0x07
    30f4:	a8 85       	ldd	r26, Y+8	; 0x08
    30f6:	b9 85       	ldd	r27, Y+9	; 0x09
    30f8:	02 97       	sbiw	r24, 0x02	; 2
    30fa:	a1 09       	sbc	r26, r1
    30fc:	b1 09       	sbc	r27, r1
    30fe:	5c 01       	movw	r10, r24
    3100:	6d 01       	movw	r12, r26
    3102:	02 96       	adiw	r24, 0x02	; 2
    3104:	a1 1d       	adc	r26, r1
    3106:	b1 1d       	adc	r27, r1
    3108:	8e 83       	std	Y+6, r24	; 0x06
    310a:	9f 83       	std	Y+7, r25	; 0x07
    310c:	a8 87       	std	Y+8, r26	; 0x08
    310e:	b9 87       	std	Y+9, r27	; 0x09
    3110:	ac 85       	ldd	r26, Y+12	; 0x0c
    3112:	bd 85       	ldd	r27, Y+13	; 0x0d
    3114:	58 96       	adiw	r26, 0x18	; 24
    3116:	2d 90       	ld	r2, X+
    3118:	3c 90       	ld	r3, X
    311a:	59 97       	sbiw	r26, 0x19	; 25
    311c:	95 01       	movw	r18, r10
    311e:	a6 01       	movw	r20, r12
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	51 01       	movw	r10, r2
    312a:	cc 24       	eor	r12, r12
    312c:	dd 24       	eor	r13, r13
    312e:	ee 24       	eor	r14, r14
    3130:	ff 24       	eor	r15, r15
    3132:	00 e0       	ldi	r16, 0x00	; 0
    3134:	10 e0       	ldi	r17, 0x00	; 0
    3136:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    313a:	c9 2e       	mov	r12, r25
    313c:	ec 85       	ldd	r30, Y+12	; 0x0c
    313e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3140:	b2 8d       	ldd	r27, Z+26	; 0x1a
    3142:	b3 8c       	ldd	r11, Z+27	; 0x1b
    3144:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3146:	05 8d       	ldd	r16, Z+29	; 0x1d
    3148:	f6 8c       	ldd	r15, Z+30	; 0x1e
    314a:	e7 8c       	ldd	r14, Z+31	; 0x1f
    314c:	d0 a0       	ldd	r13, Z+32	; 0x20
    314e:	11 a1       	ldd	r17, Z+33	; 0x21
    3150:	b2 0f       	add	r27, r18
    3152:	e1 e0       	ldi	r30, 0x01	; 1
    3154:	b2 17       	cp	r27, r18
    3156:	08 f0       	brcs	.+2      	; 0x315a <fat_find_offset_for_dir_entry+0x3ba>
    3158:	e0 e0       	ldi	r30, 0x00	; 0
    315a:	23 2f       	mov	r18, r19
    315c:	2b 0d       	add	r18, r11
    315e:	f1 e0       	ldi	r31, 0x01	; 1
    3160:	23 17       	cp	r18, r19
    3162:	08 f0       	brcs	.+2      	; 0x3166 <fat_find_offset_for_dir_entry+0x3c6>
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	3e 2f       	mov	r19, r30
    3168:	32 0f       	add	r19, r18
    316a:	e1 e0       	ldi	r30, 0x01	; 1
    316c:	32 17       	cp	r19, r18
    316e:	08 f0       	brcs	.+2      	; 0x3172 <fat_find_offset_for_dir_entry+0x3d2>
    3170:	e0 e0       	ldi	r30, 0x00	; 0
    3172:	fe 2b       	or	r31, r30
    3174:	24 2f       	mov	r18, r20
    3176:	2a 0f       	add	r18, r26
    3178:	a1 e0       	ldi	r26, 0x01	; 1
    317a:	24 17       	cp	r18, r20
    317c:	08 f0       	brcs	.+2      	; 0x3180 <fat_find_offset_for_dir_entry+0x3e0>
    317e:	a0 e0       	ldi	r26, 0x00	; 0
    3180:	4f 2f       	mov	r20, r31
    3182:	42 0f       	add	r20, r18
    3184:	e1 e0       	ldi	r30, 0x01	; 1
    3186:	42 17       	cp	r20, r18
    3188:	08 f0       	brcs	.+2      	; 0x318c <fat_find_offset_for_dir_entry+0x3ec>
    318a:	e0 e0       	ldi	r30, 0x00	; 0
    318c:	ae 2b       	or	r26, r30
    318e:	25 2f       	mov	r18, r21
    3190:	20 0f       	add	r18, r16
    3192:	f1 e0       	ldi	r31, 0x01	; 1
    3194:	25 17       	cp	r18, r21
    3196:	08 f0       	brcs	.+2      	; 0x319a <fat_find_offset_for_dir_entry+0x3fa>
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	5a 2f       	mov	r21, r26
    319c:	52 0f       	add	r21, r18
    319e:	e1 e0       	ldi	r30, 0x01	; 1
    31a0:	52 17       	cp	r21, r18
    31a2:	08 f0       	brcs	.+2      	; 0x31a6 <fat_find_offset_for_dir_entry+0x406>
    31a4:	e0 e0       	ldi	r30, 0x00	; 0
    31a6:	fe 2b       	or	r31, r30
    31a8:	26 2f       	mov	r18, r22
    31aa:	2f 0d       	add	r18, r15
    31ac:	a1 e0       	ldi	r26, 0x01	; 1
    31ae:	26 17       	cp	r18, r22
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <fat_find_offset_for_dir_entry+0x414>
    31b2:	a0 e0       	ldi	r26, 0x00	; 0
    31b4:	6f 2f       	mov	r22, r31
    31b6:	62 0f       	add	r22, r18
    31b8:	e1 e0       	ldi	r30, 0x01	; 1
    31ba:	62 17       	cp	r22, r18
    31bc:	08 f0       	brcs	.+2      	; 0x31c0 <fat_find_offset_for_dir_entry+0x420>
    31be:	e0 e0       	ldi	r30, 0x00	; 0
    31c0:	ae 2b       	or	r26, r30
    31c2:	27 2f       	mov	r18, r23
    31c4:	2e 0d       	add	r18, r14
    31c6:	f1 e0       	ldi	r31, 0x01	; 1
    31c8:	27 17       	cp	r18, r23
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <fat_find_offset_for_dir_entry+0x42e>
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	7a 2f       	mov	r23, r26
    31d0:	72 0f       	add	r23, r18
    31d2:	e1 e0       	ldi	r30, 0x01	; 1
    31d4:	72 17       	cp	r23, r18
    31d6:	08 f0       	brcs	.+2      	; 0x31da <fat_find_offset_for_dir_entry+0x43a>
    31d8:	e0 e0       	ldi	r30, 0x00	; 0
    31da:	fe 2b       	or	r31, r30
    31dc:	28 2f       	mov	r18, r24
    31de:	2d 0d       	add	r18, r13
    31e0:	e1 e0       	ldi	r30, 0x01	; 1
    31e2:	28 17       	cp	r18, r24
    31e4:	08 f0       	brcs	.+2      	; 0x31e8 <fat_find_offset_for_dir_entry+0x448>
    31e6:	e0 e0       	ldi	r30, 0x00	; 0
    31e8:	8f 2f       	mov	r24, r31
    31ea:	82 0f       	add	r24, r18
    31ec:	91 e0       	ldi	r25, 0x01	; 1
    31ee:	82 17       	cp	r24, r18
    31f0:	08 f0       	brcs	.+2      	; 0x31f4 <fat_find_offset_for_dir_entry+0x454>
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	7e 2e       	mov	r7, r30
    31f6:	79 2a       	or	r7, r25
    31f8:	1c 0d       	add	r17, r12
    31fa:	db 2e       	mov	r13, r27
    31fc:	c3 2e       	mov	r12, r19
    31fe:	b4 2e       	mov	r11, r20
    3200:	a5 2e       	mov	r10, r21
    3202:	26 2e       	mov	r2, r22
    3204:	97 2e       	mov	r9, r23
    3206:	88 2e       	mov	r8, r24
    3208:	71 0e       	add	r7, r17
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
    320a:	ac 85       	ldd	r26, Y+12	; 0x0c
    320c:	bd 85       	ldd	r27, Y+13	; 0x0d
    320e:	58 96       	adiw	r26, 0x18	; 24
    3210:	8d 91       	ld	r24, X+
    3212:	9c 91       	ld	r25, X
    3214:	59 97       	sbiw	r26, 0x19	; 25
    3216:	9c 01       	movw	r18, r24
    3218:	fd 2d       	mov	r31, r13
    321a:	f8 0f       	add	r31, r24
    321c:	e1 e0       	ldi	r30, 0x01	; 1
    321e:	fd 15       	cp	r31, r13
    3220:	08 f0       	brcs	.+2      	; 0x3224 <fat_find_offset_for_dir_entry+0x484>
    3222:	e0 e0       	ldi	r30, 0x00	; 0
    3224:	8c 2d       	mov	r24, r12
    3226:	83 0f       	add	r24, r19
    3228:	21 e0       	ldi	r18, 0x01	; 1
    322a:	8c 15       	cp	r24, r12
    322c:	08 f0       	brcs	.+2      	; 0x3230 <fat_find_offset_for_dir_entry+0x490>
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	6e 2f       	mov	r22, r30
    3232:	68 0f       	add	r22, r24
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	68 17       	cp	r22, r24
    3238:	08 f0       	brcs	.+2      	; 0x323c <fat_find_offset_for_dir_entry+0x49c>
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	92 2b       	or	r25, r18
    323e:	9b 0d       	add	r25, r11
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	9b 15       	cp	r25, r11
    3244:	08 f0       	brcs	.+2      	; 0x3248 <fat_find_offset_for_dir_entry+0x4a8>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	58 2f       	mov	r21, r24
    324a:	5a 0d       	add	r21, r10
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	5a 15       	cp	r21, r10
    3250:	08 f0       	brcs	.+2      	; 0x3254 <fat_find_offset_for_dir_entry+0x4b4>
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	48 2f       	mov	r20, r24
    3256:	42 0d       	add	r20, r2
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	42 15       	cp	r20, r2
    325c:	08 f0       	brcs	.+2      	; 0x3260 <fat_find_offset_for_dir_entry+0x4c0>
    325e:	80 e0       	ldi	r24, 0x00	; 0
    3260:	38 2f       	mov	r19, r24
    3262:	39 0d       	add	r19, r9
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	39 15       	cp	r19, r9
    3268:	08 f0       	brcs	.+2      	; 0x326c <fat_find_offset_for_dir_entry+0x4cc>
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	88 0d       	add	r24, r8
    326e:	21 e0       	ldi	r18, 0x01	; 1
    3270:	88 15       	cp	r24, r8
    3272:	08 f0       	brcs	.+2      	; 0x3276 <fat_find_offset_for_dir_entry+0x4d6>
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	fe 87       	std	Y+14, r31	; 0x0e
    3278:	6f 87       	std	Y+15, r22	; 0x0f
    327a:	98 8b       	std	Y+16, r25	; 0x10
    327c:	59 8b       	std	Y+17, r21	; 0x11
    327e:	4a 8b       	std	Y+18, r20	; 0x12
    3280:	3b 8b       	std	Y+19, r19	; 0x13
    3282:	8c 8b       	std	Y+20, r24	; 0x14
    3284:	27 0d       	add	r18, r7
    3286:	2d 8b       	std	Y+21, r18	; 0x15
    3288:	de 8a       	std	Y+22, r13	; 0x16
    328a:	cf 8a       	std	Y+23, r12	; 0x17
    328c:	b8 8e       	std	Y+24, r11	; 0x18
    328e:	a9 8e       	std	Y+25, r10	; 0x19
    3290:	32 2c       	mov	r3, r2
    3292:	49 2c       	mov	r4, r9
    3294:	58 2c       	mov	r5, r8
    3296:	67 2c       	mov	r6, r7
    3298:	1a 86       	std	Y+10, r1	; 0x0a
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    329a:	ac 85       	ldd	r26, Y+12	; 0x0c
    329c:	bd 85       	ldd	r27, Y+13	; 0x0d
    329e:	ed 91       	ld	r30, X+
    32a0:	fc 91       	ld	r31, X
    32a2:	01 90       	ld	r0, Z+
    32a4:	f0 81       	ld	r31, Z
    32a6:	e0 2d       	mov	r30, r0
    32a8:	2d 2d       	mov	r18, r13
    32aa:	3c 2d       	mov	r19, r12
    32ac:	4b 2d       	mov	r20, r11
    32ae:	5a 2d       	mov	r21, r10
    32b0:	62 2d       	mov	r22, r2
    32b2:	79 2d       	mov	r23, r9
    32b4:	88 2d       	mov	r24, r8
    32b6:	97 2d       	mov	r25, r7
    32b8:	8e 01       	movw	r16, r28
    32ba:	0f 5f       	subi	r16, 0xFF	; 255
    32bc:	1f 4f       	sbci	r17, 0xFF	; 255
    32be:	b1 e0       	ldi	r27, 0x01	; 1
    32c0:	eb 2e       	mov	r14, r27
    32c2:	f1 2c       	mov	r15, r1
    32c4:	09 95       	icall
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <fat_find_offset_for_dir_entry+0x52c>
    32ca:	6c c0       	rjmp	.+216    	; 0x33a4 <fat_find_offset_for_dir_entry+0x604>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	85 3e       	cpi	r24, 0xE5	; 229
    32d0:	11 f0       	breq	.+4      	; 0x32d6 <fat_find_offset_for_dir_entry+0x536>
    32d2:	88 23       	and	r24, r24
    32d4:	b9 f5       	brne	.+110    	; 0x3344 <fat_find_offset_for_dir_entry+0x5a4>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    32d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    32d8:	bf 5f       	subi	r27, 0xFF	; 255
    32da:	ba 87       	std	Y+10, r27	; 0x0a
            if(free_dir_entries_found >= free_dir_entries_needed)
    32dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    32de:	be 17       	cp	r27, r30
    32e0:	08 f0       	brcs	.+2      	; 0x32e4 <fat_find_offset_for_dir_entry+0x544>
    32e2:	68 c0       	rjmp	.+208    	; 0x33b4 <fat_find_offset_for_dir_entry+0x614>
#endif
                break;

            offset += 32;
    32e4:	7d 2d       	mov	r23, r13
    32e6:	70 5e       	subi	r23, 0xE0	; 224
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	7d 15       	cp	r23, r13
    32ec:	08 f0       	brcs	.+2      	; 0x32f0 <fat_find_offset_for_dir_entry+0x550>
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	68 2f       	mov	r22, r24
    32f2:	6c 0d       	add	r22, r12
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	6c 15       	cp	r22, r12
    32f8:	08 f0       	brcs	.+2      	; 0x32fc <fat_find_offset_for_dir_entry+0x55c>
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	58 2f       	mov	r21, r24
    32fe:	5b 0d       	add	r21, r11
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	5b 15       	cp	r21, r11
    3304:	08 f0       	brcs	.+2      	; 0x3308 <fat_find_offset_for_dir_entry+0x568>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	48 2f       	mov	r20, r24
    330a:	4a 0d       	add	r20, r10
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	4a 15       	cp	r20, r10
    3310:	08 f0       	brcs	.+2      	; 0x3314 <fat_find_offset_for_dir_entry+0x574>
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	38 2f       	mov	r19, r24
    3316:	32 0d       	add	r19, r2
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	32 15       	cp	r19, r2
    331c:	08 f0       	brcs	.+2      	; 0x3320 <fat_find_offset_for_dir_entry+0x580>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	28 2f       	mov	r18, r24
    3322:	29 0d       	add	r18, r9
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	29 15       	cp	r18, r9
    3328:	08 f0       	brcs	.+2      	; 0x332c <fat_find_offset_for_dir_entry+0x58c>
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	88 0d       	add	r24, r8
    332e:	91 e0       	ldi	r25, 0x01	; 1
    3330:	88 15       	cp	r24, r8
    3332:	08 f0       	brcs	.+2      	; 0x3336 <fat_find_offset_for_dir_entry+0x596>
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	6b 01       	movw	r12, r22
    3338:	5a 01       	movw	r10, r20
    333a:	23 2e       	mov	r2, r19
    333c:	92 2e       	mov	r9, r18
    333e:	88 2e       	mov	r8, r24
    3340:	79 0e       	add	r7, r25
    3342:	d6 cd       	rjmp	.-1108   	; 0x2ef0 <fat_find_offset_for_dir_entry+0x150>
        }
        else
        {
            offset += 32;
    3344:	7d 2d       	mov	r23, r13
    3346:	70 5e       	subi	r23, 0xE0	; 224
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	7d 15       	cp	r23, r13
    334c:	08 f0       	brcs	.+2      	; 0x3350 <fat_find_offset_for_dir_entry+0x5b0>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	68 2f       	mov	r22, r24
    3352:	6c 0d       	add	r22, r12
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	6c 15       	cp	r22, r12
    3358:	08 f0       	brcs	.+2      	; 0x335c <fat_find_offset_for_dir_entry+0x5bc>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	58 2f       	mov	r21, r24
    335e:	5b 0d       	add	r21, r11
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	5b 15       	cp	r21, r11
    3364:	08 f0       	brcs	.+2      	; 0x3368 <fat_find_offset_for_dir_entry+0x5c8>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	48 2f       	mov	r20, r24
    336a:	4a 0d       	add	r20, r10
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	4a 15       	cp	r20, r10
    3370:	08 f0       	brcs	.+2      	; 0x3374 <fat_find_offset_for_dir_entry+0x5d4>
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	38 2f       	mov	r19, r24
    3376:	32 0d       	add	r19, r2
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	32 15       	cp	r19, r2
    337c:	08 f0       	brcs	.+2      	; 0x3380 <fat_find_offset_for_dir_entry+0x5e0>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	28 2f       	mov	r18, r24
    3382:	29 0d       	add	r18, r9
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	29 15       	cp	r18, r9
    3388:	08 f0       	brcs	.+2      	; 0x338c <fat_find_offset_for_dir_entry+0x5ec>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	88 0d       	add	r24, r8
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	88 15       	cp	r24, r8
    3392:	08 f0       	brcs	.+2      	; 0x3396 <fat_find_offset_for_dir_entry+0x5f6>
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	6b 01       	movw	r12, r22
    3398:	5a 01       	movw	r10, r20
    339a:	23 2e       	mov	r2, r19
    339c:	92 2e       	mov	r9, r18
    339e:	88 2e       	mov	r8, r24
    33a0:	79 0e       	add	r7, r25
    33a2:	9d cd       	rjmp	.-1222   	; 0x2ede <fat_find_offset_for_dir_entry+0x13e>
    33a4:	1e 8a       	std	Y+22, r1	; 0x16
    33a6:	1f 8a       	std	Y+23, r1	; 0x17
    33a8:	18 8e       	std	Y+24, r1	; 0x18
    33aa:	19 8e       	std	Y+25, r1	; 0x19
    33ac:	33 24       	eor	r3, r3
    33ae:	44 24       	eor	r4, r4
    33b0:	55 24       	eor	r5, r5
    33b2:	66 24       	eor	r6, r6
#endif
        }
    }

    return dir_entry_offset;
}
    33b4:	2e 89       	ldd	r18, Y+22	; 0x16
    33b6:	3f 89       	ldd	r19, Y+23	; 0x17
    33b8:	48 8d       	ldd	r20, Y+24	; 0x18
    33ba:	59 8d       	ldd	r21, Y+25	; 0x19
    33bc:	63 2d       	mov	r22, r3
    33be:	74 2d       	mov	r23, r4
    33c0:	85 2d       	mov	r24, r5
    33c2:	96 2d       	mov	r25, r6
    33c4:	69 96       	adiw	r28, 0x19	; 25
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	cf 91       	pop	r28
    33d2:	df 91       	pop	r29
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	ff 90       	pop	r15
    33da:	ef 90       	pop	r14
    33dc:	df 90       	pop	r13
    33de:	cf 90       	pop	r12
    33e0:	bf 90       	pop	r11
    33e2:	af 90       	pop	r10
    33e4:	9f 90       	pop	r9
    33e6:	8f 90       	pop	r8
    33e8:	7f 90       	pop	r7
    33ea:	6f 90       	pop	r6
    33ec:	5f 90       	pop	r5
    33ee:	4f 90       	pop	r4
    33f0:	3f 90       	pop	r3
    33f2:	2f 90       	pop	r2
    33f4:	08 95       	ret

000033f6 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    33f6:	2f 92       	push	r2
    33f8:	3f 92       	push	r3
    33fa:	4f 92       	push	r4
    33fc:	5f 92       	push	r5
    33fe:	6f 92       	push	r6
    3400:	7f 92       	push	r7
    3402:	8f 92       	push	r8
    3404:	9f 92       	push	r9
    3406:	af 92       	push	r10
    3408:	bf 92       	push	r11
    340a:	cf 92       	push	r12
    340c:	df 92       	push	r13
    340e:	ef 92       	push	r14
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	a5 97       	sbiw	r28, 0x25	; 37
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	fc 01       	movw	r30, r24
    342c:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	09 f4       	brne	.+2      	; 0x3434 <fat_write_dir_entry+0x3e>
    3432:	b3 c1       	rjmp	.+870    	; 0x379a <fat_write_dir_entry+0x3a4>
    3434:	61 15       	cp	r22, r1
    3436:	71 05       	cpc	r23, r1
    3438:	09 f4       	brne	.+2      	; 0x343c <fat_write_dir_entry+0x46>
    343a:	af c1       	rjmp	.+862    	; 0x379a <fat_write_dir_entry+0x3a4>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    343c:	01 90       	ld	r0, Z+
    343e:	f0 81       	ld	r31, Z
    3440:	e0 2d       	mov	r30, r0
    3442:	84 81       	ldd	r24, Z+4	; 0x04
    3444:	95 81       	ldd	r25, Z+5	; 0x05
    3446:	9b a3       	std	Y+35, r25	; 0x23
    3448:	8a a3       	std	Y+34, r24	; 0x22
    offset_t offset = dir_entry->entry_offset;
    344a:	db 01       	movw	r26, r22
    344c:	99 96       	adiw	r26, 0x29	; 41
    344e:	2c 90       	ld	r2, X
    3450:	99 97       	sbiw	r26, 0x29	; 41
    3452:	9a 96       	adiw	r26, 0x2a	; 42
    3454:	bc 91       	ld	r27, X
    3456:	bc a3       	std	Y+36, r27	; 0x24
    3458:	fb 01       	movw	r30, r22
    345a:	73 a4       	ldd	r7, Z+43	; 0x2b
    345c:	64 a4       	ldd	r6, Z+44	; 0x2c
    345e:	55 a4       	ldd	r5, Z+45	; 0x2d
    3460:	46 a4       	ldd	r4, Z+46	; 0x2e
    3462:	37 a4       	ldd	r3, Z+47	; 0x2f
    3464:	f0 a9       	ldd	r31, Z+48	; 0x30
    3466:	fd a3       	std	Y+37, r31	; 0x25
    const char* name = dir_entry->long_name;
    3468:	06 2f       	mov	r16, r22
    346a:	fd 2c       	mov	r15, r13
    uint8_t name_len = strlen(name);
    346c:	fb 01       	movw	r30, r22
    346e:	01 90       	ld	r0, Z+
    3470:	00 20       	and	r0, r0
    3472:	e9 f7       	brne	.-6      	; 0x346e <fat_write_dir_entry+0x78>
    3474:	31 97       	sbiw	r30, 0x01	; 1
    3476:	1e 2f       	mov	r17, r30
    3478:	16 1b       	sub	r17, r22
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    347a:	81 2f       	mov	r24, r17
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0c 96       	adiw	r24, 0x0c	; 12
    3480:	6d e0       	ldi	r22, 0x0D	; 13
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	0e 94 39 44 	call	0x8872	; 0x8872 <__divmodhi4>
    3488:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    348a:	ce 01       	movw	r24, r28
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	60 e2       	ldi	r22, 0x20	; 32
    3490:	70 e0       	ldi	r23, 0x00	; 0
    3492:	4b e0       	ldi	r20, 0x0B	; 11
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <memset>
    char* name_ext = strrchr(name, '.');
    349a:	c6 01       	movw	r24, r12
    349c:	6e e2       	ldi	r22, 0x2E	; 46
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	0e 94 2b 45 	call	0x8a56	; 0x8a56 <strrchr>
    34a4:	fc 01       	movw	r30, r24
    if(name_ext && *++name_ext)
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	e1 f0       	breq	.+56     	; 0x34e2 <fat_write_dir_entry+0xec>
    34aa:	9c 01       	movw	r18, r24
    34ac:	2f 5f       	subi	r18, 0xFF	; 255
    34ae:	3f 4f       	sbci	r19, 0xFF	; 255
    34b0:	81 81       	ldd	r24, Z+1	; 0x01
    34b2:	88 23       	and	r24, r24
    34b4:	b1 f0       	breq	.+44     	; 0x34e2 <fat_write_dir_entry+0xec>
    {
        uint8_t name_ext_len = strlen(name_ext);
    34b6:	d9 01       	movw	r26, r18
    34b8:	0d 90       	ld	r0, X+
    34ba:	00 20       	and	r0, r0
    34bc:	e9 f7       	brne	.-6      	; 0x34b8 <fat_write_dir_entry+0xc2>
    34be:	11 97       	sbiw	r26, 0x01	; 1
    34c0:	a2 1b       	sub	r26, r18
    34c2:	b3 0b       	sbc	r27, r19
        name_len -= name_ext_len + 1;
    34c4:	8a 2f       	mov	r24, r26
    34c6:	80 95       	com	r24
    34c8:	18 0f       	add	r17, r24
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    34ca:	be 01       	movw	r22, r28
    34cc:	67 5f       	subi	r22, 0xF7	; 247
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	4a 2f       	mov	r20, r26
    34d2:	a4 30       	cpi	r26, 0x04	; 4
    34d4:	08 f0       	brcs	.+2      	; 0x34d8 <fat_write_dir_entry+0xe2>
    34d6:	43 e0       	ldi	r20, 0x03	; 3
    34d8:	cb 01       	movw	r24, r22
    34da:	b9 01       	movw	r22, r18
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <memcpy>
    34e2:	ce 01       	movw	r24, r28
    34e4:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    34e6:	19 30       	cpi	r17, 0x09	; 9
    34e8:	a0 f4       	brcc	.+40     	; 0x3512 <fat_write_dir_entry+0x11c>
    {
        memcpy(buffer, name, name_len);
    34ea:	60 2f       	mov	r22, r16
    34ec:	7f 2d       	mov	r23, r15
    34ee:	41 2f       	mov	r20, r17
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    34f6:	d6 01       	movw	r26, r12
    34f8:	8c 91       	ld	r24, X
    34fa:	8e 32       	cpi	r24, 0x2E	; 46
    34fc:	41 f5       	brne	.+80     	; 0x354e <fat_write_dir_entry+0x158>
    34fe:	11 96       	adiw	r26, 0x01	; 1
    3500:	8c 91       	ld	r24, X
    3502:	11 97       	sbiw	r26, 0x01	; 1
    3504:	8e 32       	cpi	r24, 0x2E	; 46
    3506:	11 f4       	brne	.+4      	; 0x350c <fat_write_dir_entry+0x116>
    3508:	12 96       	adiw	r26, 0x02	; 2
    350a:	8c 91       	ld	r24, X
    350c:	88 23       	and	r24, r24
    350e:	f1 f0       	breq	.+60     	; 0x354c <fat_write_dir_entry+0x156>
    3510:	1e c0       	rjmp	.+60     	; 0x354e <fat_write_dir_entry+0x158>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    3512:	dc 01       	movw	r26, r24
    3514:	80 2f       	mov	r24, r16
    3516:	9f 2d       	mov	r25, r15
    3518:	9c 01       	movw	r18, r24
    351a:	f9 01       	movw	r30, r18
    351c:	88 e0       	ldi	r24, 0x08	; 8
    351e:	01 90       	ld	r0, Z+
    3520:	0d 92       	st	X+, r0
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	e1 f7       	brne	.-8      	; 0x351e <fat_write_dir_entry+0x128>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    3526:	f6 01       	movw	r30, r12
    3528:	81 a1       	ldd	r24, Z+33	; 0x21
    352a:	98 2f       	mov	r25, r24
    352c:	92 95       	swap	r25
    352e:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3530:	80 3a       	cpi	r24, 0xA0	; 160
    3532:	10 f4       	brcc	.+4      	; 0x3538 <fat_write_dir_entry+0x142>
    3534:	90 5d       	subi	r25, 0xD0	; 208
    3536:	01 c0       	rjmp	.+2      	; 0x353a <fat_write_dir_entry+0x144>
    3538:	9f 59       	subi	r25, 0x9F	; 159
        num &= 0x0f;
    353a:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    353c:	8a 30       	cpi	r24, 0x0A	; 10
    353e:	10 f4       	brcc	.+4      	; 0x3544 <fat_write_dir_entry+0x14e>
    3540:	80 5d       	subi	r24, 0xD0	; 208
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <fat_write_dir_entry+0x150>
    3544:	8f 59       	subi	r24, 0x9F	; 159
        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    3546:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    3548:	88 87       	std	Y+8, r24	; 0x08
    354a:	01 c0       	rjmp	.+2      	; 0x354e <fat_write_dir_entry+0x158>
    354c:	19 a2       	std	Y+33, r1	; 0x21
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	85 3e       	cpi	r24, 0xE5	; 229
    3552:	11 f4       	brne	.+4      	; 0x3558 <fat_write_dir_entry+0x162>
        buffer[0] = 0x05;
    3554:	85 e0       	ldi	r24, 0x05	; 5
    3556:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    3558:	85 e1       	ldi	r24, 0x15	; 21
    355a:	fe 01       	movw	r30, r28
    355c:	3c 96       	adiw	r30, 0x0c	; 12
    355e:	df 01       	movw	r26, r30
    3560:	1d 92       	st	X+, r1
    3562:	8a 95       	dec	r24
    3564:	e9 f7       	brne	.-6      	; 0x3560 <fat_write_dir_entry+0x16a>
    buffer[0x0b] = dir_entry->attributes;
    3566:	f6 01       	movw	r30, r12
    3568:	80 a1       	ldd	r24, Z+32	; 0x20
    356a:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    write16(&buffer[0x16], dir_entry->modification_time);
    write16(&buffer[0x18], dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    write16(&buffer[0x14], (uint16_t) (dir_entry->cluster >> 16));
    356c:	21 a1       	ldd	r18, Z+33	; 0x21
    356e:	32 a1       	ldd	r19, Z+34	; 0x22
    3570:	43 a1       	ldd	r20, Z+35	; 0x23
    3572:	54 a1       	ldd	r21, Z+36	; 0x24
    3574:	ca 01       	movw	r24, r20
    3576:	aa 27       	eor	r26, r26
    3578:	bb 27       	eor	r27, r27
    357a:	9e 8b       	std	Y+22, r25	; 0x16
    357c:	8d 8b       	std	Y+21, r24	; 0x15
#endif
    write16(&buffer[0x1a], dir_entry->cluster);
    357e:	3c 8f       	std	Y+28, r19	; 0x1c
    3580:	2b 8f       	std	Y+27, r18	; 0x1b
    write32(&buffer[0x1c], dir_entry->file_size);
    3582:	85 a1       	ldd	r24, Z+37	; 0x25
    3584:	96 a1       	ldd	r25, Z+38	; 0x26
    3586:	a7 a1       	ldd	r26, Z+39	; 0x27
    3588:	b0 a5       	ldd	r27, Z+40	; 0x28
    358a:	8d 8f       	std	Y+29, r24	; 0x1d
    358c:	9e 8f       	std	Y+30, r25	; 0x1e
    358e:	af 8f       	std	Y+31, r26	; 0x1f
    3590:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    3592:	f9 a1       	ldd	r31, Y+33	; 0x21
    3594:	8f 2f       	mov	r24, r31
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a5 e0       	ldi	r26, 0x05	; 5
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	aa 95       	dec	r26
    35a0:	e1 f7       	brne	.-8      	; 0x359a <fat_write_dir_entry+0x1a4>
    35a2:	9c 01       	movw	r18, r24
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	b2 2e       	mov	r11, r18
    35b2:	b2 0c       	add	r11, r2
    35b4:	a1 e0       	ldi	r26, 0x01	; 1
    35b6:	b2 16       	cp	r11, r18
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <fat_write_dir_entry+0x1c6>
    35ba:	a0 e0       	ldi	r26, 0x00	; 0
    35bc:	ec a1       	ldd	r30, Y+36	; 0x24
    35be:	e3 0f       	add	r30, r19
    35c0:	f1 e0       	ldi	r31, 0x01	; 1
    35c2:	e3 17       	cp	r30, r19
    35c4:	08 f0       	brcs	.+2      	; 0x35c8 <fat_write_dir_entry+0x1d2>
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	ea 2e       	mov	r14, r26
    35ca:	ee 0e       	add	r14, r30
    35cc:	a1 e0       	ldi	r26, 0x01	; 1
    35ce:	ee 16       	cp	r14, r30
    35d0:	08 f0       	brcs	.+2      	; 0x35d4 <fat_write_dir_entry+0x1de>
    35d2:	a0 e0       	ldi	r26, 0x00	; 0
    35d4:	fa 2b       	or	r31, r26
    35d6:	e1 e0       	ldi	r30, 0x01	; 1
    35d8:	74 16       	cp	r7, r20
    35da:	08 f0       	brcs	.+2      	; 0x35de <fat_write_dir_entry+0x1e8>
    35dc:	e0 e0       	ldi	r30, 0x00	; 0
    35de:	ff 2e       	mov	r15, r31
    35e0:	f7 0c       	add	r15, r7
    35e2:	f1 e0       	ldi	r31, 0x01	; 1
    35e4:	f7 14       	cp	r15, r7
    35e6:	08 f0       	brcs	.+2      	; 0x35ea <fat_write_dir_entry+0x1f4>
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	ef 2b       	or	r30, r31
    35ec:	f1 e0       	ldi	r31, 0x01	; 1
    35ee:	65 16       	cp	r6, r21
    35f0:	08 f0       	brcs	.+2      	; 0x35f4 <fat_write_dir_entry+0x1fe>
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	0e 2f       	mov	r16, r30
    35f6:	06 0d       	add	r16, r6
    35f8:	e1 e0       	ldi	r30, 0x01	; 1
    35fa:	06 15       	cp	r16, r6
    35fc:	08 f0       	brcs	.+2      	; 0x3600 <fat_write_dir_entry+0x20a>
    35fe:	e0 e0       	ldi	r30, 0x00	; 0
    3600:	fe 2b       	or	r31, r30
    3602:	e1 e0       	ldi	r30, 0x01	; 1
    3604:	56 16       	cp	r5, r22
    3606:	08 f0       	brcs	.+2      	; 0x360a <fat_write_dir_entry+0x214>
    3608:	e0 e0       	ldi	r30, 0x00	; 0
    360a:	1f 2f       	mov	r17, r31
    360c:	15 0d       	add	r17, r5
    360e:	f1 e0       	ldi	r31, 0x01	; 1
    3610:	15 15       	cp	r17, r5
    3612:	08 f0       	brcs	.+2      	; 0x3616 <fat_write_dir_entry+0x220>
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	ef 2b       	or	r30, r31
    3618:	f1 e0       	ldi	r31, 0x01	; 1
    361a:	47 16       	cp	r4, r23
    361c:	08 f0       	brcs	.+2      	; 0x3620 <fat_write_dir_entry+0x22a>
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	be 2f       	mov	r27, r30
    3622:	b4 0d       	add	r27, r4
    3624:	e1 e0       	ldi	r30, 0x01	; 1
    3626:	b4 15       	cp	r27, r4
    3628:	08 f0       	brcs	.+2      	; 0x362c <fat_write_dir_entry+0x236>
    362a:	e0 e0       	ldi	r30, 0x00	; 0
    362c:	fe 2b       	or	r31, r30
    362e:	a1 e0       	ldi	r26, 0x01	; 1
    3630:	38 16       	cp	r3, r24
    3632:	08 f0       	brcs	.+2      	; 0x3636 <fat_write_dir_entry+0x240>
    3634:	a0 e0       	ldi	r26, 0x00	; 0
    3636:	8f 2f       	mov	r24, r31
    3638:	83 0d       	add	r24, r3
    363a:	e1 e0       	ldi	r30, 0x01	; 1
    363c:	83 15       	cp	r24, r3
    363e:	08 f0       	brcs	.+2      	; 0x3642 <fat_write_dir_entry+0x24c>
    3640:	e0 e0       	ldi	r30, 0x00	; 0
    3642:	ae 2b       	or	r26, r30
    3644:	2b 2d       	mov	r18, r11
    3646:	3e 2d       	mov	r19, r14
    3648:	4f 2d       	mov	r20, r15
    364a:	50 2f       	mov	r21, r16
    364c:	61 2f       	mov	r22, r17
    364e:	7b 2f       	mov	r23, r27
    3650:	9d a1       	ldd	r25, Y+37	; 0x25
    3652:	9a 0f       	add	r25, r26
    3654:	8e 01       	movw	r16, r28
    3656:	0f 5f       	subi	r16, 0xFF	; 255
    3658:	1f 4f       	sbci	r17, 0xFF	; 255
    365a:	f0 e2       	ldi	r31, 0x20	; 32
    365c:	ef 2e       	mov	r14, r31
    365e:	f1 2c       	mov	r15, r1
    3660:	aa a1       	ldd	r26, Y+34	; 0x22
    3662:	bb a1       	ldd	r27, Y+35	; 0x23
    3664:	fd 01       	movw	r30, r26
    3666:	09 95       	icall
    3668:	88 23       	and	r24, r24
    366a:	09 f4       	brne	.+2      	; 0x366e <fat_write_dir_entry+0x278>
    366c:	96 c0       	rjmp	.+300    	; 0x379a <fat_write_dir_entry+0x3a4>
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    366e:	b9 80       	ldd	r11, Y+1	; 0x01
    3670:	fe 01       	movw	r30, r28
    3672:	32 96       	adiw	r30, 0x02	; 2
    for(uint8_t i = 1; i < 11; ++i)
    3674:	9e 01       	movw	r18, r28
    3676:	24 5f       	subi	r18, 0xF4	; 244
    3678:	3f 4f       	sbci	r19, 0xFF	; 255
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    367a:	8b 2d       	mov	r24, r11
    367c:	86 95       	lsr	r24
    367e:	b7 94       	ror	r11
    3680:	bb 24       	eor	r11, r11
    3682:	b7 94       	ror	r11
    3684:	b8 2a       	or	r11, r24
    3686:	81 91       	ld	r24, Z+
    3688:	b8 0e       	add	r11, r24
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    for(uint8_t i = 1; i < 11; ++i)
    368a:	e2 17       	cp	r30, r18
    368c:	f3 07       	cpc	r31, r19
    368e:	a9 f7       	brne	.-22     	; 0x367a <fat_write_dir_entry+0x284>
    3690:	a9 a0       	ldd	r10, Y+33	; 0x21
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    3692:	4e 01       	movw	r8, r28
    3694:	08 94       	sec
    3696:	81 1c       	adc	r8, r1
    3698:	91 1c       	adc	r9, r1
    369a:	7a c0       	rjmp	.+244    	; 0x3790 <fat_write_dir_entry+0x39a>
    369c:	c4 01       	movw	r24, r8
    369e:	6f ef       	ldi	r22, 0xFF	; 255
    36a0:	70 e0       	ldi	r23, 0x00	; 0
    36a2:	40 e2       	ldi	r20, 0x20	; 32
    36a4:	50 e0       	ldi	r21, 0x00	; 0
    36a6:	0e 94 f3 44 	call	0x89e6	; 0x89e6 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    36aa:	ed e0       	ldi	r30, 0x0D	; 13
    36ac:	ae 9e       	mul	r10, r30
    36ae:	d0 01       	movw	r26, r0
    36b0:	11 24       	eor	r1, r1
    36b2:	1d 97       	sbiw	r26, 0x0d	; 13
    36b4:	ac 0d       	add	r26, r12
    36b6:	bd 1d       	adc	r27, r13
    36b8:	91 e0       	ldi	r25, 0x01	; 1
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    36ba:	f4 01       	movw	r30, r8
    36bc:	e9 0f       	add	r30, r25
    36be:	f1 1d       	adc	r31, r1
    36c0:	8c 91       	ld	r24, X
    36c2:	80 83       	st	Z, r24
    36c4:	89 2f       	mov	r24, r25
    36c6:	8f 5f       	subi	r24, 0xFF	; 255
            buffer[i++] = 0;
    36c8:	f4 01       	movw	r30, r8
    36ca:	e8 0f       	add	r30, r24
    36cc:	f1 1d       	adc	r31, r1
    36ce:	10 82       	st	Z, r1
    36d0:	9e 5f       	subi	r25, 0xFE	; 254

            switch(i)
    36d2:	9b 30       	cpi	r25, 0x0B	; 11
    36d4:	19 f0       	breq	.+6      	; 0x36dc <fat_write_dir_entry+0x2e6>
    36d6:	9a 31       	cpi	r25, 0x1A	; 26
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <fat_write_dir_entry+0x2ec>
    36da:	02 c0       	rjmp	.+4      	; 0x36e0 <fat_write_dir_entry+0x2ea>
    36dc:	9e e0       	ldi	r25, 0x0E	; 14
    36de:	01 c0       	rjmp	.+2      	; 0x36e2 <fat_write_dir_entry+0x2ec>
    36e0:	9c e1       	ldi	r25, 0x1C	; 28
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    36e2:	8c 91       	ld	r24, X
    36e4:	88 23       	and	r24, r24
    36e6:	21 f0       	breq	.+8      	; 0x36f0 <fat_write_dir_entry+0x2fa>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    36e8:	9f 31       	cpi	r25, 0x1F	; 31
    36ea:	10 f4       	brcc	.+4      	; 0x36f0 <fat_write_dir_entry+0x2fa>
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    36ec:	11 96       	adiw	r26, 0x01	; 1
    36ee:	e5 cf       	rjmp	.-54     	; 0x36ba <fat_write_dir_entry+0x2c4>
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    36f0:	a9 82       	std	Y+1, r10	; 0x01
        if(lfn_entry == lfn_entry_count)
    36f2:	f9 a1       	ldd	r31, Y+33	; 0x21
    36f4:	af 16       	cp	r10, r31
    36f6:	19 f4       	brne	.+6      	; 0x36fe <fat_write_dir_entry+0x308>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    36f8:	8a 2d       	mov	r24, r10
    36fa:	80 64       	ori	r24, 0x40	; 64
    36fc:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    36fe:	2f e0       	ldi	r18, 0x0F	; 15
    3700:	2c 87       	std	Y+12, r18	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    3702:	be 86       	std	Y+14, r11	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    3704:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    3706:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    3708:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    370a:	22 2d       	mov	r18, r2
    370c:	3c a1       	ldd	r19, Y+36	; 0x24
    370e:	47 2d       	mov	r20, r7
    3710:	56 2d       	mov	r21, r6
    3712:	65 2d       	mov	r22, r5
    3714:	74 2d       	mov	r23, r4
    3716:	83 2d       	mov	r24, r3
    3718:	9d a1       	ldd	r25, Y+37	; 0x25
    371a:	84 01       	movw	r16, r8
    371c:	e0 e2       	ldi	r30, 0x20	; 32
    371e:	ee 2e       	mov	r14, r30
    3720:	f1 2c       	mov	r15, r1
    3722:	aa a1       	ldd	r26, Y+34	; 0x22
    3724:	bb a1       	ldd	r27, Y+35	; 0x23
    3726:	fd 01       	movw	r30, r26
    3728:	09 95       	icall
    
        offset += sizeof(buffer);
    372a:	72 2d       	mov	r23, r2
    372c:	70 5e       	subi	r23, 0xE0	; 224
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	72 15       	cp	r23, r2
    3732:	08 f0       	brcs	.+2      	; 0x3736 <fat_write_dir_entry+0x340>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	6c a1       	ldd	r22, Y+36	; 0x24
    3738:	68 0f       	add	r22, r24
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	bc a1       	ldd	r27, Y+36	; 0x24
    373e:	6b 17       	cp	r22, r27
    3740:	08 f0       	brcs	.+2      	; 0x3744 <fat_write_dir_entry+0x34e>
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	58 2f       	mov	r21, r24
    3746:	57 0d       	add	r21, r7
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	57 15       	cp	r21, r7
    374c:	08 f0       	brcs	.+2      	; 0x3750 <fat_write_dir_entry+0x35a>
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	48 2f       	mov	r20, r24
    3752:	46 0d       	add	r20, r6
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	46 15       	cp	r20, r6
    3758:	08 f0       	brcs	.+2      	; 0x375c <fat_write_dir_entry+0x366>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	38 2f       	mov	r19, r24
    375e:	35 0d       	add	r19, r5
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	35 15       	cp	r19, r5
    3764:	08 f0       	brcs	.+2      	; 0x3768 <fat_write_dir_entry+0x372>
    3766:	80 e0       	ldi	r24, 0x00	; 0
    3768:	28 2f       	mov	r18, r24
    376a:	24 0d       	add	r18, r4
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	24 15       	cp	r18, r4
    3770:	08 f0       	brcs	.+2      	; 0x3774 <fat_write_dir_entry+0x37e>
    3772:	80 e0       	ldi	r24, 0x00	; 0
    3774:	83 0d       	add	r24, r3
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	83 15       	cp	r24, r3
    377a:	08 f0       	brcs	.+2      	; 0x377e <fat_write_dir_entry+0x388>
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	27 2e       	mov	r2, r23
    3780:	6c a3       	std	Y+36, r22	; 0x24
    3782:	3a 01       	movw	r6, r20
    3784:	29 01       	movw	r4, r18
    3786:	38 2e       	mov	r3, r24
    3788:	ed a1       	ldd	r30, Y+37	; 0x25
    378a:	e9 0f       	add	r30, r25
    378c:	ed a3       	std	Y+37, r30	; 0x25
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    378e:	aa 94       	dec	r10
    3790:	aa 20       	and	r10, r10
    3792:	09 f0       	breq	.+2      	; 0x3796 <fat_write_dir_entry+0x3a0>
    3794:	83 cf       	rjmp	.-250    	; 0x369c <fat_write_dir_entry+0x2a6>
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	01 c0       	rjmp	.+2      	; 0x379c <fat_write_dir_entry+0x3a6>
    379a:	80 e0       	ldi	r24, 0x00	; 0
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    379c:	a5 96       	adiw	r28, 0x25	; 37
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	ff 90       	pop	r15
    37b2:	ef 90       	pop	r14
    37b4:	df 90       	pop	r13
    37b6:	cf 90       	pop	r12
    37b8:	bf 90       	pop	r11
    37ba:	af 90       	pop	r10
    37bc:	9f 90       	pop	r9
    37be:	8f 90       	pop	r8
    37c0:	7f 90       	pop	r7
    37c2:	6f 90       	pop	r6
    37c4:	5f 90       	pop	r5
    37c6:	4f 90       	pop	r4
    37c8:	3f 90       	pop	r3
    37ca:	2f 90       	pop	r2
    37cc:	08 95       	ret

000037ce <fat_create_dir>:
 * \param[out] dir_entry The directory entry to fill for the new directory.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_dir
 */
uint8_t fat_create_dir(struct fat_dir_struct* parent, const char* dir, struct fat_dir_entry_struct* dir_entry)
{
    37ce:	2f 92       	push	r2
    37d0:	3f 92       	push	r3
    37d2:	4f 92       	push	r4
    37d4:	5f 92       	push	r5
    37d6:	6f 92       	push	r6
    37d8:	7f 92       	push	r7
    37da:	8f 92       	push	r8
    37dc:	9f 92       	push	r9
    37de:	af 92       	push	r10
    37e0:	bf 92       	push	r11
    37e2:	cf 92       	push	r12
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	2e 97       	sbiw	r28, 0x0e	; 14
    37f8:	0f b6       	in	r0, 0x3f	; 63
    37fa:	f8 94       	cli
    37fc:	de bf       	out	0x3e, r29	; 62
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	cd bf       	out	0x3d, r28	; 61
    3802:	98 87       	std	Y+8, r25	; 0x08
    3804:	8f 83       	std	Y+7, r24	; 0x07
    3806:	7a 87       	std	Y+10, r23	; 0x0a
    3808:	69 87       	std	Y+9, r22	; 0x09
    380a:	5e 87       	std	Y+14, r21	; 0x0e
    380c:	4d 87       	std	Y+13, r20	; 0x0d
    if(!parent || !dir || !dir[0] || !dir_entry)
    380e:	89 2b       	or	r24, r25
    3810:	09 f4       	brne	.+2      	; 0x3814 <fat_create_dir+0x46>
    3812:	ac c1       	rjmp	.+856    	; 0x3b6c <fat_create_dir+0x39e>
    3814:	61 15       	cp	r22, r1
    3816:	71 05       	cpc	r23, r1
    3818:	09 f4       	brne	.+2      	; 0x381c <fat_create_dir+0x4e>
    381a:	a8 c1       	rjmp	.+848    	; 0x3b6c <fat_create_dir+0x39e>
    381c:	db 01       	movw	r26, r22
    381e:	8c 91       	ld	r24, X
    3820:	88 23       	and	r24, r24
    3822:	09 f4       	brne	.+2      	; 0x3826 <fat_create_dir+0x58>
    3824:	a3 c1       	rjmp	.+838    	; 0x3b6c <fat_create_dir+0x39e>
    3826:	45 2b       	or	r20, r21
    3828:	b1 f4       	brne	.+44     	; 0x3856 <fat_create_dir+0x88>
    382a:	a0 c1       	rjmp	.+832    	; 0x3b6c <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    382c:	89 85       	ldd	r24, Y+9	; 0x09
    382e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <strcmp>
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	89 f4       	brne	.+34     	; 0x385e <fat_create_dir+0x90>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    383c:	ef 81       	ldd	r30, Y+7	; 0x07
    383e:	f8 85       	ldd	r31, Y+8	; 0x08
    3840:	83 a1       	ldd	r24, Z+35	; 0x23
    3842:	94 a1       	ldd	r25, Z+36	; 0x24
    3844:	a5 a1       	ldd	r26, Z+37	; 0x25
    3846:	b6 a1       	ldd	r27, Z+38	; 0x26
    3848:	83 ab       	std	Z+51, r24	; 0x33
    384a:	94 ab       	std	Z+52, r25	; 0x34
    384c:	a5 ab       	std	Z+53, r26	; 0x35
    384e:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    3850:	10 ae       	std	Z+56, r1	; 0x38
    3852:	17 aa       	std	Z+55, r1	; 0x37
    3854:	8b c1       	rjmp	.+790    	; 0x3b6c <fat_create_dir+0x39e>
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    {
        if(strcmp(dir, dir_entry->long_name) == 0)
    3856:	fd 85       	ldd	r31, Y+13	; 0x0d
    3858:	fb 87       	std	Y+11, r31	; 0x0b
    385a:	8e 85       	ldd	r24, Y+14	; 0x0e
    385c:	8c 87       	std	Y+12, r24	; 0x0c
{
    if(!parent || !dir || !dir[0] || !dir_entry)
        return 0;

    /* check if the file or directory already exists */
    while(fat_read_dir(parent, dir_entry))
    385e:	8f 81       	ldd	r24, Y+7	; 0x07
    3860:	98 85       	ldd	r25, Y+8	; 0x08
    3862:	6d 85       	ldd	r22, Y+13	; 0x0d
    3864:	7e 85       	ldd	r23, Y+14	; 0x0e
    3866:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fat_read_dir>
    386a:	88 23       	and	r24, r24
    386c:	f9 f6       	brne	.-66     	; 0x382c <fat_create_dir+0x5e>
            fat_reset_dir(parent);
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    386e:	af 81       	ldd	r26, Y+7	; 0x07
    3870:	b8 85       	ldd	r27, Y+8	; 0x08
    3872:	0d 90       	ld	r0, X+
    3874:	bc 91       	ld	r27, X
    3876:	a0 2d       	mov	r26, r0
    3878:	be 83       	std	Y+6, r27	; 0x06
    387a:	ad 83       	std	Y+5, r26	; 0x05

    /* allocate cluster which will hold directory entries */
    cluster_t dir_cluster = fat_append_clusters(fs, 0, 1);
    387c:	cd 01       	movw	r24, r26
    387e:	40 e0       	ldi	r20, 0x00	; 0
    3880:	50 e0       	ldi	r21, 0x00	; 0
    3882:	60 e0       	ldi	r22, 0x00	; 0
    3884:	70 e0       	ldi	r23, 0x00	; 0
    3886:	01 e0       	ldi	r16, 0x01	; 1
    3888:	10 e0       	ldi	r17, 0x00	; 0
    388a:	20 e0       	ldi	r18, 0x00	; 0
    388c:	30 e0       	ldi	r19, 0x00	; 0
    388e:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
    3892:	69 83       	std	Y+1, r22	; 0x01
    3894:	7a 83       	std	Y+2, r23	; 0x02
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	9c 83       	std	Y+4, r25	; 0x04
    if(!dir_cluster)
    389a:	61 15       	cp	r22, r1
    389c:	71 05       	cpc	r23, r1
    389e:	81 05       	cpc	r24, r1
    38a0:	91 05       	cpc	r25, r1
    38a2:	09 f4       	brne	.+2      	; 0x38a6 <fat_create_dir+0xd8>
    38a4:	63 c1       	rjmp	.+710    	; 0x3b6c <fat_create_dir+0x39e>
        return 0;

    /* clear cluster to prevent bogus directory entries */
    fat_clear_cluster(fs, dir_cluster);
    38a6:	8d 81       	ldd	r24, Y+5	; 0x05
    38a8:	9e 81       	ldd	r25, Y+6	; 0x06
    38aa:	49 81       	ldd	r20, Y+1	; 0x01
    38ac:	5a 81       	ldd	r21, Y+2	; 0x02
    38ae:	6b 81       	ldd	r22, Y+3	; 0x03
    38b0:	7c 81       	ldd	r23, Y+4	; 0x04
    38b2:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <fat_clear_cluster>
    
    memset(dir_entry, 0, sizeof(*dir_entry));
    38b6:	81 e3       	ldi	r24, 0x31	; 49
    38b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    38ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    38bc:	11 92       	st	Z+, r1
    38be:	8a 95       	dec	r24
    38c0:	e9 f7       	brne	.-6      	; 0x38bc <fat_create_dir+0xee>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    38c2:	80 e1       	ldi	r24, 0x10	; 16
    38c4:	ad 85       	ldd	r26, Y+13	; 0x0d
    38c6:	be 85       	ldd	r27, Y+14	; 0x0e
    38c8:	90 96       	adiw	r26, 0x20	; 32
    38ca:	8c 93       	st	X, r24

    /* create "." directory self reference */
    dir_entry->entry_offset = fs->header.cluster_zero_offset +
    38cc:	89 81       	ldd	r24, Y+1	; 0x01
    38ce:	9a 81       	ldd	r25, Y+2	; 0x02
    38d0:	ab 81       	ldd	r26, Y+3	; 0x03
    38d2:	bc 81       	ldd	r27, Y+4	; 0x04
    38d4:	02 97       	sbiw	r24, 0x02	; 2
    38d6:	a1 09       	sbc	r26, r1
    38d8:	b1 09       	sbc	r27, r1
    38da:	5c 01       	movw	r10, r24
    38dc:	6d 01       	movw	r12, r26
    38de:	02 96       	adiw	r24, 0x02	; 2
    38e0:	a1 1d       	adc	r26, r1
    38e2:	b1 1d       	adc	r27, r1
    38e4:	89 83       	std	Y+1, r24	; 0x01
    38e6:	9a 83       	std	Y+2, r25	; 0x02
    38e8:	ab 83       	std	Y+3, r26	; 0x03
    38ea:	bc 83       	std	Y+4, r27	; 0x04
    38ec:	ad 81       	ldd	r26, Y+5	; 0x05
    38ee:	be 81       	ldd	r27, Y+6	; 0x06
    38f0:	58 96       	adiw	r26, 0x18	; 24
    38f2:	2d 90       	ld	r2, X+
    38f4:	3c 90       	ld	r3, X
    38f6:	59 97       	sbiw	r26, 0x19	; 25
    38f8:	95 01       	movw	r18, r10
    38fa:	a6 01       	movw	r20, r12
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	70 e0       	ldi	r23, 0x00	; 0
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	51 01       	movw	r10, r2
    3906:	cc 24       	eor	r12, r12
    3908:	dd 24       	eor	r13, r13
    390a:	ee 24       	eor	r14, r14
    390c:	ff 24       	eor	r15, r15
    390e:	00 e0       	ldi	r16, 0x00	; 0
    3910:	10 e0       	ldi	r17, 0x00	; 0
    3912:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    3916:	ed 81       	ldd	r30, Y+5	; 0x05
    3918:	fe 81       	ldd	r31, Y+6	; 0x06
    391a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    391c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    391e:	14 8d       	ldd	r17, Z+28	; 0x1c
    3920:	05 8d       	ldd	r16, Z+29	; 0x1d
    3922:	f6 8c       	ldd	r15, Z+30	; 0x1e
    3924:	d7 8c       	ldd	r13, Z+31	; 0x1f
    3926:	c0 a0       	ldd	r12, Z+32	; 0x20
    3928:	b1 a1       	ldd	r27, Z+33	; 0x21
    392a:	a2 0f       	add	r26, r18
    392c:	f1 e0       	ldi	r31, 0x01	; 1
    392e:	a2 17       	cp	r26, r18
    3930:	08 f0       	brcs	.+2      	; 0x3934 <fat_create_dir+0x166>
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	23 2f       	mov	r18, r19
    3936:	2e 0d       	add	r18, r14
    3938:	e1 e0       	ldi	r30, 0x01	; 1
    393a:	23 17       	cp	r18, r19
    393c:	08 f0       	brcs	.+2      	; 0x3940 <fat_create_dir+0x172>
    393e:	e0 e0       	ldi	r30, 0x00	; 0
    3940:	ef 2e       	mov	r14, r31
    3942:	e2 0e       	add	r14, r18
    3944:	31 e0       	ldi	r19, 0x01	; 1
    3946:	e2 16       	cp	r14, r18
    3948:	08 f0       	brcs	.+2      	; 0x394c <fat_create_dir+0x17e>
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	e3 2b       	or	r30, r19
    394e:	24 2f       	mov	r18, r20
    3950:	21 0f       	add	r18, r17
    3952:	f1 e0       	ldi	r31, 0x01	; 1
    3954:	24 17       	cp	r18, r20
    3956:	08 f0       	brcs	.+2      	; 0x395a <fat_create_dir+0x18c>
    3958:	f0 e0       	ldi	r31, 0x00	; 0
    395a:	1e 2f       	mov	r17, r30
    395c:	12 0f       	add	r17, r18
    395e:	31 e0       	ldi	r19, 0x01	; 1
    3960:	12 17       	cp	r17, r18
    3962:	08 f0       	brcs	.+2      	; 0x3966 <fat_create_dir+0x198>
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	f3 2b       	or	r31, r19
    3968:	25 2f       	mov	r18, r21
    396a:	20 0f       	add	r18, r16
    396c:	41 e0       	ldi	r20, 0x01	; 1
    396e:	25 17       	cp	r18, r21
    3970:	08 f0       	brcs	.+2      	; 0x3974 <fat_create_dir+0x1a6>
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0f 2f       	mov	r16, r31
    3976:	02 0f       	add	r16, r18
    3978:	31 e0       	ldi	r19, 0x01	; 1
    397a:	02 17       	cp	r16, r18
    397c:	08 f0       	brcs	.+2      	; 0x3980 <fat_create_dir+0x1b2>
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	43 2b       	or	r20, r19
    3982:	26 2f       	mov	r18, r22
    3984:	2f 0d       	add	r18, r15
    3986:	51 e0       	ldi	r21, 0x01	; 1
    3988:	26 17       	cp	r18, r22
    398a:	08 f0       	brcs	.+2      	; 0x398e <fat_create_dir+0x1c0>
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	64 2f       	mov	r22, r20
    3990:	62 0f       	add	r22, r18
    3992:	31 e0       	ldi	r19, 0x01	; 1
    3994:	62 17       	cp	r22, r18
    3996:	08 f0       	brcs	.+2      	; 0x399a <fat_create_dir+0x1cc>
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	53 2b       	or	r21, r19
    399c:	27 2f       	mov	r18, r23
    399e:	2d 0d       	add	r18, r13
    39a0:	41 e0       	ldi	r20, 0x01	; 1
    39a2:	27 17       	cp	r18, r23
    39a4:	08 f0       	brcs	.+2      	; 0x39a8 <fat_create_dir+0x1da>
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	52 0f       	add	r21, r18
    39aa:	31 e0       	ldi	r19, 0x01	; 1
    39ac:	52 17       	cp	r21, r18
    39ae:	08 f0       	brcs	.+2      	; 0x39b2 <fat_create_dir+0x1e4>
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	43 2b       	or	r20, r19
    39b4:	28 2f       	mov	r18, r24
    39b6:	2c 0d       	add	r18, r12
    39b8:	31 e0       	ldi	r19, 0x01	; 1
    39ba:	28 17       	cp	r18, r24
    39bc:	08 f0       	brcs	.+2      	; 0x39c0 <fat_create_dir+0x1f2>
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	42 0f       	add	r20, r18
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	42 17       	cp	r20, r18
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <fat_create_dir+0x1fc>
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	38 2b       	or	r19, r24
    39cc:	b9 0f       	add	r27, r25
    39ce:	3b 0f       	add	r19, r27
    39d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    39d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    39d4:	a1 a7       	std	Z+41, r26	; 0x29
    39d6:	e2 a6       	std	Z+42, r14	; 0x2a
    39d8:	13 a7       	std	Z+43, r17	; 0x2b
    39da:	04 a7       	std	Z+44, r16	; 0x2c
    39dc:	65 a7       	std	Z+45, r22	; 0x2d
    39de:	56 a7       	std	Z+46, r21	; 0x2e
    39e0:	47 a7       	std	Z+47, r20	; 0x2f
    39e2:	30 ab       	std	Z+48, r19	; 0x30
                              (offset_t) (dir_cluster - 2) * fs->header.cluster_size;
    dir_entry->long_name[0] = '.';
    39e4:	8e e2       	ldi	r24, 0x2E	; 46
    39e6:	80 83       	st	Z, r24
    dir_entry->cluster = dir_cluster;
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	ab 81       	ldd	r26, Y+3	; 0x03
    39ee:	bc 81       	ldd	r27, Y+4	; 0x04
    39f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    39f2:	fe 85       	ldd	r31, Y+14	; 0x0e
    39f4:	81 a3       	std	Z+33, r24	; 0x21
    39f6:	92 a3       	std	Z+34, r25	; 0x22
    39f8:	a3 a3       	std	Z+35, r26	; 0x23
    39fa:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	bf 01       	movw	r22, r30
    3a02:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3a06:	88 23       	and	r24, r24
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <fat_create_dir+0x23e>
    3a0a:	a8 c0       	rjmp	.+336    	; 0x3b5c <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* create ".." parent directory reference */
    dir_entry->entry_offset += 32;
    3a0c:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a0e:	be 85       	ldd	r27, Y+14	; 0x0e
    3a10:	99 96       	adiw	r26, 0x29	; 41
    3a12:	8c 91       	ld	r24, X
    3a14:	99 97       	sbiw	r26, 0x29	; 41
    3a16:	9a 96       	adiw	r26, 0x2a	; 42
    3a18:	2c 91       	ld	r18, X
    3a1a:	9a 97       	sbiw	r26, 0x2a	; 42
    3a1c:	9b 96       	adiw	r26, 0x2b	; 43
    3a1e:	3c 91       	ld	r19, X
    3a20:	9b 97       	sbiw	r26, 0x2b	; 43
    3a22:	9c 96       	adiw	r26, 0x2c	; 44
    3a24:	4c 91       	ld	r20, X
    3a26:	9c 97       	sbiw	r26, 0x2c	; 44
    3a28:	9d 96       	adiw	r26, 0x2d	; 45
    3a2a:	6c 91       	ld	r22, X
    3a2c:	9d 97       	sbiw	r26, 0x2d	; 45
    3a2e:	9e 96       	adiw	r26, 0x2e	; 46
    3a30:	fc 90       	ld	r15, X
    3a32:	9e 97       	sbiw	r26, 0x2e	; 46
    3a34:	9f 96       	adiw	r26, 0x2f	; 47
    3a36:	ac 91       	ld	r26, X
    3a38:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a3a:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a3c:	10 a9       	ldd	r17, Z+48	; 0x30
    3a3e:	b8 2f       	mov	r27, r24
    3a40:	b0 5e       	subi	r27, 0xE0	; 224
    3a42:	91 e0       	ldi	r25, 0x01	; 1
    3a44:	b8 17       	cp	r27, r24
    3a46:	08 f0       	brcs	.+2      	; 0x3a4a <fat_create_dir+0x27c>
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	09 2f       	mov	r16, r25
    3a4c:	02 0f       	add	r16, r18
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	02 17       	cp	r16, r18
    3a52:	08 f0       	brcs	.+2      	; 0x3a56 <fat_create_dir+0x288>
    3a54:	80 e0       	ldi	r24, 0x00	; 0
    3a56:	78 2f       	mov	r23, r24
    3a58:	73 0f       	add	r23, r19
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	73 17       	cp	r23, r19
    3a5e:	08 f0       	brcs	.+2      	; 0x3a62 <fat_create_dir+0x294>
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	58 2f       	mov	r21, r24
    3a64:	54 0f       	add	r21, r20
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	54 17       	cp	r21, r20
    3a6a:	08 f0       	brcs	.+2      	; 0x3a6e <fat_create_dir+0x2a0>
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	38 2f       	mov	r19, r24
    3a70:	36 0f       	add	r19, r22
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	36 17       	cp	r19, r22
    3a76:	08 f0       	brcs	.+2      	; 0x3a7a <fat_create_dir+0x2ac>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	2f 0d       	add	r18, r15
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	2f 15       	cp	r18, r15
    3a82:	08 f0       	brcs	.+2      	; 0x3a86 <fat_create_dir+0x2b8>
    3a84:	80 e0       	ldi	r24, 0x00	; 0
    3a86:	98 2f       	mov	r25, r24
    3a88:	9a 0f       	add	r25, r26
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	9a 17       	cp	r25, r26
    3a8e:	08 f0       	brcs	.+2      	; 0x3a92 <fat_create_dir+0x2c4>
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	81 0f       	add	r24, r17
    3a94:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a96:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a98:	b1 a7       	std	Z+41, r27	; 0x29
    3a9a:	02 a7       	std	Z+42, r16	; 0x2a
    3a9c:	73 a7       	std	Z+43, r23	; 0x2b
    3a9e:	54 a7       	std	Z+44, r21	; 0x2c
    3aa0:	35 a7       	std	Z+45, r19	; 0x2d
    3aa2:	26 a7       	std	Z+46, r18	; 0x2e
    3aa4:	97 a7       	std	Z+47, r25	; 0x2f
    3aa6:	80 ab       	std	Z+48, r24	; 0x30
    dir_entry->long_name[1] = '.';
    3aa8:	8e e2       	ldi	r24, 0x2E	; 46
    3aaa:	81 83       	std	Z+1, r24	; 0x01
    dir_entry->cluster = parent->dir_entry.cluster;
    3aac:	ef 81       	ldd	r30, Y+7	; 0x07
    3aae:	f8 85       	ldd	r31, Y+8	; 0x08
    3ab0:	83 a1       	ldd	r24, Z+35	; 0x23
    3ab2:	94 a1       	ldd	r25, Z+36	; 0x24
    3ab4:	a5 a1       	ldd	r26, Z+37	; 0x25
    3ab6:	b6 a1       	ldd	r27, Z+38	; 0x26
    3ab8:	ed 85       	ldd	r30, Y+13	; 0x0d
    3aba:	fe 85       	ldd	r31, Y+14	; 0x0e
    3abc:	81 a3       	std	Z+33, r24	; 0x21
    3abe:	92 a3       	std	Z+34, r25	; 0x22
    3ac0:	a3 a3       	std	Z+35, r26	; 0x23
    3ac2:	b4 a3       	std	Z+36, r27	; 0x24
    if(!fat_write_dir_entry(fs, dir_entry))
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	bf 01       	movw	r22, r30
    3aca:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3ace:	88 23       	and	r24, r24
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <fat_create_dir+0x306>
    3ad2:	44 c0       	rjmp	.+136    	; 0x3b5c <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* fill directory entry */
    strncpy(dir_entry->long_name, dir, sizeof(dir_entry->long_name) - 1);
    3ad4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3ad6:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ad8:	69 85       	ldd	r22, Y+9	; 0x09
    3ada:	7a 85       	ldd	r23, Y+10	; 0x0a
    3adc:	4f e1       	ldi	r20, 0x1F	; 31
    3ade:	50 e0       	ldi	r21, 0x00	; 0
    3ae0:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <strncpy>
    dir_entry->cluster = dir_cluster;
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae8:	ab 81       	ldd	r26, Y+3	; 0x03
    3aea:	bc 81       	ldd	r27, Y+4	; 0x04
    3aec:	ed 85       	ldd	r30, Y+13	; 0x0d
    3aee:	fe 85       	ldd	r31, Y+14	; 0x0e
    3af0:	81 a3       	std	Z+33, r24	; 0x21
    3af2:	92 a3       	std	Z+34, r25	; 0x22
    3af4:	a3 a3       	std	Z+35, r26	; 0x23
    3af6:	b4 a3       	std	Z+36, r27	; 0x24

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    3af8:	8d 81       	ldd	r24, Y+5	; 0x05
    3afa:	9e 81       	ldd	r25, Y+6	; 0x06
    3afc:	6f 81       	ldd	r22, Y+7	; 0x07
    3afe:	78 85       	ldd	r23, Y+8	; 0x08
    3b00:	af 01       	movw	r20, r30
    3b02:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fat_find_offset_for_dir_entry>
    3b06:	ad 85       	ldd	r26, Y+13	; 0x0d
    3b08:	be 85       	ldd	r27, Y+14	; 0x0e
    3b0a:	99 96       	adiw	r26, 0x29	; 41
    3b0c:	2c 93       	st	X, r18
    3b0e:	99 97       	sbiw	r26, 0x29	; 41
    3b10:	9a 96       	adiw	r26, 0x2a	; 42
    3b12:	3c 93       	st	X, r19
    3b14:	9a 97       	sbiw	r26, 0x2a	; 42
    3b16:	9b 96       	adiw	r26, 0x2b	; 43
    3b18:	4c 93       	st	X, r20
    3b1a:	9b 97       	sbiw	r26, 0x2b	; 43
    3b1c:	9c 96       	adiw	r26, 0x2c	; 44
    3b1e:	5c 93       	st	X, r21
    3b20:	9c 97       	sbiw	r26, 0x2c	; 44
    3b22:	9d 96       	adiw	r26, 0x2d	; 45
    3b24:	6c 93       	st	X, r22
    3b26:	9d 97       	sbiw	r26, 0x2d	; 45
    3b28:	9e 96       	adiw	r26, 0x2e	; 46
    3b2a:	7c 93       	st	X, r23
    3b2c:	9e 97       	sbiw	r26, 0x2e	; 46
    3b2e:	9f 96       	adiw	r26, 0x2f	; 47
    3b30:	8c 93       	st	X, r24
    3b32:	9f 97       	sbiw	r26, 0x2f	; 47
    3b34:	d0 96       	adiw	r26, 0x30	; 48
    3b36:	9c 93       	st	X, r25
    3b38:	23 2b       	or	r18, r19
    3b3a:	24 2b       	or	r18, r20
    3b3c:	25 2b       	or	r18, r21
    3b3e:	26 2b       	or	r18, r22
    3b40:	27 2b       	or	r18, r23
    3b42:	28 2b       	or	r18, r24
    3b44:	29 2b       	or	r18, r25
    3b46:	51 f0       	breq	.+20     	; 0x3b5c <fat_create_dir+0x38e>
        fat_free_clusters(fs, dir_cluster);
        return 0;
    }

    /* write directory to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b50:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3b54:	88 23       	and	r24, r24
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <fat_create_dir+0x38e>
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	09 c0       	rjmp	.+18     	; 0x3b6e <fat_create_dir+0x3a0>
    {
        fat_free_clusters(fs, dir_cluster);
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	49 81       	ldd	r20, Y+1	; 0x01
    3b62:	5a 81       	ldd	r21, Y+2	; 0x02
    3b64:	6b 81       	ldd	r22, Y+3	; 0x03
    3b66:	7c 81       	ldd	r23, Y+4	; 0x04
    3b68:	0e 94 ad 02 	call	0x55a	; 0x55a <fat_free_clusters>
        return 0;
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    3b6e:	2e 96       	adiw	r28, 0x0e	; 14
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	cf 91       	pop	r28
    3b7c:	df 91       	pop	r29
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	ff 90       	pop	r15
    3b84:	ef 90       	pop	r14
    3b86:	df 90       	pop	r13
    3b88:	cf 90       	pop	r12
    3b8a:	bf 90       	pop	r11
    3b8c:	af 90       	pop	r10
    3b8e:	9f 90       	pop	r9
    3b90:	8f 90       	pop	r8
    3b92:	7f 90       	pop	r7
    3b94:	6f 90       	pop	r6
    3b96:	5f 90       	pop	r5
    3b98:	4f 90       	pop	r4
    3b9a:	3f 90       	pop	r3
    3b9c:	2f 90       	pop	r2
    3b9e:	08 95       	ret

00003ba0 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new (or existing) file.
 * \returns 0 on failure, 1 on success, 2 if the file already existed.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    3ba0:	af 92       	push	r10
    3ba2:	bf 92       	push	r11
    3ba4:	cf 92       	push	r12
    3ba6:	df 92       	push	r13
    3ba8:	ef 92       	push	r14
    3baa:	ff 92       	push	r15
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	8c 01       	movw	r16, r24
    3bb6:	7b 01       	movw	r14, r22
    3bb8:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <fat_create_file+0x20>
    3bbe:	55 c0       	rjmp	.+170    	; 0x3c6a <fat_create_file+0xca>
    3bc0:	61 15       	cp	r22, r1
    3bc2:	71 05       	cpc	r23, r1
    3bc4:	09 f4       	brne	.+2      	; 0x3bc8 <fat_create_file+0x28>
    3bc6:	51 c0       	rjmp	.+162    	; 0x3c6a <fat_create_file+0xca>
    3bc8:	fb 01       	movw	r30, r22
    3bca:	80 81       	ld	r24, Z
    3bcc:	88 23       	and	r24, r24
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <fat_create_file+0x32>
    3bd0:	4c c0       	rjmp	.+152    	; 0x3c6a <fat_create_file+0xca>
    3bd2:	41 15       	cp	r20, r1
    3bd4:	51 05       	cpc	r21, r1
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <fat_create_file+0x3a>
    3bd8:	48 c0       	rjmp	.+144    	; 0x3c6a <fat_create_file+0xca>
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    3bda:	b4 2e       	mov	r11, r20
    3bdc:	ad 2e       	mov	r10, r29
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    3bde:	c8 01       	movw	r24, r16
    3be0:	be 01       	movw	r22, r28
    3be2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fat_read_dir>
    3be6:	88 23       	and	r24, r24
    3be8:	a1 f0       	breq	.+40     	; 0x3c12 <fat_create_file+0x72>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    3bea:	c7 01       	movw	r24, r14
    3bec:	6b 2d       	mov	r22, r11
    3bee:	7a 2d       	mov	r23, r10
    3bf0:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <strcmp>
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	99 f7       	brne	.-26     	; 0x3bde <fat_create_file+0x3e>
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	83 a1       	ldd	r24, Z+35	; 0x23
    3bfc:	94 a1       	ldd	r25, Z+36	; 0x24
    3bfe:	a5 a1       	ldd	r26, Z+37	; 0x25
    3c00:	b6 a1       	ldd	r27, Z+38	; 0x26
    3c02:	83 ab       	std	Z+51, r24	; 0x33
    3c04:	94 ab       	std	Z+52, r25	; 0x34
    3c06:	a5 ab       	std	Z+53, r26	; 0x35
    3c08:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    3c0a:	10 ae       	std	Z+56, r1	; 0x38
    3c0c:	17 aa       	std	Z+55, r1	; 0x37
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	2d c0       	rjmp	.+90     	; 0x3c6c <fat_create_file+0xcc>
            fat_reset_dir(parent);
            return 2;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    3c12:	f8 01       	movw	r30, r16
    3c14:	c0 80       	ld	r12, Z
    3c16:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    3c18:	81 e3       	ldi	r24, 0x31	; 49
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	11 92       	st	Z+, r1
    3c1e:	8a 95       	dec	r24
    3c20:	e9 f7       	brne	.-6      	; 0x3c1c <fat_create_file+0x7c>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    3c22:	8b 2d       	mov	r24, r11
    3c24:	9a 2d       	mov	r25, r10
    3c26:	b7 01       	movw	r22, r14
    3c28:	4f e1       	ldi	r20, 0x1F	; 31
    3c2a:	50 e0       	ldi	r21, 0x00	; 0
    3c2c:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    3c30:	c6 01       	movw	r24, r12
    3c32:	b8 01       	movw	r22, r16
    3c34:	ae 01       	movw	r20, r28
    3c36:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <fat_find_offset_for_dir_entry>
    3c3a:	29 a7       	std	Y+41, r18	; 0x29
    3c3c:	3a a7       	std	Y+42, r19	; 0x2a
    3c3e:	4b a7       	std	Y+43, r20	; 0x2b
    3c40:	5c a7       	std	Y+44, r21	; 0x2c
    3c42:	6d a7       	std	Y+45, r22	; 0x2d
    3c44:	7e a7       	std	Y+46, r23	; 0x2e
    3c46:	8f a7       	std	Y+47, r24	; 0x2f
    3c48:	98 ab       	std	Y+48, r25	; 0x30
    3c4a:	23 2b       	or	r18, r19
    3c4c:	24 2b       	or	r18, r20
    3c4e:	25 2b       	or	r18, r21
    3c50:	26 2b       	or	r18, r22
    3c52:	27 2b       	or	r18, r23
    3c54:	28 2b       	or	r18, r24
    3c56:	29 2b       	or	r18, r25
    3c58:	41 f0       	breq	.+16     	; 0x3c6a <fat_create_file+0xca>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    3c5a:	c6 01       	movw	r24, r12
    3c5c:	be 01       	movw	r22, r28
    3c5e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3c62:	88 23       	and	r24, r24
    3c64:	19 f0       	breq	.+6      	; 0x3c6c <fat_create_file+0xcc>
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	01 c0       	rjmp	.+2      	; 0x3c6c <fat_create_file+0xcc>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
    
    return 1;
}
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	08 95       	ret

00003c82 <fat_move_file>:
 * \param[in] file_new The file's new name.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file, fat_delete_file, fat_move_dir
 */
uint8_t fat_move_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry, struct fat_dir_struct* parent_new, const char* file_new)
{
    3c82:	cf 92       	push	r12
    3c84:	df 92       	push	r13
    3c86:	ef 92       	push	r14
    3c88:	ff 92       	push	r15
    3c8a:	0f 93       	push	r16
    3c8c:	1f 93       	push	r17
    3c8e:	df 93       	push	r29
    3c90:	cf 93       	push	r28
    3c92:	cd b7       	in	r28, 0x3d	; 61
    3c94:	de b7       	in	r29, 0x3e	; 62
    3c96:	e1 97       	sbiw	r28, 0x31	; 49
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	f8 94       	cli
    3c9c:	de bf       	out	0x3e, r29	; 62
    3c9e:	0f be       	out	0x3f, r0	; 63
    3ca0:	cd bf       	out	0x3d, r28	; 61
    3ca2:	6c 01       	movw	r12, r24
    3ca4:	8b 01       	movw	r16, r22
    3ca6:	da 01       	movw	r26, r20
    3ca8:	f9 01       	movw	r30, r18
    if(!fs || !dir_entry || !parent_new || (file_new && !file_new[0]))
    3caa:	00 97       	sbiw	r24, 0x00	; 0
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <fat_move_file+0x2e>
    3cae:	56 c0       	rjmp	.+172    	; 0x3d5c <fat_move_file+0xda>
    3cb0:	61 15       	cp	r22, r1
    3cb2:	71 05       	cpc	r23, r1
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <fat_move_file+0x36>
    3cb6:	52 c0       	rjmp	.+164    	; 0x3d5c <fat_move_file+0xda>
    3cb8:	41 15       	cp	r20, r1
    3cba:	51 05       	cpc	r21, r1
    3cbc:	09 f4       	brne	.+2      	; 0x3cc0 <fat_move_file+0x3e>
    3cbe:	4e c0       	rjmp	.+156    	; 0x3d5c <fat_move_file+0xda>
    3cc0:	21 15       	cp	r18, r1
    3cc2:	31 05       	cpc	r19, r1
    3cc4:	21 f0       	breq	.+8      	; 0x3cce <fat_move_file+0x4c>
    3cc6:	80 81       	ld	r24, Z
    3cc8:	88 23       	and	r24, r24
    3cca:	09 f4       	brne	.+2      	; 0x3cce <fat_move_file+0x4c>
    3ccc:	47 c0       	rjmp	.+142    	; 0x3d5c <fat_move_file+0xda>
        return 0;
    if(fs != parent_new->fs)
    3cce:	ed 90       	ld	r14, X+
    3cd0:	fc 90       	ld	r15, X
    3cd2:	11 97       	sbiw	r26, 0x01	; 1
    3cd4:	ce 14       	cp	r12, r14
    3cd6:	df 04       	cpc	r13, r15
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <fat_move_file+0x5a>
    3cda:	40 c0       	rjmp	.+128    	; 0x3d5c <fat_move_file+0xda>
        return 0;

    /* use existing file name if none has been specified */
    if(!file_new)
    3cdc:	30 97       	sbiw	r30, 0x00	; 0
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <fat_move_file+0x60>
        file_new = dir_entry->long_name;
    3ce0:	f8 01       	movw	r30, r16

    /* create file with new file name */
    struct fat_dir_entry_struct dir_entry_new;
    if(!fat_create_file(parent_new, file_new, &dir_entry_new))
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	bf 01       	movw	r22, r30
    3ce6:	6e 01       	movw	r12, r28
    3ce8:	08 94       	sec
    3cea:	c1 1c       	adc	r12, r1
    3cec:	d1 1c       	adc	r13, r1
    3cee:	a6 01       	movw	r20, r12
    3cf0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <fat_create_file>
    3cf4:	88 23       	and	r24, r24
    3cf6:	91 f1       	breq	.+100    	; 0x3d5c <fat_move_file+0xda>
        return 0;

    /* copy members of directory entry which do not change with rename */
    dir_entry_new.attributes = dir_entry->attributes;
    3cf8:	f8 01       	movw	r30, r16
    3cfa:	80 a1       	ldd	r24, Z+32	; 0x20
    3cfc:	89 a3       	std	Y+33, r24	; 0x21
#if FAT_DATETIME_SUPPORT
    dir_entry_new.modification_time = dir_entry->modification_time;
    dir_entry_new.modification_date = dir_entry->modification_date;
#endif
    dir_entry_new.cluster = dir_entry->cluster;
    3cfe:	81 a1       	ldd	r24, Z+33	; 0x21
    3d00:	92 a1       	ldd	r25, Z+34	; 0x22
    3d02:	a3 a1       	ldd	r26, Z+35	; 0x23
    3d04:	b4 a1       	ldd	r27, Z+36	; 0x24
    3d06:	8a a3       	std	Y+34, r24	; 0x22
    3d08:	9b a3       	std	Y+35, r25	; 0x23
    3d0a:	ac a3       	std	Y+36, r26	; 0x24
    3d0c:	bd a3       	std	Y+37, r27	; 0x25
    dir_entry_new.file_size = dir_entry->file_size;
    3d0e:	85 a1       	ldd	r24, Z+37	; 0x25
    3d10:	96 a1       	ldd	r25, Z+38	; 0x26
    3d12:	a7 a1       	ldd	r26, Z+39	; 0x27
    3d14:	b0 a5       	ldd	r27, Z+40	; 0x28
    3d16:	8e a3       	std	Y+38, r24	; 0x26
    3d18:	9f a3       	std	Y+39, r25	; 0x27
    3d1a:	a8 a7       	std	Y+40, r26	; 0x28
    3d1c:	b9 a7       	std	Y+41, r27	; 0x29

    /* make the new file name point to the old file's content */
    if(!fat_write_dir_entry(fs, &dir_entry_new))
    3d1e:	c7 01       	movw	r24, r14
    3d20:	b6 01       	movw	r22, r12
    3d22:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3d26:	88 23       	and	r24, r24
    3d28:	29 f4       	brne	.+10     	; 0x3d34 <fat_move_file+0xb2>
    {
        fat_delete_file(fs, &dir_entry_new);
    3d2a:	c7 01       	movw	r24, r14
    3d2c:	b6 01       	movw	r22, r12
    3d2e:	0e 94 6f 0b 	call	0x16de	; 0x16de <fat_delete_file>
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <fat_move_file+0xda>
        return 0;
    }
    
    /* delete the old file, but not its clusters, which have already been remapped above */
    dir_entry->cluster = 0;
    3d34:	f8 01       	movw	r30, r16
    3d36:	11 a2       	std	Z+33, r1	; 0x21
    3d38:	12 a2       	std	Z+34, r1	; 0x22
    3d3a:	13 a2       	std	Z+35, r1	; 0x23
    3d3c:	14 a2       	std	Z+36, r1	; 0x24
    if(!fat_delete_file(fs, dir_entry))
    3d3e:	c7 01       	movw	r24, r14
    3d40:	b8 01       	movw	r22, r16
    3d42:	0e 94 6f 0b 	call	0x16de	; 0x16de <fat_delete_file>
    3d46:	88 23       	and	r24, r24
    3d48:	49 f0       	breq	.+18     	; 0x3d5c <fat_move_file+0xda>
        return 0;

    *dir_entry = dir_entry_new;
    3d4a:	d8 01       	movw	r26, r16
    3d4c:	f6 01       	movw	r30, r12
    3d4e:	81 e3       	ldi	r24, 0x31	; 49
    3d50:	01 90       	ld	r0, Z+
    3d52:	0d 92       	st	X+, r0
    3d54:	81 50       	subi	r24, 0x01	; 1
    3d56:	e1 f7       	brne	.-8      	; 0x3d50 <fat_move_file+0xce>
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	01 c0       	rjmp	.+2      	; 0x3d5e <fat_move_file+0xdc>
    return 1;
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
}
    3d5e:	e1 96       	adiw	r28, 0x31	; 49
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	ff 90       	pop	r15
    3d74:	ef 90       	pop	r14
    3d76:	df 90       	pop	r13
    3d78:	cf 90       	pop	r12
    3d7a:	08 95       	ret

00003d7c <fat_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_resize_file(struct fat_file_struct* fd, uint32_t size)
{
    3d7c:	2f 92       	push	r2
    3d7e:	3f 92       	push	r3
    3d80:	4f 92       	push	r4
    3d82:	5f 92       	push	r5
    3d84:	6f 92       	push	r6
    3d86:	7f 92       	push	r7
    3d88:	8f 92       	push	r8
    3d8a:	9f 92       	push	r9
    3d8c:	af 92       	push	r10
    3d8e:	bf 92       	push	r11
    3d90:	cf 92       	push	r12
    3d92:	df 92       	push	r13
    3d94:	ef 92       	push	r14
    3d96:	ff 92       	push	r15
    3d98:	0f 93       	push	r16
    3d9a:	1f 93       	push	r17
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
    3da4:	62 97       	sbiw	r28, 0x12	; 18
    3da6:	0f b6       	in	r0, 0x3f	; 63
    3da8:	f8 94       	cli
    3daa:	de bf       	out	0x3e, r29	; 62
    3dac:	0f be       	out	0x3f, r0	; 63
    3dae:	cd bf       	out	0x3d, r28	; 61
    3db0:	1c 01       	movw	r2, r24
    3db2:	4b 87       	std	Y+11, r20	; 0x0b
    3db4:	5c 87       	std	Y+12, r21	; 0x0c
    3db6:	6d 87       	std	Y+13, r22	; 0x0d
    3db8:	7e 87       	std	Y+14, r23	; 0x0e
    if(!fd)
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	09 f4       	brne	.+2      	; 0x3dc0 <fat_resize_file+0x44>
    3dbe:	1b c2       	rjmp	.+1078   	; 0x41f6 <fat_resize_file+0x47a>
        return 0;

    cluster_t cluster_num = fd->dir_entry.cluster;
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	93 96       	adiw	r26, 0x23	; 35
    3dc4:	cd 90       	ld	r12, X+
    3dc6:	dd 90       	ld	r13, X+
    3dc8:	ed 90       	ld	r14, X+
    3dca:	fc 90       	ld	r15, X
    3dcc:	96 97       	sbiw	r26, 0x26	; 38
    uint16_t cluster_size = fd->fs->header.cluster_size;
    3dce:	ed 91       	ld	r30, X+
    3dd0:	fc 91       	ld	r31, X
    3dd2:	20 8d       	ldd	r18, Z+24	; 0x18
    3dd4:	31 8d       	ldd	r19, Z+25	; 0x19
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    3dd6:	c1 14       	cp	r12, r1
    3dd8:	d1 04       	cpc	r13, r1
    3dda:	e1 04       	cpc	r14, r1
    3ddc:	f1 04       	cpc	r15, r1
    3dde:	99 f0       	breq	.+38     	; 0x3e06 <fat_resize_file+0x8a>
    3de0:	4b 84       	ldd	r4, Y+11	; 0x0b
    3de2:	5c 84       	ldd	r5, Y+12	; 0x0c
    3de4:	6d 84       	ldd	r6, Y+13	; 0x0d
    3de6:	7e 84       	ldd	r7, Y+14	; 0x0e
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    3de8:	49 01       	movw	r8, r18
    3dea:	aa 24       	eor	r10, r10
    3dec:	bb 24       	eor	r11, r11
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    3dee:	22 27       	eor	r18, r18
    3df0:	33 27       	eor	r19, r19
    3df2:	a9 01       	movw	r20, r18
    3df4:	28 19       	sub	r18, r8
    3df6:	39 09       	sbc	r19, r9
    3df8:	4a 09       	sbc	r20, r10
    3dfa:	5b 09       	sbc	r21, r11
    3dfc:	2f 87       	std	Y+15, r18	; 0x0f
    3dfe:	38 8b       	std	Y+16, r19	; 0x10
    3e00:	49 8b       	std	Y+17, r20	; 0x11
    3e02:	5a 8b       	std	Y+18, r21	; 0x12
    3e04:	20 c0       	rjmp	.+64     	; 0x3e46 <fat_resize_file+0xca>
    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint32_t size_new = size;

    do
    {
        if(cluster_num == 0 && size_new == 0)
    3e06:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e08:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e0a:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e0c:	be 85       	ldd	r27, Y+14	; 0x0e
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	a1 05       	cpc	r26, r1
    3e12:	b1 05       	cpc	r27, r1
    3e14:	09 f4       	brne	.+2      	; 0x3e18 <fat_resize_file+0x9c>
    3e16:	9d c1       	rjmp	.+826    	; 0x4152 <fat_resize_file+0x3d6>
    3e18:	e3 cf       	rjmp	.-58     	; 0x3de0 <fat_resize_file+0x64>

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
        {
            /* get next cluster of file */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    3e1a:	d1 01       	movw	r26, r2
    3e1c:	8d 91       	ld	r24, X+
    3e1e:	9c 91       	ld	r25, X
    3e20:	b7 01       	movw	r22, r14
    3e22:	a6 01       	movw	r20, r12
    3e24:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
            if(cluster_num_next)
    3e28:	61 15       	cp	r22, r1
    3e2a:	71 05       	cpc	r23, r1
    3e2c:	81 05       	cpc	r24, r1
    3e2e:	91 05       	cpc	r25, r1
    3e30:	81 f0       	breq	.+32     	; 0x3e52 <fat_resize_file+0xd6>
                cluster_num = cluster_num_next;
                size_new -= cluster_size;
            }
            else
            {
                break;
    3e32:	2f 85       	ldd	r18, Y+15	; 0x0f
    3e34:	38 89       	ldd	r19, Y+16	; 0x10
    3e36:	49 89       	ldd	r20, Y+17	; 0x11
    3e38:	5a 89       	ldd	r21, Y+18	; 0x12
    3e3a:	42 0e       	add	r4, r18
    3e3c:	53 1e       	adc	r5, r19
    3e3e:	64 1e       	adc	r6, r20
    3e40:	75 1e       	adc	r7, r21
    3e42:	6b 01       	movw	r12, r22
    3e44:	7c 01       	movw	r14, r24
        if(cluster_num == 0 && size_new == 0)
            /* the file stays empty */
            break;

        /* seek to the next cluster as long as we need the space */
        while(size_new > cluster_size)
    3e46:	84 14       	cp	r8, r4
    3e48:	95 04       	cpc	r9, r5
    3e4a:	a6 04       	cpc	r10, r6
    3e4c:	b7 04       	cpc	r11, r7
    3e4e:	28 f3       	brcs	.-54     	; 0x3e1a <fat_resize_file+0x9e>
    3e50:	ec c1       	rjmp	.+984    	; 0x422a <fat_resize_file+0x4ae>
        {
            /* Allocate new cluster chain and append
             * it to the existing one, if available.
             */
            cluster_t cluster_count = (size_new + cluster_size - 1) / cluster_size;
            cluster_t cluster_new_chain = fat_append_clusters(fd->fs, cluster_num, cluster_count);
    3e52:	c3 01       	movw	r24, r6
    3e54:	b2 01       	movw	r22, r4
    3e56:	68 0d       	add	r22, r8
    3e58:	79 1d       	adc	r23, r9
    3e5a:	8a 1d       	adc	r24, r10
    3e5c:	9b 1d       	adc	r25, r11
    3e5e:	61 50       	subi	r22, 0x01	; 1
    3e60:	70 40       	sbci	r23, 0x00	; 0
    3e62:	80 40       	sbci	r24, 0x00	; 0
    3e64:	90 40       	sbci	r25, 0x00	; 0
    3e66:	a5 01       	movw	r20, r10
    3e68:	94 01       	movw	r18, r8
    3e6a:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    3e6e:	89 01       	movw	r16, r18
    3e70:	9a 01       	movw	r18, r20
    3e72:	d1 01       	movw	r26, r2
    3e74:	8d 91       	ld	r24, X+
    3e76:	9c 91       	ld	r25, X
    3e78:	b7 01       	movw	r22, r14
    3e7a:	a6 01       	movw	r20, r12
    3e7c:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
            if(!cluster_new_chain)
    3e80:	61 15       	cp	r22, r1
    3e82:	71 05       	cpc	r23, r1
    3e84:	81 05       	cpc	r24, r1
    3e86:	91 05       	cpc	r25, r1
    3e88:	09 f4       	brne	.+2      	; 0x3e8c <fat_resize_file+0x110>
    3e8a:	b5 c1       	rjmp	.+874    	; 0x41f6 <fat_resize_file+0x47a>
                return 0;

            if(!cluster_num)
    3e8c:	c1 14       	cp	r12, r1
    3e8e:	d1 04       	cpc	r13, r1
    3e90:	e1 04       	cpc	r14, r1
    3e92:	f1 04       	cpc	r15, r1
    3e94:	39 f4       	brne	.+14     	; 0x3ea4 <fat_resize_file+0x128>
            {
                cluster_num = cluster_new_chain;
                fd->dir_entry.cluster = cluster_num;
    3e96:	f1 01       	movw	r30, r2
    3e98:	63 a3       	std	Z+35, r22	; 0x23
    3e9a:	74 a3       	std	Z+36, r23	; 0x24
    3e9c:	85 a3       	std	Z+37, r24	; 0x25
    3e9e:	96 a3       	std	Z+38, r25	; 0x26
    3ea0:	6b 01       	movw	r12, r22
    3ea2:	7c 01       	movw	r14, r24
            }
        }

        /* write new directory entry */
        fd->dir_entry.file_size = size;
    3ea4:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ea6:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ea8:	4d 85       	ldd	r20, Y+13	; 0x0d
    3eaa:	5e 85       	ldd	r21, Y+14	; 0x0e
    3eac:	d1 01       	movw	r26, r2
    3eae:	97 96       	adiw	r26, 0x27	; 39
    3eb0:	2d 93       	st	X+, r18
    3eb2:	3d 93       	st	X+, r19
    3eb4:	4d 93       	st	X+, r20
    3eb6:	5c 93       	st	X, r21
    3eb8:	9a 97       	sbiw	r26, 0x2a	; 42
        if(size == 0)
    3eba:	21 15       	cp	r18, r1
    3ebc:	31 05       	cpc	r19, r1
    3ebe:	41 05       	cpc	r20, r1
    3ec0:	51 05       	cpc	r21, r1
    3ec2:	29 f4       	brne	.+10     	; 0x3ece <fat_resize_file+0x152>
            fd->dir_entry.cluster = 0;
    3ec4:	f1 01       	movw	r30, r2
    3ec6:	13 a2       	std	Z+35, r1	; 0x23
    3ec8:	14 a2       	std	Z+36, r1	; 0x24
    3eca:	15 a2       	std	Z+37, r1	; 0x25
    3ecc:	16 a2       	std	Z+38, r1	; 0x26
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    3ece:	f1 01       	movw	r30, r2
    3ed0:	81 91       	ld	r24, Z+
    3ed2:	91 91       	ld	r25, Z+
    3ed4:	bf 01       	movw	r22, r30
    3ed6:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    3eda:	88 23       	and	r24, r24
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <fat_resize_file+0x164>
    3ede:	8b c1       	rjmp	.+790    	; 0x41f6 <fat_resize_file+0x47a>
            return 0;

        if(size == 0)
    3ee0:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ee2:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ee4:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ee6:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ee8:	21 15       	cp	r18, r1
    3eea:	31 05       	cpc	r19, r1
    3eec:	41 05       	cpc	r20, r1
    3eee:	51 05       	cpc	r21, r1
    3ef0:	31 f4       	brne	.+12     	; 0x3efe <fat_resize_file+0x182>
        {
            /* free all clusters of file */
            fat_free_clusters(fd->fs, cluster_num);
    3ef2:	d1 01       	movw	r26, r2
    3ef4:	8d 91       	ld	r24, X+
    3ef6:	9c 91       	ld	r25, X
    3ef8:	b7 01       	movw	r22, r14
    3efa:	a6 01       	movw	r20, r12
    3efc:	28 c1       	rjmp	.+592    	; 0x414e <fat_resize_file+0x3d2>
        }
        else if(size_new <= cluster_size)
    3efe:	84 14       	cp	r8, r4
    3f00:	95 04       	cpc	r9, r5
    3f02:	a6 04       	cpc	r10, r6
    3f04:	b7 04       	cpc	r11, r7
    3f06:	08 f4       	brcc	.+2      	; 0x3f0a <fat_resize_file+0x18e>
    3f08:	24 c1       	rjmp	.+584    	; 0x4152 <fat_resize_file+0x3d6>
        {
            /* free all clusters no longer needed */
            fat_terminate_clusters(fd->fs, cluster_num);
    3f0a:	f1 01       	movw	r30, r2
    3f0c:	80 80       	ld	r8, Z
    3f0e:	91 80       	ldd	r9, Z+1	; 0x01
 * \returns 0 on failure, 1 on success.
 * \see fat_free_clusters
 */
uint8_t fat_terminate_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    3f10:	81 14       	cp	r8, r1
    3f12:	91 04       	cpc	r9, r1
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <fat_resize_file+0x19c>
    3f16:	1d c1       	rjmp	.+570    	; 0x4152 <fat_resize_file+0x3d6>
    3f18:	f2 e0       	ldi	r31, 0x02	; 2
    3f1a:	cf 16       	cp	r12, r31
    3f1c:	d1 04       	cpc	r13, r1
    3f1e:	e1 04       	cpc	r14, r1
    3f20:	f1 04       	cpc	r15, r1
    3f22:	08 f4       	brcc	.+2      	; 0x3f26 <fat_resize_file+0x1aa>
    3f24:	16 c1       	rjmp	.+556    	; 0x4152 <fat_resize_file+0x3d6>
        return 0;

    /* fetch next cluster before overwriting the cluster entry */
    cluster_t cluster_num_next = fat_get_next_cluster(fs, cluster_num);
    3f26:	c4 01       	movw	r24, r8
    3f28:	b7 01       	movw	r22, r14
    3f2a:	a6 01       	movw	r20, r12
    3f2c:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
    3f30:	6f 83       	std	Y+7, r22	; 0x07
    3f32:	78 87       	std	Y+8, r23	; 0x08
    3f34:	89 87       	std	Y+9, r24	; 0x09
    3f36:	9a 87       	std	Y+10, r25	; 0x0a

    /* mark cluster as the last one */
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    3f38:	d4 01       	movw	r26, r8
    3f3a:	6d 90       	ld	r6, X+
    3f3c:	7c 90       	ld	r7, X
    3f3e:	f3 01       	movw	r30, r6
    3f40:	80 85       	ldd	r24, Z+8	; 0x08
    3f42:	56 01       	movw	r10, r12
    3f44:	67 01       	movw	r12, r14
    3f46:	8b 30       	cpi	r24, 0x0B	; 11
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <fat_resize_file+0x1d0>
    3f4a:	7b c0       	rjmp	.+246    	; 0x4042 <fat_resize_file+0x2c6>
    {
        uint32_t fat_entry = HTOL32(FAT32_CLUSTER_LAST_MAX);
    3f4c:	8f ef       	ldi	r24, 0xFF	; 255
    3f4e:	9f ef       	ldi	r25, 0xFF	; 255
    3f50:	af ef       	ldi	r26, 0xFF	; 255
    3f52:	bf e0       	ldi	r27, 0x0F	; 15
    3f54:	8b 83       	std	Y+3, r24	; 0x03
    3f56:	9c 83       	std	Y+4, r25	; 0x04
    3f58:	ad 83       	std	Y+5, r26	; 0x05
    3f5a:	be 83       	std	Y+6, r27	; 0x06
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    3f5c:	95 01       	movw	r18, r10
    3f5e:	a6 01       	movw	r20, r12
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	70 e0       	ldi	r23, 0x00	; 0
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	02 e0       	ldi	r16, 0x02	; 2
    3f6a:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
    3f6e:	43 2e       	mov	r4, r19
    3f70:	14 2f       	mov	r17, r20
    3f72:	f5 2e       	mov	r15, r21
    3f74:	d6 2e       	mov	r13, r22
    3f76:	c7 2e       	mov	r12, r23
    3f78:	b8 2e       	mov	r11, r24
    3f7a:	59 2e       	mov	r5, r25
    3f7c:	f4 01       	movw	r30, r8
    3f7e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3f80:	93 85       	ldd	r25, Z+11	; 0x0b
    3f82:	04 85       	ldd	r16, Z+12	; 0x0c
    3f84:	e5 84       	ldd	r14, Z+13	; 0x0d
    3f86:	76 85       	ldd	r23, Z+14	; 0x0e
    3f88:	87 85       	ldd	r24, Z+15	; 0x0f
    3f8a:	a0 88       	ldd	r10, Z+16	; 0x10
    3f8c:	b1 89       	ldd	r27, Z+17	; 0x11
    3f8e:	a2 0f       	add	r26, r18
    3f90:	31 e0       	ldi	r19, 0x01	; 1
    3f92:	a2 17       	cp	r26, r18
    3f94:	08 f0       	brcs	.+2      	; 0x3f98 <fat_resize_file+0x21c>
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	24 2d       	mov	r18, r4
    3f9a:	29 0f       	add	r18, r25
    3f9c:	41 e0       	ldi	r20, 0x01	; 1
    3f9e:	24 15       	cp	r18, r4
    3fa0:	08 f0       	brcs	.+2      	; 0x3fa4 <fat_resize_file+0x228>
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	32 0f       	add	r19, r18
    3fa6:	e1 e0       	ldi	r30, 0x01	; 1
    3fa8:	32 17       	cp	r19, r18
    3faa:	08 f0       	brcs	.+2      	; 0x3fae <fat_resize_file+0x232>
    3fac:	e0 e0       	ldi	r30, 0x00	; 0
    3fae:	4e 2b       	or	r20, r30
    3fb0:	21 2f       	mov	r18, r17
    3fb2:	20 0f       	add	r18, r16
    3fb4:	51 e0       	ldi	r21, 0x01	; 1
    3fb6:	21 17       	cp	r18, r17
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <fat_resize_file+0x240>
    3fba:	50 e0       	ldi	r21, 0x00	; 0
    3fbc:	42 0f       	add	r20, r18
    3fbe:	e1 e0       	ldi	r30, 0x01	; 1
    3fc0:	42 17       	cp	r20, r18
    3fc2:	08 f0       	brcs	.+2      	; 0x3fc6 <fat_resize_file+0x24a>
    3fc4:	e0 e0       	ldi	r30, 0x00	; 0
    3fc6:	5e 2b       	or	r21, r30
    3fc8:	2f 2d       	mov	r18, r15
    3fca:	2e 0d       	add	r18, r14
    3fcc:	61 e0       	ldi	r22, 0x01	; 1
    3fce:	2f 15       	cp	r18, r15
    3fd0:	08 f0       	brcs	.+2      	; 0x3fd4 <fat_resize_file+0x258>
    3fd2:	60 e0       	ldi	r22, 0x00	; 0
    3fd4:	52 0f       	add	r21, r18
    3fd6:	e1 e0       	ldi	r30, 0x01	; 1
    3fd8:	52 17       	cp	r21, r18
    3fda:	08 f0       	brcs	.+2      	; 0x3fde <fat_resize_file+0x262>
    3fdc:	e0 e0       	ldi	r30, 0x00	; 0
    3fde:	6e 2b       	or	r22, r30
    3fe0:	2d 2d       	mov	r18, r13
    3fe2:	27 0f       	add	r18, r23
    3fe4:	71 e0       	ldi	r23, 0x01	; 1
    3fe6:	2d 15       	cp	r18, r13
    3fe8:	08 f0       	brcs	.+2      	; 0x3fec <fat_resize_file+0x270>
    3fea:	70 e0       	ldi	r23, 0x00	; 0
    3fec:	62 0f       	add	r22, r18
    3fee:	e1 e0       	ldi	r30, 0x01	; 1
    3ff0:	62 17       	cp	r22, r18
    3ff2:	08 f0       	brcs	.+2      	; 0x3ff6 <fat_resize_file+0x27a>
    3ff4:	e0 e0       	ldi	r30, 0x00	; 0
    3ff6:	7e 2b       	or	r23, r30
    3ff8:	2c 2d       	mov	r18, r12
    3ffa:	28 0f       	add	r18, r24
    3ffc:	81 e0       	ldi	r24, 0x01	; 1
    3ffe:	2c 15       	cp	r18, r12
    4000:	08 f0       	brcs	.+2      	; 0x4004 <fat_resize_file+0x288>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	72 0f       	add	r23, r18
    4006:	e1 e0       	ldi	r30, 0x01	; 1
    4008:	72 17       	cp	r23, r18
    400a:	08 f0       	brcs	.+2      	; 0x400e <fat_resize_file+0x292>
    400c:	e0 e0       	ldi	r30, 0x00	; 0
    400e:	8e 2b       	or	r24, r30
    4010:	2b 2d       	mov	r18, r11
    4012:	2a 0d       	add	r18, r10
    4014:	91 e0       	ldi	r25, 0x01	; 1
    4016:	2b 15       	cp	r18, r11
    4018:	08 f0       	brcs	.+2      	; 0x401c <fat_resize_file+0x2a0>
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	82 0f       	add	r24, r18
    401e:	e1 e0       	ldi	r30, 0x01	; 1
    4020:	82 17       	cp	r24, r18
    4022:	08 f0       	brcs	.+2      	; 0x4026 <fat_resize_file+0x2aa>
    4024:	e0 e0       	ldi	r30, 0x00	; 0
    4026:	9e 2b       	or	r25, r30
    4028:	b5 0d       	add	r27, r5
    402a:	f3 01       	movw	r30, r6
    402c:	c4 80       	ldd	r12, Z+4	; 0x04
    402e:	d5 80       	ldd	r13, Z+5	; 0x05
    4030:	2a 2f       	mov	r18, r26
    4032:	9b 0f       	add	r25, r27
    4034:	8e 01       	movw	r16, r28
    4036:	0d 5f       	subi	r16, 0xFD	; 253
    4038:	1f 4f       	sbci	r17, 0xFF	; 255
    403a:	f4 e0       	ldi	r31, 0x04	; 4
    403c:	ef 2e       	mov	r14, r31
    403e:	f1 2c       	mov	r15, r1
    4040:	76 c0       	rjmp	.+236    	; 0x412e <fat_resize_file+0x3b2>
            return 0;
    }
    else
#endif
    {
        uint16_t fat_entry = HTOL16(FAT16_CLUSTER_LAST_MAX);
    4042:	8f ef       	ldi	r24, 0xFF	; 255
    4044:	9f ef       	ldi	r25, 0xFF	; 255
    4046:	9a 83       	std	Y+2, r25	; 0x02
    4048:	89 83       	std	Y+1, r24	; 0x01
        if(!fs->partition->device_write(fs->header.fat_offset + (offset_t) cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    404a:	95 01       	movw	r18, r10
    404c:	a6 01       	movw	r20, r12
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	70 e0       	ldi	r23, 0x00	; 0
    4052:	80 e0       	ldi	r24, 0x00	; 0
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	01 e0       	ldi	r16, 0x01	; 1
    4058:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
    405c:	43 2e       	mov	r4, r19
    405e:	14 2f       	mov	r17, r20
    4060:	f5 2e       	mov	r15, r21
    4062:	d6 2e       	mov	r13, r22
    4064:	c7 2e       	mov	r12, r23
    4066:	b8 2e       	mov	r11, r24
    4068:	59 2e       	mov	r5, r25
    406a:	f4 01       	movw	r30, r8
    406c:	a2 85       	ldd	r26, Z+10	; 0x0a
    406e:	93 85       	ldd	r25, Z+11	; 0x0b
    4070:	04 85       	ldd	r16, Z+12	; 0x0c
    4072:	e5 84       	ldd	r14, Z+13	; 0x0d
    4074:	76 85       	ldd	r23, Z+14	; 0x0e
    4076:	87 85       	ldd	r24, Z+15	; 0x0f
    4078:	a0 88       	ldd	r10, Z+16	; 0x10
    407a:	b1 89       	ldd	r27, Z+17	; 0x11
    407c:	a2 0f       	add	r26, r18
    407e:	31 e0       	ldi	r19, 0x01	; 1
    4080:	a2 17       	cp	r26, r18
    4082:	08 f0       	brcs	.+2      	; 0x4086 <fat_resize_file+0x30a>
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	24 2d       	mov	r18, r4
    4088:	29 0f       	add	r18, r25
    408a:	41 e0       	ldi	r20, 0x01	; 1
    408c:	24 15       	cp	r18, r4
    408e:	08 f0       	brcs	.+2      	; 0x4092 <fat_resize_file+0x316>
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	32 0f       	add	r19, r18
    4094:	e1 e0       	ldi	r30, 0x01	; 1
    4096:	32 17       	cp	r19, r18
    4098:	08 f0       	brcs	.+2      	; 0x409c <fat_resize_file+0x320>
    409a:	e0 e0       	ldi	r30, 0x00	; 0
    409c:	4e 2b       	or	r20, r30
    409e:	21 2f       	mov	r18, r17
    40a0:	20 0f       	add	r18, r16
    40a2:	51 e0       	ldi	r21, 0x01	; 1
    40a4:	21 17       	cp	r18, r17
    40a6:	08 f0       	brcs	.+2      	; 0x40aa <fat_resize_file+0x32e>
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	42 0f       	add	r20, r18
    40ac:	e1 e0       	ldi	r30, 0x01	; 1
    40ae:	42 17       	cp	r20, r18
    40b0:	08 f0       	brcs	.+2      	; 0x40b4 <fat_resize_file+0x338>
    40b2:	e0 e0       	ldi	r30, 0x00	; 0
    40b4:	5e 2b       	or	r21, r30
    40b6:	2f 2d       	mov	r18, r15
    40b8:	2e 0d       	add	r18, r14
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	2f 15       	cp	r18, r15
    40be:	08 f0       	brcs	.+2      	; 0x40c2 <fat_resize_file+0x346>
    40c0:	60 e0       	ldi	r22, 0x00	; 0
    40c2:	52 0f       	add	r21, r18
    40c4:	e1 e0       	ldi	r30, 0x01	; 1
    40c6:	52 17       	cp	r21, r18
    40c8:	08 f0       	brcs	.+2      	; 0x40cc <fat_resize_file+0x350>
    40ca:	e0 e0       	ldi	r30, 0x00	; 0
    40cc:	6e 2b       	or	r22, r30
    40ce:	2d 2d       	mov	r18, r13
    40d0:	27 0f       	add	r18, r23
    40d2:	71 e0       	ldi	r23, 0x01	; 1
    40d4:	2d 15       	cp	r18, r13
    40d6:	08 f0       	brcs	.+2      	; 0x40da <fat_resize_file+0x35e>
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	62 0f       	add	r22, r18
    40dc:	e1 e0       	ldi	r30, 0x01	; 1
    40de:	62 17       	cp	r22, r18
    40e0:	08 f0       	brcs	.+2      	; 0x40e4 <fat_resize_file+0x368>
    40e2:	e0 e0       	ldi	r30, 0x00	; 0
    40e4:	7e 2b       	or	r23, r30
    40e6:	2c 2d       	mov	r18, r12
    40e8:	28 0f       	add	r18, r24
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	2c 15       	cp	r18, r12
    40ee:	08 f0       	brcs	.+2      	; 0x40f2 <fat_resize_file+0x376>
    40f0:	80 e0       	ldi	r24, 0x00	; 0
    40f2:	72 0f       	add	r23, r18
    40f4:	e1 e0       	ldi	r30, 0x01	; 1
    40f6:	72 17       	cp	r23, r18
    40f8:	08 f0       	brcs	.+2      	; 0x40fc <fat_resize_file+0x380>
    40fa:	e0 e0       	ldi	r30, 0x00	; 0
    40fc:	8e 2b       	or	r24, r30
    40fe:	2b 2d       	mov	r18, r11
    4100:	2a 0d       	add	r18, r10
    4102:	91 e0       	ldi	r25, 0x01	; 1
    4104:	2b 15       	cp	r18, r11
    4106:	08 f0       	brcs	.+2      	; 0x410a <fat_resize_file+0x38e>
    4108:	90 e0       	ldi	r25, 0x00	; 0
    410a:	82 0f       	add	r24, r18
    410c:	e1 e0       	ldi	r30, 0x01	; 1
    410e:	82 17       	cp	r24, r18
    4110:	08 f0       	brcs	.+2      	; 0x4114 <fat_resize_file+0x398>
    4112:	e0 e0       	ldi	r30, 0x00	; 0
    4114:	9e 2b       	or	r25, r30
    4116:	b5 0d       	add	r27, r5
    4118:	f3 01       	movw	r30, r6
    411a:	c4 80       	ldd	r12, Z+4	; 0x04
    411c:	d5 80       	ldd	r13, Z+5	; 0x05
    411e:	2a 2f       	mov	r18, r26
    4120:	9b 0f       	add	r25, r27
    4122:	8e 01       	movw	r16, r28
    4124:	0f 5f       	subi	r16, 0xFF	; 255
    4126:	1f 4f       	sbci	r17, 0xFF	; 255
    4128:	e2 e0       	ldi	r30, 0x02	; 2
    412a:	ee 2e       	mov	r14, r30
    412c:	f1 2c       	mov	r15, r1
    412e:	f6 01       	movw	r30, r12
    4130:	09 95       	icall
    4132:	88 23       	and	r24, r24
    4134:	71 f0       	breq	.+28     	; 0x4152 <fat_resize_file+0x3d6>
            return 0;
    }

    /* free remaining clusters */
    if(cluster_num_next)
    4136:	2f 81       	ldd	r18, Y+7	; 0x07
    4138:	38 85       	ldd	r19, Y+8	; 0x08
    413a:	49 85       	ldd	r20, Y+9	; 0x09
    413c:	5a 85       	ldd	r21, Y+10	; 0x0a
    413e:	21 15       	cp	r18, r1
    4140:	31 05       	cpc	r19, r1
    4142:	41 05       	cpc	r20, r1
    4144:	51 05       	cpc	r21, r1
    4146:	29 f0       	breq	.+10     	; 0x4152 <fat_resize_file+0x3d6>
        return fat_free_clusters(fs, cluster_num_next);
    4148:	c4 01       	movw	r24, r8
    414a:	ba 01       	movw	r22, r20
    414c:	a9 01       	movw	r20, r18
    414e:	0e 94 ad 02 	call	0x55a	; 0x55a <fat_free_clusters>
        }

    } while(0);

    /* correct file position */
    if(size < fd->pos)
    4152:	8b 85       	ldd	r24, Y+11	; 0x0b
    4154:	9c 85       	ldd	r25, Y+12	; 0x0c
    4156:	ad 85       	ldd	r26, Y+13	; 0x0d
    4158:	be 85       	ldd	r27, Y+14	; 0x0e
    415a:	8c 01       	movw	r16, r24
    415c:	9d 01       	movw	r18, r26
    415e:	40 e0       	ldi	r20, 0x00	; 0
    4160:	50 e0       	ldi	r21, 0x00	; 0
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	70 e0       	ldi	r23, 0x00	; 0
    4166:	d1 01       	movw	r26, r2
    4168:	da 96       	adiw	r26, 0x3a	; 58
    416a:	8c 91       	ld	r24, X
    416c:	da 97       	sbiw	r26, 0x3a	; 58
    416e:	78 17       	cp	r23, r24
    4170:	80 f1       	brcs	.+96     	; 0x41d2 <fat_resize_file+0x456>
    4172:	87 17       	cp	r24, r23
    4174:	f1 f5       	brne	.+124    	; 0x41f2 <fat_resize_file+0x476>
    4176:	d9 96       	adiw	r26, 0x39	; 57
    4178:	8c 91       	ld	r24, X
    417a:	d9 97       	sbiw	r26, 0x39	; 57
    417c:	68 17       	cp	r22, r24
    417e:	48 f1       	brcs	.+82     	; 0x41d2 <fat_resize_file+0x456>
    4180:	86 17       	cp	r24, r22
    4182:	b9 f5       	brne	.+110    	; 0x41f2 <fat_resize_file+0x476>
    4184:	d8 96       	adiw	r26, 0x38	; 56
    4186:	8c 91       	ld	r24, X
    4188:	d8 97       	sbiw	r26, 0x38	; 56
    418a:	58 17       	cp	r21, r24
    418c:	10 f1       	brcs	.+68     	; 0x41d2 <fat_resize_file+0x456>
    418e:	85 17       	cp	r24, r21
    4190:	81 f5       	brne	.+96     	; 0x41f2 <fat_resize_file+0x476>
    4192:	d7 96       	adiw	r26, 0x37	; 55
    4194:	8c 91       	ld	r24, X
    4196:	d7 97       	sbiw	r26, 0x37	; 55
    4198:	48 17       	cp	r20, r24
    419a:	d8 f0       	brcs	.+54     	; 0x41d2 <fat_resize_file+0x456>
    419c:	84 17       	cp	r24, r20
    419e:	49 f5       	brne	.+82     	; 0x41f2 <fat_resize_file+0x476>
    41a0:	d6 96       	adiw	r26, 0x36	; 54
    41a2:	8c 91       	ld	r24, X
    41a4:	d6 97       	sbiw	r26, 0x36	; 54
    41a6:	38 17       	cp	r19, r24
    41a8:	a0 f0       	brcs	.+40     	; 0x41d2 <fat_resize_file+0x456>
    41aa:	83 17       	cp	r24, r19
    41ac:	11 f5       	brne	.+68     	; 0x41f2 <fat_resize_file+0x476>
    41ae:	d5 96       	adiw	r26, 0x35	; 53
    41b0:	8c 91       	ld	r24, X
    41b2:	d5 97       	sbiw	r26, 0x35	; 53
    41b4:	28 17       	cp	r18, r24
    41b6:	68 f0       	brcs	.+26     	; 0x41d2 <fat_resize_file+0x456>
    41b8:	82 17       	cp	r24, r18
    41ba:	d9 f4       	brne	.+54     	; 0x41f2 <fat_resize_file+0x476>
    41bc:	d4 96       	adiw	r26, 0x34	; 52
    41be:	8c 91       	ld	r24, X
    41c0:	d4 97       	sbiw	r26, 0x34	; 52
    41c2:	18 17       	cp	r17, r24
    41c4:	30 f0       	brcs	.+12     	; 0x41d2 <fat_resize_file+0x456>
    41c6:	81 17       	cp	r24, r17
    41c8:	a1 f4       	brne	.+40     	; 0x41f2 <fat_resize_file+0x476>
    41ca:	d3 96       	adiw	r26, 0x33	; 51
    41cc:	8c 91       	ld	r24, X
    41ce:	08 17       	cp	r16, r24
    41d0:	80 f4       	brcc	.+32     	; 0x41f2 <fat_resize_file+0x476>
    {
        fd->pos = size;
    41d2:	f1 01       	movw	r30, r2
    41d4:	03 ab       	std	Z+51, r16	; 0x33
    41d6:	14 ab       	std	Z+52, r17	; 0x34
    41d8:	25 ab       	std	Z+53, r18	; 0x35
    41da:	36 ab       	std	Z+54, r19	; 0x36
    41dc:	17 aa       	std	Z+55, r1	; 0x37
    41de:	10 ae       	std	Z+56, r1	; 0x38
    41e0:	11 ae       	std	Z+57, r1	; 0x39
    41e2:	12 ae       	std	Z+58, r1	; 0x3a
        fd->pos_cluster = 0;
    41e4:	d1 01       	movw	r26, r2
    41e6:	db 96       	adiw	r26, 0x3b	; 59
    41e8:	1d 92       	st	X+, r1
    41ea:	1d 92       	st	X+, r1
    41ec:	1d 92       	st	X+, r1
    41ee:	1c 92       	st	X, r1
    41f0:	de 97       	sbiw	r26, 0x3e	; 62
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	01 c0       	rjmp	.+2      	; 0x41f8 <fat_resize_file+0x47c>
    41f6:	80 e0       	ldi	r24, 0x00	; 0
    }

    return 1;
}
    41f8:	62 96       	adiw	r28, 0x12	; 18
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	cf 91       	pop	r28
    4206:	df 91       	pop	r29
    4208:	1f 91       	pop	r17
    420a:	0f 91       	pop	r16
    420c:	ff 90       	pop	r15
    420e:	ef 90       	pop	r14
    4210:	df 90       	pop	r13
    4212:	cf 90       	pop	r12
    4214:	bf 90       	pop	r11
    4216:	af 90       	pop	r10
    4218:	9f 90       	pop	r9
    421a:	8f 90       	pop	r8
    421c:	7f 90       	pop	r7
    421e:	6f 90       	pop	r6
    4220:	5f 90       	pop	r5
    4222:	4f 90       	pop	r4
    4224:	3f 90       	pop	r3
    4226:	2f 90       	pop	r2
    4228:	08 95       	ret
            {
                break;
            }
        }

        if(size_new > cluster_size || cluster_num == 0)
    422a:	c1 14       	cp	r12, r1
    422c:	d1 04       	cpc	r13, r1
    422e:	e1 04       	cpc	r14, r1
    4230:	f1 04       	cpc	r15, r1
    4232:	09 f4       	brne	.+2      	; 0x4236 <fat_resize_file+0x4ba>
    4234:	0e ce       	rjmp	.-996    	; 0x3e52 <fat_resize_file+0xd6>
    4236:	36 ce       	rjmp	.-916    	; 0x3ea4 <fat_resize_file+0x128>

00004238 <fat_seek_file>:
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    4238:	cf 92       	push	r12
    423a:	df 92       	push	r13
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
    4244:	cf 93       	push	r28
    4246:	df 93       	push	r29
    4248:	ec 01       	movw	r28, r24
    424a:	6b 01       	movw	r12, r22
    if(!fd || !offset)
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	09 f4       	brne	.+2      	; 0x4252 <fat_seek_file+0x1a>
    4250:	51 c0       	rjmp	.+162    	; 0x42f4 <fat_seek_file+0xbc>
    4252:	61 15       	cp	r22, r1
    4254:	71 05       	cpc	r23, r1
    4256:	09 f4       	brne	.+2      	; 0x425a <fat_seek_file+0x22>
    4258:	4d c0       	rjmp	.+154    	; 0x42f4 <fat_seek_file+0xbc>
        return 0;

    uint32_t new_pos = fd->pos;
    425a:	2b a9       	ldd	r18, Y+51	; 0x33
    425c:	3c a9       	ldd	r19, Y+52	; 0x34
    425e:	5d a9       	ldd	r21, Y+53	; 0x35
    4260:	6e a9       	ldd	r22, Y+54	; 0x36
    switch(whence)
    4262:	41 30       	cpi	r20, 0x01	; 1
    4264:	61 f0       	breq	.+24     	; 0x427e <fat_seek_file+0x46>
    4266:	41 30       	cpi	r20, 0x01	; 1
    4268:	20 f0       	brcs	.+8      	; 0x4272 <fat_seek_file+0x3a>
    426a:	42 30       	cpi	r20, 0x02	; 2
    426c:	09 f0       	breq	.+2      	; 0x4270 <fat_seek_file+0x38>
    426e:	42 c0       	rjmp	.+132    	; 0x42f4 <fat_seek_file+0xbc>
    4270:	0f c0       	rjmp	.+30     	; 0x4290 <fat_seek_file+0x58>
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
    4272:	f6 01       	movw	r30, r12
    4274:	e0 80       	ld	r14, Z
    4276:	f1 80       	ldd	r15, Z+1	; 0x01
    4278:	02 81       	ldd	r16, Z+2	; 0x02
    427a:	13 81       	ldd	r17, Z+3	; 0x03
    427c:	16 c0       	rjmp	.+44     	; 0x42aa <fat_seek_file+0x72>
uint8_t fat_seek_file(struct fat_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    427e:	c9 01       	movw	r24, r18
    4280:	a5 2f       	mov	r26, r21
    4282:	b6 2f       	mov	r27, r22
    {
        case FAT_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT_SEEK_CUR:
            new_pos += *offset;
    4284:	f6 01       	movw	r30, r12
    4286:	e0 80       	ld	r14, Z
    4288:	f1 80       	ldd	r15, Z+1	; 0x01
    428a:	02 81       	ldd	r16, Z+2	; 0x02
    428c:	13 81       	ldd	r17, Z+3	; 0x03
    428e:	09 c0       	rjmp	.+18     	; 0x42a2 <fat_seek_file+0x6a>
            break;
        case FAT_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
    4290:	f6 01       	movw	r30, r12
    4292:	e0 80       	ld	r14, Z
    4294:	f1 80       	ldd	r15, Z+1	; 0x01
    4296:	02 81       	ldd	r16, Z+2	; 0x02
    4298:	13 81       	ldd	r17, Z+3	; 0x03
    429a:	8f a1       	ldd	r24, Y+39	; 0x27
    429c:	98 a5       	ldd	r25, Y+40	; 0x28
    429e:	a9 a5       	ldd	r26, Y+41	; 0x29
    42a0:	ba a5       	ldd	r27, Y+42	; 0x2a
    42a2:	e8 0e       	add	r14, r24
    42a4:	f9 1e       	adc	r15, r25
    42a6:	0a 1f       	adc	r16, r26
    42a8:	1b 1f       	adc	r17, r27
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size
    42aa:	8f a1       	ldd	r24, Y+39	; 0x27
    42ac:	98 a5       	ldd	r25, Y+40	; 0x28
    42ae:	a9 a5       	ldd	r26, Y+41	; 0x29
    42b0:	ba a5       	ldd	r27, Y+42	; 0x2a
    42b2:	8e 15       	cp	r24, r14
    42b4:	9f 05       	cpc	r25, r15
    42b6:	a0 07       	cpc	r26, r16
    42b8:	b1 07       	cpc	r27, r17
    42ba:	38 f4       	brcc	.+14     	; 0x42ca <fat_seek_file+0x92>
    42bc:	ce 01       	movw	r24, r28
    42be:	b8 01       	movw	r22, r16
    42c0:	a7 01       	movw	r20, r14
    42c2:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <fat_resize_file>
    42c6:	88 23       	and	r24, r24
    42c8:	a9 f0       	breq	.+42     	; 0x42f4 <fat_seek_file+0xbc>
       && !fat_resize_file(fd, new_pos)
#endif
       )
        return 0;

    fd->pos = new_pos;
    42ca:	a8 01       	movw	r20, r16
    42cc:	97 01       	movw	r18, r14
    42ce:	eb aa       	std	Y+51, r14	; 0x33
    42d0:	3c ab       	std	Y+52, r19	; 0x34
    42d2:	4d ab       	std	Y+53, r20	; 0x35
    42d4:	5e ab       	std	Y+54, r21	; 0x36
    42d6:	1f aa       	std	Y+55, r1	; 0x37
    42d8:	18 ae       	std	Y+56, r1	; 0x38
    42da:	19 ae       	std	Y+57, r1	; 0x39
    42dc:	1a ae       	std	Y+58, r1	; 0x3a
    fd->pos_cluster = 0;
    42de:	1b ae       	std	Y+59, r1	; 0x3b
    42e0:	1c ae       	std	Y+60, r1	; 0x3c
    42e2:	1d ae       	std	Y+61, r1	; 0x3d
    42e4:	1e ae       	std	Y+62, r1	; 0x3e

    *offset = (int32_t) new_pos;
    42e6:	f6 01       	movw	r30, r12
    42e8:	e0 82       	st	Z, r14
    42ea:	f1 82       	std	Z+1, r15	; 0x01
    42ec:	02 83       	std	Z+2, r16	; 0x02
    42ee:	13 83       	std	Z+3, r17	; 0x03
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	01 c0       	rjmp	.+2      	; 0x42f6 <fat_seek_file+0xbe>
    return 1;
    42f4:	80 e0       	ldi	r24, 0x00	; 0
}
    42f6:	df 91       	pop	r29
    42f8:	cf 91       	pop	r28
    42fa:	1f 91       	pop	r17
    42fc:	0f 91       	pop	r16
    42fe:	ff 90       	pop	r15
    4300:	ef 90       	pop	r14
    4302:	df 90       	pop	r13
    4304:	cf 90       	pop	r12
    4306:	08 95       	ret

00004308 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written (0 or something less than \c buffer_len on disk full) or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    4308:	2f 92       	push	r2
    430a:	3f 92       	push	r3
    430c:	4f 92       	push	r4
    430e:	5f 92       	push	r5
    4310:	6f 92       	push	r6
    4312:	7f 92       	push	r7
    4314:	8f 92       	push	r8
    4316:	9f 92       	push	r9
    4318:	af 92       	push	r10
    431a:	bf 92       	push	r11
    431c:	cf 92       	push	r12
    431e:	df 92       	push	r13
    4320:	ef 92       	push	r14
    4322:	ff 92       	push	r15
    4324:	0f 93       	push	r16
    4326:	1f 93       	push	r17
    4328:	df 93       	push	r29
    432a:	cf 93       	push	r28
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	66 97       	sbiw	r28, 0x16	; 22
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	9e 8b       	std	Y+22, r25	; 0x16
    433e:	8d 8b       	std	Y+21, r24	; 0x15
    4340:	7e 87       	std	Y+14, r23	; 0x0e
    4342:	6d 87       	std	Y+13, r22	; 0x0d
    4344:	58 8b       	std	Y+16, r21	; 0x10
    4346:	4f 87       	std	Y+15, r20	; 0x0f
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	09 f4       	brne	.+2      	; 0x434e <fat_write_file+0x46>
    434c:	8e c3       	rjmp	.+1820   	; 0x4a6a <fat_write_file+0x762>
    434e:	67 2b       	or	r22, r23
    4350:	09 f4       	brne	.+2      	; 0x4354 <fat_write_file+0x4c>
    4352:	8b c3       	rjmp	.+1814   	; 0x4a6a <fat_write_file+0x762>
    4354:	45 2b       	or	r20, r21
    4356:	09 f4       	brne	.+2      	; 0x435a <fat_write_file+0x52>
    4358:	88 c3       	rjmp	.+1808   	; 0x4a6a <fat_write_file+0x762>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    435a:	dc 01       	movw	r26, r24
    435c:	d3 96       	adiw	r26, 0x33	; 51
    435e:	8c 90       	ld	r8, X
    4360:	d3 97       	sbiw	r26, 0x33	; 51
    4362:	d4 96       	adiw	r26, 0x34	; 52
    4364:	9c 90       	ld	r9, X
    4366:	d4 97       	sbiw	r26, 0x34	; 52
    4368:	d5 96       	adiw	r26, 0x35	; 53
    436a:	ac 90       	ld	r10, X
    436c:	d5 97       	sbiw	r26, 0x35	; 53
    436e:	d6 96       	adiw	r26, 0x36	; 54
    4370:	bc 90       	ld	r11, X
    4372:	d6 97       	sbiw	r26, 0x36	; 54
    4374:	d7 96       	adiw	r26, 0x37	; 55
    4376:	cc 90       	ld	r12, X
    4378:	d7 97       	sbiw	r26, 0x37	; 55
    437a:	d8 96       	adiw	r26, 0x38	; 56
    437c:	dc 90       	ld	r13, X
    437e:	d8 97       	sbiw	r26, 0x38	; 56
    4380:	d9 96       	adiw	r26, 0x39	; 57
    4382:	ec 90       	ld	r14, X
    4384:	d9 97       	sbiw	r26, 0x39	; 57
    4386:	da 96       	adiw	r26, 0x3a	; 58
    4388:	fc 90       	ld	r15, X
    438a:	fc 01       	movw	r30, r24
    438c:	87 a1       	ldd	r24, Z+39	; 0x27
    438e:	90 a5       	ldd	r25, Z+40	; 0x28
    4390:	a1 a5       	ldd	r26, Z+41	; 0x29
    4392:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4394:	9c 01       	movw	r18, r24
    4396:	ad 01       	movw	r20, r26
    4398:	60 e0       	ldi	r22, 0x00	; 0
    439a:	70 e0       	ldi	r23, 0x00	; 0
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	9f 15       	cp	r25, r15
    43a2:	08 f4       	brcc	.+2      	; 0x43a6 <fat_write_file+0x9e>
    43a4:	62 c3       	rjmp	.+1732   	; 0x4a6a <fat_write_file+0x762>
    43a6:	f9 16       	cp	r15, r25
    43a8:	09 f5       	brne	.+66     	; 0x43ec <fat_write_file+0xe4>
    43aa:	8e 15       	cp	r24, r14
    43ac:	08 f4       	brcc	.+2      	; 0x43b0 <fat_write_file+0xa8>
    43ae:	5d c3       	rjmp	.+1722   	; 0x4a6a <fat_write_file+0x762>
    43b0:	e8 16       	cp	r14, r24
    43b2:	e1 f4       	brne	.+56     	; 0x43ec <fat_write_file+0xe4>
    43b4:	7d 15       	cp	r23, r13
    43b6:	08 f4       	brcc	.+2      	; 0x43ba <fat_write_file+0xb2>
    43b8:	58 c3       	rjmp	.+1712   	; 0x4a6a <fat_write_file+0x762>
    43ba:	d7 16       	cp	r13, r23
    43bc:	b9 f4       	brne	.+46     	; 0x43ec <fat_write_file+0xe4>
    43be:	6c 15       	cp	r22, r12
    43c0:	08 f4       	brcc	.+2      	; 0x43c4 <fat_write_file+0xbc>
    43c2:	53 c3       	rjmp	.+1702   	; 0x4a6a <fat_write_file+0x762>
    43c4:	c6 16       	cp	r12, r22
    43c6:	91 f4       	brne	.+36     	; 0x43ec <fat_write_file+0xe4>
    43c8:	5b 15       	cp	r21, r11
    43ca:	08 f4       	brcc	.+2      	; 0x43ce <fat_write_file+0xc6>
    43cc:	4e c3       	rjmp	.+1692   	; 0x4a6a <fat_write_file+0x762>
    43ce:	b5 16       	cp	r11, r21
    43d0:	69 f4       	brne	.+26     	; 0x43ec <fat_write_file+0xe4>
    43d2:	4a 15       	cp	r20, r10
    43d4:	08 f4       	brcc	.+2      	; 0x43d8 <fat_write_file+0xd0>
    43d6:	49 c3       	rjmp	.+1682   	; 0x4a6a <fat_write_file+0x762>
    43d8:	a4 16       	cp	r10, r20
    43da:	41 f4       	brne	.+16     	; 0x43ec <fat_write_file+0xe4>
    43dc:	39 15       	cp	r19, r9
    43de:	08 f4       	brcc	.+2      	; 0x43e2 <fat_write_file+0xda>
    43e0:	44 c3       	rjmp	.+1672   	; 0x4a6a <fat_write_file+0x762>
    43e2:	93 16       	cp	r9, r19
    43e4:	19 f4       	brne	.+6      	; 0x43ec <fat_write_file+0xe4>
    43e6:	28 15       	cp	r18, r8
    43e8:	08 f4       	brcc	.+2      	; 0x43ec <fat_write_file+0xe4>
    43ea:	3f c3       	rjmp	.+1662   	; 0x4a6a <fat_write_file+0x762>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    43ec:	ad 89       	ldd	r26, Y+21	; 0x15
    43ee:	be 89       	ldd	r27, Y+22	; 0x16
    43f0:	2d 91       	ld	r18, X+
    43f2:	3c 91       	ld	r19, X
    43f4:	11 97       	sbiw	r26, 0x01	; 1
    43f6:	f9 01       	movw	r30, r18
    43f8:	00 8c       	ldd	r0, Z+24	; 0x18
    43fa:	f1 8d       	ldd	r31, Z+25	; 0x19
    43fc:	e0 2d       	mov	r30, r0
    43fe:	fc 87       	std	Y+12, r31	; 0x0c
    4400:	eb 87       	std	Y+11, r30	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    4402:	db 96       	adiw	r26, 0x3b	; 59
    4404:	8d 91       	ld	r24, X+
    4406:	9d 91       	ld	r25, X+
    4408:	0d 90       	ld	r0, X+
    440a:	bc 91       	ld	r27, X
    440c:	a0 2d       	mov	r26, r0
    440e:	8f 83       	std	Y+7, r24	; 0x07
    4410:	98 87       	std	Y+8, r25	; 0x08
    4412:	a9 87       	std	Y+9, r26	; 0x09
    4414:	ba 87       	std	Y+10, r27	; 0x0a
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    4416:	00 97       	sbiw	r24, 0x00	; 0
    4418:	a1 05       	cpc	r26, r1
    441a:	b1 05       	cpc	r27, r1
    441c:	09 f0       	breq	.+2      	; 0x4420 <fat_write_file+0x118>
    441e:	ae c0       	rjmp	.+348    	; 0x457c <fat_write_file+0x274>
    {
        cluster_num = fd->dir_entry.cluster;
    4420:	ad 89       	ldd	r26, Y+21	; 0x15
    4422:	be 89       	ldd	r27, Y+22	; 0x16
    4424:	93 96       	adiw	r26, 0x23	; 35
    4426:	8d 91       	ld	r24, X+
    4428:	9d 91       	ld	r25, X+
    442a:	0d 90       	ld	r0, X+
    442c:	bc 91       	ld	r27, X
    442e:	a0 2d       	mov	r26, r0
    4430:	8f 83       	std	Y+7, r24	; 0x07
    4432:	98 87       	std	Y+8, r25	; 0x08
    4434:	a9 87       	std	Y+9, r26	; 0x09
    4436:	ba 87       	std	Y+10, r27	; 0x0a
        
        if(!cluster_num)
    4438:	00 97       	sbiw	r24, 0x00	; 0
    443a:	a1 05       	cpc	r26, r1
    443c:	b1 05       	cpc	r27, r1
    443e:	29 f5       	brne	.+74     	; 0x448a <fat_write_file+0x182>
        {
            if(!fd->pos)
    4440:	88 2d       	mov	r24, r8
    4442:	89 29       	or	r24, r9
    4444:	8a 29       	or	r24, r10
    4446:	8b 29       	or	r24, r11
    4448:	8c 29       	or	r24, r12
    444a:	8d 29       	or	r24, r13
    444c:	8e 29       	or	r24, r14
    444e:	8f 29       	or	r24, r15
    4450:	09 f0       	breq	.+2      	; 0x4454 <fat_write_file+0x14c>
    4452:	0b c3       	rjmp	.+1558   	; 0x4a6a <fat_write_file+0x762>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    4454:	c9 01       	movw	r24, r18
    4456:	40 e0       	ldi	r20, 0x00	; 0
    4458:	50 e0       	ldi	r21, 0x00	; 0
    445a:	60 e0       	ldi	r22, 0x00	; 0
    445c:	70 e0       	ldi	r23, 0x00	; 0
    445e:	01 e0       	ldi	r16, 0x01	; 1
    4460:	10 e0       	ldi	r17, 0x00	; 0
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
    446a:	6f 83       	std	Y+7, r22	; 0x07
    446c:	78 87       	std	Y+8, r23	; 0x08
    446e:	89 87       	std	Y+9, r24	; 0x09
    4470:	9a 87       	std	Y+10, r25	; 0x0a
    4472:	ed 89       	ldd	r30, Y+21	; 0x15
    4474:	fe 89       	ldd	r31, Y+22	; 0x16
    4476:	63 a3       	std	Z+35, r22	; 0x23
    4478:	74 a3       	std	Z+36, r23	; 0x24
    447a:	85 a3       	std	Z+37, r24	; 0x25
    447c:	96 a3       	std	Z+38, r25	; 0x26
                if(!cluster_num)
    447e:	61 15       	cp	r22, r1
    4480:	71 05       	cpc	r23, r1
    4482:	81 05       	cpc	r24, r1
    4484:	91 05       	cpc	r25, r1
    4486:	09 f4       	brne	.+2      	; 0x448a <fat_write_file+0x182>
    4488:	f3 c2       	rjmp	.+1510   	; 0x4a70 <fat_write_file+0x768>
            {
                return -1;
            }
        }

        if(fd->pos)
    448a:	ad 89       	ldd	r26, Y+21	; 0x15
    448c:	be 89       	ldd	r27, Y+22	; 0x16
    448e:	d3 96       	adiw	r26, 0x33	; 51
    4490:	6c 91       	ld	r22, X
    4492:	d3 97       	sbiw	r26, 0x33	; 51
    4494:	d4 96       	adiw	r26, 0x34	; 52
    4496:	7c 91       	ld	r23, X
    4498:	d4 97       	sbiw	r26, 0x34	; 52
    449a:	d5 96       	adiw	r26, 0x35	; 53
    449c:	ec 91       	ld	r30, X
    449e:	d5 97       	sbiw	r26, 0x35	; 53
    44a0:	d6 96       	adiw	r26, 0x36	; 54
    44a2:	fc 91       	ld	r31, X
    44a4:	d6 97       	sbiw	r26, 0x36	; 54
    44a6:	d7 96       	adiw	r26, 0x37	; 55
    44a8:	9c 91       	ld	r25, X
    44aa:	d7 97       	sbiw	r26, 0x37	; 55
    44ac:	d8 96       	adiw	r26, 0x38	; 56
    44ae:	2c 91       	ld	r18, X
    44b0:	d8 97       	sbiw	r26, 0x38	; 56
    44b2:	d9 96       	adiw	r26, 0x39	; 57
    44b4:	3c 91       	ld	r19, X
    44b6:	d9 97       	sbiw	r26, 0x39	; 57
    44b8:	da 96       	adiw	r26, 0x3a	; 58
    44ba:	4c 91       	ld	r20, X
    44bc:	86 2f       	mov	r24, r22
    44be:	87 2b       	or	r24, r23
    44c0:	8e 2b       	or	r24, r30
    44c2:	8f 2b       	or	r24, r31
    44c4:	89 2b       	or	r24, r25
    44c6:	82 2b       	or	r24, r18
    44c8:	83 2b       	or	r24, r19
    44ca:	84 2b       	or	r24, r20
    44cc:	09 f4       	brne	.+2      	; 0x44d0 <fat_write_file+0x1c8>
    44ce:	56 c0       	rjmp	.+172    	; 0x457c <fat_write_file+0x274>
        {
            uint32_t pos = fd->pos;
    44d0:	9b 01       	movw	r18, r22
    44d2:	af 01       	movw	r20, r30
    44d4:	c9 01       	movw	r24, r18
    44d6:	da 01       	movw	r26, r20
    44d8:	2c 01       	movw	r4, r24
    44da:	3d 01       	movw	r6, r26
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    44dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    44de:	5c 85       	ldd	r21, Y+12	; 0x0c
    44e0:	9a 01       	movw	r18, r20
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	50 e0       	ldi	r21, 0x00	; 0
    44e6:	29 8b       	std	Y+17, r18	; 0x11
    44e8:	3a 8b       	std	Y+18, r19	; 0x12
    44ea:	4b 8b       	std	Y+19, r20	; 0x13
    44ec:	5c 8b       	std	Y+20, r21	; 0x14
    44ee:	3c c0       	rjmp	.+120    	; 0x4568 <fat_write_file+0x260>
            {
                pos -= cluster_size;
    44f0:	89 89       	ldd	r24, Y+17	; 0x11
    44f2:	9a 89       	ldd	r25, Y+18	; 0x12
    44f4:	ab 89       	ldd	r26, Y+19	; 0x13
    44f6:	bc 89       	ldd	r27, Y+20	; 0x14
    44f8:	48 1a       	sub	r4, r24
    44fa:	59 0a       	sbc	r5, r25
    44fc:	6a 0a       	sbc	r6, r26
    44fe:	7b 0a       	sbc	r7, r27
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    4500:	ad 89       	ldd	r26, Y+21	; 0x15
    4502:	be 89       	ldd	r27, Y+22	; 0x16
    4504:	8d 91       	ld	r24, X+
    4506:	9c 91       	ld	r25, X
    4508:	4f 81       	ldd	r20, Y+7	; 0x07
    450a:	58 85       	ldd	r21, Y+8	; 0x08
    450c:	69 85       	ldd	r22, Y+9	; 0x09
    450e:	7a 85       	ldd	r23, Y+10	; 0x0a
    4510:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
                if(!cluster_num_next)
    4514:	61 15       	cp	r22, r1
    4516:	71 05       	cpc	r23, r1
    4518:	81 05       	cpc	r24, r1
    451a:	91 05       	cpc	r25, r1
    451c:	29 f0       	breq	.+10     	; 0x4528 <fat_write_file+0x220>
    451e:	6f 83       	std	Y+7, r22	; 0x07
    4520:	78 87       	std	Y+8, r23	; 0x08
    4522:	89 87       	std	Y+9, r24	; 0x09
    4524:	9a 87       	std	Y+10, r25	; 0x0a
    4526:	20 c0       	rjmp	.+64     	; 0x4568 <fat_write_file+0x260>
                {
                    if(pos != 0)
    4528:	41 14       	cp	r4, r1
    452a:	51 04       	cpc	r5, r1
    452c:	61 04       	cpc	r6, r1
    452e:	71 04       	cpc	r7, r1
    4530:	09 f0       	breq	.+2      	; 0x4534 <fat_write_file+0x22c>
    4532:	9b c2       	rjmp	.+1334   	; 0x4a6a <fat_write_file+0x762>
                        return -1; /* current file position points beyond end of file */

                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    4534:	ed 89       	ldd	r30, Y+21	; 0x15
    4536:	fe 89       	ldd	r31, Y+22	; 0x16
    4538:	80 81       	ld	r24, Z
    453a:	91 81       	ldd	r25, Z+1	; 0x01
    453c:	4f 81       	ldd	r20, Y+7	; 0x07
    453e:	58 85       	ldd	r21, Y+8	; 0x08
    4540:	69 85       	ldd	r22, Y+9	; 0x09
    4542:	7a 85       	ldd	r23, Y+10	; 0x0a
    4544:	01 e0       	ldi	r16, 0x01	; 1
    4546:	10 e0       	ldi	r17, 0x00	; 0
    4548:	20 e0       	ldi	r18, 0x00	; 0
    454a:	30 e0       	ldi	r19, 0x00	; 0
    454c:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
    4550:	ab 01       	movw	r20, r22
    4552:	bc 01       	movw	r22, r24
                    if(!cluster_num_next)
    4554:	41 15       	cp	r20, r1
    4556:	51 05       	cpc	r21, r1
    4558:	61 05       	cpc	r22, r1
    455a:	71 05       	cpc	r23, r1
    455c:	09 f4       	brne	.+2      	; 0x4560 <fat_write_file+0x258>
    455e:	88 c2       	rjmp	.+1296   	; 0x4a70 <fat_write_file+0x768>
    4560:	4f 83       	std	Y+7, r20	; 0x07
    4562:	58 87       	std	Y+8, r21	; 0x08
    4564:	69 87       	std	Y+9, r22	; 0x09
    4566:	7a 87       	std	Y+10, r23	; 0x0a

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    4568:	29 89       	ldd	r18, Y+17	; 0x11
    456a:	3a 89       	ldd	r19, Y+18	; 0x12
    456c:	4b 89       	ldd	r20, Y+19	; 0x13
    456e:	5c 89       	ldd	r21, Y+20	; 0x14
    4570:	42 16       	cp	r4, r18
    4572:	53 06       	cpc	r5, r19
    4574:	64 06       	cpc	r6, r20
    4576:	75 06       	cpc	r7, r21
    4578:	08 f0       	brcs	.+2      	; 0x457c <fat_write_file+0x274>
    457a:	ba cf       	rjmp	.-140    	; 0x44f0 <fat_write_file+0x1e8>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    457c:	4b 85       	ldd	r20, Y+11	; 0x0b
    457e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4580:	41 50       	subi	r20, 0x01	; 1
    4582:	50 40       	sbci	r21, 0x00	; 0
    4584:	5c 87       	std	Y+12, r21	; 0x0c
    4586:	4b 87       	std	Y+11, r20	; 0x0b
    4588:	48 21       	and	r20, r8
    458a:	59 21       	and	r21, r9
    458c:	5c 83       	std	Y+4, r21	; 0x04
    458e:	4b 83       	std	Y+3, r20	; 0x03
    4590:	8b 85       	ldd	r24, Y+11	; 0x0b
    4592:	9c 85       	ldd	r25, Y+12	; 0x0c
    4594:	01 96       	adiw	r24, 0x01	; 1
    4596:	9c 87       	std	Y+12, r25	; 0x0c
    4598:	8b 87       	std	Y+11, r24	; 0x0b
    459a:	af 85       	ldd	r26, Y+15	; 0x0f
    459c:	b8 89       	ldd	r27, Y+16	; 0x10
    459e:	be 83       	std	Y+6, r27	; 0x06
    45a0:	ad 83       	std	Y+5, r26	; 0x05
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    45a2:	ed 89       	ldd	r30, Y+21	; 0x15
    45a4:	fe 89       	ldd	r31, Y+22	; 0x16
    45a6:	01 90       	ld	r0, Z+
    45a8:	f0 81       	ld	r31, Z
    45aa:	e0 2d       	mov	r30, r0
    45ac:	fa 83       	std	Y+2, r31	; 0x02
    45ae:	e9 83       	std	Y+1, r30	; 0x01
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    45b0:	30 97       	sbiw	r30, 0x00	; 0
    45b2:	09 f4       	brne	.+2      	; 0x45b6 <fat_write_file+0x2ae>
    45b4:	8e c0       	rjmp	.+284    	; 0x46d2 <fat_write_file+0x3ca>
    45b6:	2f 81       	ldd	r18, Y+7	; 0x07
    45b8:	38 85       	ldd	r19, Y+8	; 0x08
    45ba:	49 85       	ldd	r20, Y+9	; 0x09
    45bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    45be:	22 30       	cpi	r18, 0x02	; 2
    45c0:	31 05       	cpc	r19, r1
    45c2:	41 05       	cpc	r20, r1
    45c4:	51 05       	cpc	r21, r1
    45c6:	08 f4       	brcc	.+2      	; 0x45ca <fat_write_file+0x2c2>
    45c8:	84 c0       	rjmp	.+264    	; 0x46d2 <fat_write_file+0x3ca>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    45ca:	22 50       	subi	r18, 0x02	; 2
    45cc:	30 40       	sbci	r19, 0x00	; 0
    45ce:	40 40       	sbci	r20, 0x00	; 0
    45d0:	50 40       	sbci	r21, 0x00	; 0
    45d2:	59 01       	movw	r10, r18
    45d4:	6a 01       	movw	r12, r20
    45d6:	2e 5f       	subi	r18, 0xFE	; 254
    45d8:	3f 4f       	sbci	r19, 0xFF	; 255
    45da:	4f 4f       	sbci	r20, 0xFF	; 255
    45dc:	5f 4f       	sbci	r21, 0xFF	; 255
    45de:	2f 83       	std	Y+7, r18	; 0x07
    45e0:	38 87       	std	Y+8, r19	; 0x08
    45e2:	49 87       	std	Y+9, r20	; 0x09
    45e4:	5a 87       	std	Y+10, r21	; 0x0a
    45e6:	20 8c       	ldd	r2, Z+24	; 0x18
    45e8:	31 8c       	ldd	r3, Z+25	; 0x19
    45ea:	95 01       	movw	r18, r10
    45ec:	a6 01       	movw	r20, r12
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	70 e0       	ldi	r23, 0x00	; 0
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	51 01       	movw	r10, r2
    45f8:	cc 24       	eor	r12, r12
    45fa:	dd 24       	eor	r13, r13
    45fc:	ee 24       	eor	r14, r14
    45fe:	ff 24       	eor	r15, r15
    4600:	00 e0       	ldi	r16, 0x00	; 0
    4602:	10 e0       	ldi	r17, 0x00	; 0
    4604:	0e 94 0d 42 	call	0x841a	; 0x841a <__muldi3>
    4608:	e9 81       	ldd	r30, Y+1	; 0x01
    460a:	fa 81       	ldd	r31, Y+2	; 0x02
    460c:	b2 8d       	ldd	r27, Z+26	; 0x1a
    460e:	f3 8c       	ldd	r15, Z+27	; 0x1b
    4610:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4612:	05 8d       	ldd	r16, Z+29	; 0x1d
    4614:	d6 8c       	ldd	r13, Z+30	; 0x1e
    4616:	c7 8c       	ldd	r12, Z+31	; 0x1f
    4618:	b0 a0       	ldd	r11, Z+32	; 0x20
    461a:	11 a1       	ldd	r17, Z+33	; 0x21
    461c:	b2 0f       	add	r27, r18
    461e:	f1 e0       	ldi	r31, 0x01	; 1
    4620:	b2 17       	cp	r27, r18
    4622:	08 f0       	brcs	.+2      	; 0x4626 <fat_write_file+0x31e>
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	23 2f       	mov	r18, r19
    4628:	2f 0d       	add	r18, r15
    462a:	e1 e0       	ldi	r30, 0x01	; 1
    462c:	23 17       	cp	r18, r19
    462e:	08 f0       	brcs	.+2      	; 0x4632 <fat_write_file+0x32a>
    4630:	e0 e0       	ldi	r30, 0x00	; 0
    4632:	ef 2e       	mov	r14, r31
    4634:	e2 0e       	add	r14, r18
    4636:	31 e0       	ldi	r19, 0x01	; 1
    4638:	e2 16       	cp	r14, r18
    463a:	08 f0       	brcs	.+2      	; 0x463e <fat_write_file+0x336>
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	e3 2b       	or	r30, r19
    4640:	24 2f       	mov	r18, r20
    4642:	2a 0f       	add	r18, r26
    4644:	f1 e0       	ldi	r31, 0x01	; 1
    4646:	24 17       	cp	r18, r20
    4648:	08 f0       	brcs	.+2      	; 0x464c <fat_write_file+0x344>
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	fe 2e       	mov	r15, r30
    464e:	f2 0e       	add	r15, r18
    4650:	31 e0       	ldi	r19, 0x01	; 1
    4652:	f2 16       	cp	r15, r18
    4654:	08 f0       	brcs	.+2      	; 0x4658 <fat_write_file+0x350>
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	f3 2b       	or	r31, r19
    465a:	25 2f       	mov	r18, r21
    465c:	20 0f       	add	r18, r16
    465e:	41 e0       	ldi	r20, 0x01	; 1
    4660:	25 17       	cp	r18, r21
    4662:	08 f0       	brcs	.+2      	; 0x4666 <fat_write_file+0x35e>
    4664:	40 e0       	ldi	r20, 0x00	; 0
    4666:	f2 0f       	add	r31, r18
    4668:	31 e0       	ldi	r19, 0x01	; 1
    466a:	f2 17       	cp	r31, r18
    466c:	08 f0       	brcs	.+2      	; 0x4670 <fat_write_file+0x368>
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	43 2b       	or	r20, r19
    4672:	26 2f       	mov	r18, r22
    4674:	2d 0d       	add	r18, r13
    4676:	51 e0       	ldi	r21, 0x01	; 1
    4678:	26 17       	cp	r18, r22
    467a:	08 f0       	brcs	.+2      	; 0x467e <fat_write_file+0x376>
    467c:	50 e0       	ldi	r21, 0x00	; 0
    467e:	e4 2f       	mov	r30, r20
    4680:	e2 0f       	add	r30, r18
    4682:	31 e0       	ldi	r19, 0x01	; 1
    4684:	e2 17       	cp	r30, r18
    4686:	08 f0       	brcs	.+2      	; 0x468a <fat_write_file+0x382>
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	53 2b       	or	r21, r19
    468c:	27 2f       	mov	r18, r23
    468e:	2c 0d       	add	r18, r12
    4690:	41 e0       	ldi	r20, 0x01	; 1
    4692:	27 17       	cp	r18, r23
    4694:	08 f0       	brcs	.+2      	; 0x4698 <fat_write_file+0x390>
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	52 0f       	add	r21, r18
    469a:	31 e0       	ldi	r19, 0x01	; 1
    469c:	52 17       	cp	r21, r18
    469e:	08 f0       	brcs	.+2      	; 0x46a2 <fat_write_file+0x39a>
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	43 2b       	or	r20, r19
    46a4:	28 2f       	mov	r18, r24
    46a6:	2b 0d       	add	r18, r11
    46a8:	31 e0       	ldi	r19, 0x01	; 1
    46aa:	28 17       	cp	r18, r24
    46ac:	08 f0       	brcs	.+2      	; 0x46b0 <fat_write_file+0x3a8>
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	42 0f       	add	r20, r18
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	42 17       	cp	r20, r18
    46b6:	08 f0       	brcs	.+2      	; 0x46ba <fat_write_file+0x3b2>
    46b8:	80 e0       	ldi	r24, 0x00	; 0
    46ba:	a3 2f       	mov	r26, r19
    46bc:	a8 2b       	or	r26, r24
    46be:	19 0f       	add	r17, r25
    46c0:	2b 2f       	mov	r18, r27
    46c2:	9e 2d       	mov	r25, r14
    46c4:	6f 2d       	mov	r22, r15
    46c6:	7f 2f       	mov	r23, r31
    46c8:	4e 2e       	mov	r4, r30
    46ca:	25 2e       	mov	r2, r21
    46cc:	b4 2f       	mov	r27, r20
    46ce:	a1 0f       	add	r26, r17
    46d0:	08 c0       	rjmp	.+16     	; 0x46e2 <fat_write_file+0x3da>
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	90 e0       	ldi	r25, 0x00	; 0
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	70 e0       	ldi	r23, 0x00	; 0
    46da:	44 24       	eor	r4, r4
    46dc:	22 24       	eor	r2, r2
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	a0 e0       	ldi	r26, 0x00	; 0
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
        uint16_t write_length = cluster_size - first_cluster_offset;
    46e2:	8b 84       	ldd	r8, Y+11	; 0x0b
    46e4:	9c 84       	ldd	r9, Y+12	; 0x0c
    46e6:	4b 81       	ldd	r20, Y+3	; 0x03
    46e8:	5c 81       	ldd	r21, Y+4	; 0x04
    46ea:	84 1a       	sub	r8, r20
    46ec:	95 0a       	sbc	r9, r21
    46ee:	ed 81       	ldd	r30, Y+5	; 0x05
    46f0:	fe 81       	ldd	r31, Y+6	; 0x06
    46f2:	e8 15       	cp	r30, r8
    46f4:	f9 05       	cpc	r31, r9
    46f6:	08 f4       	brcc	.+2      	; 0x46fa <fat_write_file+0x3f2>
    46f8:	4f 01       	movw	r8, r30
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    46fa:	e9 81       	ldd	r30, Y+1	; 0x01
    46fc:	fa 81       	ldd	r31, Y+2	; 0x02
    46fe:	60 80       	ld	r6, Z
    4700:	71 80       	ldd	r7, Z+1	; 0x01
    4702:	4b 81       	ldd	r20, Y+3	; 0x03
    4704:	5c 81       	ldd	r21, Y+4	; 0x04
    4706:	5a 01       	movw	r10, r20
    4708:	cc 24       	eor	r12, r12
    470a:	dd 24       	eor	r13, r13
    470c:	ee 24       	eor	r14, r14
    470e:	ff 24       	eor	r15, r15
    4710:	87 01       	movw	r16, r14
    4712:	52 2e       	mov	r5, r18
    4714:	54 0e       	add	r5, r20
    4716:	31 e0       	ldi	r19, 0x01	; 1
    4718:	52 16       	cp	r5, r18
    471a:	08 f0       	brcs	.+2      	; 0x471e <fat_write_file+0x416>
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	89 2f       	mov	r24, r25
    4720:	8b 0d       	add	r24, r11
    4722:	41 e0       	ldi	r20, 0x01	; 1
    4724:	89 17       	cp	r24, r25
    4726:	08 f0       	brcs	.+2      	; 0x472a <fat_write_file+0x422>
    4728:	40 e0       	ldi	r20, 0x00	; 0
    472a:	38 0f       	add	r19, r24
    472c:	91 e0       	ldi	r25, 0x01	; 1
    472e:	38 17       	cp	r19, r24
    4730:	08 f0       	brcs	.+2      	; 0x4734 <fat_write_file+0x42c>
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	49 2b       	or	r20, r25
    4736:	86 2f       	mov	r24, r22
    4738:	8c 0d       	add	r24, r12
    473a:	51 e0       	ldi	r21, 0x01	; 1
    473c:	86 17       	cp	r24, r22
    473e:	08 f0       	brcs	.+2      	; 0x4742 <fat_write_file+0x43a>
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	48 0f       	add	r20, r24
    4744:	91 e0       	ldi	r25, 0x01	; 1
    4746:	48 17       	cp	r20, r24
    4748:	08 f0       	brcs	.+2      	; 0x474c <fat_write_file+0x444>
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	59 2b       	or	r21, r25
    474e:	87 2f       	mov	r24, r23
    4750:	8d 0d       	add	r24, r13
    4752:	61 e0       	ldi	r22, 0x01	; 1
    4754:	87 17       	cp	r24, r23
    4756:	08 f0       	brcs	.+2      	; 0x475a <fat_write_file+0x452>
    4758:	60 e0       	ldi	r22, 0x00	; 0
    475a:	58 0f       	add	r21, r24
    475c:	91 e0       	ldi	r25, 0x01	; 1
    475e:	58 17       	cp	r21, r24
    4760:	08 f0       	brcs	.+2      	; 0x4764 <fat_write_file+0x45c>
    4762:	90 e0       	ldi	r25, 0x00	; 0
    4764:	69 2b       	or	r22, r25
    4766:	84 2d       	mov	r24, r4
    4768:	8e 0d       	add	r24, r14
    476a:	71 e0       	ldi	r23, 0x01	; 1
    476c:	84 15       	cp	r24, r4
    476e:	08 f0       	brcs	.+2      	; 0x4772 <fat_write_file+0x46a>
    4770:	70 e0       	ldi	r23, 0x00	; 0
    4772:	68 0f       	add	r22, r24
    4774:	91 e0       	ldi	r25, 0x01	; 1
    4776:	68 17       	cp	r22, r24
    4778:	08 f0       	brcs	.+2      	; 0x477c <fat_write_file+0x474>
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	79 2b       	or	r23, r25
    477e:	92 2d       	mov	r25, r2
    4780:	9f 0d       	add	r25, r15
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	92 15       	cp	r25, r2
    4786:	08 f0       	brcs	.+2      	; 0x478a <fat_write_file+0x482>
    4788:	80 e0       	ldi	r24, 0x00	; 0
    478a:	79 0f       	add	r23, r25
    478c:	e1 e0       	ldi	r30, 0x01	; 1
    478e:	79 17       	cp	r23, r25
    4790:	08 f0       	brcs	.+2      	; 0x4794 <fat_write_file+0x48c>
    4792:	e0 e0       	ldi	r30, 0x00	; 0
    4794:	8e 2b       	or	r24, r30
    4796:	eb 2f       	mov	r30, r27
    4798:	e0 0f       	add	r30, r16
    479a:	91 e0       	ldi	r25, 0x01	; 1
    479c:	eb 17       	cp	r30, r27
    479e:	08 f0       	brcs	.+2      	; 0x47a2 <fat_write_file+0x49a>
    47a0:	90 e0       	ldi	r25, 0x00	; 0
    47a2:	8e 0f       	add	r24, r30
    47a4:	f1 e0       	ldi	r31, 0x01	; 1
    47a6:	8e 17       	cp	r24, r30
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <fat_write_file+0x4a4>
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	9f 2b       	or	r25, r31
    47ae:	a1 0f       	add	r26, r17
    47b0:	f3 01       	movw	r30, r6
    47b2:	c4 80       	ldd	r12, Z+4	; 0x04
    47b4:	d5 80       	ldd	r13, Z+5	; 0x05
    47b6:	25 2d       	mov	r18, r5
    47b8:	9a 0f       	add	r25, r26
    47ba:	0d 85       	ldd	r16, Y+13	; 0x0d
    47bc:	1e 85       	ldd	r17, Y+14	; 0x0e
    47be:	74 01       	movw	r14, r8
    47c0:	f6 01       	movw	r30, r12
    47c2:	09 95       	icall
    47c4:	88 23       	and	r24, r24
    47c6:	09 f4       	brne	.+2      	; 0x47ca <fat_write_file+0x4c2>
    47c8:	e5 c0       	rjmp	.+458    	; 0x4994 <fat_write_file+0x68c>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    47ca:	2d 81       	ldd	r18, Y+5	; 0x05
    47cc:	3e 81       	ldd	r19, Y+6	; 0x06
    47ce:	28 19       	sub	r18, r8
    47d0:	39 09       	sbc	r19, r9
    47d2:	3e 83       	std	Y+6, r19	; 0x06
    47d4:	2d 83       	std	Y+5, r18	; 0x05
        fd->pos += write_length;
    47d6:	94 01       	movw	r18, r8
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	50 e0       	ldi	r21, 0x00	; 0
    47dc:	60 e0       	ldi	r22, 0x00	; 0
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	80 e0       	ldi	r24, 0x00	; 0
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	ad 89       	ldd	r26, Y+21	; 0x15
    47e6:	be 89       	ldd	r27, Y+22	; 0x16
    47e8:	d3 96       	adiw	r26, 0x33	; 51
    47ea:	1c 91       	ld	r17, X
    47ec:	d3 97       	sbiw	r26, 0x33	; 51
    47ee:	d4 96       	adiw	r26, 0x34	; 52
    47f0:	dc 90       	ld	r13, X
    47f2:	d4 97       	sbiw	r26, 0x34	; 52
    47f4:	d5 96       	adiw	r26, 0x35	; 53
    47f6:	bc 91       	ld	r27, X
    47f8:	ed 89       	ldd	r30, Y+21	; 0x15
    47fa:	fe 89       	ldd	r31, Y+22	; 0x16
    47fc:	06 a9       	ldd	r16, Z+54	; 0x36
    47fe:	e7 a8       	ldd	r14, Z+55	; 0x37
    4800:	a0 ac       	ldd	r10, Z+56	; 0x38
    4802:	71 ac       	ldd	r7, Z+57	; 0x39
    4804:	f2 ac       	ldd	r15, Z+58	; 0x3a
    4806:	18 0d       	add	r17, r8
    4808:	f1 e0       	ldi	r31, 0x01	; 1
    480a:	18 15       	cp	r17, r8
    480c:	08 f0       	brcs	.+2      	; 0x4810 <fat_write_file+0x508>
    480e:	f0 e0       	ldi	r31, 0x00	; 0
    4810:	ed 2d       	mov	r30, r13
    4812:	e3 0f       	add	r30, r19
    4814:	a1 e0       	ldi	r26, 0x01	; 1
    4816:	e3 17       	cp	r30, r19
    4818:	08 f0       	brcs	.+2      	; 0x481c <fat_write_file+0x514>
    481a:	a0 e0       	ldi	r26, 0x00	; 0
    481c:	bf 2e       	mov	r11, r31
    481e:	be 0e       	add	r11, r30
    4820:	f1 e0       	ldi	r31, 0x01	; 1
    4822:	be 16       	cp	r11, r30
    4824:	08 f0       	brcs	.+2      	; 0x4828 <fat_write_file+0x520>
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	af 2b       	or	r26, r31
    482a:	e4 2f       	mov	r30, r20
    482c:	eb 0f       	add	r30, r27
    482e:	b1 e0       	ldi	r27, 0x01	; 1
    4830:	e4 17       	cp	r30, r20
    4832:	08 f0       	brcs	.+2      	; 0x4836 <fat_write_file+0x52e>
    4834:	b0 e0       	ldi	r27, 0x00	; 0
    4836:	ca 2e       	mov	r12, r26
    4838:	ce 0e       	add	r12, r30
    483a:	f1 e0       	ldi	r31, 0x01	; 1
    483c:	ce 16       	cp	r12, r30
    483e:	08 f0       	brcs	.+2      	; 0x4842 <fat_write_file+0x53a>
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	bf 2b       	or	r27, r31
    4844:	e5 2f       	mov	r30, r21
    4846:	e0 0f       	add	r30, r16
    4848:	a1 e0       	ldi	r26, 0x01	; 1
    484a:	e5 17       	cp	r30, r21
    484c:	08 f0       	brcs	.+2      	; 0x4850 <fat_write_file+0x548>
    484e:	a0 e0       	ldi	r26, 0x00	; 0
    4850:	db 2e       	mov	r13, r27
    4852:	de 0e       	add	r13, r30
    4854:	f1 e0       	ldi	r31, 0x01	; 1
    4856:	de 16       	cp	r13, r30
    4858:	08 f0       	brcs	.+2      	; 0x485c <fat_write_file+0x554>
    485a:	f0 e0       	ldi	r31, 0x00	; 0
    485c:	af 2b       	or	r26, r31
    485e:	e6 2f       	mov	r30, r22
    4860:	ee 0d       	add	r30, r14
    4862:	b1 e0       	ldi	r27, 0x01	; 1
    4864:	e6 17       	cp	r30, r22
    4866:	08 f0       	brcs	.+2      	; 0x486a <fat_write_file+0x562>
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	ea 2e       	mov	r14, r26
    486c:	ee 0e       	add	r14, r30
    486e:	f1 e0       	ldi	r31, 0x01	; 1
    4870:	ee 16       	cp	r14, r30
    4872:	08 f0       	brcs	.+2      	; 0x4876 <fat_write_file+0x56e>
    4874:	f0 e0       	ldi	r31, 0x00	; 0
    4876:	bf 2b       	or	r27, r31
    4878:	e7 2f       	mov	r30, r23
    487a:	ea 0d       	add	r30, r10
    487c:	a1 e0       	ldi	r26, 0x01	; 1
    487e:	e7 17       	cp	r30, r23
    4880:	08 f0       	brcs	.+2      	; 0x4884 <fat_write_file+0x57c>
    4882:	a0 e0       	ldi	r26, 0x00	; 0
    4884:	0b 2f       	mov	r16, r27
    4886:	0e 0f       	add	r16, r30
    4888:	f1 e0       	ldi	r31, 0x01	; 1
    488a:	0e 17       	cp	r16, r30
    488c:	08 f0       	brcs	.+2      	; 0x4890 <fat_write_file+0x588>
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	af 2b       	or	r26, r31
    4892:	e8 2f       	mov	r30, r24
    4894:	e7 0d       	add	r30, r7
    4896:	f1 e0       	ldi	r31, 0x01	; 1
    4898:	e8 17       	cp	r30, r24
    489a:	08 f0       	brcs	.+2      	; 0x489e <fat_write_file+0x596>
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	aa 2e       	mov	r10, r26
    48a0:	ae 0e       	add	r10, r30
    48a2:	a1 e0       	ldi	r26, 0x01	; 1
    48a4:	ae 16       	cp	r10, r30
    48a6:	08 f0       	brcs	.+2      	; 0x48aa <fat_write_file+0x5a2>
    48a8:	a0 e0       	ldi	r26, 0x00	; 0
    48aa:	fa 2b       	or	r31, r26
    48ac:	f9 0e       	add	r15, r25
    48ae:	ff 0d       	add	r31, r15
    48b0:	ad 89       	ldd	r26, Y+21	; 0x15
    48b2:	be 89       	ldd	r27, Y+22	; 0x16
    48b4:	d3 96       	adiw	r26, 0x33	; 51
    48b6:	1c 93       	st	X, r17
    48b8:	d3 97       	sbiw	r26, 0x33	; 51
    48ba:	d4 96       	adiw	r26, 0x34	; 52
    48bc:	bc 92       	st	X, r11
    48be:	d4 97       	sbiw	r26, 0x34	; 52
    48c0:	d5 96       	adiw	r26, 0x35	; 53
    48c2:	cc 92       	st	X, r12
    48c4:	d5 97       	sbiw	r26, 0x35	; 53
    48c6:	d6 96       	adiw	r26, 0x36	; 54
    48c8:	dc 92       	st	X, r13
    48ca:	d6 97       	sbiw	r26, 0x36	; 54
    48cc:	d7 96       	adiw	r26, 0x37	; 55
    48ce:	ec 92       	st	X, r14
    48d0:	d7 97       	sbiw	r26, 0x37	; 55
    48d2:	d8 96       	adiw	r26, 0x38	; 56
    48d4:	0c 93       	st	X, r16
    48d6:	d8 97       	sbiw	r26, 0x38	; 56
    48d8:	d9 96       	adiw	r26, 0x39	; 57
    48da:	ac 92       	st	X, r10
    48dc:	d9 97       	sbiw	r26, 0x39	; 57
    48de:	da 96       	adiw	r26, 0x3a	; 58
    48e0:	fc 93       	st	X, r31
    48e2:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    48e4:	8b 81       	ldd	r24, Y+3	; 0x03
    48e6:	9c 81       	ldd	r25, Y+4	; 0x04
    48e8:	88 0d       	add	r24, r8
    48ea:	99 1d       	adc	r25, r9
    48ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    48ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    48f0:	8e 17       	cp	r24, r30
    48f2:	9f 07       	cpc	r25, r31
    48f4:	c0 f1       	brcs	.+112    	; 0x4966 <fat_write_file+0x65e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    48f6:	8d 91       	ld	r24, X+
    48f8:	9c 91       	ld	r25, X
    48fa:	4f 81       	ldd	r20, Y+7	; 0x07
    48fc:	58 85       	ldd	r21, Y+8	; 0x08
    48fe:	69 85       	ldd	r22, Y+9	; 0x09
    4900:	7a 85       	ldd	r23, Y+10	; 0x0a
    4902:	0e 94 30 01 	call	0x260	; 0x260 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    4906:	61 15       	cp	r22, r1
    4908:	71 05       	cpc	r23, r1
    490a:	81 05       	cpc	r24, r1
    490c:	91 05       	cpc	r25, r1
    490e:	29 f0       	breq	.+10     	; 0x491a <fat_write_file+0x612>
    4910:	6f 83       	std	Y+7, r22	; 0x07
    4912:	78 87       	std	Y+8, r23	; 0x08
    4914:	89 87       	std	Y+9, r24	; 0x09
    4916:	9a 87       	std	Y+10, r25	; 0x0a
    4918:	24 c0       	rjmp	.+72     	; 0x4962 <fat_write_file+0x65a>
    491a:	2d 81       	ldd	r18, Y+5	; 0x05
    491c:	3e 81       	ldd	r19, Y+6	; 0x06
    491e:	23 2b       	or	r18, r19
    4920:	a9 f0       	breq	.+42     	; 0x494c <fat_write_file+0x644>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    4922:	ad 89       	ldd	r26, Y+21	; 0x15
    4924:	be 89       	ldd	r27, Y+22	; 0x16
    4926:	8d 91       	ld	r24, X+
    4928:	9c 91       	ld	r25, X
    492a:	4f 81       	ldd	r20, Y+7	; 0x07
    492c:	58 85       	ldd	r21, Y+8	; 0x08
    492e:	69 85       	ldd	r22, Y+9	; 0x09
    4930:	7a 85       	ldd	r23, Y+10	; 0x0a
    4932:	01 e0       	ldi	r16, 0x01	; 1
    4934:	10 e0       	ldi	r17, 0x00	; 0
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	0e 94 92 04 	call	0x924	; 0x924 <fat_append_clusters>
    493e:	ab 01       	movw	r20, r22
    4940:	bc 01       	movw	r22, r24
            if(!cluster_num_next)
    4942:	41 15       	cp	r20, r1
    4944:	51 05       	cpc	r21, r1
    4946:	61 05       	cpc	r22, r1
    4948:	71 05       	cpc	r23, r1
    494a:	39 f4       	brne	.+14     	; 0x495a <fat_write_file+0x652>
            {
                fd->pos_cluster = 0;
    494c:	ed 89       	ldd	r30, Y+21	; 0x15
    494e:	fe 89       	ldd	r31, Y+22	; 0x16
    4950:	13 ae       	std	Z+59, r1	; 0x3b
    4952:	14 ae       	std	Z+60, r1	; 0x3c
    4954:	15 ae       	std	Z+61, r1	; 0x3d
    4956:	16 ae       	std	Z+62, r1	; 0x3e
    4958:	1d c0       	rjmp	.+58     	; 0x4994 <fat_write_file+0x68c>
                break;
    495a:	4f 83       	std	Y+7, r20	; 0x07
    495c:	58 87       	std	Y+8, r21	; 0x08
    495e:	69 87       	std	Y+9, r22	; 0x09
    4960:	7a 87       	std	Y+10, r23	; 0x0a
    4962:	1c 82       	std	Y+4, r1	; 0x04
    4964:	1b 82       	std	Y+3, r1	; 0x03

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
        }

        fd->pos_cluster = cluster_num;
    4966:	2f 81       	ldd	r18, Y+7	; 0x07
    4968:	38 85       	ldd	r19, Y+8	; 0x08
    496a:	49 85       	ldd	r20, Y+9	; 0x09
    496c:	5a 85       	ldd	r21, Y+10	; 0x0a
    496e:	ad 89       	ldd	r26, Y+21	; 0x15
    4970:	be 89       	ldd	r27, Y+22	; 0x16
    4972:	db 96       	adiw	r26, 0x3b	; 59
    4974:	2d 93       	st	X+, r18
    4976:	3d 93       	st	X+, r19
    4978:	4d 93       	st	X+, r20
    497a:	5c 93       	st	X, r21
    497c:	de 97       	sbiw	r26, 0x3e	; 62

    } while(buffer_left > 0); /* check if we are done */
    497e:	ed 81       	ldd	r30, Y+5	; 0x05
    4980:	fe 81       	ldd	r31, Y+6	; 0x06
    4982:	ef 2b       	or	r30, r31
    4984:	39 f0       	breq	.+14     	; 0x4994 <fat_write_file+0x68c>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    4986:	2d 85       	ldd	r18, Y+13	; 0x0d
    4988:	3e 85       	ldd	r19, Y+14	; 0x0e
    498a:	28 0d       	add	r18, r8
    498c:	39 1d       	adc	r19, r9
    498e:	3e 87       	std	Y+14, r19	; 0x0e
    4990:	2d 87       	std	Y+13, r18	; 0x0d
    4992:	07 ce       	rjmp	.-1010   	; 0x45a2 <fat_write_file+0x29a>
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    4994:	ad 89       	ldd	r26, Y+21	; 0x15
    4996:	be 89       	ldd	r27, Y+22	; 0x16
    4998:	d3 96       	adiw	r26, 0x33	; 51
    499a:	7c 91       	ld	r23, X
    499c:	d3 97       	sbiw	r26, 0x33	; 51
    499e:	d4 96       	adiw	r26, 0x34	; 52
    49a0:	4c 91       	ld	r20, X
    49a2:	d4 97       	sbiw	r26, 0x34	; 52
    49a4:	d5 96       	adiw	r26, 0x35	; 53
    49a6:	5c 91       	ld	r21, X
    49a8:	d5 97       	sbiw	r26, 0x35	; 53
    49aa:	d6 96       	adiw	r26, 0x36	; 54
    49ac:	6c 91       	ld	r22, X
    49ae:	d6 97       	sbiw	r26, 0x36	; 54
    49b0:	d7 96       	adiw	r26, 0x37	; 55
    49b2:	3c 91       	ld	r19, X
    49b4:	d7 97       	sbiw	r26, 0x37	; 55
    49b6:	d8 96       	adiw	r26, 0x38	; 56
    49b8:	2c 91       	ld	r18, X
    49ba:	d8 97       	sbiw	r26, 0x38	; 56
    49bc:	d9 96       	adiw	r26, 0x39	; 57
    49be:	9c 91       	ld	r25, X
    49c0:	d9 97       	sbiw	r26, 0x39	; 57
    49c2:	da 96       	adiw	r26, 0x3a	; 58
    49c4:	8c 91       	ld	r24, X
    49c6:	da 97       	sbiw	r26, 0x3a	; 58
    49c8:	97 96       	adiw	r26, 0x27	; 39
    49ca:	6d 90       	ld	r6, X+
    49cc:	7d 90       	ld	r7, X+
    49ce:	8d 90       	ld	r8, X+
    49d0:	9c 90       	ld	r9, X
    49d2:	9a 97       	sbiw	r26, 0x2a	; 42
    49d4:	64 01       	movw	r12, r8
    49d6:	53 01       	movw	r10, r6
    49d8:	ee 24       	eor	r14, r14
    49da:	ff 24       	eor	r15, r15
    49dc:	87 01       	movw	r16, r14
    49de:	18 17       	cp	r17, r24
    49e0:	e0 f0       	brcs	.+56     	; 0x4a1a <fat_write_file+0x712>
    49e2:	81 17       	cp	r24, r17
    49e4:	d9 f5       	brne	.+118    	; 0x4a5c <fat_write_file+0x754>
    49e6:	09 17       	cp	r16, r25
    49e8:	c0 f0       	brcs	.+48     	; 0x4a1a <fat_write_file+0x712>
    49ea:	90 17       	cp	r25, r16
    49ec:	b9 f5       	brne	.+110    	; 0x4a5c <fat_write_file+0x754>
    49ee:	f2 16       	cp	r15, r18
    49f0:	a0 f0       	brcs	.+40     	; 0x4a1a <fat_write_file+0x712>
    49f2:	2f 15       	cp	r18, r15
    49f4:	99 f5       	brne	.+102    	; 0x4a5c <fat_write_file+0x754>
    49f6:	e3 16       	cp	r14, r19
    49f8:	80 f0       	brcs	.+32     	; 0x4a1a <fat_write_file+0x712>
    49fa:	3e 15       	cp	r19, r14
    49fc:	79 f5       	brne	.+94     	; 0x4a5c <fat_write_file+0x754>
    49fe:	d6 16       	cp	r13, r22
    4a00:	60 f0       	brcs	.+24     	; 0x4a1a <fat_write_file+0x712>
    4a02:	6d 15       	cp	r22, r13
    4a04:	59 f5       	brne	.+86     	; 0x4a5c <fat_write_file+0x754>
    4a06:	c5 16       	cp	r12, r21
    4a08:	40 f0       	brcs	.+16     	; 0x4a1a <fat_write_file+0x712>
    4a0a:	5c 15       	cp	r21, r12
    4a0c:	39 f5       	brne	.+78     	; 0x4a5c <fat_write_file+0x754>
    4a0e:	b4 16       	cp	r11, r20
    4a10:	20 f0       	brcs	.+8      	; 0x4a1a <fat_write_file+0x712>
    4a12:	4b 15       	cp	r20, r11
    4a14:	19 f5       	brne	.+70     	; 0x4a5c <fat_write_file+0x754>
    4a16:	67 16       	cp	r6, r23
    4a18:	08 f5       	brcc	.+66     	; 0x4a5c <fat_write_file+0x754>
#if !FAT_DELAY_DIRENTRY_UPDATE
        uint32_t size_old = fd->dir_entry.file_size;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    4a1a:	ed 89       	ldd	r30, Y+21	; 0x15
    4a1c:	fe 89       	ldd	r31, Y+22	; 0x16
    4a1e:	77 a3       	std	Z+39, r23	; 0x27
    4a20:	40 a7       	std	Z+40, r20	; 0x28
    4a22:	51 a7       	std	Z+41, r21	; 0x29
    4a24:	62 a7       	std	Z+42, r22	; 0x2a

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    4a26:	81 91       	ld	r24, Z+
    4a28:	91 91       	ld	r25, Z+
    4a2a:	bf 01       	movw	r22, r30
    4a2c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <fat_write_dir_entry>
    4a30:	88 23       	and	r24, r24
    4a32:	a1 f4       	brne	.+40     	; 0x4a5c <fat_write_file+0x754>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    4a34:	ad 89       	ldd	r26, Y+21	; 0x15
    4a36:	be 89       	ldd	r27, Y+22	; 0x16
    4a38:	d3 96       	adiw	r26, 0x33	; 51
    4a3a:	0d 90       	ld	r0, X+
    4a3c:	bc 91       	ld	r27, X
    4a3e:	a0 2d       	mov	r26, r0
    4a40:	a6 19       	sub	r26, r6
    4a42:	b7 09       	sbc	r27, r7
    4a44:	be 83       	std	Y+6, r27	; 0x06
    4a46:	ad 83       	std	Y+5, r26	; 0x05
            fd->pos = size_old;
    4a48:	ed 89       	ldd	r30, Y+21	; 0x15
    4a4a:	fe 89       	ldd	r31, Y+22	; 0x16
    4a4c:	a3 aa       	std	Z+51, r10	; 0x33
    4a4e:	b4 aa       	std	Z+52, r11	; 0x34
    4a50:	c5 aa       	std	Z+53, r12	; 0x35
    4a52:	d6 aa       	std	Z+54, r13	; 0x36
    4a54:	17 aa       	std	Z+55, r1	; 0x37
    4a56:	10 ae       	std	Z+56, r1	; 0x38
    4a58:	11 ae       	std	Z+57, r1	; 0x39
    4a5a:	12 ae       	std	Z+58, r1	; 0x3a
        }
#endif
    }

    return buffer_len - buffer_left;
    4a5c:	4f 85       	ldd	r20, Y+15	; 0x0f
    4a5e:	58 89       	ldd	r21, Y+16	; 0x10
    4a60:	2d 81       	ldd	r18, Y+5	; 0x05
    4a62:	3e 81       	ldd	r19, Y+6	; 0x06
    4a64:	42 1b       	sub	r20, r18
    4a66:	53 0b       	sbc	r21, r19
    4a68:	05 c0       	rjmp	.+10     	; 0x4a74 <fat_write_file+0x76c>
    4a6a:	4f ef       	ldi	r20, 0xFF	; 255
    4a6c:	5f ef       	ldi	r21, 0xFF	; 255
    4a6e:	02 c0       	rjmp	.+4      	; 0x4a74 <fat_write_file+0x76c>
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	50 e0       	ldi	r21, 0x00	; 0
}
    4a74:	ca 01       	movw	r24, r20
    4a76:	66 96       	adiw	r28, 0x16	; 22
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	f8 94       	cli
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	cf 91       	pop	r28
    4a84:	df 91       	pop	r29
    4a86:	1f 91       	pop	r17
    4a88:	0f 91       	pop	r16
    4a8a:	ff 90       	pop	r15
    4a8c:	ef 90       	pop	r14
    4a8e:	df 90       	pop	r13
    4a90:	cf 90       	pop	r12
    4a92:	bf 90       	pop	r11
    4a94:	af 90       	pop	r10
    4a96:	9f 90       	pop	r9
    4a98:	8f 90       	pop	r8
    4a9a:	7f 90       	pop	r7
    4a9c:	6f 90       	pop	r6
    4a9e:	5f 90       	pop	r5
    4aa0:	4f 90       	pop	r4
    4aa2:	3f 90       	pop	r3
    4aa4:	2f 90       	pop	r2
    4aa6:	08 95       	ret

00004aa8 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    4aa8:	cf 93       	push	r28
    4aaa:	df 93       	push	r29
    4aac:	ac 01       	movw	r20, r24
    4aae:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    4ab0:	00 97       	sbiw	r24, 0x00	; 0
    4ab2:	a9 f1       	breq	.+106    	; 0x4b1e <fat_open_dir+0x76>
    4ab4:	61 15       	cp	r22, r1
    4ab6:	71 05       	cpc	r23, r1
    4ab8:	91 f1       	breq	.+100    	; 0x4b1e <fat_open_dir+0x76>
    4aba:	90 96       	adiw	r26, 0x20	; 32
    4abc:	8c 91       	ld	r24, X
    4abe:	90 97       	sbiw	r26, 0x20	; 32
    4ac0:	84 ff       	sbrs	r24, 4
    4ac2:	2d c0       	rjmp	.+90     	; 0x4b1e <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    4ac4:	80 91 a5 01 	lds	r24, 0x01A5
    4ac8:	90 91 a6 01 	lds	r25, 0x01A6
    4acc:	89 2b       	or	r24, r25
    4ace:	19 f4       	brne	.+6      	; 0x4ad6 <fat_open_dir+0x2e>
    4ad0:	e5 ea       	ldi	r30, 0xA5	; 165
    4ad2:	f1 e0       	ldi	r31, 0x01	; 1
    4ad4:	08 c0       	rjmp	.+16     	; 0x4ae6 <fat_open_dir+0x3e>
    4ad6:	80 91 de 01 	lds	r24, 0x01DE
    4ada:	90 91 df 01 	lds	r25, 0x01DF
    4ade:	89 2b       	or	r24, r25
    4ae0:	f1 f4       	brne	.+60     	; 0x4b1e <fat_open_dir+0x76>
    4ae2:	ee ed       	ldi	r30, 0xDE	; 222
    4ae4:	f1 e0       	ldi	r31, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    4ae6:	9f 01       	movw	r18, r30
    4ae8:	2e 5f       	subi	r18, 0xFE	; 254
    4aea:	3f 4f       	sbci	r19, 0xFF	; 255
    4aec:	bd 01       	movw	r22, r26
    4aee:	81 e3       	ldi	r24, 0x31	; 49
    4af0:	eb 01       	movw	r28, r22
    4af2:	09 90       	ld	r0, Y+
    4af4:	be 01       	movw	r22, r28
    4af6:	e9 01       	movw	r28, r18
    4af8:	09 92       	st	Y+, r0
    4afa:	9e 01       	movw	r18, r28
    4afc:	81 50       	subi	r24, 0x01	; 1
    4afe:	c1 f7       	brne	.-16     	; 0x4af0 <fat_open_dir+0x48>
    dd->fs = fs;
    4b00:	51 83       	std	Z+1, r21	; 0x01
    4b02:	40 83       	st	Z, r20
    dd->entry_cluster = dir_entry->cluster;
    4b04:	91 96       	adiw	r26, 0x21	; 33
    4b06:	8d 91       	ld	r24, X+
    4b08:	9d 91       	ld	r25, X+
    4b0a:	0d 90       	ld	r0, X+
    4b0c:	bc 91       	ld	r27, X
    4b0e:	a0 2d       	mov	r26, r0
    4b10:	83 ab       	std	Z+51, r24	; 0x33
    4b12:	94 ab       	std	Z+52, r25	; 0x34
    4b14:	a5 ab       	std	Z+53, r26	; 0x35
    4b16:	b6 ab       	std	Z+54, r27	; 0x36
    dd->entry_offset = 0;
    4b18:	10 ae       	std	Z+56, r1	; 0x38
    4b1a:	17 aa       	std	Z+55, r1	; 0x37
    4b1c:	02 c0       	rjmp	.+4      	; 0x4b22 <fat_open_dir+0x7a>

    return dd;
    4b1e:	e0 e0       	ldi	r30, 0x00	; 0
    4b20:	f0 e0       	ldi	r31, 0x00	; 0
}
    4b22:	cf 01       	movw	r24, r30
    4b24:	df 91       	pop	r29
    4b26:	cf 91       	pop	r28
    4b28:	08 95       	ret

00004b2a <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    4b2a:	cf 93       	push	r28
    4b2c:	df 93       	push	r29
    4b2e:	9c 01       	movw	r18, r24
    4b30:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    4b32:	00 97       	sbiw	r24, 0x00	; 0
    4b34:	41 f0       	breq	.+16     	; 0x4b46 <fat_open_file+0x1c>
    4b36:	61 15       	cp	r22, r1
    4b38:	71 05       	cpc	r23, r1
    4b3a:	29 f0       	breq	.+10     	; 0x4b46 <fat_open_file+0x1c>
    4b3c:	90 96       	adiw	r26, 0x20	; 32
    4b3e:	8c 91       	ld	r24, X
    4b40:	90 97       	sbiw	r26, 0x20	; 32
    4b42:	84 ff       	sbrs	r24, 4
    4b44:	33 c0       	rjmp	.+102    	; 0x4bac <fat_open_file+0x82>
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    4b4a:	c9 01       	movw	r24, r18
    4b4c:	df 91       	pop	r29
    4b4e:	cf 91       	pop	r28
    4b50:	08 95       	ret
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    4b52:	c8 e6       	ldi	r28, 0x68	; 104
    4b54:	d1 e0       	ldi	r29, 0x01	; 1
    4b56:	fd 01       	movw	r30, r26
    4b58:	81 e3       	ldi	r24, 0x31	; 49
    4b5a:	01 90       	ld	r0, Z+
    4b5c:	09 92       	st	Y+, r0
    4b5e:	81 50       	subi	r24, 0x01	; 1
    4b60:	e1 f7       	brne	.-8      	; 0x4b5a <fat_open_file+0x30>
    fd->fs = fs;
    4b62:	30 93 67 01 	sts	0x0167, r19
    4b66:	20 93 66 01 	sts	0x0166, r18
    fd->pos = 0;
    4b6a:	10 92 99 01 	sts	0x0199, r1
    4b6e:	10 92 9a 01 	sts	0x019A, r1
    4b72:	10 92 9b 01 	sts	0x019B, r1
    4b76:	10 92 9c 01 	sts	0x019C, r1
    4b7a:	10 92 9d 01 	sts	0x019D, r1
    4b7e:	10 92 9e 01 	sts	0x019E, r1
    4b82:	10 92 9f 01 	sts	0x019F, r1
    4b86:	10 92 a0 01 	sts	0x01A0, r1
    fd->pos_cluster = dir_entry->cluster;
    4b8a:	91 96       	adiw	r26, 0x21	; 33
    4b8c:	8d 91       	ld	r24, X+
    4b8e:	9d 91       	ld	r25, X+
    4b90:	0d 90       	ld	r0, X+
    4b92:	bc 91       	ld	r27, X
    4b94:	a0 2d       	mov	r26, r0
    4b96:	80 93 a1 01 	sts	0x01A1, r24
    4b9a:	90 93 a2 01 	sts	0x01A2, r25
    4b9e:	a0 93 a3 01 	sts	0x01A3, r26
    4ba2:	b0 93 a4 01 	sts	0x01A4, r27
    4ba6:	26 e6       	ldi	r18, 0x66	; 102
    4ba8:	31 e0       	ldi	r19, 0x01	; 1
    4baa:	cf cf       	rjmp	.-98     	; 0x4b4a <fat_open_file+0x20>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    4bac:	80 91 66 01 	lds	r24, 0x0166
    4bb0:	90 91 67 01 	lds	r25, 0x0167
    4bb4:	89 2b       	or	r24, r25
    4bb6:	39 f6       	brne	.-114    	; 0x4b46 <fat_open_file+0x1c>
    4bb8:	cc cf       	rjmp	.-104    	; 0x4b52 <fat_open_file+0x28>

00004bba <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    4bba:	6f 92       	push	r6
    4bbc:	7f 92       	push	r7
    4bbe:	8f 92       	push	r8
    4bc0:	9f 92       	push	r9
    4bc2:	af 92       	push	r10
    4bc4:	bf 92       	push	r11
    4bc6:	cf 92       	push	r12
    4bc8:	df 92       	push	r13
    4bca:	ef 92       	push	r14
    4bcc:	ff 92       	push	r15
    4bce:	0f 93       	push	r16
    4bd0:	1f 93       	push	r17
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	4c 01       	movw	r8, r24
    4bd8:	eb 01       	movw	r28, r22
    4bda:	7a 01       	movw	r14, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    4bdc:	00 97       	sbiw	r24, 0x00	; 0
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <fat_get_dir_entry_of_path+0x28>
    4be0:	67 c0       	rjmp	.+206    	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
    4be2:	61 15       	cp	r22, r1
    4be4:	71 05       	cpc	r23, r1
    4be6:	09 f4       	brne	.+2      	; 0x4bea <fat_get_dir_entry_of_path+0x30>
    4be8:	63 c0       	rjmp	.+198    	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
    4bea:	88 81       	ld	r24, Y
    4bec:	88 23       	and	r24, r24
    4bee:	09 f4       	brne	.+2      	; 0x4bf2 <fat_get_dir_entry_of_path+0x38>
    4bf0:	5f c0       	rjmp	.+190    	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
    4bf2:	41 15       	cp	r20, r1
    4bf4:	51 05       	cpc	r21, r1
    4bf6:	09 f4       	brne	.+2      	; 0x4bfa <fat_get_dir_entry_of_path+0x40>
    4bf8:	5b c0       	rjmp	.+182    	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
        return 0;

    if(path[0] == '/')
    4bfa:	8f 32       	cpi	r24, 0x2F	; 47
    4bfc:	09 f4       	brne	.+2      	; 0x4c00 <fat_get_dir_entry_of_path+0x46>
        ++path;
    4bfe:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    4c00:	81 e3       	ldi	r24, 0x31	; 49
    4c02:	f7 01       	movw	r30, r14
    4c04:	11 92       	st	Z+, r1
    4c06:	8a 95       	dec	r24
    4c08:	e9 f7       	brne	.-6      	; 0x4c04 <fat_get_dir_entry_of_path+0x4a>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    4c0a:	80 e1       	ldi	r24, 0x10	; 16
    4c0c:	f7 01       	movw	r30, r14
    4c0e:	80 a3       	std	Z+32, r24	; 0x20
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    4c10:	37 01       	movw	r6, r14
    4c12:	01 c0       	rjmp	.+2      	; 0x4c16 <fat_get_dir_entry_of_path+0x5c>
    4c14:	e5 01       	movw	r28, r10
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    4c16:	88 81       	ld	r24, Y
    4c18:	88 23       	and	r24, r24
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <fat_get_dir_entry_of_path+0x64>
    4c1c:	4b c0       	rjmp	.+150    	; 0x4cb4 <fat_get_dir_entry_of_path+0xfa>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    4c1e:	c4 01       	movw	r24, r8
    4c20:	b7 01       	movw	r22, r14
    4c22:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <fat_open_dir>
    4c26:	6c 01       	movw	r12, r24
        if(!dd)
    4c28:	00 97       	sbiw	r24, 0x00	; 0
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <fat_get_dir_entry_of_path+0x74>
    4c2c:	41 c0       	rjmp	.+130    	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    4c2e:	ce 01       	movw	r24, r28
    4c30:	6f e2       	ldi	r22, 0x2F	; 47
    4c32:	70 e0       	ldi	r23, 0x00	; 0
    4c34:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    4c38:	00 97       	sbiw	r24, 0x00	; 0
    4c3a:	39 f0       	breq	.+14     	; 0x4c4a <fat_get_dir_entry_of_path+0x90>
        {
            length_to_sep = sub_path - path;
    4c3c:	48 2f       	mov	r20, r24
    4c3e:	4c 1b       	sub	r20, r28
            ++sub_path;
    4c40:	5c 01       	movw	r10, r24
    4c42:	08 94       	sec
    4c44:	a1 1c       	adc	r10, r1
    4c46:	b1 1c       	adc	r11, r1
    4c48:	2a c0       	rjmp	.+84     	; 0x4c9e <fat_get_dir_entry_of_path+0xe4>
        }
        else
        {
            length_to_sep = strlen(path);
    4c4a:	fe 01       	movw	r30, r28
    4c4c:	01 90       	ld	r0, Z+
    4c4e:	00 20       	and	r0, r0
    4c50:	e9 f7       	brne	.-6      	; 0x4c4c <fat_get_dir_entry_of_path+0x92>
    4c52:	31 97       	sbiw	r30, 0x01	; 1
    4c54:	4e 2f       	mov	r20, r30
    4c56:	4c 1b       	sub	r20, r28
            sub_path = path + length_to_sep;
    4c58:	5e 01       	movw	r10, r28
    4c5a:	a4 0e       	add	r10, r20
    4c5c:	b1 1c       	adc	r11, r1
    4c5e:	1f c0       	rjmp	.+62     	; 0x4c9e <fat_get_dir_entry_of_path+0xe4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    4c60:	f3 01       	movw	r30, r6
    4c62:	01 90       	ld	r0, Z+
    4c64:	00 20       	and	r0, r0
    4c66:	e9 f7       	brne	.-6      	; 0x4c62 <fat_get_dir_entry_of_path+0xa8>
    4c68:	31 97       	sbiw	r30, 0x01	; 1
    4c6a:	e6 19       	sub	r30, r6
    4c6c:	f7 09       	sbc	r31, r7
    4c6e:	e0 17       	cp	r30, r16
    4c70:	f1 07       	cpc	r31, r17
    4c72:	b9 f4       	brne	.+46     	; 0x4ca2 <fat_get_dir_entry_of_path+0xe8>
    4c74:	ce 01       	movw	r24, r28
    4c76:	b3 01       	movw	r22, r6
    4c78:	a8 01       	movw	r20, r16
    4c7a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <strncmp>
    4c7e:	00 97       	sbiw	r24, 0x00	; 0
    4c80:	81 f4       	brne	.+32     	; 0x4ca2 <fat_get_dir_entry_of_path+0xe8>
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    4c82:	f6 01       	movw	r30, r12
    4c84:	11 82       	std	Z+1, r1	; 0x01
    4c86:	10 82       	st	Z, r1
                continue;

            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    4c88:	0c 0f       	add	r16, r28
    4c8a:	1d 1f       	adc	r17, r29
    4c8c:	f8 01       	movw	r30, r16
    4c8e:	80 81       	ld	r24, Z
    4c90:	88 23       	and	r24, r24
    4c92:	81 f0       	breq	.+32     	; 0x4cb4 <fat_get_dir_entry_of_path+0xfa>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    4c94:	f7 01       	movw	r30, r14
    4c96:	80 a1       	ldd	r24, Z+32	; 0x20
    4c98:	84 fd       	sbrc	r24, 4
    4c9a:	bc cf       	rjmp	.-136    	; 0x4c14 <fat_get_dir_entry_of_path+0x5a>
    4c9c:	09 c0       	rjmp	.+18     	; 0x4cb0 <fat_get_dir_entry_of_path+0xf6>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    4c9e:	04 2f       	mov	r16, r20
    4ca0:	10 e0       	ldi	r17, 0x00	; 0
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    4ca2:	c6 01       	movw	r24, r12
    4ca4:	b7 01       	movw	r22, r14
    4ca6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <fat_read_dir>
    4caa:	88 23       	and	r24, r24
    4cac:	c9 f6       	brne	.-78     	; 0x4c60 <fat_get_dir_entry_of_path+0xa6>
    4cae:	12 c0       	rjmp	.+36     	; 0x4cd4 <fat_get_dir_entry_of_path+0x11a>
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	01 c0       	rjmp	.+2      	; 0x4cb6 <fat_get_dir_entry_of_path+0xfc>
    4cb4:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    4cb6:	df 91       	pop	r29
    4cb8:	cf 91       	pop	r28
    4cba:	1f 91       	pop	r17
    4cbc:	0f 91       	pop	r16
    4cbe:	ff 90       	pop	r15
    4cc0:	ef 90       	pop	r14
    4cc2:	df 90       	pop	r13
    4cc4:	cf 90       	pop	r12
    4cc6:	bf 90       	pop	r11
    4cc8:	af 90       	pop	r10
    4cca:	9f 90       	pop	r9
    4ccc:	8f 90       	pop	r8
    4cce:	7f 90       	pop	r7
    4cd0:	6f 90       	pop	r6
    4cd2:	08 95       	ret
{
    if(dd)
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    4cd4:	f6 01       	movw	r30, r12
    4cd6:	11 82       	std	Z+1, r1	; 0x01
    4cd8:	10 82       	st	Z, r1
    4cda:	9d cf       	rjmp	.-198    	; 0x4c16 <fat_get_dir_entry_of_path+0x5c>

00004cdc <partition_close>:
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    4cdc:	fc 01       	movw	r30, r24
    if(!partition)
    4cde:	00 97       	sbiw	r24, 0x00	; 0
    4ce0:	11 f4       	brne	.+4      	; 0x4ce6 <partition_close+0xa>
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	08 95       	ret

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    4ce6:	10 86       	std	Z+8, r1	; 0x08
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
#endif

    return 1;
}
    4cea:	08 95       	ret

00004cec <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    4cec:	4f 92       	push	r4
    4cee:	5f 92       	push	r5
    4cf0:	6f 92       	push	r6
    4cf2:	7f 92       	push	r7
    4cf4:	8f 92       	push	r8
    4cf6:	9f 92       	push	r9
    4cf8:	bf 92       	push	r11
    4cfa:	cf 92       	push	r12
    4cfc:	df 92       	push	r13
    4cfe:	ef 92       	push	r14
    4d00:	ff 92       	push	r15
    4d02:	0f 93       	push	r16
    4d04:	1f 93       	push	r17
    4d06:	df 93       	push	r29
    4d08:	cf 93       	push	r28
    4d0a:	cd b7       	in	r28, 0x3d	; 61
    4d0c:	de b7       	in	r29, 0x3e	; 62
    4d0e:	60 97       	sbiw	r28, 0x10	; 16
    4d10:	0f b6       	in	r0, 0x3f	; 63
    4d12:	f8 94       	cli
    4d14:	de bf       	out	0x3e, r29	; 62
    4d16:	0f be       	out	0x3f, r0	; 63
    4d18:	cd bf       	out	0x3d, r28	; 61
    4d1a:	6c 01       	movw	r12, r24
    4d1c:	4b 01       	movw	r8, r22
    4d1e:	3a 01       	movw	r6, r20
    4d20:	29 01       	movw	r4, r18
    4d22:	b0 2e       	mov	r11, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <partition_open+0x3e>
    4d28:	53 c0       	rjmp	.+166    	; 0x4dd0 <partition_open+0xe4>
    4d2a:	61 15       	cp	r22, r1
    4d2c:	71 05       	cpc	r23, r1
    4d2e:	09 f4       	brne	.+2      	; 0x4d32 <partition_open+0x46>
    4d30:	4f c0       	rjmp	.+158    	; 0x4dd0 <partition_open+0xe4>
    4d32:	83 e0       	ldi	r24, 0x03	; 3
    4d34:	80 17       	cp	r24, r16
    4d36:	0c f4       	brge	.+2      	; 0x4d3a <partition_open+0x4e>
    4d38:	4b c0       	rjmp	.+150    	; 0x4dd0 <partition_open+0xe4>
        return 0;

    if(index >= 0)
    4d3a:	07 fd       	sbrc	r16, 7
    4d3c:	23 c0       	rjmp	.+70     	; 0x4d84 <partition_open+0x98>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    4d3e:	80 2f       	mov	r24, r16
    4d40:	99 27       	eor	r25, r25
    4d42:	87 fd       	sbrc	r24, 7
    4d44:	90 95       	com	r25
    4d46:	b4 e0       	ldi	r27, 0x04	; 4
    4d48:	88 0f       	add	r24, r24
    4d4a:	99 1f       	adc	r25, r25
    4d4c:	ba 95       	dec	r27
    4d4e:	e1 f7       	brne	.-8      	; 0x4d48 <partition_open+0x5c>
    4d50:	82 54       	subi	r24, 0x42	; 66
    4d52:	9e 4f       	sbci	r25, 0xFE	; 254
    4d54:	fc 01       	movw	r30, r24
    4d56:	ff 0f       	add	r31, r31
    4d58:	ee 0b       	sbc	r30, r30
    4d5a:	fe 2f       	mov	r31, r30
    4d5c:	9c 01       	movw	r18, r24
    4d5e:	4e 2f       	mov	r20, r30
    4d60:	5e 2f       	mov	r21, r30
    4d62:	6e 2f       	mov	r22, r30
    4d64:	7e 2f       	mov	r23, r30
    4d66:	8e 2f       	mov	r24, r30
    4d68:	9e 2f       	mov	r25, r30
    4d6a:	8e 01       	movw	r16, r28
    4d6c:	0f 5f       	subi	r16, 0xFF	; 255
    4d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d70:	e0 e1       	ldi	r30, 0x10	; 16
    4d72:	ee 2e       	mov	r14, r30
    4d74:	f1 2c       	mov	r15, r1
    4d76:	f6 01       	movw	r30, r12
    4d78:	09 95       	icall
    4d7a:	88 23       	and	r24, r24
    4d7c:	49 f1       	breq	.+82     	; 0x4dd0 <partition_open+0xe4>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    4d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d80:	88 23       	and	r24, r24
    4d82:	31 f1       	breq	.+76     	; 0x4dd0 <partition_open+0xe4>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    4d84:	80 91 1f 02 	lds	r24, 0x021F
    4d88:	88 23       	and	r24, r24
    4d8a:	11 f5       	brne	.+68     	; 0x4dd0 <partition_open+0xe4>
    4d8c:	3a c0       	rjmp	.+116    	; 0x4e02 <partition_open+0x116>
    new_partition->device_write = device_write;
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    4d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d90:	80 93 1f 02 	sts	0x021F, r24
        new_partition->offset = read32(&buffer[8]);
    4d94:	89 85       	ldd	r24, Y+9	; 0x09
    4d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d98:	ab 85       	ldd	r26, Y+11	; 0x0b
    4d9a:	bc 85       	ldd	r27, Y+12	; 0x0c
    4d9c:	80 93 20 02 	sts	0x0220, r24
    4da0:	90 93 21 02 	sts	0x0221, r25
    4da4:	a0 93 22 02 	sts	0x0222, r26
    4da8:	b0 93 23 02 	sts	0x0223, r27
        new_partition->length = read32(&buffer[12]);
    4dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4db0:	af 85       	ldd	r26, Y+15	; 0x0f
    4db2:	b8 89       	ldd	r27, Y+16	; 0x10
    4db4:	80 93 24 02 	sts	0x0224, r24
    4db8:	90 93 25 02 	sts	0x0225, r25
    4dbc:	a0 93 26 02 	sts	0x0226, r26
    4dc0:	b0 93 27 02 	sts	0x0227, r27
    4dc4:	03 c0       	rjmp	.+6      	; 0x4dcc <partition_open+0xe0>
    }
    else
    {
        new_partition->type = 0xff;
    4dc6:	8f ef       	ldi	r24, 0xFF	; 255
    4dc8:	80 93 1f 02 	sts	0x021F, r24
    4dcc:	9f 01       	movw	r18, r30
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <partition_open+0xe8>
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    }

    return new_partition;
}
    4dd4:	c9 01       	movw	r24, r18
    4dd6:	60 96       	adiw	r28, 0x10	; 16
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	cf 91       	pop	r28
    4de4:	df 91       	pop	r29
    4de6:	1f 91       	pop	r17
    4de8:	0f 91       	pop	r16
    4dea:	ff 90       	pop	r15
    4dec:	ef 90       	pop	r14
    4dee:	df 90       	pop	r13
    4df0:	cf 90       	pop	r12
    4df2:	bf 90       	pop	r11
    4df4:	9f 90       	pop	r9
    4df6:	8f 90       	pop	r8
    4df8:	7f 90       	pop	r7
    4dfa:	6f 90       	pop	r6
    4dfc:	5f 90       	pop	r5
    4dfe:	4f 90       	pop	r4
    4e00:	08 95       	ret
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    4e02:	e7 e1       	ldi	r30, 0x17	; 23
    4e04:	f2 e0       	ldi	r31, 0x02	; 2
    4e06:	81 e1       	ldi	r24, 0x11	; 17
    4e08:	df 01       	movw	r26, r30
    4e0a:	1d 92       	st	X+, r1
    4e0c:	8a 95       	dec	r24
    4e0e:	e9 f7       	brne	.-6      	; 0x4e0a <partition_open+0x11e>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    4e10:	d0 92 18 02 	sts	0x0218, r13
    4e14:	c0 92 17 02 	sts	0x0217, r12
    new_partition->device_read_interval = device_read_interval;
    4e18:	90 92 1a 02 	sts	0x021A, r9
    4e1c:	80 92 19 02 	sts	0x0219, r8
    new_partition->device_write = device_write;
    4e20:	70 92 1c 02 	sts	0x021C, r7
    4e24:	60 92 1b 02 	sts	0x021B, r6
    new_partition->device_write_interval = device_write_interval;
    4e28:	50 92 1e 02 	sts	0x021E, r5
    4e2c:	40 92 1d 02 	sts	0x021D, r4

    if(index >= 0)
    4e30:	b7 fe       	sbrs	r11, 7
    4e32:	ad cf       	rjmp	.-166    	; 0x4d8e <partition_open+0xa2>
    4e34:	c8 cf       	rjmp	.-112    	; 0x4dc6 <partition_open+0xda>

00004e36 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return 1;//get_pin_available() == 0x00;
}
    4e36:	81 e0       	ldi	r24, 0x01	; 1
    4e38:	08 95       	ret

00004e3a <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return 0; //get_pin_locked() == 0x00;
}
    4e3a:	80 e0       	ldi	r24, 0x00	; 0
    4e3c:	08 95       	ret

00004e3e <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    4e3e:	28 2f       	mov	r18, r24
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4e40:	8f ef       	ldi	r24, 0xFF	; 255
    4e42:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    4e44:	0d b4       	in	r0, 0x2d	; 45
    4e46:	07 fe       	sbrs	r0, 7
    4e48:	fd cf       	rjmp	.-6      	; 0x4e44 <sd_raw_send_command+0x6>
    SPSR &= ~(1 << SPIF);
    4e4a:	8d b5       	in	r24, 0x2d	; 45
    4e4c:	8f 77       	andi	r24, 0x7F	; 127
    4e4e:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    4e50:	8e b5       	in	r24, 0x2e	; 46

    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    4e52:	82 2f       	mov	r24, r18
    4e54:	80 64       	ori	r24, 0x40	; 64
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4e56:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4e58:	0d b4       	in	r0, 0x2d	; 45
    4e5a:	07 fe       	sbrs	r0, 7
    4e5c:	fd cf       	rjmp	.-6      	; 0x4e58 <sd_raw_send_command+0x1a>
    SPSR &= ~(1 << SPIF);
    4e5e:	8d b5       	in	r24, 0x2d	; 45
    4e60:	8f 77       	andi	r24, 0x7F	; 127
    4e62:	8d bd       	out	0x2d, r24	; 45
    /* wait some clock cycles */
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    4e64:	87 2f       	mov	r24, r23
    4e66:	99 27       	eor	r25, r25
    4e68:	aa 27       	eor	r26, r26
    4e6a:	bb 27       	eor	r27, r27
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4e6c:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4e6e:	0d b4       	in	r0, 0x2d	; 45
    4e70:	07 fe       	sbrs	r0, 7
    4e72:	fd cf       	rjmp	.-6      	; 0x4e6e <sd_raw_send_command+0x30>
    SPSR &= ~(1 << SPIF);
    4e74:	8d b5       	in	r24, 0x2d	; 45
    4e76:	8f 77       	andi	r24, 0x7F	; 127
    4e78:	8d bd       	out	0x2d, r24	; 45
    sd_raw_rec_byte();

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    4e7a:	cb 01       	movw	r24, r22
    4e7c:	aa 27       	eor	r26, r26
    4e7e:	bb 27       	eor	r27, r27
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4e80:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4e82:	0d b4       	in	r0, 0x2d	; 45
    4e84:	07 fe       	sbrs	r0, 7
    4e86:	fd cf       	rjmp	.-6      	; 0x4e82 <sd_raw_send_command+0x44>
    SPSR &= ~(1 << SPIF);
    4e88:	8d b5       	in	r24, 0x2d	; 45
    4e8a:	8f 77       	andi	r24, 0x7F	; 127
    4e8c:	8d bd       	out	0x2d, r24	; 45

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    4e8e:	bb 27       	eor	r27, r27
    4e90:	a7 2f       	mov	r26, r23
    4e92:	96 2f       	mov	r25, r22
    4e94:	85 2f       	mov	r24, r21
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4e96:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4e98:	0d b4       	in	r0, 0x2d	; 45
    4e9a:	07 fe       	sbrs	r0, 7
    4e9c:	fd cf       	rjmp	.-6      	; 0x4e98 <sd_raw_send_command+0x5a>
    SPSR &= ~(1 << SPIF);
    4e9e:	8d b5       	in	r24, 0x2d	; 45
    4ea0:	8f 77       	andi	r24, 0x7F	; 127
    4ea2:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4ea4:	4e bd       	out	0x2e, r20	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4ea6:	0d b4       	in	r0, 0x2d	; 45
    4ea8:	07 fe       	sbrs	r0, 7
    4eaa:	fd cf       	rjmp	.-6      	; 0x4ea6 <sd_raw_send_command+0x68>
    SPSR &= ~(1 << SPIF);
    4eac:	8d b5       	in	r24, 0x2d	; 45
    4eae:	8f 77       	andi	r24, 0x7F	; 127
    4eb0:	8d bd       	out	0x2d, r24	; 45
    sd_raw_send_byte(0x40 | command);
    sd_raw_send_byte((arg >> 24) & 0xff);
    sd_raw_send_byte((arg >> 16) & 0xff);
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    switch(command)
    4eb2:	22 23       	and	r18, r18
    4eb4:	19 f0       	breq	.+6      	; 0x4ebc <sd_raw_send_command+0x7e>
    4eb6:	28 30       	cpi	r18, 0x08	; 8
    4eb8:	69 f4       	brne	.+26     	; 0x4ed4 <sd_raw_send_command+0x96>
    4eba:	06 c0       	rjmp	.+12     	; 0x4ec8 <sd_raw_send_command+0x8a>
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4ebc:	85 e9       	ldi	r24, 0x95	; 149
    4ebe:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4ec0:	0d b4       	in	r0, 0x2d	; 45
    4ec2:	07 fe       	sbrs	r0, 7
    4ec4:	fd cf       	rjmp	.-6      	; 0x4ec0 <sd_raw_send_command+0x82>
    4ec6:	0b c0       	rjmp	.+22     	; 0x4ede <sd_raw_send_command+0xa0>
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4ec8:	87 e8       	ldi	r24, 0x87	; 135
    4eca:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4ecc:	0d b4       	in	r0, 0x2d	; 45
    4ece:	07 fe       	sbrs	r0, 7
    4ed0:	fd cf       	rjmp	.-6      	; 0x4ecc <sd_raw_send_command+0x8e>
    4ed2:	05 c0       	rjmp	.+10     	; 0x4ede <sd_raw_send_command+0xa0>
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    4ed4:	8f ef       	ldi	r24, 0xFF	; 255
    4ed6:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    4ed8:	0d b4       	in	r0, 0x2d	; 45
    4eda:	07 fe       	sbrs	r0, 7
    4edc:	fd cf       	rjmp	.-6      	; 0x4ed8 <sd_raw_send_command+0x9a>
    SPSR &= ~(1 << SPIF);
    4ede:	8d b5       	in	r24, 0x2d	; 45
    4ee0:	8f 77       	andi	r24, 0x7F	; 127
    4ee2:	8d bd       	out	0x2d, r24	; 45
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4ee6:	2f ef       	ldi	r18, 0xFF	; 255
    4ee8:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    4eea:	0d b4       	in	r0, 0x2d	; 45
    4eec:	07 fe       	sbrs	r0, 7
    4eee:	fd cf       	rjmp	.-6      	; 0x4eea <sd_raw_send_command+0xac>
    SPSR &= ~(1 << SPIF);
    4ef0:	8d b5       	in	r24, 0x2d	; 45
    4ef2:	8f 77       	andi	r24, 0x7F	; 127
    4ef4:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    4ef6:	8e b5       	in	r24, 0x2e	; 46
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
        if(response != 0xff)
    4ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    4efa:	19 f4       	brne	.+6      	; 0x4f02 <sd_raw_send_command+0xc4>
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    4efc:	9f 5f       	subi	r25, 0xFF	; 255
    4efe:	9a 30       	cpi	r25, 0x0A	; 10
    4f00:	99 f7       	brne	.-26     	; 0x4ee8 <sd_raw_send_command+0xaa>
        if(response != 0xff)
            break;
    }

    return response;
}
    4f02:	08 95       	ret

00004f04 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    4f04:	8f 92       	push	r8
    4f06:	9f 92       	push	r9
    4f08:	af 92       	push	r10
    4f0a:	bf 92       	push	r11
    4f0c:	cf 92       	push	r12
    4f0e:	df 92       	push	r13
    4f10:	ef 92       	push	r14
    4f12:	ff 92       	push	r15
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	81 f0       	breq	.+32     	; 0x4f42 <sd_raw_get_info+0x3e>
        return 0;

    memset(info, 0, sizeof(*info));
    4f22:	8d e1       	ldi	r24, 0x1D	; 29
    4f24:	fe 01       	movw	r30, r28
    4f26:	11 92       	st	Z+, r1
    4f28:	8a 95       	dec	r24
    4f2a:	e9 f7       	brne	.-6      	; 0x4f26 <sd_raw_get_info+0x22>

    select_card();
    4f2c:	28 98       	cbi	0x05, 0	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    4f2e:	8a e0       	ldi	r24, 0x0A	; 10
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	50 e0       	ldi	r21, 0x00	; 0
    4f34:	60 e0       	ldi	r22, 0x00	; 0
    4f36:	70 e0       	ldi	r23, 0x00	; 0
    4f38:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    4f3c:	88 23       	and	r24, r24
    4f3e:	19 f0       	breq	.+6      	; 0x4f46 <sd_raw_get_info+0x42>
    {
        unselect_card();
    4f40:	28 9a       	sbi	0x05, 0	; 5
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	21 c1       	rjmp	.+578    	; 0x5188 <sd_raw_get_info+0x284>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4f46:	9f ef       	ldi	r25, 0xFF	; 255
    4f48:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    4f4a:	0d b4       	in	r0, 0x2d	; 45
    4f4c:	07 fe       	sbrs	r0, 7
    4f4e:	fd cf       	rjmp	.-6      	; 0x4f4a <sd_raw_get_info+0x46>
    SPSR &= ~(1 << SPIF);
    4f50:	8d b5       	in	r24, 0x2d	; 45
    4f52:	8f 77       	andi	r24, 0x7F	; 127
    4f54:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    4f56:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4f58:	8e 3f       	cpi	r24, 0xFE	; 254
    4f5a:	b1 f7       	brne	.-20     	; 0x4f48 <sd_raw_get_info+0x44>
    4f5c:	1c 2f       	mov	r17, r28
    4f5e:	ce 01       	movw	r24, r28
    4f60:	fc 01       	movw	r30, r24
    4f62:	60 e6       	ldi	r22, 0x60	; 96
    4f64:	70 e0       	ldi	r23, 0x00	; 0
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4f66:	0f ef       	ldi	r16, 0xFF	; 255
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    4f68:	9e 2f       	mov	r25, r30
    4f6a:	91 1b       	sub	r25, r17
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    4f6c:	0e bd       	out	0x2e, r16	; 46
    while(!(SPSR & (1 << SPIF)));
    4f6e:	0d b4       	in	r0, 0x2d	; 45
    4f70:	07 fe       	sbrs	r0, 7
    4f72:	fd cf       	rjmp	.-6      	; 0x4f6e <sd_raw_get_info+0x6a>
    SPSR &= ~(1 << SPIF);
    4f74:	8d b5       	in	r24, 0x2d	; 45
    4f76:	8f 77       	andi	r24, 0x7F	; 127
    4f78:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    4f7a:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        switch(i)
    4f7c:	98 30       	cpi	r25, 0x08	; 8
    4f7e:	28 f4       	brcc	.+10     	; 0x4f8a <sd_raw_get_info+0x86>
    4f80:	93 30       	cpi	r25, 0x03	; 3
    4f82:	88 f4       	brcc	.+34     	; 0x4fa6 <sd_raw_get_info+0xa2>
    4f84:	99 23       	and	r25, r25
    4f86:	59 f0       	breq	.+22     	; 0x4f9e <sd_raw_get_info+0x9a>
    4f88:	0c c0       	rjmp	.+24     	; 0x4fa2 <sd_raw_get_info+0x9e>
    4f8a:	9d 30       	cpi	r25, 0x0D	; 13
    4f8c:	18 f4       	brcc	.+6      	; 0x4f94 <sd_raw_get_info+0x90>
    4f8e:	99 30       	cpi	r25, 0x09	; 9
    4f90:	70 f4       	brcc	.+28     	; 0x4fae <sd_raw_get_info+0xaa>
    4f92:	0b c0       	rjmp	.+22     	; 0x4faa <sd_raw_get_info+0xa6>
    4f94:	9d 30       	cpi	r25, 0x0D	; 13
    4f96:	19 f1       	breq	.+70     	; 0x4fde <sd_raw_get_info+0xda>
    4f98:	9e 30       	cpi	r25, 0x0E	; 14
    4f9a:	69 f5       	brne	.+90     	; 0x4ff6 <sd_raw_get_info+0xf2>
    4f9c:	24 c0       	rjmp	.+72     	; 0x4fe6 <sd_raw_get_info+0xe2>
        {
            case 0:
                info->manufacturer = b;
    4f9e:	28 83       	st	Y, r18
    4fa0:	2a c0       	rjmp	.+84     	; 0x4ff6 <sd_raw_get_info+0xf2>
                break;
            case 1:
            case 2:
                info->oem[i - 1] = b;
    4fa2:	20 83       	st	Z, r18
    4fa4:	28 c0       	rjmp	.+80     	; 0x4ff6 <sd_raw_get_info+0xf2>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    4fa6:	21 83       	std	Z+1, r18	; 0x01
    4fa8:	26 c0       	rjmp	.+76     	; 0x4ff6 <sd_raw_get_info+0xf2>
                break;
            case 8:
                info->revision = b;
    4faa:	2a 87       	std	Y+10, r18	; 0x0a
    4fac:	24 c0       	rjmp	.+72     	; 0x4ff6 <sd_raw_get_info+0xf2>
                break;
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e0       	ldi	r20, 0x00	; 0
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	06 2e       	mov	r0, r22
    4fb6:	04 c0       	rjmp	.+8      	; 0x4fc0 <sd_raw_get_info+0xbc>
    4fb8:	22 0f       	add	r18, r18
    4fba:	33 1f       	adc	r19, r19
    4fbc:	44 1f       	adc	r20, r20
    4fbe:	55 1f       	adc	r21, r21
    4fc0:	0a 94       	dec	r0
    4fc2:	d2 f7       	brpl	.-12     	; 0x4fb8 <sd_raw_get_info+0xb4>
    4fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4fc8:	ad 85       	ldd	r26, Y+13	; 0x0d
    4fca:	be 85       	ldd	r27, Y+14	; 0x0e
    4fcc:	82 2b       	or	r24, r18
    4fce:	93 2b       	or	r25, r19
    4fd0:	a4 2b       	or	r26, r20
    4fd2:	b5 2b       	or	r27, r21
    4fd4:	8b 87       	std	Y+11, r24	; 0x0b
    4fd6:	9c 87       	std	Y+12, r25	; 0x0c
    4fd8:	ad 87       	std	Y+13, r26	; 0x0d
    4fda:	be 87       	std	Y+14, r27	; 0x0e
    4fdc:	0c c0       	rjmp	.+24     	; 0x4ff6 <sd_raw_get_info+0xf2>
                break;
            case 13:
                info->manufacturing_year = b << 4;
    4fde:	22 95       	swap	r18
    4fe0:	20 7f       	andi	r18, 0xF0	; 240
    4fe2:	2f 87       	std	Y+15, r18	; 0x0f
    4fe4:	08 c0       	rjmp	.+16     	; 0x4ff6 <sd_raw_get_info+0xf2>
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
    4fe6:	92 2f       	mov	r25, r18
    4fe8:	92 95       	swap	r25
    4fea:	9f 70       	andi	r25, 0x0F	; 15
    4fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    4fee:	89 2b       	or	r24, r25
    4ff0:	8f 87       	std	Y+15, r24	; 0x0f
                info->manufacturing_month = b & 0x0f;
    4ff2:	2f 70       	andi	r18, 0x0F	; 15
    4ff4:	28 8b       	std	Y+16, r18	; 0x10
    4ff6:	31 96       	adiw	r30, 0x01	; 1
    4ff8:	68 50       	subi	r22, 0x08	; 8
    4ffa:	70 40       	sbci	r23, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    4ffc:	8f ef       	ldi	r24, 0xFF	; 255
    4ffe:	60 3d       	cpi	r22, 0xD0	; 208
    5000:	78 07       	cpc	r23, r24
    5002:	09 f0       	breq	.+2      	; 0x5006 <sd_raw_get_info+0x102>
    5004:	b1 cf       	rjmp	.-158    	; 0x4f68 <sd_raw_get_info+0x64>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    5006:	89 e0       	ldi	r24, 0x09	; 9
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	50 e0       	ldi	r21, 0x00	; 0
    500c:	60 e0       	ldi	r22, 0x00	; 0
    500e:	70 e0       	ldi	r23, 0x00	; 0
    5010:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    5014:	88 23       	and	r24, r24
    5016:	09 f0       	breq	.+2      	; 0x501a <sd_raw_get_info+0x116>
    5018:	93 cf       	rjmp	.-218    	; 0x4f40 <sd_raw_get_info+0x3c>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    501a:	9f ef       	ldi	r25, 0xFF	; 255
    501c:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    501e:	0d b4       	in	r0, 0x2d	; 45
    5020:	07 fe       	sbrs	r0, 7
    5022:	fd cf       	rjmp	.-6      	; 0x501e <sd_raw_get_info+0x11a>
    SPSR &= ~(1 << SPIF);
    5024:	8d b5       	in	r24, 0x2d	; 45
    5026:	8f 77       	andi	r24, 0x7F	; 127
    5028:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    502a:	8e b5       	in	r24, 0x2e	; 46
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    502c:	8e 3f       	cpi	r24, 0xFE	; 254
    502e:	b1 f7       	brne	.-20     	; 0x501c <sd_raw_get_info+0x118>
            info->format = (b & 0x0c) >> 2;
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    5030:	80 91 31 04 	lds	r24, 0x0431
    5034:	c8 2e       	mov	r12, r24
    5036:	dd 24       	eor	r13, r13
    5038:	e2 e0       	ldi	r30, 0x02	; 2
    503a:	ce 22       	and	r12, r30
    503c:	dd 24       	eor	r13, r13
    503e:	99 24       	eor	r9, r9
    5040:	bb 24       	eor	r11, r11
    5042:	ee 24       	eor	r14, r14
    5044:	ff 24       	eor	r15, r15
    5046:	10 e0       	ldi	r17, 0x00	; 0
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5048:	88 24       	eor	r8, r8
    504a:	8a 94       	dec	r8
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    504c:	aa 24       	eor	r10, r10
    504e:	a3 94       	inc	r10
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5050:	8e bc       	out	0x2e, r8	; 46
    while(!(SPSR & (1 << SPIF)));
    5052:	0d b4       	in	r0, 0x2d	; 45
    5054:	07 fe       	sbrs	r0, 7
    5056:	fd cf       	rjmp	.-6      	; 0x5052 <sd_raw_get_info+0x14e>
    SPSR &= ~(1 << SPIF);
    5058:	8d b5       	in	r24, 0x2d	; 45
    505a:	8f 77       	andi	r24, 0x7F	; 127
    505c:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    505e:	2e b5       	in	r18, 0x2e	; 46
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();

        if(i == 14)
    5060:	1e 30       	cpi	r17, 0x0E	; 14
    5062:	81 f4       	brne	.+32     	; 0x5084 <sd_raw_get_info+0x180>
        {
            if(b & 0x40)
    5064:	82 2f       	mov	r24, r18
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	26 fd       	sbrc	r18, 6
                info->flag_copy = 1;
    506a:	a9 8e       	std	Y+25, r10	; 0x19
            if(b & 0x20)
    506c:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    506e:	aa 8e       	std	Y+26, r10	; 0x1a
            if(b & 0x10)
    5070:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    5072:	ab 8e       	std	Y+27, r10	; 0x1b
            info->format = (b & 0x0c) >> 2;
    5074:	8c 70       	andi	r24, 0x0C	; 12
    5076:	90 70       	andi	r25, 0x00	; 0
    5078:	95 95       	asr	r25
    507a:	87 95       	ror	r24
    507c:	95 95       	asr	r25
    507e:	87 95       	ror	r24
    5080:	8c 8f       	std	Y+28, r24	; 0x1c
    5082:	7c c0       	rjmp	.+248    	; 0x517c <sd_raw_get_info+0x278>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    5084:	c1 14       	cp	r12, r1
    5086:	d1 04       	cpc	r13, r1
    5088:	39 f1       	breq	.+78     	; 0x50d8 <sd_raw_get_info+0x1d4>
            {
                switch(i)
    508a:	17 30       	cpi	r17, 0x07	; 7
    508c:	29 f0       	breq	.+10     	; 0x5098 <sd_raw_get_info+0x194>
    508e:	17 30       	cpi	r17, 0x07	; 7
    5090:	50 f0       	brcs	.+20     	; 0x50a6 <sd_raw_get_info+0x1a2>
    5092:	1a 30       	cpi	r17, 0x0A	; 10
    5094:	40 f4       	brcc	.+16     	; 0x50a6 <sd_raw_get_info+0x1a2>
    5096:	01 c0       	rjmp	.+2      	; 0x509a <sd_raw_get_info+0x196>
                {
                    case 7:
                        b &= 0x3f;
    5098:	2f 73       	andi	r18, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    509a:	9e 2d       	mov	r25, r14
    509c:	88 27       	eor	r24, r24
                        csd_c_size |= b;
    509e:	e2 2e       	mov	r14, r18
    50a0:	ff 24       	eor	r15, r15
    50a2:	e8 2a       	or	r14, r24
    50a4:	f9 2a       	or	r15, r25
                        break;
                }
                if(i == 9)
    50a6:	19 30       	cpi	r17, 0x09	; 9
    50a8:	09 f0       	breq	.+2      	; 0x50ac <sd_raw_get_info+0x1a8>
    50aa:	68 c0       	rjmp	.+208    	; 0x517c <sd_raw_get_info+0x278>
                {
                    ++csd_c_size;
    50ac:	08 94       	sec
    50ae:	e1 1c       	adc	r14, r1
    50b0:	f1 1c       	adc	r15, r1
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    50b2:	97 01       	movw	r18, r14
    50b4:	40 e0       	ldi	r20, 0x00	; 0
    50b6:	50 e0       	ldi	r21, 0x00	; 0
    50b8:	60 e0       	ldi	r22, 0x00	; 0
    50ba:	70 e0       	ldi	r23, 0x00	; 0
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	03 e1       	ldi	r16, 0x13	; 19
    50c2:	0e 94 87 43 	call	0x870e	; 0x870e <__ashldi3>
    50c6:	29 8b       	std	Y+17, r18	; 0x11
    50c8:	3a 8b       	std	Y+18, r19	; 0x12
    50ca:	4b 8b       	std	Y+19, r20	; 0x13
    50cc:	5c 8b       	std	Y+20, r21	; 0x14
    50ce:	6d 8b       	std	Y+21, r22	; 0x15
    50d0:	7e 8b       	std	Y+22, r23	; 0x16
    50d2:	8f 8b       	std	Y+23, r24	; 0x17
    50d4:	98 8f       	std	Y+24, r25	; 0x18
    50d6:	52 c0       	rjmp	.+164    	; 0x517c <sd_raw_get_info+0x278>
                }
            }
            else
#endif
            {
                switch(i)
    50d8:	17 30       	cpi	r17, 0x07	; 7
    50da:	d9 f0       	breq	.+54     	; 0x5112 <sd_raw_get_info+0x20e>
    50dc:	18 30       	cpi	r17, 0x08	; 8
    50de:	30 f4       	brcc	.+12     	; 0x50ec <sd_raw_get_info+0x1e8>
    50e0:	15 30       	cpi	r17, 0x05	; 5
    50e2:	61 f0       	breq	.+24     	; 0x50fc <sd_raw_get_info+0x1f8>
    50e4:	16 30       	cpi	r17, 0x06	; 6
    50e6:	09 f0       	breq	.+2      	; 0x50ea <sd_raw_get_info+0x1e6>
    50e8:	49 c0       	rjmp	.+146    	; 0x517c <sd_raw_get_info+0x278>
    50ea:	0c c0       	rjmp	.+24     	; 0x5104 <sd_raw_get_info+0x200>
    50ec:	19 30       	cpi	r17, 0x09	; 9
    50ee:	31 f1       	breq	.+76     	; 0x513c <sd_raw_get_info+0x238>
    50f0:	19 30       	cpi	r17, 0x09	; 9
    50f2:	c0 f0       	brcs	.+48     	; 0x5124 <sd_raw_get_info+0x220>
    50f4:	1a 30       	cpi	r17, 0x0A	; 10
    50f6:	09 f0       	breq	.+2      	; 0x50fa <sd_raw_get_info+0x1f6>
    50f8:	41 c0       	rjmp	.+130    	; 0x517c <sd_raw_get_info+0x278>
    50fa:	25 c0       	rjmp	.+74     	; 0x5146 <sd_raw_get_info+0x242>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    50fc:	7f e0       	ldi	r23, 0x0F	; 15
    50fe:	97 2e       	mov	r9, r23
    5100:	92 22       	and	r9, r18
    5102:	3c c0       	rjmp	.+120    	; 0x517c <sd_raw_get_info+0x278>
                        break;
                    case 6:
                        csd_c_size = b & 0x03;
    5104:	82 2f       	mov	r24, r18
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	83 70       	andi	r24, 0x03	; 3
    510a:	90 70       	andi	r25, 0x00	; 0
                        csd_c_size <<= 8;
    510c:	f8 2e       	mov	r15, r24
    510e:	ee 24       	eor	r14, r14
    5110:	35 c0       	rjmp	.+106    	; 0x517c <sd_raw_get_info+0x278>
                        break;
                    case 7:
                        csd_c_size |= b;
    5112:	82 2f       	mov	r24, r18
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	e8 2a       	or	r14, r24
    5118:	f9 2a       	or	r15, r25
                        csd_c_size <<= 2;
    511a:	ee 0c       	add	r14, r14
    511c:	ff 1c       	adc	r15, r15
    511e:	ee 0c       	add	r14, r14
    5120:	ff 1c       	adc	r15, r15
    5122:	2c c0       	rjmp	.+88     	; 0x517c <sd_raw_get_info+0x278>
                        break;
                    case 8:
                        csd_c_size |= b >> 6;
    5124:	22 95       	swap	r18
    5126:	26 95       	lsr	r18
    5128:	26 95       	lsr	r18
    512a:	23 70       	andi	r18, 0x03	; 3
    512c:	82 2f       	mov	r24, r18
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	e8 2a       	or	r14, r24
    5132:	f9 2a       	or	r15, r25
                        ++csd_c_size;
    5134:	08 94       	sec
    5136:	e1 1c       	adc	r14, r1
    5138:	f1 1c       	adc	r15, r1
    513a:	20 c0       	rjmp	.+64     	; 0x517c <sd_raw_get_info+0x278>
                        break;
                    case 9:
                        csd_c_size_mult = b & 0x03;
    513c:	43 e0       	ldi	r20, 0x03	; 3
    513e:	b4 2e       	mov	r11, r20
    5140:	b2 22       	and	r11, r18
                        csd_c_size_mult <<= 1;
    5142:	bb 0c       	add	r11, r11
    5144:	1b c0       	rjmp	.+54     	; 0x517c <sd_raw_get_info+0x278>
                        break;
                    case 10:
                        csd_c_size_mult |= b >> 7;
    5146:	22 1f       	adc	r18, r18
    5148:	22 27       	eor	r18, r18
    514a:	22 1f       	adc	r18, r18
    514c:	b2 2a       	or	r11, r18

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    514e:	97 01       	movw	r18, r14
    5150:	40 e0       	ldi	r20, 0x00	; 0
    5152:	50 e0       	ldi	r21, 0x00	; 0
    5154:	e9 2d       	mov	r30, r9
    5156:	f0 e0       	ldi	r31, 0x00	; 0
    5158:	32 96       	adiw	r30, 0x02	; 2
    515a:	eb 0d       	add	r30, r11
    515c:	f1 1d       	adc	r31, r1
    515e:	04 c0       	rjmp	.+8      	; 0x5168 <sd_raw_get_info+0x264>
    5160:	22 0f       	add	r18, r18
    5162:	33 1f       	adc	r19, r19
    5164:	44 1f       	adc	r20, r20
    5166:	55 1f       	adc	r21, r21
    5168:	ea 95       	dec	r30
    516a:	d2 f7       	brpl	.-12     	; 0x5160 <sd_raw_get_info+0x25c>
    516c:	29 8b       	std	Y+17, r18	; 0x11
    516e:	3a 8b       	std	Y+18, r19	; 0x12
    5170:	4b 8b       	std	Y+19, r20	; 0x13
    5172:	5c 8b       	std	Y+20, r21	; 0x14
    5174:	1d 8a       	std	Y+21, r1	; 0x15
    5176:	1e 8a       	std	Y+22, r1	; 0x16
    5178:	1f 8a       	std	Y+23, r1	; 0x17
    517a:	18 8e       	std	Y+24, r1	; 0x18
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    517c:	1f 5f       	subi	r17, 0xFF	; 255
    517e:	12 31       	cpi	r17, 0x12	; 18
    5180:	09 f0       	breq	.+2      	; 0x5184 <sd_raw_get_info+0x280>
    5182:	66 cf       	rjmp	.-308    	; 0x5050 <sd_raw_get_info+0x14c>
                }
            }
        }
    }

    unselect_card();
    5184:	28 9a       	sbi	0x05, 0	; 5
    5186:	81 e0       	ldi	r24, 0x01	; 1

    return 1;
}
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	1f 91       	pop	r17
    518e:	0f 91       	pop	r16
    5190:	ff 90       	pop	r15
    5192:	ef 90       	pop	r14
    5194:	df 90       	pop	r13
    5196:	cf 90       	pop	r12
    5198:	bf 90       	pop	r11
    519a:	af 90       	pop	r10
    519c:	9f 90       	pop	r9
    519e:	8f 90       	pop	r8
    51a0:	08 95       	ret

000051a2 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    51a2:	2f 92       	push	r2
    51a4:	3f 92       	push	r3
    51a6:	4f 92       	push	r4
    51a8:	5f 92       	push	r5
    51aa:	6f 92       	push	r6
    51ac:	7f 92       	push	r7
    51ae:	8f 92       	push	r8
    51b0:	9f 92       	push	r9
    51b2:	af 92       	push	r10
    51b4:	bf 92       	push	r11
    51b6:	cf 92       	push	r12
    51b8:	df 92       	push	r13
    51ba:	ef 92       	push	r14
    51bc:	ff 92       	push	r15
    51be:	0f 93       	push	r16
    51c0:	1f 93       	push	r17
    51c2:	df 93       	push	r29
    51c4:	cf 93       	push	r28
    51c6:	cd b7       	in	r28, 0x3d	; 61
    51c8:	de b7       	in	r29, 0x3e	; 62
    51ca:	2c 97       	sbiw	r28, 0x0c	; 12
    51cc:	0f b6       	in	r0, 0x3f	; 63
    51ce:	f8 94       	cli
    51d0:	de bf       	out	0x3e, r29	; 62
    51d2:	0f be       	out	0x3f, r0	; 63
    51d4:	cd bf       	out	0x3d, r28	; 61
    51d6:	39 01       	movw	r6, r18
    51d8:	4a 01       	movw	r8, r20
    51da:	5b 01       	movw	r10, r22
    51dc:	6c 01       	movw	r12, r24
    51de:	1a 83       	std	Y+2, r17	; 0x02
    51e0:	09 83       	std	Y+1, r16	; 0x01
    51e2:	fc 82       	std	Y+4, r15	; 0x04
    51e4:	eb 82       	std	Y+3, r14	; 0x03
    51e6:	90 c1       	rjmp	.+800    	; 0x5508 <sd_raw_write+0x366>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    51e8:	bf ef       	ldi	r27, 0xFF	; 255
    51ea:	4b 2e       	mov	r4, r27
    51ec:	b1 e0       	ldi	r27, 0x01	; 1
    51ee:	5b 2e       	mov	r5, r27
    51f0:	46 20       	and	r4, r6
    51f2:	57 20       	and	r5, r7
        block_address = offset - block_offset;
    51f4:	92 01       	movw	r18, r4
    51f6:	a6 2d       	mov	r26, r6
    51f8:	a4 19       	sub	r26, r4
    51fa:	aa 87       	std	Y+10, r26	; 0x0a
    51fc:	e1 e0       	ldi	r30, 0x01	; 1
    51fe:	6a 16       	cp	r6, r26
    5200:	08 f0       	brcs	.+2      	; 0x5204 <sd_raw_write+0x62>
    5202:	e0 e0       	ldi	r30, 0x00	; 0
    5204:	87 2d       	mov	r24, r7
    5206:	83 1b       	sub	r24, r19
    5208:	21 e0       	ldi	r18, 0x01	; 1
    520a:	78 16       	cp	r7, r24
    520c:	08 f0       	brcs	.+2      	; 0x5210 <sd_raw_write+0x6e>
    520e:	20 e0       	ldi	r18, 0x00	; 0
    5210:	b8 2f       	mov	r27, r24
    5212:	be 1b       	sub	r27, r30
    5214:	bd 83       	std	Y+5, r27	; 0x05
    5216:	91 e0       	ldi	r25, 0x01	; 1
    5218:	8b 17       	cp	r24, r27
    521a:	08 f0       	brcs	.+2      	; 0x521e <sd_raw_write+0x7c>
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	29 2b       	or	r18, r25
    5220:	e8 2d       	mov	r30, r8
    5222:	e2 1b       	sub	r30, r18
    5224:	ee 83       	std	Y+6, r30	; 0x06
    5226:	31 e0       	ldi	r19, 0x01	; 1
    5228:	8e 16       	cp	r8, r30
    522a:	08 f0       	brcs	.+2      	; 0x522e <sd_raw_write+0x8c>
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	f9 2d       	mov	r31, r9
    5230:	f3 1b       	sub	r31, r19
    5232:	ff 83       	std	Y+7, r31	; 0x07
    5234:	61 e0       	ldi	r22, 0x01	; 1
    5236:	9f 16       	cp	r9, r31
    5238:	08 f0       	brcs	.+2      	; 0x523c <sd_raw_write+0x9a>
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	2a 2d       	mov	r18, r10
    523e:	26 1b       	sub	r18, r22
    5240:	28 87       	std	Y+8, r18	; 0x08
    5242:	71 e0       	ldi	r23, 0x01	; 1
    5244:	a2 16       	cp	r10, r18
    5246:	08 f0       	brcs	.+2      	; 0x524a <sd_raw_write+0xa8>
    5248:	70 e0       	ldi	r23, 0x00	; 0
    524a:	2b 2c       	mov	r2, r11
    524c:	27 1a       	sub	r2, r23
    524e:	91 e0       	ldi	r25, 0x01	; 1
    5250:	b2 14       	cp	r11, r2
    5252:	08 f0       	brcs	.+2      	; 0x5256 <sd_raw_write+0xb4>
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	3c 2c       	mov	r3, r12
    5258:	39 1a       	sub	r3, r25
    525a:	91 e0       	ldi	r25, 0x01	; 1
    525c:	c3 14       	cp	r12, r3
    525e:	08 f0       	brcs	.+2      	; 0x5262 <sd_raw_write+0xc0>
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	3d 2d       	mov	r19, r13
    5264:	39 1b       	sub	r19, r25
    5266:	39 87       	std	Y+9, r19	; 0x09
        write_length = 512 - block_offset; /* write up to block border */
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	92 e0       	ldi	r25, 0x02	; 2
    526c:	84 19       	sub	r24, r4
    526e:	95 09       	sbc	r25, r5
    5270:	9c 87       	std	Y+12, r25	; 0x0c
    5272:	8b 87       	std	Y+11, r24	; 0x0b
    5274:	ab 81       	ldd	r26, Y+3	; 0x03
    5276:	bc 81       	ldd	r27, Y+4	; 0x04
    5278:	a8 17       	cp	r26, r24
    527a:	b9 07       	cpc	r27, r25
    527c:	10 f4       	brcc	.+4      	; 0x5282 <sd_raw_write+0xe0>
    527e:	bc 87       	std	Y+12, r27	; 0x0c
    5280:	ab 87       	std	Y+11, r26	; 0x0b
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    5282:	80 91 28 04 	lds	r24, 0x0428
    5286:	ba 85       	ldd	r27, Y+10	; 0x0a
    5288:	8b 17       	cp	r24, r27
    528a:	09 f5       	brne	.+66     	; 0x52ce <sd_raw_write+0x12c>
    528c:	80 91 29 04 	lds	r24, 0x0429
    5290:	ed 81       	ldd	r30, Y+5	; 0x05
    5292:	8e 17       	cp	r24, r30
    5294:	e1 f4       	brne	.+56     	; 0x52ce <sd_raw_write+0x12c>
    5296:	80 91 2a 04 	lds	r24, 0x042A
    529a:	fe 81       	ldd	r31, Y+6	; 0x06
    529c:	8f 17       	cp	r24, r31
    529e:	b9 f4       	brne	.+46     	; 0x52ce <sd_raw_write+0x12c>
    52a0:	80 91 2b 04 	lds	r24, 0x042B
    52a4:	2f 81       	ldd	r18, Y+7	; 0x07
    52a6:	82 17       	cp	r24, r18
    52a8:	91 f4       	brne	.+36     	; 0x52ce <sd_raw_write+0x12c>
    52aa:	80 91 2c 04 	lds	r24, 0x042C
    52ae:	38 85       	ldd	r19, Y+8	; 0x08
    52b0:	83 17       	cp	r24, r19
    52b2:	69 f4       	brne	.+26     	; 0x52ce <sd_raw_write+0x12c>
    52b4:	80 91 2d 04 	lds	r24, 0x042D
    52b8:	82 15       	cp	r24, r2
    52ba:	49 f4       	brne	.+18     	; 0x52ce <sd_raw_write+0x12c>
    52bc:	80 91 2e 04 	lds	r24, 0x042E
    52c0:	83 15       	cp	r24, r3
    52c2:	29 f4       	brne	.+10     	; 0x52ce <sd_raw_write+0x12c>
    52c4:	80 91 2f 04 	lds	r24, 0x042F
    52c8:	99 85       	ldd	r25, Y+9	; 0x09
    52ca:	89 17       	cp	r24, r25
    52cc:	a9 f1       	breq	.+106    	; 0x5338 <sd_raw_write+0x196>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    52ce:	0e 94 a5 2a 	call	0x554a	; 0x554a <sd_raw_sync>
    52d2:	88 23       	and	r24, r24
    52d4:	09 f4       	brne	.+2      	; 0x52d8 <sd_raw_write+0x136>
    52d6:	1f c1       	rjmp	.+574    	; 0x5516 <sd_raw_write+0x374>
                return 0;
#endif

            if(block_offset || write_length < 512)
    52d8:	41 14       	cp	r4, r1
    52da:	51 04       	cpc	r5, r1
    52dc:	29 f4       	brne	.+10     	; 0x52e8 <sd_raw_write+0x146>
    52de:	ab 85       	ldd	r26, Y+11	; 0x0b
    52e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    52e2:	a0 50       	subi	r26, 0x00	; 0
    52e4:	b2 40       	sbci	r27, 0x02	; 2
    52e6:	90 f4       	brcc	.+36     	; 0x530c <sd_raw_write+0x16a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    52e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    52ea:	3d 81       	ldd	r19, Y+5	; 0x05
    52ec:	4e 81       	ldd	r20, Y+6	; 0x06
    52ee:	5f 81       	ldd	r21, Y+7	; 0x07
    52f0:	68 85       	ldd	r22, Y+8	; 0x08
    52f2:	72 2d       	mov	r23, r2
    52f4:	83 2d       	mov	r24, r3
    52f6:	99 85       	ldd	r25, Y+9	; 0x09
    52f8:	08 e2       	ldi	r16, 0x28	; 40
    52fa:	12 e0       	ldi	r17, 0x02	; 2
    52fc:	e1 2c       	mov	r14, r1
    52fe:	a2 e0       	ldi	r26, 0x02	; 2
    5300:	fa 2e       	mov	r15, r26
    5302:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <sd_raw_read>
    5306:	88 23       	and	r24, r24
    5308:	09 f4       	brne	.+2      	; 0x530c <sd_raw_write+0x16a>
    530a:	05 c1       	rjmp	.+522    	; 0x5516 <sd_raw_write+0x374>
                    return 0;
            }
            raw_block_address = block_address;
    530c:	fa 85       	ldd	r31, Y+10	; 0x0a
    530e:	f0 93 28 04 	sts	0x0428, r31
    5312:	2d 81       	ldd	r18, Y+5	; 0x05
    5314:	20 93 29 04 	sts	0x0429, r18
    5318:	3e 81       	ldd	r19, Y+6	; 0x06
    531a:	30 93 2a 04 	sts	0x042A, r19
    531e:	8f 81       	ldd	r24, Y+7	; 0x07
    5320:	80 93 2b 04 	sts	0x042B, r24
    5324:	98 85       	ldd	r25, Y+8	; 0x08
    5326:	90 93 2c 04 	sts	0x042C, r25
    532a:	20 92 2d 04 	sts	0x042D, r2
    532e:	30 92 2e 04 	sts	0x042E, r3
    5332:	a9 85       	ldd	r26, Y+9	; 0x09
    5334:	a0 93 2f 04 	sts	0x042F, r26
        }

        if(buffer != raw_block)
    5338:	e9 81       	ldd	r30, Y+1	; 0x01
    533a:	fa 81       	ldd	r31, Y+2	; 0x02
    533c:	e8 52       	subi	r30, 0x28	; 40
    533e:	f2 40       	sbci	r31, 0x02	; 2
    5340:	a1 f0       	breq	.+40     	; 0x536a <sd_raw_write+0x1c8>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    5342:	92 01       	movw	r18, r4
    5344:	28 5d       	subi	r18, 0xD8	; 216
    5346:	3d 4f       	sbci	r19, 0xFD	; 253
    5348:	c9 01       	movw	r24, r18
    534a:	69 81       	ldd	r22, Y+1	; 0x01
    534c:	7a 81       	ldd	r23, Y+2	; 0x02
    534e:	4b 85       	ldd	r20, Y+11	; 0x0b
    5350:	5c 85       	ldd	r21, Y+12	; 0x0c
    5352:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    5356:	10 92 30 04 	sts	0x0430, r1

            if(length == write_length)
    535a:	8b 81       	ldd	r24, Y+3	; 0x03
    535c:	9c 81       	ldd	r25, Y+4	; 0x04
    535e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5360:	bc 85       	ldd	r27, Y+12	; 0x0c
    5362:	8a 17       	cp	r24, r26
    5364:	9b 07       	cpc	r25, r27
    5366:	09 f4       	brne	.+2      	; 0x536a <sd_raw_write+0x1c8>
    5368:	d4 c0       	rjmp	.+424    	; 0x5512 <sd_raw_write+0x370>
                return 1;
#endif
        }

        /* address card */
        select_card();
    536a:	28 98       	cbi	0x05, 0	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    536c:	80 91 31 04 	lds	r24, 0x0431
    5370:	82 ff       	sbrs	r24, 2
    5372:	0f c0       	rjmp	.+30     	; 0x5392 <sd_raw_write+0x1f0>
    5374:	2a 85       	ldd	r18, Y+10	; 0x0a
    5376:	3d 81       	ldd	r19, Y+5	; 0x05
    5378:	4e 81       	ldd	r20, Y+6	; 0x06
    537a:	5f 81       	ldd	r21, Y+7	; 0x07
    537c:	68 85       	ldd	r22, Y+8	; 0x08
    537e:	72 2d       	mov	r23, r2
    5380:	83 2d       	mov	r24, r3
    5382:	99 85       	ldd	r25, Y+9	; 0x09
    5384:	09 e0       	ldi	r16, 0x09	; 9
    5386:	0e 94 08 43 	call	0x8610	; 0x8610 <__lshrdi3>
    538a:	ba 01       	movw	r22, r20
    538c:	a9 01       	movw	r20, r18
    538e:	9b 01       	movw	r18, r22
    5390:	05 c0       	rjmp	.+10     	; 0x539c <sd_raw_write+0x1fa>
    5392:	8a 85       	ldd	r24, Y+10	; 0x0a
    5394:	9d 81       	ldd	r25, Y+5	; 0x05
    5396:	2e 81       	ldd	r18, Y+6	; 0x06
    5398:	3f 81       	ldd	r19, Y+7	; 0x07
    539a:	ac 01       	movw	r20, r24
    539c:	88 e1       	ldi	r24, 0x18	; 24
    539e:	b9 01       	movw	r22, r18
    53a0:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    53a4:	88 23       	and	r24, r24
    53a6:	11 f0       	breq	.+4      	; 0x53ac <sd_raw_write+0x20a>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    53a8:	28 9a       	sbi	0x05, 0	; 5
    53aa:	b5 c0       	rjmp	.+362    	; 0x5516 <sd_raw_write+0x374>
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    53ac:	be ef       	ldi	r27, 0xFE	; 254
    53ae:	be bd       	out	0x2e, r27	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    53b0:	0d b4       	in	r0, 0x2d	; 45
    53b2:	07 fe       	sbrs	r0, 7
    53b4:	fd cf       	rjmp	.-6      	; 0x53b0 <sd_raw_write+0x20e>
    SPSR &= ~(1 << SPIF);
    53b6:	8d b5       	in	r24, 0x2d	; 45
    53b8:	8f 77       	andi	r24, 0x7F	; 127
    53ba:	8d bd       	out	0x2d, r24	; 45
    53bc:	e8 e2       	ldi	r30, 0x28	; 40
    53be:	f2 e0       	ldi	r31, 0x02	; 2
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    53c0:	81 91       	ld	r24, Z+
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    53c2:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    53c4:	0d b4       	in	r0, 0x2d	; 45
    53c6:	07 fe       	sbrs	r0, 7
    53c8:	fd cf       	rjmp	.-6      	; 0x53c4 <sd_raw_write+0x222>
    SPSR &= ~(1 << SPIF);
    53ca:	8d b5       	in	r24, 0x2d	; 45
    53cc:	8f 77       	andi	r24, 0x7F	; 127
    53ce:	8d bd       	out	0x2d, r24	; 45
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    53d0:	24 e0       	ldi	r18, 0x04	; 4
    53d2:	e8 32       	cpi	r30, 0x28	; 40
    53d4:	f2 07       	cpc	r31, r18
    53d6:	a1 f7       	brne	.-24     	; 0x53c0 <sd_raw_write+0x21e>
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    53d8:	3f ef       	ldi	r19, 0xFF	; 255
    53da:	3e bd       	out	0x2e, r19	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    53dc:	0d b4       	in	r0, 0x2d	; 45
    53de:	07 fe       	sbrs	r0, 7
    53e0:	fd cf       	rjmp	.-6      	; 0x53dc <sd_raw_write+0x23a>
    SPSR &= ~(1 << SPIF);
    53e2:	8d b5       	in	r24, 0x2d	; 45
    53e4:	8f 77       	andi	r24, 0x7F	; 127
    53e6:	8d bd       	out	0x2d, r24	; 45
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
	//PORTD |= _BV(PD7);
    SPDR = b;
    53e8:	8f ef       	ldi	r24, 0xFF	; 255
    53ea:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    53ec:	0d b4       	in	r0, 0x2d	; 45
    53ee:	07 fe       	sbrs	r0, 7
    53f0:	fd cf       	rjmp	.-6      	; 0x53ec <sd_raw_write+0x24a>
    SPSR &= ~(1 << SPIF);
    53f2:	8d b5       	in	r24, 0x2d	; 45
    53f4:	8f 77       	andi	r24, 0x7F	; 127
    53f6:	8d bd       	out	0x2d, r24	; 45
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    53f8:	9f ef       	ldi	r25, 0xFF	; 255
    53fa:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    53fc:	0d b4       	in	r0, 0x2d	; 45
    53fe:	07 fe       	sbrs	r0, 7
    5400:	fd cf       	rjmp	.-6      	; 0x53fc <sd_raw_write+0x25a>
    SPSR &= ~(1 << SPIF);
    5402:	8d b5       	in	r24, 0x2d	; 45
    5404:	8f 77       	andi	r24, 0x7F	; 127
    5406:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5408:	8e b5       	in	r24, 0x2e	; 46
        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
        sd_raw_send_byte(0xff);

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    540a:	8f 3f       	cpi	r24, 0xFF	; 255
    540c:	a9 f7       	brne	.-22     	; 0x53f8 <sd_raw_write+0x256>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    540e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5410:	0d b4       	in	r0, 0x2d	; 45
    5412:	07 fe       	sbrs	r0, 7
    5414:	fd cf       	rjmp	.-6      	; 0x5410 <sd_raw_write+0x26e>
    SPSR &= ~(1 << SPIF);
    5416:	8d b5       	in	r24, 0x2d	; 45
    5418:	8f 77       	andi	r24, 0x7F	; 127
    541a:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    541c:	8e b5       	in	r24, 0x2e	; 46
        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();
    541e:	28 9a       	sbi	0x05, 0	; 5

        buffer += write_length;
    5420:	a9 81       	ldd	r26, Y+1	; 0x01
    5422:	ba 81       	ldd	r27, Y+2	; 0x02
    5424:	eb 85       	ldd	r30, Y+11	; 0x0b
    5426:	fc 85       	ldd	r31, Y+12	; 0x0c
    5428:	ae 0f       	add	r26, r30
    542a:	bf 1f       	adc	r27, r31
    542c:	ba 83       	std	Y+2, r27	; 0x02
    542e:	a9 83       	std	Y+1, r26	; 0x01
        offset += write_length;
    5430:	9f 01       	movw	r18, r30
    5432:	40 e0       	ldi	r20, 0x00	; 0
    5434:	50 e0       	ldi	r21, 0x00	; 0
    5436:	60 e0       	ldi	r22, 0x00	; 0
    5438:	70 e0       	ldi	r23, 0x00	; 0
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	46 2c       	mov	r4, r6
    5440:	4e 0e       	add	r4, r30
    5442:	f1 e0       	ldi	r31, 0x01	; 1
    5444:	46 14       	cp	r4, r6
    5446:	08 f0       	brcs	.+2      	; 0x544a <sd_raw_write+0x2a8>
    5448:	f0 e0       	ldi	r31, 0x00	; 0
    544a:	e7 2d       	mov	r30, r7
    544c:	e3 0f       	add	r30, r19
    544e:	a1 e0       	ldi	r26, 0x01	; 1
    5450:	e7 15       	cp	r30, r7
    5452:	08 f0       	brcs	.+2      	; 0x5456 <sd_raw_write+0x2b4>
    5454:	a0 e0       	ldi	r26, 0x00	; 0
    5456:	5f 2e       	mov	r5, r31
    5458:	5e 0e       	add	r5, r30
    545a:	f1 e0       	ldi	r31, 0x01	; 1
    545c:	5e 16       	cp	r5, r30
    545e:	08 f0       	brcs	.+2      	; 0x5462 <sd_raw_write+0x2c0>
    5460:	f0 e0       	ldi	r31, 0x00	; 0
    5462:	af 2b       	or	r26, r31
    5464:	e8 2d       	mov	r30, r8
    5466:	e4 0f       	add	r30, r20
    5468:	b1 e0       	ldi	r27, 0x01	; 1
    546a:	e8 15       	cp	r30, r8
    546c:	08 f0       	brcs	.+2      	; 0x5470 <sd_raw_write+0x2ce>
    546e:	b0 e0       	ldi	r27, 0x00	; 0
    5470:	ea 2e       	mov	r14, r26
    5472:	ee 0e       	add	r14, r30
    5474:	f1 e0       	ldi	r31, 0x01	; 1
    5476:	ee 16       	cp	r14, r30
    5478:	08 f0       	brcs	.+2      	; 0x547c <sd_raw_write+0x2da>
    547a:	f0 e0       	ldi	r31, 0x00	; 0
    547c:	bf 2b       	or	r27, r31
    547e:	e9 2d       	mov	r30, r9
    5480:	e5 0f       	add	r30, r21
    5482:	a1 e0       	ldi	r26, 0x01	; 1
    5484:	e9 15       	cp	r30, r9
    5486:	08 f0       	brcs	.+2      	; 0x548a <sd_raw_write+0x2e8>
    5488:	a0 e0       	ldi	r26, 0x00	; 0
    548a:	fb 2e       	mov	r15, r27
    548c:	fe 0e       	add	r15, r30
    548e:	f1 e0       	ldi	r31, 0x01	; 1
    5490:	fe 16       	cp	r15, r30
    5492:	08 f0       	brcs	.+2      	; 0x5496 <sd_raw_write+0x2f4>
    5494:	f0 e0       	ldi	r31, 0x00	; 0
    5496:	af 2b       	or	r26, r31
    5498:	ea 2d       	mov	r30, r10
    549a:	e6 0f       	add	r30, r22
    549c:	b1 e0       	ldi	r27, 0x01	; 1
    549e:	ea 15       	cp	r30, r10
    54a0:	08 f0       	brcs	.+2      	; 0x54a4 <sd_raw_write+0x302>
    54a2:	b0 e0       	ldi	r27, 0x00	; 0
    54a4:	0a 2f       	mov	r16, r26
    54a6:	0e 0f       	add	r16, r30
    54a8:	f1 e0       	ldi	r31, 0x01	; 1
    54aa:	0e 17       	cp	r16, r30
    54ac:	08 f0       	brcs	.+2      	; 0x54b0 <sd_raw_write+0x30e>
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	bf 2b       	or	r27, r31
    54b2:	eb 2d       	mov	r30, r11
    54b4:	e7 0f       	add	r30, r23
    54b6:	a1 e0       	ldi	r26, 0x01	; 1
    54b8:	eb 15       	cp	r30, r11
    54ba:	08 f0       	brcs	.+2      	; 0x54be <sd_raw_write+0x31c>
    54bc:	a0 e0       	ldi	r26, 0x00	; 0
    54be:	1b 2f       	mov	r17, r27
    54c0:	1e 0f       	add	r17, r30
    54c2:	f1 e0       	ldi	r31, 0x01	; 1
    54c4:	1e 17       	cp	r17, r30
    54c6:	08 f0       	brcs	.+2      	; 0x54ca <sd_raw_write+0x328>
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	af 2b       	or	r26, r31
    54cc:	ec 2d       	mov	r30, r12
    54ce:	e8 0f       	add	r30, r24
    54d0:	b1 e0       	ldi	r27, 0x01	; 1
    54d2:	ec 15       	cp	r30, r12
    54d4:	08 f0       	brcs	.+2      	; 0x54d8 <sd_raw_write+0x336>
    54d6:	b0 e0       	ldi	r27, 0x00	; 0
    54d8:	ae 0f       	add	r26, r30
    54da:	f1 e0       	ldi	r31, 0x01	; 1
    54dc:	ae 17       	cp	r26, r30
    54de:	08 f0       	brcs	.+2      	; 0x54e2 <sd_raw_write+0x340>
    54e0:	f0 e0       	ldi	r31, 0x00	; 0
    54e2:	bf 2b       	or	r27, r31
    54e4:	8d 2d       	mov	r24, r13
    54e6:	89 0f       	add	r24, r25
    54e8:	32 01       	movw	r6, r4
    54ea:	47 01       	movw	r8, r14
    54ec:	58 01       	movw	r10, r16
    54ee:	6d 01       	movw	r12, r26
    54f0:	d8 0e       	add	r13, r24
        length -= write_length;
    54f2:	2b 81       	ldd	r18, Y+3	; 0x03
    54f4:	3c 81       	ldd	r19, Y+4	; 0x04
    54f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    54f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    54fa:	28 1b       	sub	r18, r24
    54fc:	39 0b       	sbc	r19, r25
    54fe:	3c 83       	std	Y+4, r19	; 0x04
    5500:	2b 83       	std	Y+3, r18	; 0x03

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    5502:	91 e0       	ldi	r25, 0x01	; 1
    5504:	90 93 30 04 	sts	0x0430, r25
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    5508:	ab 81       	ldd	r26, Y+3	; 0x03
    550a:	bc 81       	ldd	r27, Y+4	; 0x04
    550c:	ab 2b       	or	r26, r27
    550e:	09 f0       	breq	.+2      	; 0x5512 <sd_raw_write+0x370>
    5510:	6b ce       	rjmp	.-810    	; 0x51e8 <sd_raw_write+0x46>
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	01 c0       	rjmp	.+2      	; 0x5518 <sd_raw_write+0x376>
    5516:	80 e0       	ldi	r24, 0x00	; 0
        raw_block_written = 1;
#endif
    }

    return 1;
}
    5518:	2c 96       	adiw	r28, 0x0c	; 12
    551a:	0f b6       	in	r0, 0x3f	; 63
    551c:	f8 94       	cli
    551e:	de bf       	out	0x3e, r29	; 62
    5520:	0f be       	out	0x3f, r0	; 63
    5522:	cd bf       	out	0x3d, r28	; 61
    5524:	cf 91       	pop	r28
    5526:	df 91       	pop	r29
    5528:	1f 91       	pop	r17
    552a:	0f 91       	pop	r16
    552c:	ff 90       	pop	r15
    552e:	ef 90       	pop	r14
    5530:	df 90       	pop	r13
    5532:	cf 90       	pop	r12
    5534:	bf 90       	pop	r11
    5536:	af 90       	pop	r10
    5538:	9f 90       	pop	r9
    553a:	8f 90       	pop	r8
    553c:	7f 90       	pop	r7
    553e:	6f 90       	pop	r6
    5540:	5f 90       	pop	r5
    5542:	4f 90       	pop	r4
    5544:	3f 90       	pop	r3
    5546:	2f 90       	pop	r2
    5548:	08 95       	ret

0000554a <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    554a:	ef 92       	push	r14
    554c:	ff 92       	push	r15
    554e:	0f 93       	push	r16
    5550:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    5552:	80 91 30 04 	lds	r24, 0x0430
    5556:	88 23       	and	r24, r24
    5558:	11 f0       	breq	.+4      	; 0x555e <sd_raw_sync+0x14>
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	1c c0       	rjmp	.+56     	; 0x5596 <sd_raw_sync+0x4c>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    555e:	20 91 28 04 	lds	r18, 0x0428
    5562:	30 91 29 04 	lds	r19, 0x0429
    5566:	40 91 2a 04 	lds	r20, 0x042A
    556a:	50 91 2b 04 	lds	r21, 0x042B
    556e:	60 91 2c 04 	lds	r22, 0x042C
    5572:	70 91 2d 04 	lds	r23, 0x042D
    5576:	80 91 2e 04 	lds	r24, 0x042E
    557a:	90 91 2f 04 	lds	r25, 0x042F
    557e:	08 e2       	ldi	r16, 0x28	; 40
    5580:	12 e0       	ldi	r17, 0x02	; 2
    5582:	e1 2c       	mov	r14, r1
    5584:	e2 e0       	ldi	r30, 0x02	; 2
    5586:	fe 2e       	mov	r15, r30
    5588:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <sd_raw_write>
    558c:	88 23       	and	r24, r24
    558e:	19 f0       	breq	.+6      	; 0x5596 <sd_raw_sync+0x4c>
        return 0;
    raw_block_written = 1;
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	80 93 30 04 	sts	0x0430, r24
#endif
    return 1;
}
    5596:	1f 91       	pop	r17
    5598:	0f 91       	pop	r16
    559a:	ff 90       	pop	r15
    559c:	ef 90       	pop	r14
    559e:	08 95       	ret

000055a0 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    55a0:	2f 92       	push	r2
    55a2:	3f 92       	push	r3
    55a4:	4f 92       	push	r4
    55a6:	5f 92       	push	r5
    55a8:	6f 92       	push	r6
    55aa:	7f 92       	push	r7
    55ac:	8f 92       	push	r8
    55ae:	9f 92       	push	r9
    55b0:	af 92       	push	r10
    55b2:	bf 92       	push	r11
    55b4:	cf 92       	push	r12
    55b6:	df 92       	push	r13
    55b8:	ef 92       	push	r14
    55ba:	ff 92       	push	r15
    55bc:	0f 93       	push	r16
    55be:	1f 93       	push	r17
    55c0:	df 93       	push	r29
    55c2:	cf 93       	push	r28
    55c4:	cd b7       	in	r28, 0x3d	; 61
    55c6:	de b7       	in	r29, 0x3e	; 62
    55c8:	29 97       	sbiw	r28, 0x09	; 9
    55ca:	0f b6       	in	r0, 0x3f	; 63
    55cc:	f8 94       	cli
    55ce:	de bf       	out	0x3e, r29	; 62
    55d0:	0f be       	out	0x3f, r0	; 63
    55d2:	cd bf       	out	0x3d, r28	; 61
    55d4:	39 01       	movw	r6, r18
    55d6:	4a 01       	movw	r8, r20
    55d8:	5b 01       	movw	r10, r22
    55da:	6c 01       	movw	r12, r24
    55dc:	28 01       	movw	r4, r16
    55de:	fa 82       	std	Y+2, r15	; 0x02
    55e0:	e9 82       	std	Y+1, r14	; 0x01
    55e2:	6b c1       	rjmp	.+726    	; 0x58ba <sd_raw_read+0x31a>
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    55e4:	ff ef       	ldi	r31, 0xFF	; 255
    55e6:	ef 2e       	mov	r14, r31
    55e8:	f1 e0       	ldi	r31, 0x01	; 1
    55ea:	ff 2e       	mov	r15, r31
    55ec:	e6 20       	and	r14, r6
    55ee:	f7 20       	and	r15, r7
        block_address = offset - block_offset;
    55f0:	97 01       	movw	r18, r14
    55f2:	a6 2d       	mov	r26, r6
    55f4:	ae 19       	sub	r26, r14
    55f6:	af 83       	std	Y+7, r26	; 0x07
    55f8:	e1 e0       	ldi	r30, 0x01	; 1
    55fa:	6a 16       	cp	r6, r26
    55fc:	08 f0       	brcs	.+2      	; 0x5600 <sd_raw_read+0x60>
    55fe:	e0 e0       	ldi	r30, 0x00	; 0
    5600:	87 2d       	mov	r24, r7
    5602:	83 1b       	sub	r24, r19
    5604:	21 e0       	ldi	r18, 0x01	; 1
    5606:	78 16       	cp	r7, r24
    5608:	08 f0       	brcs	.+2      	; 0x560c <sd_raw_read+0x6c>
    560a:	20 e0       	ldi	r18, 0x00	; 0
    560c:	b8 2f       	mov	r27, r24
    560e:	be 1b       	sub	r27, r30
    5610:	bb 83       	std	Y+3, r27	; 0x03
    5612:	91 e0       	ldi	r25, 0x01	; 1
    5614:	8b 17       	cp	r24, r27
    5616:	08 f0       	brcs	.+2      	; 0x561a <sd_raw_read+0x7a>
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	29 2b       	or	r18, r25
    561c:	38 2c       	mov	r3, r8
    561e:	32 1a       	sub	r3, r18
    5620:	31 e0       	ldi	r19, 0x01	; 1
    5622:	83 14       	cp	r8, r3
    5624:	08 f0       	brcs	.+2      	; 0x5628 <sd_raw_read+0x88>
    5626:	30 e0       	ldi	r19, 0x00	; 0
    5628:	19 2d       	mov	r17, r9
    562a:	13 1b       	sub	r17, r19
    562c:	61 e0       	ldi	r22, 0x01	; 1
    562e:	91 16       	cp	r9, r17
    5630:	08 f0       	brcs	.+2      	; 0x5634 <sd_raw_read+0x94>
    5632:	60 e0       	ldi	r22, 0x00	; 0
    5634:	ea 2d       	mov	r30, r10
    5636:	e6 1b       	sub	r30, r22
    5638:	ec 83       	std	Y+4, r30	; 0x04
    563a:	71 e0       	ldi	r23, 0x01	; 1
    563c:	ae 16       	cp	r10, r30
    563e:	08 f0       	brcs	.+2      	; 0x5642 <sd_raw_read+0xa2>
    5640:	70 e0       	ldi	r23, 0x00	; 0
    5642:	fb 2d       	mov	r31, r11
    5644:	f7 1b       	sub	r31, r23
    5646:	fd 83       	std	Y+5, r31	; 0x05
    5648:	91 e0       	ldi	r25, 0x01	; 1
    564a:	bf 16       	cp	r11, r31
    564c:	08 f0       	brcs	.+2      	; 0x5650 <sd_raw_read+0xb0>
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	2c 2c       	mov	r2, r12
    5652:	29 1a       	sub	r2, r25
    5654:	91 e0       	ldi	r25, 0x01	; 1
    5656:	c2 14       	cp	r12, r2
    5658:	08 f0       	brcs	.+2      	; 0x565c <sd_raw_read+0xbc>
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	2d 2d       	mov	r18, r13
    565e:	29 1b       	sub	r18, r25
    5660:	2e 83       	std	Y+6, r18	; 0x06
        read_length = 512 - block_offset; /* read up to block border */
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	92 e0       	ldi	r25, 0x02	; 2
    5666:	8e 19       	sub	r24, r14
    5668:	9f 09       	sbc	r25, r15
    566a:	99 87       	std	Y+9, r25	; 0x09
    566c:	88 87       	std	Y+8, r24	; 0x08
    566e:	a9 81       	ldd	r26, Y+1	; 0x01
    5670:	ba 81       	ldd	r27, Y+2	; 0x02
    5672:	a8 17       	cp	r26, r24
    5674:	b9 07       	cpc	r27, r25
    5676:	10 f4       	brcc	.+4      	; 0x567c <sd_raw_read+0xdc>
    5678:	b9 87       	std	Y+9, r27	; 0x09
    567a:	a8 87       	std	Y+8, r26	; 0x08
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    567c:	80 91 28 04 	lds	r24, 0x0428
    5680:	bf 81       	ldd	r27, Y+7	; 0x07
    5682:	8b 17       	cp	r24, r27
    5684:	09 f5       	brne	.+66     	; 0x56c8 <sd_raw_read+0x128>
    5686:	80 91 29 04 	lds	r24, 0x0429
    568a:	eb 81       	ldd	r30, Y+3	; 0x03
    568c:	8e 17       	cp	r24, r30
    568e:	e1 f4       	brne	.+56     	; 0x56c8 <sd_raw_read+0x128>
    5690:	80 91 2a 04 	lds	r24, 0x042A
    5694:	83 15       	cp	r24, r3
    5696:	c1 f4       	brne	.+48     	; 0x56c8 <sd_raw_read+0x128>
    5698:	80 91 2b 04 	lds	r24, 0x042B
    569c:	81 17       	cp	r24, r17
    569e:	a1 f4       	brne	.+40     	; 0x56c8 <sd_raw_read+0x128>
    56a0:	80 91 2c 04 	lds	r24, 0x042C
    56a4:	fc 81       	ldd	r31, Y+4	; 0x04
    56a6:	8f 17       	cp	r24, r31
    56a8:	79 f4       	brne	.+30     	; 0x56c8 <sd_raw_read+0x128>
    56aa:	80 91 2d 04 	lds	r24, 0x042D
    56ae:	2d 81       	ldd	r18, Y+5	; 0x05
    56b0:	82 17       	cp	r24, r18
    56b2:	51 f4       	brne	.+20     	; 0x56c8 <sd_raw_read+0x128>
    56b4:	80 91 2e 04 	lds	r24, 0x042E
    56b8:	82 15       	cp	r24, r2
    56ba:	31 f4       	brne	.+12     	; 0x56c8 <sd_raw_read+0x128>
    56bc:	80 91 2f 04 	lds	r24, 0x042F
    56c0:	3e 81       	ldd	r19, Y+6	; 0x06
    56c2:	83 17       	cp	r24, r19
    56c4:	09 f4       	brne	.+2      	; 0x56c8 <sd_raw_read+0x128>
    56c6:	83 c0       	rjmp	.+262    	; 0x57ce <sd_raw_read+0x22e>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    56c8:	0e 94 a5 2a 	call	0x554a	; 0x554a <sd_raw_sync>
    56cc:	88 23       	and	r24, r24
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <sd_raw_read+0x132>
    56d0:	fa c0       	rjmp	.+500    	; 0x58c6 <sd_raw_read+0x326>
                return 0;
#endif

            /* address card */
            select_card();
    56d2:	28 98       	cbi	0x05, 0	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    56d4:	80 91 31 04 	lds	r24, 0x0431
    56d8:	82 ff       	sbrs	r24, 2
    56da:	0f c0       	rjmp	.+30     	; 0x56fa <sd_raw_read+0x15a>
    56dc:	2f 81       	ldd	r18, Y+7	; 0x07
    56de:	3b 81       	ldd	r19, Y+3	; 0x03
    56e0:	43 2d       	mov	r20, r3
    56e2:	51 2f       	mov	r21, r17
    56e4:	6c 81       	ldd	r22, Y+4	; 0x04
    56e6:	7d 81       	ldd	r23, Y+5	; 0x05
    56e8:	82 2d       	mov	r24, r2
    56ea:	9e 81       	ldd	r25, Y+6	; 0x06
    56ec:	09 e0       	ldi	r16, 0x09	; 9
    56ee:	0e 94 08 43 	call	0x8610	; 0x8610 <__lshrdi3>
    56f2:	ba 01       	movw	r22, r20
    56f4:	a9 01       	movw	r20, r18
    56f6:	9b 01       	movw	r18, r22
    56f8:	05 c0       	rjmp	.+10     	; 0x5704 <sd_raw_read+0x164>
    56fa:	8f 81       	ldd	r24, Y+7	; 0x07
    56fc:	9b 81       	ldd	r25, Y+3	; 0x03
    56fe:	23 2d       	mov	r18, r3
    5700:	31 2f       	mov	r19, r17
    5702:	ac 01       	movw	r20, r24
    5704:	81 e1       	ldi	r24, 0x11	; 17
    5706:	b9 01       	movw	r22, r18
    5708:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    570c:	88 23       	and	r24, r24
    570e:	19 f0       	breq	.+6      	; 0x5716 <sd_raw_read+0x176>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    5710:	28 9a       	sbi	0x05, 0	; 5
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	d8 c0       	rjmp	.+432    	; 0x58c6 <sd_raw_read+0x326>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5716:	8f ef       	ldi	r24, 0xFF	; 255
    5718:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    571a:	0d b4       	in	r0, 0x2d	; 45
    571c:	07 fe       	sbrs	r0, 7
    571e:	fd cf       	rjmp	.-6      	; 0x571a <sd_raw_read+0x17a>
    SPSR &= ~(1 << SPIF);
    5720:	8d b5       	in	r24, 0x2d	; 45
    5722:	8f 77       	andi	r24, 0x7F	; 127
    5724:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5726:	8e b5       	in	r24, 0x2e	; 46
                unselect_card();
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    5728:	8e 3f       	cpi	r24, 0xFE	; 254
    572a:	a9 f7       	brne	.-22     	; 0x5716 <sd_raw_read+0x176>
    572c:	e8 e2       	ldi	r30, 0x28	; 40
    572e:	f2 e0       	ldi	r31, 0x02	; 2
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5730:	9f ef       	ldi	r25, 0xFF	; 255
    5732:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    5734:	0d b4       	in	r0, 0x2d	; 45
    5736:	07 fe       	sbrs	r0, 7
    5738:	fd cf       	rjmp	.-6      	; 0x5734 <sd_raw_read+0x194>
    SPSR &= ~(1 << SPIF);
    573a:	8d b5       	in	r24, 0x2d	; 45
    573c:	8f 77       	andi	r24, 0x7F	; 127
    573e:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5740:	8e b5       	in	r24, 0x2e	; 46
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    5742:	80 83       	st	Z, r24
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    5744:	a4 e0       	ldi	r26, 0x04	; 4
    5746:	e7 32       	cpi	r30, 0x27	; 39
    5748:	fa 07       	cpc	r31, r26
    574a:	11 f0       	breq	.+4      	; 0x5750 <sd_raw_read+0x1b0>
                *cache++ = sd_raw_rec_byte();
    574c:	31 96       	adiw	r30, 0x01	; 1
    574e:	f0 cf       	rjmp	.-32     	; 0x5730 <sd_raw_read+0x190>
            raw_block_address = block_address;
    5750:	bf 81       	ldd	r27, Y+7	; 0x07
    5752:	b0 93 28 04 	sts	0x0428, r27
    5756:	eb 81       	ldd	r30, Y+3	; 0x03
    5758:	e0 93 29 04 	sts	0x0429, r30
    575c:	30 92 2a 04 	sts	0x042A, r3
    5760:	10 93 2b 04 	sts	0x042B, r17
    5764:	fc 81       	ldd	r31, Y+4	; 0x04
    5766:	f0 93 2c 04 	sts	0x042C, r31
    576a:	2d 81       	ldd	r18, Y+5	; 0x05
    576c:	20 93 2d 04 	sts	0x042D, r18
    5770:	20 92 2e 04 	sts	0x042E, r2
    5774:	3e 81       	ldd	r19, Y+6	; 0x06
    5776:	30 93 2f 04 	sts	0x042F, r19

            memcpy(buffer, raw_block + block_offset, read_length);
    577a:	97 01       	movw	r18, r14
    577c:	28 5d       	subi	r18, 0xD8	; 216
    577e:	3d 4f       	sbci	r19, 0xFD	; 253
    5780:	c2 01       	movw	r24, r4
    5782:	b9 01       	movw	r22, r18
    5784:	48 85       	ldd	r20, Y+8	; 0x08
    5786:	59 85       	ldd	r21, Y+9	; 0x09
    5788:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <memcpy>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5790:	0d b4       	in	r0, 0x2d	; 45
    5792:	07 fe       	sbrs	r0, 7
    5794:	fd cf       	rjmp	.-6      	; 0x5790 <sd_raw_read+0x1f0>
    SPSR &= ~(1 << SPIF);
    5796:	8d b5       	in	r24, 0x2d	; 45
    5798:	8f 77       	andi	r24, 0x7F	; 127
    579a:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    579c:	8e b5       	in	r24, 0x2e	; 46
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    579e:	9f ef       	ldi	r25, 0xFF	; 255
    57a0:	9e bd       	out	0x2e, r25	; 46
    while(!(SPSR & (1 << SPIF)));
    57a2:	0d b4       	in	r0, 0x2d	; 45
    57a4:	07 fe       	sbrs	r0, 7
    57a6:	fd cf       	rjmp	.-6      	; 0x57a2 <sd_raw_read+0x202>
    SPSR &= ~(1 << SPIF);
    57a8:	8d b5       	in	r24, 0x2d	; 45
    57aa:	8f 77       	andi	r24, 0x7F	; 127
    57ac:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    57ae:	8e b5       	in	r24, 0x2e	; 46
            /* read crc16 */
            sd_raw_rec_byte();
            sd_raw_rec_byte();
            
            /* deaddress card */
            unselect_card();
    57b0:	28 9a       	sbi	0x05, 0	; 5
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    57b2:	af ef       	ldi	r26, 0xFF	; 255
    57b4:	ae bd       	out	0x2e, r26	; 46
    while(!(SPSR & (1 << SPIF)));
    57b6:	0d b4       	in	r0, 0x2d	; 45
    57b8:	07 fe       	sbrs	r0, 7
    57ba:	fd cf       	rjmp	.-6      	; 0x57b6 <sd_raw_read+0x216>
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;

            memcpy(buffer, raw_block + block_offset, read_length);
            buffer += read_length;
    57bc:	e8 85       	ldd	r30, Y+8	; 0x08
    57be:	f9 85       	ldd	r31, Y+9	; 0x09
    57c0:	4e 0e       	add	r4, r30
    57c2:	5f 1e       	adc	r5, r31
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    while(!(SPSR & (1 << SPIF)));
    SPSR &= ~(1 << SPIF);
    57c4:	8d b5       	in	r24, 0x2d	; 45
    57c6:	8f 77       	andi	r24, 0x7F	; 127
    57c8:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    57ca:	8e b5       	in	r24, 0x2e	; 46
    57cc:	0d c0       	rjmp	.+26     	; 0x57e8 <sd_raw_read+0x248>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    57ce:	97 01       	movw	r18, r14
    57d0:	28 5d       	subi	r18, 0xD8	; 216
    57d2:	3d 4f       	sbci	r19, 0xFD	; 253
    57d4:	c2 01       	movw	r24, r4
    57d6:	b9 01       	movw	r22, r18
    57d8:	48 85       	ldd	r20, Y+8	; 0x08
    57da:	59 85       	ldd	r21, Y+9	; 0x09
    57dc:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <memcpy>
            buffer += read_length;
    57e0:	28 85       	ldd	r18, Y+8	; 0x08
    57e2:	39 85       	ldd	r19, Y+9	; 0x09
    57e4:	42 0e       	add	r4, r18
    57e6:	53 1e       	adc	r5, r19
        }
#endif

        length -= read_length;
    57e8:	89 81       	ldd	r24, Y+1	; 0x01
    57ea:	9a 81       	ldd	r25, Y+2	; 0x02
    57ec:	a8 85       	ldd	r26, Y+8	; 0x08
    57ee:	b9 85       	ldd	r27, Y+9	; 0x09
    57f0:	8a 1b       	sub	r24, r26
    57f2:	9b 0b       	sbc	r25, r27
    57f4:	9a 83       	std	Y+2, r25	; 0x02
    57f6:	89 83       	std	Y+1, r24	; 0x01
        offset += read_length;
    57f8:	ad 01       	movw	r20, r26
    57fa:	60 e0       	ldi	r22, 0x00	; 0
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	80 e0       	ldi	r24, 0x00	; 0
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	a0 e0       	ldi	r26, 0x00	; 0
    5804:	b0 e0       	ldi	r27, 0x00	; 0
    5806:	26 2c       	mov	r2, r6
    5808:	24 0e       	add	r2, r20
    580a:	31 e0       	ldi	r19, 0x01	; 1
    580c:	26 14       	cp	r2, r6
    580e:	08 f0       	brcs	.+2      	; 0x5812 <sd_raw_read+0x272>
    5810:	30 e0       	ldi	r19, 0x00	; 0
    5812:	27 2d       	mov	r18, r7
    5814:	25 0f       	add	r18, r21
    5816:	e1 e0       	ldi	r30, 0x01	; 1
    5818:	27 15       	cp	r18, r7
    581a:	08 f0       	brcs	.+2      	; 0x581e <sd_raw_read+0x27e>
    581c:	e0 e0       	ldi	r30, 0x00	; 0
    581e:	33 2e       	mov	r3, r19
    5820:	32 0e       	add	r3, r18
    5822:	31 e0       	ldi	r19, 0x01	; 1
    5824:	32 16       	cp	r3, r18
    5826:	08 f0       	brcs	.+2      	; 0x582a <sd_raw_read+0x28a>
    5828:	30 e0       	ldi	r19, 0x00	; 0
    582a:	e3 2b       	or	r30, r19
    582c:	28 2d       	mov	r18, r8
    582e:	26 0f       	add	r18, r22
    5830:	f1 e0       	ldi	r31, 0x01	; 1
    5832:	28 15       	cp	r18, r8
    5834:	08 f0       	brcs	.+2      	; 0x5838 <sd_raw_read+0x298>
    5836:	f0 e0       	ldi	r31, 0x00	; 0
    5838:	ee 2e       	mov	r14, r30
    583a:	e2 0e       	add	r14, r18
    583c:	31 e0       	ldi	r19, 0x01	; 1
    583e:	e2 16       	cp	r14, r18
    5840:	08 f0       	brcs	.+2      	; 0x5844 <sd_raw_read+0x2a4>
    5842:	30 e0       	ldi	r19, 0x00	; 0
    5844:	f3 2b       	or	r31, r19
    5846:	29 2d       	mov	r18, r9
    5848:	27 0f       	add	r18, r23
    584a:	e1 e0       	ldi	r30, 0x01	; 1
    584c:	29 15       	cp	r18, r9
    584e:	08 f0       	brcs	.+2      	; 0x5852 <sd_raw_read+0x2b2>
    5850:	e0 e0       	ldi	r30, 0x00	; 0
    5852:	ff 2e       	mov	r15, r31
    5854:	f2 0e       	add	r15, r18
    5856:	31 e0       	ldi	r19, 0x01	; 1
    5858:	f2 16       	cp	r15, r18
    585a:	08 f0       	brcs	.+2      	; 0x585e <sd_raw_read+0x2be>
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	e3 2b       	or	r30, r19
    5860:	2a 2d       	mov	r18, r10
    5862:	28 0f       	add	r18, r24
    5864:	f1 e0       	ldi	r31, 0x01	; 1
    5866:	2a 15       	cp	r18, r10
    5868:	08 f0       	brcs	.+2      	; 0x586c <sd_raw_read+0x2cc>
    586a:	f0 e0       	ldi	r31, 0x00	; 0
    586c:	0e 2f       	mov	r16, r30
    586e:	02 0f       	add	r16, r18
    5870:	31 e0       	ldi	r19, 0x01	; 1
    5872:	02 17       	cp	r16, r18
    5874:	08 f0       	brcs	.+2      	; 0x5878 <sd_raw_read+0x2d8>
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	f3 2b       	or	r31, r19
    587a:	2b 2d       	mov	r18, r11
    587c:	29 0f       	add	r18, r25
    587e:	e1 e0       	ldi	r30, 0x01	; 1
    5880:	2b 15       	cp	r18, r11
    5882:	08 f0       	brcs	.+2      	; 0x5886 <sd_raw_read+0x2e6>
    5884:	e0 e0       	ldi	r30, 0x00	; 0
    5886:	1f 2f       	mov	r17, r31
    5888:	12 0f       	add	r17, r18
    588a:	31 e0       	ldi	r19, 0x01	; 1
    588c:	12 17       	cp	r17, r18
    588e:	08 f0       	brcs	.+2      	; 0x5892 <sd_raw_read+0x2f2>
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	e3 2b       	or	r30, r19
    5894:	2c 2d       	mov	r18, r12
    5896:	2a 0f       	add	r18, r26
    5898:	f1 e0       	ldi	r31, 0x01	; 1
    589a:	2c 15       	cp	r18, r12
    589c:	08 f0       	brcs	.+2      	; 0x58a0 <sd_raw_read+0x300>
    589e:	f0 e0       	ldi	r31, 0x00	; 0
    58a0:	e2 0f       	add	r30, r18
    58a2:	31 e0       	ldi	r19, 0x01	; 1
    58a4:	e2 17       	cp	r30, r18
    58a6:	08 f0       	brcs	.+2      	; 0x58aa <sd_raw_read+0x30a>
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	f3 2b       	or	r31, r19
    58ac:	8d 2d       	mov	r24, r13
    58ae:	8b 0f       	add	r24, r27
    58b0:	31 01       	movw	r6, r2
    58b2:	47 01       	movw	r8, r14
    58b4:	58 01       	movw	r10, r16
    58b6:	6f 01       	movw	r12, r30
    58b8:	d8 0e       	add	r13, r24
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    58ba:	e9 81       	ldd	r30, Y+1	; 0x01
    58bc:	fa 81       	ldd	r31, Y+2	; 0x02
    58be:	ef 2b       	or	r30, r31
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <sd_raw_read+0x324>
    58c2:	90 ce       	rjmp	.-736    	; 0x55e4 <sd_raw_read+0x44>
    58c4:	81 e0       	ldi	r24, 0x01	; 1
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    58c6:	29 96       	adiw	r28, 0x09	; 9
    58c8:	0f b6       	in	r0, 0x3f	; 63
    58ca:	f8 94       	cli
    58cc:	de bf       	out	0x3e, r29	; 62
    58ce:	0f be       	out	0x3f, r0	; 63
    58d0:	cd bf       	out	0x3d, r28	; 61
    58d2:	cf 91       	pop	r28
    58d4:	df 91       	pop	r29
    58d6:	1f 91       	pop	r17
    58d8:	0f 91       	pop	r16
    58da:	ff 90       	pop	r15
    58dc:	ef 90       	pop	r14
    58de:	df 90       	pop	r13
    58e0:	cf 90       	pop	r12
    58e2:	bf 90       	pop	r11
    58e4:	af 90       	pop	r10
    58e6:	9f 90       	pop	r9
    58e8:	8f 90       	pop	r8
    58ea:	7f 90       	pop	r7
    58ec:	6f 90       	pop	r6
    58ee:	5f 90       	pop	r5
    58f0:	4f 90       	pop	r4
    58f2:	3f 90       	pop	r3
    58f4:	2f 90       	pop	r2
    58f6:	08 95       	ret

000058f8 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    58f8:	2f 92       	push	r2
    58fa:	3f 92       	push	r3
    58fc:	4f 92       	push	r4
    58fe:	5f 92       	push	r5
    5900:	6f 92       	push	r6
    5902:	7f 92       	push	r7
    5904:	8f 92       	push	r8
    5906:	9f 92       	push	r9
    5908:	af 92       	push	r10
    590a:	bf 92       	push	r11
    590c:	cf 92       	push	r12
    590e:	df 92       	push	r13
    5910:	ef 92       	push	r14
    5912:	ff 92       	push	r15
    5914:	0f 93       	push	r16
    5916:	1f 93       	push	r17
    5918:	df 93       	push	r29
    591a:	cf 93       	push	r28
    591c:	cd b7       	in	r28, 0x3d	; 61
    591e:	de b7       	in	r29, 0x3e	; 62
    5920:	60 97       	sbiw	r28, 0x10	; 16
    5922:	0f b6       	in	r0, 0x3f	; 63
    5924:	f8 94       	cli
    5926:	de bf       	out	0x3e, r29	; 62
    5928:	0f be       	out	0x3f, r0	; 63
    592a:	cd bf       	out	0x3d, r28	; 61
    592c:	52 2e       	mov	r5, r18
    592e:	43 2e       	mov	r4, r19
    5930:	4b 83       	std	Y+3, r20	; 0x03
    5932:	5c 83       	std	Y+4, r21	; 0x04
    5934:	6d 83       	std	Y+5, r22	; 0x05
    5936:	7e 83       	std	Y+6, r23	; 0x06
    5938:	8f 83       	std	Y+7, r24	; 0x07
    593a:	98 87       	std	Y+8, r25	; 0x08
    593c:	18 01       	movw	r2, r16
    593e:	37 01       	movw	r6, r14
    5940:	9a 82       	std	Y+2, r9	; 0x02
    5942:	89 82       	std	Y+1, r8	; 0x01
    if(!buffer || interval == 0 || length < interval || !callback)
    5944:	01 15       	cp	r16, r1
    5946:	11 05       	cpc	r17, r1
    5948:	09 f4       	brne	.+2      	; 0x594c <sd_raw_read_interval+0x54>
    594a:	88 c0       	rjmp	.+272    	; 0x5a5c <sd_raw_read_interval+0x164>
    594c:	e1 14       	cp	r14, r1
    594e:	f1 04       	cpc	r15, r1
    5950:	09 f4       	brne	.+2      	; 0x5954 <sd_raw_read_interval+0x5c>
    5952:	84 c0       	rjmp	.+264    	; 0x5a5c <sd_raw_read_interval+0x164>
    5954:	ce 14       	cp	r12, r14
    5956:	df 04       	cpc	r13, r15
    5958:	08 f4       	brcc	.+2      	; 0x595c <sd_raw_read_interval+0x64>
    595a:	80 c0       	rjmp	.+256    	; 0x5a5c <sd_raw_read_interval+0x164>
    595c:	a1 14       	cp	r10, r1
    595e:	b1 04       	cpc	r11, r1
    5960:	09 f4       	brne	.+2      	; 0x5964 <sd_raw_read_interval+0x6c>
    5962:	7c c0       	rjmp	.+248    	; 0x5a5c <sd_raw_read_interval+0x164>
    5964:	88 24       	eor	r8, r8
    5966:	99 24       	eor	r9, r9
    5968:	8e 18       	sub	r8, r14
    596a:	9f 08       	sbc	r9, r15
    596c:	ce 18       	sub	r12, r14
    596e:	df 08       	sbc	r13, r15
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    5970:	97 01       	movw	r18, r14
    5972:	40 e0       	ldi	r20, 0x00	; 0
    5974:	50 e0       	ldi	r21, 0x00	; 0
    5976:	60 e0       	ldi	r22, 0x00	; 0
    5978:	70 e0       	ldi	r23, 0x00	; 0
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	90 e0       	ldi	r25, 0x00	; 0
    597e:	e9 86       	std	Y+9, r14	; 0x09
    5980:	3a 87       	std	Y+10, r19	; 0x0a
    5982:	4b 87       	std	Y+11, r20	; 0x0b
    5984:	5c 87       	std	Y+12, r21	; 0x0c
    5986:	6d 87       	std	Y+13, r22	; 0x0d
    5988:	7e 87       	std	Y+14, r23	; 0x0e
    598a:	8f 87       	std	Y+15, r24	; 0x0f
    598c:	98 8b       	std	Y+16, r25	; 0x10
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    598e:	25 2d       	mov	r18, r5
    5990:	34 2d       	mov	r19, r4
    5992:	4b 81       	ldd	r20, Y+3	; 0x03
    5994:	5c 81       	ldd	r21, Y+4	; 0x04
    5996:	6d 81       	ldd	r22, Y+5	; 0x05
    5998:	7e 81       	ldd	r23, Y+6	; 0x06
    599a:	8f 81       	ldd	r24, Y+7	; 0x07
    599c:	98 85       	ldd	r25, Y+8	; 0x08
    599e:	81 01       	movw	r16, r2
    59a0:	73 01       	movw	r14, r6
    59a2:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <sd_raw_read>
    59a6:	88 23       	and	r24, r24
    59a8:	09 f4       	brne	.+2      	; 0x59ac <sd_raw_read_interval+0xb4>
    59aa:	58 c0       	rjmp	.+176    	; 0x5a5c <sd_raw_read_interval+0x164>
            return 0;
        if(!callback(buffer, offset, p))
    59ac:	c1 01       	movw	r24, r2
    59ae:	05 2d       	mov	r16, r5
    59b0:	14 2d       	mov	r17, r4
    59b2:	2b 81       	ldd	r18, Y+3	; 0x03
    59b4:	3c 81       	ldd	r19, Y+4	; 0x04
    59b6:	4d 81       	ldd	r20, Y+5	; 0x05
    59b8:	5e 81       	ldd	r21, Y+6	; 0x06
    59ba:	6f 81       	ldd	r22, Y+7	; 0x07
    59bc:	78 85       	ldd	r23, Y+8	; 0x08
    59be:	e9 80       	ldd	r14, Y+1	; 0x01
    59c0:	fa 80       	ldd	r15, Y+2	; 0x02
    59c2:	f5 01       	movw	r30, r10
    59c4:	09 95       	icall
    59c6:	88 23       	and	r24, r24
    59c8:	09 f4       	brne	.+2      	; 0x59cc <sd_raw_read_interval+0xd4>
    59ca:	4a c0       	rjmp	.+148    	; 0x5a60 <sd_raw_read_interval+0x168>
            break;
    59cc:	c8 0c       	add	r12, r8
    59ce:	d9 1c       	adc	r13, r9
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    59d0:	c6 01       	movw	r24, r12
    59d2:	86 0d       	add	r24, r6
    59d4:	97 1d       	adc	r25, r7
    59d6:	86 15       	cp	r24, r6
    59d8:	97 05       	cpc	r25, r7
    59da:	08 f4       	brcc	.+2      	; 0x59de <sd_raw_read_interval+0xe6>
    59dc:	41 c0       	rjmp	.+130    	; 0x5a60 <sd_raw_read_interval+0x168>
    59de:	39 85       	ldd	r19, Y+9	; 0x09
    59e0:	35 0d       	add	r19, r5
    59e2:	91 e0       	ldi	r25, 0x01	; 1
    59e4:	35 15       	cp	r19, r5
    59e6:	08 f0       	brcs	.+2      	; 0x59ea <sd_raw_read_interval+0xf2>
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    59ec:	84 0d       	add	r24, r4
    59ee:	21 e0       	ldi	r18, 0x01	; 1
    59f0:	84 15       	cp	r24, r4
    59f2:	08 f0       	brcs	.+2      	; 0x59f6 <sd_raw_read_interval+0xfe>
    59f4:	20 e0       	ldi	r18, 0x00	; 0
    59f6:	19 2f       	mov	r17, r25
    59f8:	18 0f       	add	r17, r24
    59fa:	91 e0       	ldi	r25, 0x01	; 1
    59fc:	18 17       	cp	r17, r24
    59fe:	08 f0       	brcs	.+2      	; 0x5a02 <sd_raw_read_interval+0x10a>
    5a00:	90 e0       	ldi	r25, 0x00	; 0
    5a02:	92 2b       	or	r25, r18
    5a04:	4b 81       	ldd	r20, Y+3	; 0x03
    5a06:	94 0f       	add	r25, r20
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	94 17       	cp	r25, r20
    5a0c:	08 f0       	brcs	.+2      	; 0x5a10 <sd_raw_read_interval+0x118>
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	6c 81       	ldd	r22, Y+4	; 0x04
    5a12:	68 0f       	add	r22, r24
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	5c 81       	ldd	r21, Y+4	; 0x04
    5a18:	65 17       	cp	r22, r21
    5a1a:	08 f0       	brcs	.+2      	; 0x5a1e <sd_raw_read_interval+0x126>
    5a1c:	80 e0       	ldi	r24, 0x00	; 0
    5a1e:	5d 81       	ldd	r21, Y+5	; 0x05
    5a20:	58 0f       	add	r21, r24
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	7d 81       	ldd	r23, Y+5	; 0x05
    5a26:	57 17       	cp	r21, r23
    5a28:	08 f0       	brcs	.+2      	; 0x5a2c <sd_raw_read_interval+0x134>
    5a2a:	80 e0       	ldi	r24, 0x00	; 0
    5a2c:	4e 81       	ldd	r20, Y+6	; 0x06
    5a2e:	48 0f       	add	r20, r24
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	2e 81       	ldd	r18, Y+6	; 0x06
    5a34:	42 17       	cp	r20, r18
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <sd_raw_read_interval+0x142>
    5a38:	80 e0       	ldi	r24, 0x00	; 0
    5a3a:	7f 81       	ldd	r23, Y+7	; 0x07
    5a3c:	87 0f       	add	r24, r23
    5a3e:	21 e0       	ldi	r18, 0x01	; 1
    5a40:	87 17       	cp	r24, r23
    5a42:	08 f0       	brcs	.+2      	; 0x5a46 <sd_raw_read_interval+0x14e>
    5a44:	20 e0       	ldi	r18, 0x00	; 0
    5a46:	53 2e       	mov	r5, r19
    5a48:	41 2e       	mov	r4, r17
    5a4a:	9b 83       	std	Y+3, r25	; 0x03
    5a4c:	6c 83       	std	Y+4, r22	; 0x04
    5a4e:	5d 83       	std	Y+5, r21	; 0x05
    5a50:	4e 83       	std	Y+6, r20	; 0x06
    5a52:	8f 83       	std	Y+7, r24	; 0x07
    5a54:	88 85       	ldd	r24, Y+8	; 0x08
    5a56:	82 0f       	add	r24, r18
    5a58:	88 87       	std	Y+8, r24	; 0x08
    5a5a:	99 cf       	rjmp	.-206    	; 0x598e <sd_raw_read_interval+0x96>
    5a5c:	80 e0       	ldi	r24, 0x00	; 0
    5a5e:	01 c0       	rjmp	.+2      	; 0x5a62 <sd_raw_read_interval+0x16a>
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    5a62:	60 96       	adiw	r28, 0x10	; 16
    5a64:	0f b6       	in	r0, 0x3f	; 63
    5a66:	f8 94       	cli
    5a68:	de bf       	out	0x3e, r29	; 62
    5a6a:	0f be       	out	0x3f, r0	; 63
    5a6c:	cd bf       	out	0x3d, r28	; 61
    5a6e:	cf 91       	pop	r28
    5a70:	df 91       	pop	r29
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	ff 90       	pop	r15
    5a78:	ef 90       	pop	r14
    5a7a:	df 90       	pop	r13
    5a7c:	cf 90       	pop	r12
    5a7e:	bf 90       	pop	r11
    5a80:	af 90       	pop	r10
    5a82:	9f 90       	pop	r9
    5a84:	8f 90       	pop	r8
    5a86:	7f 90       	pop	r7
    5a88:	6f 90       	pop	r6
    5a8a:	5f 90       	pop	r5
    5a8c:	4f 90       	pop	r4
    5a8e:	3f 90       	pop	r3
    5a90:	2f 90       	pop	r2
    5a92:	08 95       	ret

00005a94 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    5a94:	8f 92       	push	r8
    5a96:	9f 92       	push	r9
    5a98:	bf 92       	push	r11
    5a9a:	cf 92       	push	r12
    5a9c:	df 92       	push	r13
    5a9e:	ef 92       	push	r14
    5aa0:	ff 92       	push	r15
    5aa2:	0f 93       	push	r16
    5aa4:	1f 93       	push	r17
    5aa6:	cf 93       	push	r28
    5aa8:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    5aaa:	3c 98       	cbi	0x07, 4	; 7
    configure_pin_locked();
    5aac:	3d 98       	cbi	0x07, 5	; 7

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    5aae:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
    5ab0:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
    5ab2:	20 9a       	sbi	0x04, 0	; 4
    configure_pin_miso();
    5ab4:	23 98       	cbi	0x04, 3	; 4

    unselect_card();
    5ab6:	28 9a       	sbi	0x05, 0	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    5ab8:	83 e5       	ldi	r24, 0x53	; 83
    5aba:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    5abc:	8d b5       	in	r24, 0x2d	; 45
    5abe:	8e 7f       	andi	r24, 0xFE	; 254
    5ac0:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    5ac2:	10 92 31 04 	sts	0x0431, r1
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5ac8:	2f ef       	ldi	r18, 0xFF	; 255
    5aca:	2e bd       	out	0x2e, r18	; 46
    while(!(SPSR & (1 << SPIF)));
    5acc:	0d b4       	in	r0, 0x2d	; 45
    5ace:	07 fe       	sbrs	r0, 7
    5ad0:	fd cf       	rjmp	.-6      	; 0x5acc <sd_raw_init+0x38>
    SPSR &= ~(1 << SPIF);
    5ad2:	8d b5       	in	r24, 0x2d	; 45
    5ad4:	8f 77       	andi	r24, 0x7F	; 127
    5ad6:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5ad8:	8e b5       	in	r24, 0x2e	; 46
    
    //if(!sd_raw_available())
      //  return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    5ada:	9f 5f       	subi	r25, 0xFF	; 255
    5adc:	9a 30       	cpi	r25, 0x0A	; 10
    5ade:	a9 f7       	brne	.-22     	; 0x5aca <sd_raw_init+0x36>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    5ae0:	28 98       	cbi	0x05, 0	; 5
    5ae2:	00 e0       	ldi	r16, 0x00	; 0
    5ae4:	10 e0       	ldi	r17, 0x00	; 0

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	40 e0       	ldi	r20, 0x00	; 0
    5aea:	50 e0       	ldi	r21, 0x00	; 0
    5aec:	60 e0       	ldi	r22, 0x00	; 0
    5aee:	70 e0       	ldi	r23, 0x00	; 0
    5af0:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    5af4:	f8 2e       	mov	r15, r24
        if(response == (1 << R1_IDLE_STATE))
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	f8 16       	cp	r15, r24
    5afa:	41 f0       	breq	.+16     	; 0x5b0c <sd_raw_init+0x78>
            break;

        if(i == 0x1ff)
    5afc:	81 e0       	ldi	r24, 0x01	; 1
    5afe:	0f 3f       	cpi	r16, 0xFF	; 255
    5b00:	18 07       	cpc	r17, r24
    5b02:	09 f4       	brne	.+2      	; 0x5b06 <sd_raw_init+0x72>
    5b04:	c3 c0       	rjmp	.+390    	; 0x5c8c <sd_raw_init+0x1f8>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    5b06:	0f 5f       	subi	r16, 0xFF	; 255
    5b08:	1f 4f       	sbci	r17, 0xFF	; 255
    5b0a:	ed cf       	rjmp	.-38     	; 0x5ae6 <sd_raw_init+0x52>
        }
    }

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    5b0c:	88 e0       	ldi	r24, 0x08	; 8
    5b0e:	4a ea       	ldi	r20, 0xAA	; 170
    5b10:	51 e0       	ldi	r21, 0x01	; 1
    5b12:	60 e0       	ldi	r22, 0x00	; 0
    5b14:	70 e0       	ldi	r23, 0x00	; 0
    5b16:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    5b1a:	82 fd       	sbrc	r24, 2
    5b1c:	2d c0       	rjmp	.+90     	; 0x5b78 <sd_raw_init+0xe4>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5b1e:	8f ef       	ldi	r24, 0xFF	; 255
    5b20:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5b22:	0d b4       	in	r0, 0x2d	; 45
    5b24:	07 fe       	sbrs	r0, 7
    5b26:	fd cf       	rjmp	.-6      	; 0x5b22 <sd_raw_init+0x8e>
    SPSR &= ~(1 << SPIF);
    5b28:	8d b5       	in	r24, 0x2d	; 45
    5b2a:	8f 77       	andi	r24, 0x7F	; 127
    5b2c:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5b2e:	8e b5       	in	r24, 0x2e	; 46
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5b34:	0d b4       	in	r0, 0x2d	; 45
    5b36:	07 fe       	sbrs	r0, 7
    5b38:	fd cf       	rjmp	.-6      	; 0x5b34 <sd_raw_init+0xa0>
    SPSR &= ~(1 << SPIF);
    5b3a:	8d b5       	in	r24, 0x2d	; 45
    5b3c:	8f 77       	andi	r24, 0x7F	; 127
    5b3e:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5b40:	8e b5       	in	r24, 0x2e	; 46
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5b42:	8f ef       	ldi	r24, 0xFF	; 255
    5b44:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5b46:	0d b4       	in	r0, 0x2d	; 45
    5b48:	07 fe       	sbrs	r0, 7
    5b4a:	fd cf       	rjmp	.-6      	; 0x5b46 <sd_raw_init+0xb2>
    SPSR &= ~(1 << SPIF);
    5b4c:	8d b5       	in	r24, 0x2d	; 45
    5b4e:	8f 77       	andi	r24, 0x7F	; 127
    5b50:	8d bd       	out	0x2d, r24	; 45
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
    5b52:	0e b4       	in	r0, 0x2e	; 46
    5b54:	00 fe       	sbrs	r0, 0
    5b56:	ca c0       	rjmp	.+404    	; 0x5cec <sd_raw_init+0x258>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5b58:	8f ef       	ldi	r24, 0xFF	; 255
    5b5a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5b5c:	0d b4       	in	r0, 0x2d	; 45
    5b5e:	07 fe       	sbrs	r0, 7
    5b60:	fd cf       	rjmp	.-6      	; 0x5b5c <sd_raw_init+0xc8>
    SPSR &= ~(1 << SPIF);
    5b62:	8d b5       	in	r24, 0x2d	; 45
    5b64:	8f 77       	andi	r24, 0x7F	; 127
    5b66:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5b68:	8e b5       	in	r24, 0x2e	; 46
    {
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    5b6a:	8a 3a       	cpi	r24, 0xAA	; 170
    5b6c:	09 f0       	breq	.+2      	; 0x5b70 <sd_raw_init+0xdc>
    5b6e:	be c0       	rjmp	.+380    	; 0x5cec <sd_raw_init+0x258>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    5b70:	82 e0       	ldi	r24, 0x02	; 2
    5b72:	80 93 31 04 	sts	0x0431, r24
    5b76:	12 c0       	rjmp	.+36     	; 0x5b9c <sd_raw_init+0x108>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    5b78:	87 e3       	ldi	r24, 0x37	; 55
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	60 e0       	ldi	r22, 0x00	; 0
    5b80:	70 e0       	ldi	r23, 0x00	; 0
    5b82:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    5b86:	89 e2       	ldi	r24, 0x29	; 41
    5b88:	40 e0       	ldi	r20, 0x00	; 0
    5b8a:	50 e0       	ldi	r21, 0x00	; 0
    5b8c:	60 e0       	ldi	r22, 0x00	; 0
    5b8e:	70 e0       	ldi	r23, 0x00	; 0
    5b90:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    5b94:	82 fd       	sbrc	r24, 2
    5b96:	02 c0       	rjmp	.+4      	; 0x5b9c <sd_raw_init+0x108>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    5b98:	f0 92 31 04 	sts	0x0431, r15
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    5b9c:	b0 90 31 04 	lds	r11, 0x0431
    5ba0:	8b 2d       	mov	r24, r11
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	03 e0       	ldi	r16, 0x03	; 3
    5ba6:	80 2e       	mov	r8, r16
    5ba8:	91 2c       	mov	r9, r1
    5baa:	88 22       	and	r8, r24
    5bac:	99 22       	and	r9, r25
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    5bae:	12 e0       	ldi	r17, 0x02	; 2
    5bb0:	c1 2e       	mov	r12, r17
    5bb2:	d1 2c       	mov	r13, r1
    5bb4:	c8 22       	and	r12, r24
    5bb6:	d9 22       	and	r13, r25
    5bb8:	c0 e0       	ldi	r28, 0x00	; 0
    5bba:	d0 e0       	ldi	r29, 0x00	; 0
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    5bbc:	81 14       	cp	r8, r1
    5bbe:	91 04       	cpc	r9, r1
    5bc0:	b9 f0       	breq	.+46     	; 0x5bf0 <sd_raw_init+0x15c>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    5bc2:	c1 14       	cp	r12, r1
    5bc4:	d1 04       	cpc	r13, r1
    5bc6:	31 f0       	breq	.+12     	; 0x5bd4 <sd_raw_init+0x140>
    5bc8:	e1 2c       	mov	r14, r1
    5bca:	f1 2c       	mov	r15, r1
    5bcc:	01 2d       	mov	r16, r1
    5bce:	b0 e4       	ldi	r27, 0x40	; 64
    5bd0:	1b 2f       	mov	r17, r27
    5bd2:	03 c0       	rjmp	.+6      	; 0x5bda <sd_raw_init+0x146>
    5bd4:	ee 24       	eor	r14, r14
    5bd6:	ff 24       	eor	r15, r15
    5bd8:	87 01       	movw	r16, r14
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    5bda:	87 e3       	ldi	r24, 0x37	; 55
    5bdc:	40 e0       	ldi	r20, 0x00	; 0
    5bde:	50 e0       	ldi	r21, 0x00	; 0
    5be0:	60 e0       	ldi	r22, 0x00	; 0
    5be2:	70 e0       	ldi	r23, 0x00	; 0
    5be4:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    5be8:	89 e2       	ldi	r24, 0x29	; 41
    5bea:	b8 01       	movw	r22, r16
    5bec:	a7 01       	movw	r20, r14
    5bee:	05 c0       	rjmp	.+10     	; 0x5bfa <sd_raw_init+0x166>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    5bf0:	81 e0       	ldi	r24, 0x01	; 1
    5bf2:	40 e0       	ldi	r20, 0x00	; 0
    5bf4:	50 e0       	ldi	r21, 0x00	; 0
    5bf6:	60 e0       	ldi	r22, 0x00	; 0
    5bf8:	70 e0       	ldi	r23, 0x00	; 0
    5bfa:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    5bfe:	80 ff       	sbrs	r24, 0
    5c00:	07 c0       	rjmp	.+14     	; 0x5c10 <sd_raw_init+0x17c>
            break;

        if(i == 0x7fff)
    5c02:	8f e7       	ldi	r24, 0x7F	; 127
    5c04:	cf 3f       	cpi	r28, 0xFF	; 255
    5c06:	d8 07       	cpc	r29, r24
    5c08:	09 f4       	brne	.+2      	; 0x5c0c <sd_raw_init+0x178>
    5c0a:	40 c0       	rjmp	.+128    	; 0x5c8c <sd_raw_init+0x1f8>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    5c0c:	21 96       	adiw	r28, 0x01	; 1
    5c0e:	d6 cf       	rjmp	.-84     	; 0x5bbc <sd_raw_init+0x128>
            return 0;
        }
    }

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    5c10:	cd 28       	or	r12, r13
    5c12:	99 f1       	breq	.+102    	; 0x5c7a <sd_raw_init+0x1e6>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    5c14:	8a e3       	ldi	r24, 0x3A	; 58
    5c16:	40 e0       	ldi	r20, 0x00	; 0
    5c18:	50 e0       	ldi	r21, 0x00	; 0
    5c1a:	60 e0       	ldi	r22, 0x00	; 0
    5c1c:	70 e0       	ldi	r23, 0x00	; 0
    5c1e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    5c22:	88 23       	and	r24, r24
    5c24:	99 f5       	brne	.+102    	; 0x5c8c <sd_raw_init+0x1f8>
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5c26:	8f ef       	ldi	r24, 0xFF	; 255
    5c28:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5c2a:	0d b4       	in	r0, 0x2d	; 45
    5c2c:	07 fe       	sbrs	r0, 7
    5c2e:	fd cf       	rjmp	.-6      	; 0x5c2a <sd_raw_init+0x196>
    SPSR &= ~(1 << SPIF);
    5c30:	8d b5       	in	r24, 0x2d	; 45
    5c32:	8f 77       	andi	r24, 0x7F	; 127
    5c34:	8d bd       	out	0x2d, r24	; 45
        {
            unselect_card();
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
    5c36:	0e b4       	in	r0, 0x2e	; 46
    5c38:	06 fe       	sbrs	r0, 6
    5c3a:	04 c0       	rjmp	.+8      	; 0x5c44 <sd_raw_init+0x1b0>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    5c3c:	84 e0       	ldi	r24, 0x04	; 4
    5c3e:	b8 2a       	or	r11, r24
    5c40:	b0 92 31 04 	sts	0x0431, r11
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5c44:	8f ef       	ldi	r24, 0xFF	; 255
    5c46:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5c48:	0d b4       	in	r0, 0x2d	; 45
    5c4a:	07 fe       	sbrs	r0, 7
    5c4c:	fd cf       	rjmp	.-6      	; 0x5c48 <sd_raw_init+0x1b4>
    SPSR &= ~(1 << SPIF);
    5c4e:	8d b5       	in	r24, 0x2d	; 45
    5c50:	8f 77       	andi	r24, 0x7F	; 127
    5c52:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5c54:	8e b5       	in	r24, 0x2e	; 46
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5c56:	8f ef       	ldi	r24, 0xFF	; 255
    5c58:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5c5a:	0d b4       	in	r0, 0x2d	; 45
    5c5c:	07 fe       	sbrs	r0, 7
    5c5e:	fd cf       	rjmp	.-6      	; 0x5c5a <sd_raw_init+0x1c6>
    SPSR &= ~(1 << SPIF);
    5c60:	8d b5       	in	r24, 0x2d	; 45
    5c62:	8f 77       	andi	r24, 0x7F	; 127
    5c64:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5c66:	8e b5       	in	r24, 0x2e	; 46
 */
uint8_t sd_raw_rec_byte()
{
	//PORTD |= _BV(PD7);
    /* send dummy data for receiving some */
    SPDR = 0xff;
    5c68:	8f ef       	ldi	r24, 0xFF	; 255
    5c6a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    5c6c:	0d b4       	in	r0, 0x2d	; 45
    5c6e:	07 fe       	sbrs	r0, 7
    5c70:	fd cf       	rjmp	.-6      	; 0x5c6c <sd_raw_init+0x1d8>
    SPSR &= ~(1 << SPIF);
    5c72:	8d b5       	in	r24, 0x2d	; 45
    5c74:	8f 77       	andi	r24, 0x7F	; 127
    5c76:	8d bd       	out	0x2d, r24	; 45
    //PORTD &= ~_BV(PD7);
    return SPDR;
    5c78:	8e b5       	in	r24, 0x2e	; 46
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    5c7a:	80 e1       	ldi	r24, 0x10	; 16
    5c7c:	40 e0       	ldi	r20, 0x00	; 0
    5c7e:	52 e0       	ldi	r21, 0x02	; 2
    5c80:	60 e0       	ldi	r22, 0x00	; 0
    5c82:	70 e0       	ldi	r23, 0x00	; 0
    5c84:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <sd_raw_send_command>
    5c88:	88 23       	and	r24, r24
    5c8a:	11 f0       	breq	.+4      	; 0x5c90 <sd_raw_init+0x1fc>
    {
        unselect_card();
    5c8c:	28 9a       	sbi	0x05, 0	; 5
    5c8e:	2e c0       	rjmp	.+92     	; 0x5cec <sd_raw_init+0x258>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    5c90:	28 9a       	sbi	0x05, 0	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    5c92:	8c b5       	in	r24, 0x2c	; 44
    5c94:	8c 7f       	andi	r24, 0xFC	; 252
    5c96:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    5c98:	8d b5       	in	r24, 0x2d	; 45
    5c9a:	81 60       	ori	r24, 0x01	; 1
    5c9c:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    5c9e:	8f ef       	ldi	r24, 0xFF	; 255
    5ca0:	80 93 28 04 	sts	0x0428, r24
    5ca4:	80 93 29 04 	sts	0x0429, r24
    5ca8:	80 93 2a 04 	sts	0x042A, r24
    5cac:	80 93 2b 04 	sts	0x042B, r24
    5cb0:	80 93 2c 04 	sts	0x042C, r24
    5cb4:	80 93 2d 04 	sts	0x042D, r24
    5cb8:	80 93 2e 04 	sts	0x042E, r24
    5cbc:	80 93 2f 04 	sts	0x042F, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    5cc0:	81 e0       	ldi	r24, 0x01	; 1
    5cc2:	80 93 30 04 	sts	0x0430, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    5cc6:	20 e0       	ldi	r18, 0x00	; 0
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	40 e0       	ldi	r20, 0x00	; 0
    5ccc:	50 e0       	ldi	r21, 0x00	; 0
    5cce:	60 e0       	ldi	r22, 0x00	; 0
    5cd0:	70 e0       	ldi	r23, 0x00	; 0
    5cd2:	80 e0       	ldi	r24, 0x00	; 0
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	08 e2       	ldi	r16, 0x28	; 40
    5cd8:	12 e0       	ldi	r17, 0x02	; 2
    5cda:	e1 2c       	mov	r14, r1
    5cdc:	a2 e0       	ldi	r26, 0x02	; 2
    5cde:	fa 2e       	mov	r15, r26
    5ce0:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <sd_raw_read>
    5ce4:	88 23       	and	r24, r24
    5ce6:	19 f0       	breq	.+6      	; 0x5cee <sd_raw_init+0x25a>
    5ce8:	81 e0       	ldi	r24, 0x01	; 1
    5cea:	01 c0       	rjmp	.+2      	; 0x5cee <sd_raw_init+0x25a>
    5cec:	80 e0       	ldi	r24, 0x00	; 0
        return 0;
#endif

    return 1;
}
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	9f 90       	pop	r9
    5d02:	8f 90       	pop	r8
    5d04:	08 95       	ret

00005d06 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    5d06:	2f 92       	push	r2
    5d08:	3f 92       	push	r3
    5d0a:	4f 92       	push	r4
    5d0c:	5f 92       	push	r5
    5d0e:	6f 92       	push	r6
    5d10:	7f 92       	push	r7
    5d12:	8f 92       	push	r8
    5d14:	9f 92       	push	r9
    5d16:	af 92       	push	r10
    5d18:	bf 92       	push	r11
    5d1a:	cf 92       	push	r12
    5d1c:	df 92       	push	r13
    5d1e:	ef 92       	push	r14
    5d20:	ff 92       	push	r15
    5d22:	0f 93       	push	r16
    5d24:	1f 93       	push	r17
    5d26:	df 93       	push	r29
    5d28:	cf 93       	push	r28
    5d2a:	cd b7       	in	r28, 0x3d	; 61
    5d2c:	de b7       	in	r29, 0x3e	; 62
    5d2e:	28 97       	sbiw	r28, 0x08	; 8
    5d30:	0f b6       	in	r0, 0x3f	; 63
    5d32:	f8 94       	cli
    5d34:	de bf       	out	0x3e, r29	; 62
    5d36:	0f be       	out	0x3f, r0	; 63
    5d38:	cd bf       	out	0x3d, r28	; 61
    5d3a:	92 2e       	mov	r9, r18
    5d3c:	83 2e       	mov	r8, r19
    5d3e:	54 2e       	mov	r5, r20
    5d40:	45 2e       	mov	r4, r21
    5d42:	36 2e       	mov	r3, r22
    5d44:	27 2e       	mov	r2, r23
    5d46:	8d 83       	std	Y+5, r24	; 0x05
    5d48:	9e 83       	std	Y+6, r25	; 0x06
    5d4a:	38 01       	movw	r6, r16
    5d4c:	f8 86       	std	Y+8, r15	; 0x08
    5d4e:	ef 82       	std	Y+7, r14	; 0x07
    5d50:	da 82       	std	Y+2, r13	; 0x02
    5d52:	c9 82       	std	Y+1, r12	; 0x01
    5d54:	bc 82       	std	Y+4, r11	; 0x04
    5d56:	ab 82       	std	Y+3, r10	; 0x03
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    5d58:	01 15       	cp	r16, r1
    5d5a:	11 05       	cpc	r17, r1
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <sd_raw_write_interval+0x5a>
    5d5e:	7e c0       	rjmp	.+252    	; 0x5e5c <sd_raw_write_interval+0x156>
    5d60:	cd 28       	or	r12, r13
    5d62:	09 f4       	brne	.+2      	; 0x5d66 <sd_raw_write_interval+0x60>
    5d64:	7b c0       	rjmp	.+246    	; 0x5e5c <sd_raw_write_interval+0x156>
        return 0;

    uint8_t endless = (length == 0);
    5d66:	bb 24       	eor	r11, r11
    5d68:	ef 28       	or	r14, r15
    5d6a:	09 f0       	breq	.+2      	; 0x5d6e <sd_raw_write_interval+0x68>
    5d6c:	6e c0       	rjmp	.+220    	; 0x5e4a <sd_raw_write_interval+0x144>
    5d6e:	bb 24       	eor	r11, r11
    5d70:	b3 94       	inc	r11
    5d72:	6b c0       	rjmp	.+214    	; 0x5e4a <sd_raw_write_interval+0x144>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    5d74:	c3 01       	movw	r24, r6
    5d76:	09 2d       	mov	r16, r9
    5d78:	18 2d       	mov	r17, r8
    5d7a:	25 2d       	mov	r18, r5
    5d7c:	34 2d       	mov	r19, r4
    5d7e:	43 2d       	mov	r20, r3
    5d80:	52 2d       	mov	r21, r2
    5d82:	6d 81       	ldd	r22, Y+5	; 0x05
    5d84:	7e 81       	ldd	r23, Y+6	; 0x06
    5d86:	eb 80       	ldd	r14, Y+3	; 0x03
    5d88:	fc 80       	ldd	r15, Y+4	; 0x04
    5d8a:	a9 81       	ldd	r26, Y+1	; 0x01
    5d8c:	ba 81       	ldd	r27, Y+2	; 0x02
    5d8e:	fd 01       	movw	r30, r26
    5d90:	09 95       	icall
    5d92:	6c 01       	movw	r12, r24
        if(!bytes_to_write)
    5d94:	00 97       	sbiw	r24, 0x00	; 0
    5d96:	09 f4       	brne	.+2      	; 0x5d9a <sd_raw_write_interval+0x94>
    5d98:	63 c0       	rjmp	.+198    	; 0x5e60 <sd_raw_write_interval+0x15a>
            break;
        if(!endless && bytes_to_write > length)
    5d9a:	bb 20       	and	r11, r11
    5d9c:	31 f4       	brne	.+12     	; 0x5daa <sd_raw_write_interval+0xa4>
    5d9e:	ef 81       	ldd	r30, Y+7	; 0x07
    5da0:	f8 85       	ldd	r31, Y+8	; 0x08
    5da2:	e8 17       	cp	r30, r24
    5da4:	f9 07       	cpc	r31, r25
    5da6:	08 f4       	brcc	.+2      	; 0x5daa <sd_raw_write_interval+0xa4>
    5da8:	59 c0       	rjmp	.+178    	; 0x5e5c <sd_raw_write_interval+0x156>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    5daa:	29 2d       	mov	r18, r9
    5dac:	38 2d       	mov	r19, r8
    5dae:	45 2d       	mov	r20, r5
    5db0:	54 2d       	mov	r21, r4
    5db2:	63 2d       	mov	r22, r3
    5db4:	72 2d       	mov	r23, r2
    5db6:	8d 81       	ldd	r24, Y+5	; 0x05
    5db8:	9e 81       	ldd	r25, Y+6	; 0x06
    5dba:	83 01       	movw	r16, r6
    5dbc:	76 01       	movw	r14, r12
    5dbe:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <sd_raw_write>
    5dc2:	88 23       	and	r24, r24
    5dc4:	09 f4       	brne	.+2      	; 0x5dc8 <sd_raw_write_interval+0xc2>
    5dc6:	4a c0       	rjmp	.+148    	; 0x5e5c <sd_raw_write_interval+0x156>
            return 0;

        offset += bytes_to_write;
    5dc8:	96 01       	movw	r18, r12
    5dca:	f9 2d       	mov	r31, r9
    5dcc:	fc 0d       	add	r31, r12
    5dce:	e1 e0       	ldi	r30, 0x01	; 1
    5dd0:	f9 15       	cp	r31, r9
    5dd2:	08 f0       	brcs	.+2      	; 0x5dd6 <sd_raw_write_interval+0xd0>
    5dd4:	e0 e0       	ldi	r30, 0x00	; 0
    5dd6:	88 2d       	mov	r24, r8
    5dd8:	83 0f       	add	r24, r19
    5dda:	21 e0       	ldi	r18, 0x01	; 1
    5ddc:	88 15       	cp	r24, r8
    5dde:	08 f0       	brcs	.+2      	; 0x5de2 <sd_raw_write_interval+0xdc>
    5de0:	20 e0       	ldi	r18, 0x00	; 0
    5de2:	1e 2f       	mov	r17, r30
    5de4:	18 0f       	add	r17, r24
    5de6:	91 e0       	ldi	r25, 0x01	; 1
    5de8:	18 17       	cp	r17, r24
    5dea:	08 f0       	brcs	.+2      	; 0x5dee <sd_raw_write_interval+0xe8>
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	92 2b       	or	r25, r18
    5df0:	95 0d       	add	r25, r5
    5df2:	81 e0       	ldi	r24, 0x01	; 1
    5df4:	95 15       	cp	r25, r5
    5df6:	08 f0       	brcs	.+2      	; 0x5dfa <sd_raw_write_interval+0xf4>
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	68 2f       	mov	r22, r24
    5dfc:	64 0d       	add	r22, r4
    5dfe:	81 e0       	ldi	r24, 0x01	; 1
    5e00:	64 15       	cp	r22, r4
    5e02:	08 f0       	brcs	.+2      	; 0x5e06 <sd_raw_write_interval+0x100>
    5e04:	80 e0       	ldi	r24, 0x00	; 0
    5e06:	58 2f       	mov	r21, r24
    5e08:	53 0d       	add	r21, r3
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	53 15       	cp	r21, r3
    5e0e:	08 f0       	brcs	.+2      	; 0x5e12 <sd_raw_write_interval+0x10c>
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	48 2f       	mov	r20, r24
    5e14:	42 0d       	add	r20, r2
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	42 15       	cp	r20, r2
    5e1a:	08 f0       	brcs	.+2      	; 0x5e1e <sd_raw_write_interval+0x118>
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	2d 81       	ldd	r18, Y+5	; 0x05
    5e20:	82 0f       	add	r24, r18
    5e22:	21 e0       	ldi	r18, 0x01	; 1
    5e24:	3d 81       	ldd	r19, Y+5	; 0x05
    5e26:	83 17       	cp	r24, r19
    5e28:	08 f0       	brcs	.+2      	; 0x5e2c <sd_raw_write_interval+0x126>
    5e2a:	20 e0       	ldi	r18, 0x00	; 0
    5e2c:	9f 2e       	mov	r9, r31
    5e2e:	81 2e       	mov	r8, r17
    5e30:	59 2e       	mov	r5, r25
    5e32:	46 2e       	mov	r4, r22
    5e34:	1a 01       	movw	r2, r20
    5e36:	8d 83       	std	Y+5, r24	; 0x05
    5e38:	8e 81       	ldd	r24, Y+6	; 0x06
    5e3a:	82 0f       	add	r24, r18
    5e3c:	8e 83       	std	Y+6, r24	; 0x06
        length -= bytes_to_write;
    5e3e:	af 81       	ldd	r26, Y+7	; 0x07
    5e40:	b8 85       	ldd	r27, Y+8	; 0x08
    5e42:	ac 19       	sub	r26, r12
    5e44:	bd 09       	sbc	r27, r13
    5e46:	b8 87       	std	Y+8, r27	; 0x08
    5e48:	af 83       	std	Y+7, r26	; 0x07

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    5e4a:	bb 20       	and	r11, r11
    5e4c:	09 f0       	breq	.+2      	; 0x5e50 <sd_raw_write_interval+0x14a>
    5e4e:	92 cf       	rjmp	.-220    	; 0x5d74 <sd_raw_write_interval+0x6e>
    5e50:	ef 81       	ldd	r30, Y+7	; 0x07
    5e52:	f8 85       	ldd	r31, Y+8	; 0x08
    5e54:	ef 2b       	or	r30, r31
    5e56:	09 f0       	breq	.+2      	; 0x5e5a <sd_raw_write_interval+0x154>
    5e58:	8d cf       	rjmp	.-230    	; 0x5d74 <sd_raw_write_interval+0x6e>
    5e5a:	02 c0       	rjmp	.+4      	; 0x5e60 <sd_raw_write_interval+0x15a>
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	01 c0       	rjmp	.+2      	; 0x5e62 <sd_raw_write_interval+0x15c>
    5e60:	81 e0       	ldi	r24, 0x01	; 1
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    5e62:	28 96       	adiw	r28, 0x08	; 8
    5e64:	0f b6       	in	r0, 0x3f	; 63
    5e66:	f8 94       	cli
    5e68:	de bf       	out	0x3e, r29	; 62
    5e6a:	0f be       	out	0x3f, r0	; 63
    5e6c:	cd bf       	out	0x3d, r28	; 61
    5e6e:	cf 91       	pop	r28
    5e70:	df 91       	pop	r29
    5e72:	1f 91       	pop	r17
    5e74:	0f 91       	pop	r16
    5e76:	ff 90       	pop	r15
    5e78:	ef 90       	pop	r14
    5e7a:	df 90       	pop	r13
    5e7c:	cf 90       	pop	r12
    5e7e:	bf 90       	pop	r11
    5e80:	af 90       	pop	r10
    5e82:	9f 90       	pop	r9
    5e84:	8f 90       	pop	r8
    5e86:	7f 90       	pop	r7
    5e88:	6f 90       	pop	r6
    5e8a:	5f 90       	pop	r5
    5e8c:	4f 90       	pop	r4
    5e8e:	3f 90       	pop	r3
    5e90:	2f 90       	pop	r2
    5e92:	08 95       	ret

00005e94 <uart_init>:
#define USE_SLEEP 1

void uart_init()
{
	//initialize UART1
	UCSR1A=_BV(U2X1);
    5e94:	82 e0       	ldi	r24, 0x02	; 2
    5e96:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B=0x18;
    5e9a:	e9 ec       	ldi	r30, 0xC9	; 201
    5e9c:	f0 e0       	ldi	r31, 0x00	; 0
    5e9e:	28 e1       	ldi	r18, 0x18	; 24
    5ea0:	20 83       	st	Z, r18
	UCSR1C=0x06;
    5ea2:	86 e0       	ldi	r24, 0x06	; 6
    5ea4:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = (F_CPU / (8UL * UART_BAUD)) - 1;
    5ea8:	80 e1       	ldi	r24, 0x10	; 16
    5eaa:	90 e0       	ldi	r25, 0x00	; 0
    5eac:	90 93 cd 00 	sts	0x00CD, r25
    5eb0:	80 93 cc 00 	sts	0x00CC, r24

    UCSR1B = (1 << RXEN) | (1 << TXEN);
    5eb4:	20 83       	st	Z, r18
}
    5eb6:	08 95       	ret

00005eb8 <uart_putc>:

void uart_putc(uint8_t c)
{
    5eb8:	98 2f       	mov	r25, r24
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5eba:	80 91 c8 00 	lds	r24, 0x00C8
    5ebe:	85 ff       	sbrs	r24, 5
    5ec0:	fc cf       	rjmp	.-8      	; 0x5eba <uart_putc+0x2>

    /* send next byte */
    UDR1 = c;
    5ec2:	90 93 ce 00 	sts	0x00CE, r25
}
    5ec6:	08 95       	ret

00005ec8 <uart_putc_hex>:

void uart_putc_hex(uint8_t b)
{
    5ec8:	28 2f       	mov	r18, r24
    /* upper nibble */
    if((b >> 4) < 0x0a)
    5eca:	98 2f       	mov	r25, r24
    5ecc:	92 95       	swap	r25
    5ece:	9f 70       	andi	r25, 0x0F	; 15
    5ed0:	9a 30       	cpi	r25, 0x0A	; 10
    5ed2:	30 f4       	brcc	.+12     	; 0x5ee0 <uart_putc_hex+0x18>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5ed4:	80 91 c8 00 	lds	r24, 0x00C8
    5ed8:	85 ff       	sbrs	r24, 5
    5eda:	fc cf       	rjmp	.-8      	; 0x5ed4 <uart_putc_hex+0xc>

void uart_putc_hex(uint8_t b)
{
    /* upper nibble */
    if((b >> 4) < 0x0a)
        uart_putc((b >> 4) + '0');
    5edc:	90 5d       	subi	r25, 0xD0	; 208
    5ede:	05 c0       	rjmp	.+10     	; 0x5eea <uart_putc_hex+0x22>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5ee0:	80 91 c8 00 	lds	r24, 0x00C8
    5ee4:	85 ff       	sbrs	r24, 5
    5ee6:	fc cf       	rjmp	.-8      	; 0x5ee0 <uart_putc_hex+0x18>
{
    /* upper nibble */
    if((b >> 4) < 0x0a)
        uart_putc((b >> 4) + '0');
    else
        uart_putc((b >> 4) - 0x0a + 'a');
    5ee8:	99 5a       	subi	r25, 0xA9	; 169
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));

    /* send next byte */
    UDR1 = c;
    5eea:	90 93 ce 00 	sts	0x00CE, r25
        uart_putc((b >> 4) + '0');
    else
        uart_putc((b >> 4) - 0x0a + 'a');

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
    5eee:	82 2f       	mov	r24, r18
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	8f 70       	andi	r24, 0x0F	; 15
    5ef4:	90 70       	andi	r25, 0x00	; 0
    5ef6:	0a 97       	sbiw	r24, 0x0a	; 10
    5ef8:	3c f4       	brge	.+14     	; 0x5f08 <uart_putc_hex+0x40>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5efa:	80 91 c8 00 	lds	r24, 0x00C8
    5efe:	85 ff       	sbrs	r24, 5
    5f00:	fc cf       	rjmp	.-8      	; 0x5efa <uart_putc_hex+0x32>
    else
        uart_putc((b >> 4) - 0x0a + 'a');

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
        uart_putc((b & 0x0f) + '0');
    5f02:	2f 70       	andi	r18, 0x0F	; 15
    5f04:	20 5d       	subi	r18, 0xD0	; 208
    5f06:	06 c0       	rjmp	.+12     	; 0x5f14 <uart_putc_hex+0x4c>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5f08:	80 91 c8 00 	lds	r24, 0x00C8
    5f0c:	85 ff       	sbrs	r24, 5
    5f0e:	fc cf       	rjmp	.-8      	; 0x5f08 <uart_putc_hex+0x40>

    /* lower nibble */
    if((b & 0x0f) < 0x0a)
        uart_putc((b & 0x0f) + '0');
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
    5f10:	2f 70       	andi	r18, 0x0F	; 15
    5f12:	29 5a       	subi	r18, 0xA9	; 169
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));

    /* send next byte */
    UDR1 = c;
    5f14:	20 93 ce 00 	sts	0x00CE, r18
    5f18:	08 95       	ret

00005f1a <uart_putw_hex>:
    else
        uart_putc((b & 0x0f) - 0x0a + 'a');
}

void uart_putw_hex(uint16_t w)
{
    5f1a:	1f 93       	push	r17
    5f1c:	18 2f       	mov	r17, r24
    uart_putc_hex((uint8_t) (w >> 8));
    5f1e:	89 2f       	mov	r24, r25
    5f20:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <uart_putc_hex>
    uart_putc_hex((uint8_t) (w & 0xff));
    5f24:	81 2f       	mov	r24, r17
    5f26:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <uart_putc_hex>
}
    5f2a:	1f 91       	pop	r17
    5f2c:	08 95       	ret

00005f2e <uart_putdw_hex>:

void uart_putdw_hex(uint32_t dw)
{
    5f2e:	ef 92       	push	r14
    5f30:	ff 92       	push	r15
    5f32:	0f 93       	push	r16
    5f34:	1f 93       	push	r17
    5f36:	7b 01       	movw	r14, r22
    5f38:	8c 01       	movw	r16, r24
    uart_putw_hex((uint16_t) (dw >> 16));
    5f3a:	c8 01       	movw	r24, r16
    5f3c:	aa 27       	eor	r26, r26
    5f3e:	bb 27       	eor	r27, r27
    5f40:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <uart_putw_hex>
    uart_putw_hex((uint16_t) (dw & 0xffff));
    5f44:	c7 01       	movw	r24, r14
    5f46:	0e 94 8d 2f 	call	0x5f1a	; 0x5f1a <uart_putw_hex>
}
    5f4a:	1f 91       	pop	r17
    5f4c:	0f 91       	pop	r16
    5f4e:	ff 90       	pop	r15
    5f50:	ef 90       	pop	r14
    5f52:	08 95       	ret

00005f54 <uart_putw_dec>:

void uart_putw_dec(uint16_t w)
{
    5f54:	0f 93       	push	r16
    5f56:	1f 93       	push	r17
    5f58:	cf 93       	push	r28
    5f5a:	df 93       	push	r29
    5f5c:	8c 01       	movw	r16, r24
    5f5e:	e0 e1       	ldi	r30, 0x10	; 16
    5f60:	f7 e2       	ldi	r31, 0x27	; 39
    5f62:	40 e0       	ldi	r20, 0x00	; 0
    5f64:	c0 e0       	ldi	r28, 0x00	; 0
    5f66:	d0 e0       	ldi	r29, 0x00	; 0
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = w / num;
    5f68:	c8 01       	movw	r24, r16
    5f6a:	bf 01       	movw	r22, r30
    5f6c:	0e 94 25 44 	call	0x884a	; 0x884a <__udivmodhi4>
    5f70:	26 2f       	mov	r18, r22
        if(b > 0 || started || num == 1)
    5f72:	66 23       	and	r22, r22
    5f74:	29 f4       	brne	.+10     	; 0x5f80 <uart_putw_dec+0x2c>
    5f76:	44 23       	and	r20, r20
    5f78:	19 f4       	brne	.+6      	; 0x5f80 <uart_putw_dec+0x2c>
    5f7a:	e1 30       	cpi	r30, 0x01	; 1
    5f7c:	f1 05       	cpc	r31, r1
    5f7e:	49 f4       	brne	.+18     	; 0x5f92 <uart_putw_dec+0x3e>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    5f80:	80 91 c8 00 	lds	r24, 0x00C8
    5f84:	85 ff       	sbrs	r24, 5
    5f86:	fc cf       	rjmp	.-8      	; 0x5f80 <uart_putw_dec+0x2c>
    while(num > 0)
    {
        uint8_t b = w / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
    5f88:	20 5d       	subi	r18, 0xD0	; 208
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));

    /* send next byte */
    UDR1 = c;
    5f8a:	20 93 ce 00 	sts	0x00CE, r18
    5f8e:	20 53       	subi	r18, 0x30	; 48
    5f90:	41 e0       	ldi	r20, 0x01	; 1
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;

        num /= 10;
    5f92:	cf 01       	movw	r24, r30
    5f94:	6a e0       	ldi	r22, 0x0A	; 10
    5f96:	70 e0       	ldi	r23, 0x00	; 0
    5f98:	0e 94 25 44 	call	0x884a	; 0x884a <__udivmodhi4>
    5f9c:	21 96       	adiw	r28, 0x01	; 1
void uart_putw_dec(uint16_t w)
{
    uint16_t num = 10000;
    uint8_t started = 0;

    while(num > 0)
    5f9e:	c5 30       	cpi	r28, 0x05	; 5
    5fa0:	d1 05       	cpc	r29, r1
    5fa2:	71 f0       	breq	.+28     	; 0x5fc0 <uart_putw_dec+0x6c>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        w -= b * num;
    5fa4:	82 2f       	mov	r24, r18
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	9c 01       	movw	r18, r24
    5faa:	2e 9f       	mul	r18, r30
    5fac:	c0 01       	movw	r24, r0
    5fae:	2f 9f       	mul	r18, r31
    5fb0:	90 0d       	add	r25, r0
    5fb2:	3e 9f       	mul	r19, r30
    5fb4:	90 0d       	add	r25, r0
    5fb6:	11 24       	eor	r1, r1
    5fb8:	08 1b       	sub	r16, r24
    5fba:	19 0b       	sbc	r17, r25
    5fbc:	fb 01       	movw	r30, r22
    5fbe:	d4 cf       	rjmp	.-88     	; 0x5f68 <uart_putw_dec+0x14>

        num /= 10;
    }
}
    5fc0:	df 91       	pop	r29
    5fc2:	cf 91       	pop	r28
    5fc4:	1f 91       	pop	r17
    5fc6:	0f 91       	pop	r16
    5fc8:	08 95       	ret

00005fca <uart_putdw_dec>:

void uart_putdw_dec(uint32_t dw)
{
    5fca:	4f 92       	push	r4
    5fcc:	5f 92       	push	r5
    5fce:	6f 92       	push	r6
    5fd0:	7f 92       	push	r7
    5fd2:	8f 92       	push	r8
    5fd4:	9f 92       	push	r9
    5fd6:	af 92       	push	r10
    5fd8:	bf 92       	push	r11
    5fda:	cf 92       	push	r12
    5fdc:	df 92       	push	r13
    5fde:	ef 92       	push	r14
    5fe0:	ff 92       	push	r15
    5fe2:	0f 93       	push	r16
    5fe4:	1f 93       	push	r17
    5fe6:	cf 93       	push	r28
    5fe8:	df 93       	push	r29
    5fea:	4b 01       	movw	r8, r22
    5fec:	5c 01       	movw	r10, r24
    5fee:	e1 2c       	mov	r14, r1
    5ff0:	9a ec       	ldi	r25, 0xCA	; 202
    5ff2:	f9 2e       	mov	r15, r25
    5ff4:	9a e9       	ldi	r25, 0x9A	; 154
    5ff6:	09 2f       	mov	r16, r25
    5ff8:	9b e3       	ldi	r25, 0x3B	; 59
    5ffa:	19 2f       	mov	r17, r25
    5ffc:	44 24       	eor	r4, r4
    5ffe:	c0 e0       	ldi	r28, 0x00	; 0
    6000:	d0 e0       	ldi	r29, 0x00	; 0
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    {
        uint8_t b = dw / num;
    6002:	c5 01       	movw	r24, r10
    6004:	b4 01       	movw	r22, r8
    6006:	a8 01       	movw	r20, r16
    6008:	97 01       	movw	r18, r14
    600a:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    600e:	d2 2e       	mov	r13, r18
        if(b > 0 || started || num == 1)
    6010:	22 23       	and	r18, r18
    6012:	41 f4       	brne	.+16     	; 0x6024 <uart_putdw_dec+0x5a>
    6014:	44 20       	and	r4, r4
    6016:	31 f4       	brne	.+12     	; 0x6024 <uart_putdw_dec+0x5a>
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	e8 16       	cp	r14, r24
    601c:	f1 04       	cpc	r15, r1
    601e:	01 05       	cpc	r16, r1
    6020:	11 05       	cpc	r17, r1
    6022:	61 f4       	brne	.+24     	; 0x603c <uart_putdw_dec+0x72>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    6024:	80 91 c8 00 	lds	r24, 0x00C8
    6028:	85 ff       	sbrs	r24, 5
    602a:	fc cf       	rjmp	.-8      	; 0x6024 <uart_putdw_dec+0x5a>
    while(num > 0)
    {
        uint8_t b = dw / num;
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
    602c:	80 e3       	ldi	r24, 0x30	; 48
    602e:	d8 0e       	add	r13, r24
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));

    /* send next byte */
    UDR1 = c;
    6030:	d0 92 ce 00 	sts	0x00CE, r13
    6034:	80 ed       	ldi	r24, 0xD0	; 208
    6036:	d8 0e       	add	r13, r24
    6038:	44 24       	eor	r4, r4
    603a:	43 94       	inc	r4
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;

        num /= 10;
    603c:	c8 01       	movw	r24, r16
    603e:	b7 01       	movw	r22, r14
    6040:	2a e0       	ldi	r18, 0x0A	; 10
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	40 e0       	ldi	r20, 0x00	; 0
    6046:	50 e0       	ldi	r21, 0x00	; 0
    6048:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    604c:	c2 2e       	mov	r12, r18
    604e:	73 2e       	mov	r7, r19
    6050:	64 2e       	mov	r6, r20
    6052:	55 2e       	mov	r5, r21
    6054:	21 96       	adiw	r28, 0x01	; 1
void uart_putdw_dec(uint32_t dw)
{
    uint32_t num = 1000000000;
    uint8_t started = 0;

    while(num > 0)
    6056:	ca 30       	cpi	r28, 0x0A	; 10
    6058:	d1 05       	cpc	r29, r1
    605a:	a9 f0       	breq	.+42     	; 0x6086 <uart_putdw_dec+0xbc>
        if(b > 0 || started || num == 1)
        {
            uart_putc('0' + b);
            started = 1;
        }
        dw -= b * num;
    605c:	6d 2d       	mov	r22, r13
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	a8 01       	movw	r20, r16
    6066:	97 01       	movw	r18, r14
    6068:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    606c:	86 1a       	sub	r8, r22
    606e:	97 0a       	sbc	r9, r23
    6070:	a8 0a       	sbc	r10, r24
    6072:	b9 0a       	sbc	r11, r25
    6074:	2c 2d       	mov	r18, r12
    6076:	37 2d       	mov	r19, r7
    6078:	46 2d       	mov	r20, r6
    607a:	55 2d       	mov	r21, r5
    607c:	c9 01       	movw	r24, r18
    607e:	da 01       	movw	r26, r20
    6080:	7c 01       	movw	r14, r24
    6082:	8d 01       	movw	r16, r26
    6084:	be cf       	rjmp	.-132    	; 0x6002 <uart_putdw_dec+0x38>

        num /= 10;
    }
}
    6086:	df 91       	pop	r29
    6088:	cf 91       	pop	r28
    608a:	1f 91       	pop	r17
    608c:	0f 91       	pop	r16
    608e:	ff 90       	pop	r15
    6090:	ef 90       	pop	r14
    6092:	df 90       	pop	r13
    6094:	cf 90       	pop	r12
    6096:	bf 90       	pop	r11
    6098:	af 90       	pop	r10
    609a:	9f 90       	pop	r9
    609c:	8f 90       	pop	r8
    609e:	7f 90       	pop	r7
    60a0:	6f 90       	pop	r6
    60a2:	5f 90       	pop	r5
    60a4:	4f 90       	pop	r4
    60a6:	08 95       	ret

000060a8 <uart_puts>:

void uart_puts(const char* str)
{
    60a8:	fc 01       	movw	r30, r24
    60aa:	07 c0       	rjmp	.+14     	; 0x60ba <uart_puts+0x12>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    60ac:	80 91 c8 00 	lds	r24, 0x00C8
    60b0:	85 ff       	sbrs	r24, 5
    60b2:	fc cf       	rjmp	.-8      	; 0x60ac <uart_puts+0x4>
}

void uart_puts(const char* str)
{
    while(*str)
        uart_putc(*str++);
    60b4:	31 96       	adiw	r30, 0x01	; 1
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));

    /* send next byte */
    UDR1 = c;
    60b6:	90 93 ce 00 	sts	0x00CE, r25
    }
}

void uart_puts(const char* str)
{
    while(*str)
    60ba:	90 81       	ld	r25, Z
    60bc:	99 23       	and	r25, r25
    60be:	b1 f7       	brne	.-20     	; 0x60ac <uart_puts+0x4>
        uart_putc(*str++);
}
    60c0:	08 95       	ret

000060c2 <uart_puts_p>:

void uart_puts_p(PGM_P str)
{
    60c2:	9c 01       	movw	r18, r24
    60c4:	f9 01       	movw	r30, r18
    while(1)
    {
        uint8_t b = pgm_read_byte_near(str++);
    60c6:	2f 5f       	subi	r18, 0xFF	; 255
    60c8:	3f 4f       	sbci	r19, 0xFF	; 255
    60ca:	94 91       	lpm	r25, Z+
        if(!b)
    60cc:	99 23       	and	r25, r25
    60ce:	39 f0       	breq	.+14     	; 0x60de <uart_puts_p+0x1c>
}

void uart_putc(uint8_t c)
{
    /* wait until transmit buffer is empty */
    while(!(UCSR1A & (1 << UDRE1)));
    60d0:	80 91 c8 00 	lds	r24, 0x00C8
    60d4:	85 ff       	sbrs	r24, 5
    60d6:	fc cf       	rjmp	.-8      	; 0x60d0 <uart_puts_p+0xe>

    /* send next byte */
    UDR1 = c;
    60d8:	90 93 ce 00 	sts	0x00CE, r25
    60dc:	f3 cf       	rjmp	.-26     	; 0x60c4 <uart_puts_p+0x2>
    60de:	08 95       	ret

000060e0 <uart_getc>:

uint8_t uart_getc()
{
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    60e0:	9f b7       	in	r25, 0x3f	; 63
    sei();
    60e2:	78 94       	sei
    60e4:	07 c0       	rjmp	.+14     	; 0x60f4 <uart_getc+0x14>

    while(!(UCSR1A & (1 << RXC1)))
        sleep_mode();
    60e6:	83 b7       	in	r24, 0x33	; 51
    60e8:	81 60       	ori	r24, 0x01	; 1
    60ea:	83 bf       	out	0x33, r24	; 51
    60ec:	88 95       	sleep
    60ee:	83 b7       	in	r24, 0x33	; 51
    60f0:	8e 7f       	andi	r24, 0xFE	; 254
    60f2:	83 bf       	out	0x33, r24	; 51
    /* wait until receive buffer is full */
#if USE_SLEEP
    uint8_t sreg = SREG;
    sei();

    while(!(UCSR1A & (1 << RXC1)))
    60f4:	80 91 c8 00 	lds	r24, 0x00C8
    60f8:	87 ff       	sbrs	r24, 7
    60fa:	f5 cf       	rjmp	.-22     	; 0x60e6 <uart_getc+0x6>
        sleep_mode();

    SREG = sreg;
    60fc:	9f bf       	out	0x3f, r25	; 63
#else
    while(!(UCSRA & (1 << RXC)));
#endif

    uint8_t b = UDR1;
    60fe:	80 91 ce 00 	lds	r24, 0x00CE
    if(b == '\r')
    6102:	8d 30       	cpi	r24, 0x0D	; 13
    6104:	09 f4       	brne	.+2      	; 0x6108 <uart_getc+0x28>
    6106:	8a e0       	ldi	r24, 0x0A	; 10
        b = '\n';

    return b;
}
    6108:	08 95       	ret

0000610a <__vector_32>:

EMPTY_INTERRUPT(USART1_RX_vect)
    610a:	18 95       	reti

0000610c <can_tx>:


#include "can.h"

uint8_t can_tx( char mob, 	volatile CAN_packet *packet)
{
    610c:	cf 93       	push	r28
    610e:	df 93       	push	r29
    6110:	e8 2f       	mov	r30, r24
    6112:	eb 01       	movw	r28, r22
	unsigned cnt;

    CANPAGE = mob << 4;
    6114:	82 95       	swap	r24
    6116:	80 7f       	andi	r24, 0xF0	; 240
    6118:	80 93 ed 00 	sts	0x00ED, r24

	if((CANCDMOB & 0b11000000) && ((CANSTMOB & 0x40)==0))
    611c:	80 91 ef 00 	lds	r24, 0x00EF
    6120:	80 7c       	andi	r24, 0xC0	; 192
    6122:	21 f0       	breq	.+8      	; 0x612c <can_tx+0x20>
    6124:	80 91 ee 00 	lds	r24, 0x00EE
    6128:	86 ff       	sbrs	r24, 6
    612a:	93 c0       	rjmp	.+294    	; 0x6252 <can_tx+0x146>
	{
		return(0);
	}

	if(msg_type_lu[mob]!=0)
    612c:	4e 2f       	mov	r20, r30
    612e:	50 e0       	ldi	r21, 0x00	; 0
    6130:	fa 01       	movw	r30, r20
    6132:	e0 5c       	subi	r30, 0xC0	; 192
    6134:	fb 4f       	sbci	r31, 0xFB	; 251
    6136:	80 81       	ld	r24, Z
    6138:	88 23       	and	r24, r24
    613a:	09 f0       	breq	.+2      	; 0x613e <can_tx+0x32>
    613c:	8a c0       	rjmp	.+276    	; 0x6252 <can_tx+0x146>
	{
		return(0);
	}

	CANSTMOB = 0x00;    	// cancel pending operation
    613e:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
    6142:	10 92 ef 00 	sts	0x00EF, r1

	if(packet->id_type == CAN_STD_MSG)
    6146:	8c 81       	ldd	r24, Y+4	; 0x04
    6148:	88 23       	and	r24, r24
    614a:	d9 f4       	brne	.+54     	; 0x6182 <can_tx+0x76>
	{
		CANIDT1=packet->id >>3;
    614c:	88 81       	ld	r24, Y
    614e:	99 81       	ldd	r25, Y+1	; 0x01
    6150:	aa 81       	ldd	r26, Y+2	; 0x02
    6152:	bb 81       	ldd	r27, Y+3	; 0x03
    6154:	73 e0       	ldi	r23, 0x03	; 3
    6156:	b6 95       	lsr	r27
    6158:	a7 95       	ror	r26
    615a:	97 95       	ror	r25
    615c:	87 95       	ror	r24
    615e:	7a 95       	dec	r23
    6160:	d1 f7       	brne	.-12     	; 0x6156 <can_tx+0x4a>
    6162:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2=packet->id <<5;
    6166:	88 81       	ld	r24, Y
    6168:	99 81       	ldd	r25, Y+1	; 0x01
    616a:	aa 81       	ldd	r26, Y+2	; 0x02
    616c:	bb 81       	ldd	r27, Y+3	; 0x03
    616e:	82 95       	swap	r24
    6170:	88 0f       	add	r24, r24
    6172:	80 7e       	andi	r24, 0xE0	; 224
    6174:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3 = 0;
    6178:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
    617c:	10 92 f0 00 	sts	0x00F0, r1
    6180:	35 c0       	rjmp	.+106    	; 0x61ec <can_tx+0xe0>
	}
	else
	{
		CANIDT1 = 0x000000FF & (packet->id >> 21);
    6182:	88 81       	ld	r24, Y
    6184:	99 81       	ldd	r25, Y+1	; 0x01
    6186:	aa 81       	ldd	r26, Y+2	; 0x02
    6188:	bb 81       	ldd	r27, Y+3	; 0x03
    618a:	65 e1       	ldi	r22, 0x15	; 21
    618c:	b6 95       	lsr	r27
    618e:	a7 95       	ror	r26
    6190:	97 95       	ror	r25
    6192:	87 95       	ror	r24
    6194:	6a 95       	dec	r22
    6196:	d1 f7       	brne	.-12     	; 0x618c <can_tx+0x80>
    6198:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2 = 0x000000FF & packet->id >>13;
    619c:	88 81       	ld	r24, Y
    619e:	99 81       	ldd	r25, Y+1	; 0x01
    61a0:	aa 81       	ldd	r26, Y+2	; 0x02
    61a2:	bb 81       	ldd	r27, Y+3	; 0x03
    61a4:	3d e0       	ldi	r19, 0x0D	; 13
    61a6:	b6 95       	lsr	r27
    61a8:	a7 95       	ror	r26
    61aa:	97 95       	ror	r25
    61ac:	87 95       	ror	r24
    61ae:	3a 95       	dec	r19
    61b0:	d1 f7       	brne	.-12     	; 0x61a6 <can_tx+0x9a>
    61b2:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3 = 0x000000FF & packet ->id >> 5;
    61b6:	88 81       	ld	r24, Y
    61b8:	99 81       	ldd	r25, Y+1	; 0x01
    61ba:	aa 81       	ldd	r26, Y+2	; 0x02
    61bc:	bb 81       	ldd	r27, Y+3	; 0x03
    61be:	25 e0       	ldi	r18, 0x05	; 5
    61c0:	b6 95       	lsr	r27
    61c2:	a7 95       	ror	r26
    61c4:	97 95       	ror	r25
    61c6:	87 95       	ror	r24
    61c8:	2a 95       	dec	r18
    61ca:	d1 f7       	brne	.-12     	; 0x61c0 <can_tx+0xb4>
    61cc:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4 = 0x000000FF & packet->id << 3;
    61d0:	88 81       	ld	r24, Y
    61d2:	99 81       	ldd	r25, Y+1	; 0x01
    61d4:	aa 81       	ldd	r26, Y+2	; 0x02
    61d6:	bb 81       	ldd	r27, Y+3	; 0x03
    61d8:	88 0f       	add	r24, r24
    61da:	88 0f       	add	r24, r24
    61dc:	88 0f       	add	r24, r24
    61de:	80 93 f0 00 	sts	0x00F0, r24
		CANCDMOB |= _BV(IDE);
    61e2:	80 91 ef 00 	lds	r24, 0x00EF
    61e6:	80 61       	ori	r24, 0x10	; 16
    61e8:	80 93 ef 00 	sts	0x00EF, r24
    61ec:	20 e0       	ldi	r18, 0x00	; 0
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	08 c0       	rjmp	.+16     	; 0x6202 <can_tx+0xf6>
	}

	for (cnt=0; cnt < packet->length; ++cnt)
	{
		CANMSG = packet->data[cnt];
    61f2:	fe 01       	movw	r30, r28
    61f4:	e2 0f       	add	r30, r18
    61f6:	f3 1f       	adc	r31, r19
    61f8:	87 81       	ldd	r24, Z+7	; 0x07
    61fa:	80 93 fa 00 	sts	0x00FA, r24
		CANIDT3 = 0x000000FF & packet ->id >> 5;
		CANIDT4 = 0x000000FF & packet->id << 3;
		CANCDMOB |= _BV(IDE);
	}

	for (cnt=0; cnt < packet->length; ++cnt)
    61fe:	2f 5f       	subi	r18, 0xFF	; 255
    6200:	3f 4f       	sbci	r19, 0xFF	; 255
    6202:	8e 81       	ldd	r24, Y+6	; 0x06
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	28 17       	cp	r18, r24
    6208:	39 07       	cpc	r19, r25
    620a:	98 f3       	brcs	.-26     	; 0x61f2 <can_tx+0xe6>
	{
		CANMSG = packet->data[cnt];
	}

	CANCDMOB|=packet->length;
    620c:	90 91 ef 00 	lds	r25, 0x00EF
    6210:	8e 81       	ldd	r24, Y+6	; 0x06
    6212:	89 2b       	or	r24, r25
    6214:	80 93 ef 00 	sts	0x00EF, r24

	msg_type_lu[mob] = CAN_TX_MSG;
    6218:	fa 01       	movw	r30, r20
    621a:	e0 5c       	subi	r30, 0xC0	; 192
    621c:	fb 4f       	sbci	r31, 0xFB	; 251
    621e:	82 e0       	ldi	r24, 0x02	; 2
    6220:	80 83       	st	Z, r24

	uint16_t canie = (1<<mob);
    6222:	21 e0       	ldi	r18, 0x01	; 1
    6224:	30 e0       	ldi	r19, 0x00	; 0
    6226:	02 c0       	rjmp	.+4      	; 0x622c <can_tx+0x120>
    6228:	22 0f       	add	r18, r18
    622a:	33 1f       	adc	r19, r19
    622c:	4a 95       	dec	r20
    622e:	e2 f7       	brpl	.-8      	; 0x6228 <can_tx+0x11c>

	CANIE2 |= (uint8_t)(0x00FF  & canie);
    6230:	80 91 de 00 	lds	r24, 0x00DE
    6234:	82 2b       	or	r24, r18
    6236:	80 93 de 00 	sts	0x00DE, r24
	CANIE1 |= (uint8_t)(0x00FF & (canie >> 8));
    623a:	80 91 df 00 	lds	r24, 0x00DF
    623e:	83 2b       	or	r24, r19
    6240:	80 93 df 00 	sts	0x00DF, r24

    CANCDMOB|=0x40; //enable TX
    6244:	80 91 ef 00 	lds	r24, 0x00EF
    6248:	80 64       	ori	r24, 0x40	; 64
    624a:	80 93 ef 00 	sts	0x00EF, r24
    624e:	81 e0       	ldi	r24, 0x01	; 1
    6250:	01 c0       	rjmp	.+2      	; 0x6254 <can_tx+0x148>
	return(1);
    6252:	80 e0       	ldi	r24, 0x00	; 0
}
    6254:	df 91       	pop	r29
    6256:	cf 91       	pop	r28
    6258:	08 95       	ret

0000625a <prepare_rx>:

uint8_t prepare_rx( uint8_t mob, uint32_t tag, uint32_t mask, uint8_t id_type,uint8_t msg_type)
{
    625a:	cf 92       	push	r12
    625c:	ef 92       	push	r14
    625e:	0f 93       	push	r16
    6260:	1f 93       	push	r17
    6262:	cf 93       	push	r28
    6264:	df 93       	push	r29
    6266:	e8 2f       	mov	r30, r24
    6268:	9e 2d       	mov	r25, r14
	uint16_t mob_mask = 0;

	if( mob >= 15) 				// illegal MOB number
    626a:	8f 30       	cpi	r24, 0x0F	; 15
    626c:	08 f0       	brcs	.+2      	; 0x6270 <prepare_rx+0x16>
    626e:	7c c0       	rjmp	.+248    	; 0x6368 <prepare_rx+0x10e>
	{
		return(0);
	}


    CANPAGE = mob << 4;
    6270:	82 95       	swap	r24
    6272:	80 7f       	andi	r24, 0xF0	; 240
    6274:	80 93 ed 00 	sts	0x00ED, r24

	if( CANCDMOB & 0b11000000) 	// if MOB already in use
    6278:	80 91 ef 00 	lds	r24, 0x00EF
    627c:	80 7c       	andi	r24, 0xC0	; 192
    627e:	09 f0       	breq	.+2      	; 0x6282 <prepare_rx+0x28>
    6280:	73 c0       	rjmp	.+230    	; 0x6368 <prepare_rx+0x10e>
	{
		return(0);			// no vacancy ...
	}

	msg_type_lu[mob] = msg_type;
    6282:	ce 2f       	mov	r28, r30
    6284:	d0 e0       	ldi	r29, 0x00	; 0
    6286:	fe 01       	movw	r30, r28
    6288:	e0 5c       	subi	r30, 0xC0	; 192
    628a:	fb 4f       	sbci	r31, 0xFB	; 251
    628c:	c0 82       	st	Z, r12

	CANSTMOB = 0x00;    	// cancel pending operation
    628e:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
    6292:	10 92 ef 00 	sts	0x00EF, r1
	CANHPMOB = 0x00;		// enable direct mob indexing, see docu
    6296:	10 92 ec 00 	sts	0x00EC, r1

	if(id_type == CAN_EXT_MSG)
    629a:	91 30       	cpi	r25, 0x01	; 1
    629c:	09 f0       	breq	.+2      	; 0x62a0 <prepare_rx+0x46>
    629e:	51 c0       	rjmp	.+162    	; 0x6342 <prepare_rx+0xe8>
	{
		CANIDT1 = (uint8_t)((tag >>21) & 0x000000FF);
    62a0:	db 01       	movw	r26, r22
    62a2:	ca 01       	movw	r24, r20
    62a4:	f5 e1       	ldi	r31, 0x15	; 21
    62a6:	b6 95       	lsr	r27
    62a8:	a7 95       	ror	r26
    62aa:	97 95       	ror	r25
    62ac:	87 95       	ror	r24
    62ae:	fa 95       	dec	r31
    62b0:	d1 f7       	brne	.-12     	; 0x62a6 <prepare_rx+0x4c>
    62b2:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2 = (uint8_t)((tag >>13) & 0x000000FF);
    62b6:	db 01       	movw	r26, r22
    62b8:	ca 01       	movw	r24, r20
    62ba:	ed e0       	ldi	r30, 0x0D	; 13
    62bc:	b6 95       	lsr	r27
    62be:	a7 95       	ror	r26
    62c0:	97 95       	ror	r25
    62c2:	87 95       	ror	r24
    62c4:	ea 95       	dec	r30
    62c6:	d1 f7       	brne	.-12     	; 0x62bc <prepare_rx+0x62>
    62c8:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3 = (uint8_t)((tag >> 5) & 0x000000FF);
    62cc:	db 01       	movw	r26, r22
    62ce:	ca 01       	movw	r24, r20
    62d0:	55 e0       	ldi	r21, 0x05	; 5
    62d2:	b6 95       	lsr	r27
    62d4:	a7 95       	ror	r26
    62d6:	97 95       	ror	r25
    62d8:	87 95       	ror	r24
    62da:	5a 95       	dec	r21
    62dc:	d1 f7       	brne	.-12     	; 0x62d2 <prepare_rx+0x78>
    62de:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4 = (uint8_t)((tag << 3) & 0x000000FF);
    62e2:	84 2f       	mov	r24, r20
    62e4:	88 0f       	add	r24, r24
    62e6:	88 0f       	add	r24, r24
    62e8:	88 0f       	add	r24, r24
    62ea:	80 93 f0 00 	sts	0x00F0, r24
		CANIDM1 = (uint8_t)((mask >> 21) & 0x000000FF);
    62ee:	d9 01       	movw	r26, r18
    62f0:	c8 01       	movw	r24, r16
    62f2:	45 e1       	ldi	r20, 0x15	; 21
    62f4:	b6 95       	lsr	r27
    62f6:	a7 95       	ror	r26
    62f8:	97 95       	ror	r25
    62fa:	87 95       	ror	r24
    62fc:	4a 95       	dec	r20
    62fe:	d1 f7       	brne	.-12     	; 0x62f4 <prepare_rx+0x9a>
    6300:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2 = (uint8_t)((mask >> 13) & 0x000000FF);
    6304:	d9 01       	movw	r26, r18
    6306:	c8 01       	movw	r24, r16
    6308:	fd e0       	ldi	r31, 0x0D	; 13
    630a:	b6 95       	lsr	r27
    630c:	a7 95       	ror	r26
    630e:	97 95       	ror	r25
    6310:	87 95       	ror	r24
    6312:	fa 95       	dec	r31
    6314:	d1 f7       	brne	.-12     	; 0x630a <prepare_rx+0xb0>
    6316:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3 = (uint8_t)((mask >> 5) & 0x000000FF);
    631a:	d9 01       	movw	r26, r18
    631c:	c8 01       	movw	r24, r16
    631e:	e5 e0       	ldi	r30, 0x05	; 5
    6320:	b6 95       	lsr	r27
    6322:	a7 95       	ror	r26
    6324:	97 95       	ror	r25
    6326:	87 95       	ror	r24
    6328:	ea 95       	dec	r30
    632a:	d1 f7       	brne	.-12     	; 0x6320 <prepare_rx+0xc6>
    632c:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4 = (uint8_t)((mask << 3) & 0x000000FF);
    6330:	80 2f       	mov	r24, r16
    6332:	88 0f       	add	r24, r24
    6334:	88 0f       	add	r24, r24
    6336:	88 0f       	add	r24, r24
    6338:	80 93 f4 00 	sts	0x00F4, r24
		//CANIDM4|= 0x01; // Set IDE mask
		CANCDMOB= 0x80|_BV(IDE);
    633c:	80 e9       	ldi	r24, 0x90	; 144
    633e:	80 93 ef 00 	sts	0x00EF, r24
	}
	mob_mask = 1<<mob;
    6342:	81 e0       	ldi	r24, 0x01	; 1
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	02 c0       	rjmp	.+4      	; 0x634c <prepare_rx+0xf2>
    6348:	88 0f       	add	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	ca 95       	dec	r28
    634e:	e2 f7       	brpl	.-8      	; 0x6348 <prepare_rx+0xee>
	CANIE2 |= mob_mask;
    6350:	20 91 de 00 	lds	r18, 0x00DE
    6354:	28 2b       	or	r18, r24
    6356:	20 93 de 00 	sts	0x00DE, r18
	CANIE1 |= (mob_mask>>8);
    635a:	20 91 df 00 	lds	r18, 0x00DF
    635e:	29 2b       	or	r18, r25
    6360:	20 93 df 00 	sts	0x00DF, r18
    6364:	81 e0       	ldi	r24, 0x01	; 1
    6366:	01 c0       	rjmp	.+2      	; 0x636a <prepare_rx+0x110>

	return(1);
    6368:	80 e0       	ldi	r24, 0x00	; 0
}
    636a:	df 91       	pop	r29
    636c:	cf 91       	pop	r28
    636e:	1f 91       	pop	r17
    6370:	0f 91       	pop	r16
    6372:	ef 90       	pop	r14
    6374:	cf 90       	pop	r12
    6376:	08 95       	ret

00006378 <can_init>:
	unsigned mob;

	if(F_CPU == 16000000)
	{
		// For 16MHz gives 250K Baud
		CANBT1 = 0x06;
    6378:	86 e0       	ldi	r24, 0x06	; 6
    637a:	80 93 e2 00 	sts	0x00E2, r24
		CANBT2 = 0x0C;
    637e:	8c e0       	ldi	r24, 0x0C	; 12
    6380:	80 93 e3 00 	sts	0x00E3, r24
		CANBT3 = 0x37;
    6384:	87 e3       	ldi	r24, 0x37	; 55
    6386:	80 93 e4 00 	sts	0x00E4, r24
    638a:	90 e0       	ldi	r25, 0x00	; 0
	}

	for (mob = 0; mob < NO_MOBS; mob++)
	{
		CANPAGE  = (mob << 4);
    638c:	89 2f       	mov	r24, r25
    638e:	82 95       	swap	r24
    6390:	80 7f       	andi	r24, 0xF0	; 240
    6392:	80 93 ed 00 	sts	0x00ED, r24
		CANSTMOB = 0;
    6396:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0;
    639a:	10 92 ef 00 	sts	0x00EF, r1
    639e:	9f 5f       	subi	r25, 0xFF	; 255
		CANBT1 = 0x06;
		CANBT2 = 0x0C;
		CANBT3 = 0x37;
	}

	for (mob = 0; mob < NO_MOBS; mob++)
    63a0:	9f 30       	cpi	r25, 0x0F	; 15
    63a2:	a1 f7       	brne	.-24     	; 0x638c <can_init+0x14>
	{
		CANPAGE  = (mob << 4);
		CANSTMOB = 0;
		CANCDMOB = 0;
	}
	CANGCON |= 0x02;
    63a4:	80 91 d8 00 	lds	r24, 0x00D8
    63a8:	82 60       	ori	r24, 0x02	; 2
    63aa:	80 93 d8 00 	sts	0x00D8, r24
	CANGIE=(1<<ENIT) | (1<< ENRX)|(1 << ENTX);
    63ae:	80 eb       	ldi	r24, 0xB0	; 176
    63b0:	80 93 db 00 	sts	0x00DB, r24

	while(!(CANGSTA & _BV(ENFG)));
    63b4:	80 91 d9 00 	lds	r24, 0x00D9
    63b8:	82 ff       	sbrs	r24, 2
    63ba:	fc cf       	rjmp	.-8      	; 0x63b4 <can_init+0x3c>
}
    63bc:	08 95       	ret

000063be <get_open_mob>:

uint8_t get_open_mob(void)
{
    63be:	e0 e4       	ldi	r30, 0x40	; 64
    63c0:	f4 e0       	ldi	r31, 0x04	; 4
    63c2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i = 0;
	for(i=0;i<NO_MOBS;i++)
	{
		if(msg_type_lu[i] == 0)
    63c4:	80 81       	ld	r24, Z
    63c6:	88 23       	and	r24, r24
    63c8:	29 f0       	breq	.+10     	; 0x63d4 <get_open_mob+0x16>
}

uint8_t get_open_mob(void)
{
	uint8_t i = 0;
	for(i=0;i<NO_MOBS;i++)
    63ca:	9f 5f       	subi	r25, 0xFF	; 255
    63cc:	31 96       	adiw	r30, 0x01	; 1
    63ce:	9f 30       	cpi	r25, 0x0F	; 15
    63d0:	c9 f7       	brne	.-14     	; 0x63c4 <get_open_mob+0x6>
    63d2:	9f ef       	ldi	r25, 0xFF	; 255
		{
			return(i);
		}
	}
	return(0xFF);
}
    63d4:	89 2f       	mov	r24, r25
    63d6:	08 95       	ret

000063d8 <GetParameterString>:
		}
	}
}

uint8_t GetParameterString(const char *in_str,uint8_t *index,char *pstr,uint8_t max,uint8_t min)
{
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	8c 01       	movw	r16, r24
    63e2:	eb 01       	movw	r28, r22
    63e4:	60 e0       	ldi	r22, 0x00	; 0
	//sprintf(test_str,"Index[%u]\n\r",*index);
	//uart_puts(test_str);

	while(1)
	{
		if(pstr_idx == max+1)
    63e6:	30 e0       	ldi	r19, 0x00	; 0
    63e8:	2f 5f       	subi	r18, 0xFF	; 255
    63ea:	3f 4f       	sbci	r19, 0xFF	; 255
    63ec:	a6 2f       	mov	r26, r22
    63ee:	b0 e0       	ldi	r27, 0x00	; 0
    63f0:	a2 17       	cp	r26, r18
    63f2:	b3 07       	cpc	r27, r19
    63f4:	71 f0       	breq	.+28     	; 0x6412 <GetParameterString+0x3a>
		{
			return 0xFF;
		}

		c = in_str[(*index)++];
    63f6:	88 81       	ld	r24, Y
    63f8:	f8 01       	movw	r30, r16
    63fa:	e8 0f       	add	r30, r24
    63fc:	f1 1d       	adc	r31, r1
    63fe:	e0 81       	ld	r30, Z
    6400:	8f 5f       	subi	r24, 0xFF	; 255
    6402:	88 83       	st	Y, r24

		if(c == ',')
    6404:	ec 32       	cpi	r30, 0x2C	; 44
    6406:	31 f0       	breq	.+12     	; 0x6414 <GetParameterString+0x3c>
//			else				return 0xFF;
			return pstr_idx;
		}
		else
		{
			pstr[pstr_idx++] = c;
    6408:	a4 0f       	add	r26, r20
    640a:	b5 1f       	adc	r27, r21
    640c:	ec 93       	st	X, r30
    640e:	6f 5f       	subi	r22, 0xFF	; 255
    6410:	ed cf       	rjmp	.-38     	; 0x63ec <GetParameterString+0x14>
		}
	}
    6412:	6f ef       	ldi	r22, 0xFF	; 255

	return 0;
}
    6414:	86 2f       	mov	r24, r22
    6416:	df 91       	pop	r29
    6418:	cf 91       	pop	r28
    641a:	1f 91       	pop	r17
    641c:	0f 91       	pop	r16
    641e:	08 95       	ret

00006420 <ProcessCanMsg>:
#define ch2dblword(b3,b2,b1,b0)	((((uint32_t)(b3) & 0x000000FF) << 24) + (((uint32_t)(b2) & 0x000000FF) << 16) + (((uint32_t)(b1) & 0x000000FF) << 8) + b0)

volatile uint8_t data_chg = 0;

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
    6420:	1f 93       	push	r17
    6422:	cf 93       	push	r28
    6424:	df 93       	push	r29
    6426:	ec 01       	movw	r28, r24
	uint8_t msg_type;

	unsigned char i;

	// Get the Message Type
	msg_type = pkt->msg_type;
    6428:	1d 81       	ldd	r17, Y+5	; 0x05
	// Clear the message type in the lookup table

	uint16_t id = (uint16_t)((uint32_t)(pkt->id)>>8);
    642a:	88 81       	ld	r24, Y
    642c:	99 81       	ldd	r25, Y+1	; 0x01
    642e:	aa 81       	ldd	r26, Y+2	; 0x02
    6430:	bb 81       	ldd	r27, Y+3	; 0x03

	switch(msg_type)
    6432:	11 30       	cpi	r17, 0x01	; 1
    6434:	09 f0       	breq	.+2      	; 0x6438 <ProcessCanMsg+0x18>
    6436:	ab c2       	rjmp	.+1366   	; 0x698e <ProcessCanMsg+0x56e>
	{
		case CAN_MSGTYPE_NONE:
			return(0);
			return msg_type;
		case CAN_DATABRDCST:
			data_chg = 1;
    6438:	10 93 36 04 	sts	0x0436, r17

			switch(id)
    643c:	89 2f       	mov	r24, r25
    643e:	9a 2f       	mov	r25, r26
    6440:	ab 2f       	mov	r26, r27
    6442:	bb 27       	eor	r27, r27
    6444:	c0 96       	adiw	r24, 0x30	; 48
    6446:	87 32       	cpi	r24, 0x27	; 39
    6448:	91 05       	cpc	r25, r1
    644a:	08 f0       	brcs	.+2      	; 0x644e <ProcessCanMsg+0x2e>
    644c:	a0 c2       	rjmp	.+1344   	; 0x698e <ProcessCanMsg+0x56e>
    644e:	86 5b       	subi	r24, 0xB6	; 182
    6450:	9f 4f       	sbci	r25, 0xFF	; 255
    6452:	fc 01       	movw	r30, r24
    6454:	ee 0f       	add	r30, r30
    6456:	ff 1f       	adc	r31, r31
    6458:	05 90       	lpm	r0, Z+
    645a:	f4 91       	lpm	r31, Z+
    645c:	e0 2d       	mov	r30, r0
    645e:	09 94       	ijmp
			{
				case CAN_DATA_DLGR_TGL:
					if(log_status == NOT_LOGGING)
    6460:	80 91 3b 04 	lds	r24, 0x043B
    6464:	88 23       	and	r24, r24
    6466:	29 f4       	brne	.+10     	; 0x6472 <ProcessCanMsg+0x52>
					{
						open_log("test");
    6468:	8d e0       	ldi	r24, 0x0D	; 13
    646a:	91 e0       	ldi	r25, 0x01	; 1
    646c:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <open_log>
    6470:	8f c2       	rjmp	.+1310   	; 0x6990 <ProcessCanMsg+0x570>
					}
					else if(log_status == LOGGING)
    6472:	80 91 3b 04 	lds	r24, 0x043B
    6476:	81 30       	cpi	r24, 0x01	; 1
    6478:	09 f0       	breq	.+2      	; 0x647c <ProcessCanMsg+0x5c>
    647a:	8a c2       	rjmp	.+1300   	; 0x6990 <ProcessCanMsg+0x570>
					{
						close_log();
    647c:	0e 94 8f 3f 	call	0x7f1e	; 0x7f1e <close_log>
    6480:	87 c2       	rjmp	.+1294   	; 0x6990 <ProcessCanMsg+0x570>
					}
					return msg_type;

				case CAN_DATA_PE1:
					//led_ctrl(LED1,LED_ON,LED_NO_TMR);
					sys.data.chan.rpm = ch2word(pkt->data[1],pkt->data[0]);
    6482:	98 85       	ldd	r25, Y+8	; 0x08
    6484:	80 e0       	ldi	r24, 0x00	; 0
    6486:	2f 81       	ldd	r18, Y+7	; 0x07
    6488:	82 0f       	add	r24, r18
    648a:	91 1d       	adc	r25, r1
    648c:	90 93 10 07 	sts	0x0710, r25
    6490:	80 93 0f 07 	sts	0x070F, r24
					sys.data.chan.tps = ch2word(pkt->data[3],pkt->data[2]);
    6494:	9a 85       	ldd	r25, Y+10	; 0x0a
    6496:	80 e0       	ldi	r24, 0x00	; 0
    6498:	29 85       	ldd	r18, Y+9	; 0x09
    649a:	82 0f       	add	r24, r18
    649c:	91 1d       	adc	r25, r1
    649e:	90 93 12 07 	sts	0x0712, r25
    64a2:	80 93 11 07 	sts	0x0711, r24
					sys.data.chan.fuel_open_time = ch2word(pkt->data[5],pkt->data[4]);
    64a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    64a8:	80 e0       	ldi	r24, 0x00	; 0
    64aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    64ac:	82 0f       	add	r24, r18
    64ae:	91 1d       	adc	r25, r1
    64b0:	90 93 1a 07 	sts	0x071A, r25
    64b4:	80 93 19 07 	sts	0x0719, r24
					sys.data.chan.ign_angle = ch2word(pkt->data[7],pkt->data[6]);
    64b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    64be:	82 0f       	add	r24, r18
    64c0:	91 1d       	adc	r25, r1
    64c2:	90 93 1c 07 	sts	0x071C, r25
    64c6:	80 93 1b 07 	sts	0x071B, r24
    64ca:	62 c2       	rjmp	.+1220   	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_PE2:
					//sys.data.chan.barometer = ch2word(pkt->data[1],pkt->data[0]);
					sys.data.chan.map = ch2word(pkt->data[3],pkt->data[2]);
    64cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    64ce:	80 e0       	ldi	r24, 0x00	; 0
    64d0:	29 85       	ldd	r18, Y+9	; 0x09
    64d2:	82 0f       	add	r24, r18
    64d4:	91 1d       	adc	r25, r1
    64d6:	90 93 1e 07 	sts	0x071E, r25
    64da:	80 93 1d 07 	sts	0x071D, r24
					sys.data.chan.lambda = ch2word(pkt->data[5],pkt->data[4]);
    64de:	9c 85       	ldd	r25, Y+12	; 0x0c
    64e0:	80 e0       	ldi	r24, 0x00	; 0
    64e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    64e4:	82 0f       	add	r24, r18
    64e6:	91 1d       	adc	r25, r1
    64e8:	90 93 20 07 	sts	0x0720, r25
    64ec:	80 93 1f 07 	sts	0x071F, r24
    64f0:	4f c2       	rjmp	.+1182   	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_PE3:
					sys.data.chan.fuel_comp = ch2word(pkt->data[1],pkt->data[0]);
    64f2:	98 85       	ldd	r25, Y+8	; 0x08
    64f4:	80 e0       	ldi	r24, 0x00	; 0
    64f6:	2f 81       	ldd	r18, Y+7	; 0x07
    64f8:	82 0f       	add	r24, r18
    64fa:	91 1d       	adc	r25, r1
    64fc:	90 93 24 07 	sts	0x0724, r25
    6500:	80 93 23 07 	sts	0x0723, r24
					sys.data.chan.timing_comp = ch2word(pkt->data[3],pkt->data[2]);
    6504:	9a 85       	ldd	r25, Y+10	; 0x0a
    6506:	80 e0       	ldi	r24, 0x00	; 0
    6508:	29 85       	ldd	r18, Y+9	; 0x09
    650a:	82 0f       	add	r24, r18
    650c:	91 1d       	adc	r25, r1
    650e:	90 93 28 07 	sts	0x0728, r25
    6512:	80 93 27 07 	sts	0x0727, r24
					sys.data.chan.fbrk_pres = ch2word(pkt->data[5],pkt->data[4]);
    6516:	9c 85       	ldd	r25, Y+12	; 0x0c
    6518:	80 e0       	ldi	r24, 0x00	; 0
    651a:	2b 85       	ldd	r18, Y+11	; 0x0b
    651c:	82 0f       	add	r24, r18
    651e:	91 1d       	adc	r25, r1
    6520:	90 93 16 07 	sts	0x0716, r25
    6524:	80 93 15 07 	sts	0x0715, r24
					sys.data.chan.rbrk_pres = ch2word(pkt->data[7],pkt->data[6]);
    6528:	9e 85       	ldd	r25, Y+14	; 0x0e
    652a:	80 e0       	ldi	r24, 0x00	; 0
    652c:	2d 85       	ldd	r18, Y+13	; 0x0d
    652e:	82 0f       	add	r24, r18
    6530:	91 1d       	adc	r25, r1
    6532:	90 93 18 07 	sts	0x0718, r25
    6536:	80 93 17 07 	sts	0x0717, r24
    653a:	2a c2       	rjmp	.+1108   	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_PE4:
					//sys.data.chan.pe3_a5 = ch2word(pkt->data[1],pkt->data[0]);
					sys.data.chan.oil_pres = ch2word(pkt->data[3],pkt->data[2]);
    653c:	9a 85       	ldd	r25, Y+10	; 0x0a
    653e:	80 e0       	ldi	r24, 0x00	; 0
    6540:	29 85       	ldd	r18, Y+9	; 0x09
    6542:	82 0f       	add	r24, r18
    6544:	91 1d       	adc	r25, r1
    6546:	90 93 14 07 	sts	0x0714, r25
    654a:	80 93 13 07 	sts	0x0713, r24
    654e:	20 c2       	rjmp	.+1088   	; 0x6990 <ProcessCanMsg+0x570>
					//sys.data.chan.pe3_a7 = ch2word(pkt->data[5],pkt->data[4]);
					//sys.data.chan.pe3_a8 = ch2word(pkt->data[7],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_PE5:
					sys.data.chan.fl_wspd = ch2word(pkt->data[1],pkt->data[0]);
    6550:	98 85       	ldd	r25, Y+8	; 0x08
    6552:	80 e0       	ldi	r24, 0x00	; 0
    6554:	2f 81       	ldd	r18, Y+7	; 0x07
    6556:	82 0f       	add	r24, r18
    6558:	91 1d       	adc	r25, r1
    655a:	90 93 2a 07 	sts	0x072A, r25
    655e:	80 93 29 07 	sts	0x0729, r24
					sys.data.chan.fr_wspd = ch2word(pkt->data[3],pkt->data[2]);
    6562:	9a 85       	ldd	r25, Y+10	; 0x0a
    6564:	80 e0       	ldi	r24, 0x00	; 0
    6566:	29 85       	ldd	r18, Y+9	; 0x09
    6568:	82 0f       	add	r24, r18
    656a:	91 1d       	adc	r25, r1
    656c:	90 93 2c 07 	sts	0x072C, r25
    6570:	80 93 2b 07 	sts	0x072B, r24
					sys.data.chan.rl_wspd = ch2word(pkt->data[5],pkt->data[4]);
    6574:	9c 85       	ldd	r25, Y+12	; 0x0c
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	2b 85       	ldd	r18, Y+11	; 0x0b
    657a:	82 0f       	add	r24, r18
    657c:	91 1d       	adc	r25, r1
    657e:	90 93 2e 07 	sts	0x072E, r25
    6582:	80 93 2d 07 	sts	0x072D, r24
					sys.data.chan.rr_wspd = ch2word(pkt->data[7],pkt->data[6]);
    6586:	9e 85       	ldd	r25, Y+14	; 0x0e
    6588:	80 e0       	ldi	r24, 0x00	; 0
    658a:	2d 85       	ldd	r18, Y+13	; 0x0d
    658c:	82 0f       	add	r24, r18
    658e:	91 1d       	adc	r25, r1
    6590:	90 93 30 07 	sts	0x0730, r25
    6594:	80 93 2f 07 	sts	0x072F, r24
    6598:	fb c1       	rjmp	.+1014   	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_PE6:
					sys.data.chan.batt_volt = ch2word(pkt->data[1],pkt->data[0]);
    659a:	98 85       	ldd	r25, Y+8	; 0x08
    659c:	80 e0       	ldi	r24, 0x00	; 0
    659e:	2f 81       	ldd	r18, Y+7	; 0x07
    65a0:	82 0f       	add	r24, r18
    65a2:	91 1d       	adc	r25, r1
    65a4:	90 93 6c 07 	sts	0x076C, r25
    65a8:	80 93 6b 07 	sts	0x076B, r24
					sys.data.chan.air_temp = ch2word(pkt->data[3],pkt->data[2]);
    65ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    65ae:	80 e0       	ldi	r24, 0x00	; 0
    65b0:	29 85       	ldd	r18, Y+9	; 0x09
    65b2:	82 0f       	add	r24, r18
    65b4:	91 1d       	adc	r25, r1
    65b6:	90 93 6e 07 	sts	0x076E, r25
    65ba:	80 93 6d 07 	sts	0x076D, r24
					sys.data.chan.wtr_temp = ch2word(pkt->data[5],pkt->data[4]);
    65be:	9c 85       	ldd	r25, Y+12	; 0x0c
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    65c4:	82 0f       	add	r24, r18
    65c6:	91 1d       	adc	r25, r1
    65c8:	90 93 70 07 	sts	0x0770, r25
    65cc:	80 93 6f 07 	sts	0x076F, r24
    65d0:	df c1       	rjmp	.+958    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_PE7:
					//sys.data.chan.therm5 = ch2word(pkt->data[1],pkt->data[0]);
					sys.data.chan.oil_temp = ch2word(pkt->data[3],pkt->data[2]);
    65d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	29 85       	ldd	r18, Y+9	; 0x09
    65d8:	82 0f       	add	r24, r18
    65da:	91 1d       	adc	r25, r1
    65dc:	90 93 72 07 	sts	0x0772, r25
    65e0:	80 93 71 07 	sts	0x0771, r24
					sys.data.prm.ver_mjr = pkt->data[4];
    65e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    65e6:	80 93 82 07 	sts	0x0782, r24
					sys.data.prm.ver_min = pkt->data[5];
    65ea:	8c 85       	ldd	r24, Y+12	; 0x0c
    65ec:	80 93 83 07 	sts	0x0783, r24
					sys.data.prm.ver_bld = pkt->data[6];
    65f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    65f2:	80 93 84 07 	sts	0x0784, r24
    65f6:	cc c1       	rjmp	.+920    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_TCS1:
					sys.data.status.TCS_status = pkt->data[0];
    65f8:	8f 81       	ldd	r24, Y+7	; 0x07
    65fa:	80 93 aa 07 	sts	0x07AA, r24
					//sys.data.status.trac_status = pkt->data[1];
					//sys.data.chan.lnc_status = pkt->data[2];
					sys.data.prm.lnc_dsb_spd = ch2word(pkt->data[3],pkt->data[4]);
    65fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	2b 85       	ldd	r18, Y+11	; 0x0b
    6604:	82 0f       	add	r24, r18
    6606:	91 1d       	adc	r25, r1
    6608:	90 93 96 07 	sts	0x0796, r25
    660c:	80 93 95 07 	sts	0x0795, r24
    6610:	bf c1       	rjmp	.+894    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_TCS2:
					sys.data.chan.fuel_slip_err = ch2word(pkt->data[0],pkt->data[1]);
    6612:	9f 81       	ldd	r25, Y+7	; 0x07
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	28 85       	ldd	r18, Y+8	; 0x08
    6618:	82 0f       	add	r24, r18
    661a:	91 1d       	adc	r25, r1
    661c:	90 93 22 07 	sts	0x0722, r25
    6620:	80 93 21 07 	sts	0x0721, r24
					sys.data.chan.fuel_comp = ch2word(pkt->data[2],pkt->data[3]);
    6624:	99 85       	ldd	r25, Y+9	; 0x09
    6626:	80 e0       	ldi	r24, 0x00	; 0
    6628:	2a 85       	ldd	r18, Y+10	; 0x0a
    662a:	82 0f       	add	r24, r18
    662c:	91 1d       	adc	r25, r1
    662e:	90 93 24 07 	sts	0x0724, r25
    6632:	80 93 23 07 	sts	0x0723, r24
					sys.data.chan.timing_err = ch2word(pkt->data[4],pkt->data[5]);
    6636:	9b 85       	ldd	r25, Y+11	; 0x0b
    6638:	80 e0       	ldi	r24, 0x00	; 0
    663a:	2c 85       	ldd	r18, Y+12	; 0x0c
    663c:	82 0f       	add	r24, r18
    663e:	91 1d       	adc	r25, r1
    6640:	90 93 26 07 	sts	0x0726, r25
    6644:	80 93 25 07 	sts	0x0725, r24
					sys.data.chan.timing_comp = ch2word(pkt->data[6],pkt->data[7]);
    6648:	9d 85       	ldd	r25, Y+13	; 0x0d
    664a:	80 e0       	ldi	r24, 0x00	; 0
    664c:	2e 85       	ldd	r18, Y+14	; 0x0e
    664e:	82 0f       	add	r24, r18
    6650:	91 1d       	adc	r25, r1
    6652:	90 93 28 07 	sts	0x0728, r25
    6656:	80 93 27 07 	sts	0x0727, r24
    665a:	9a c1       	rjmp	.+820    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_TCS3:
					sys.data.chan.sw_angle = ch2word(pkt->data[0],pkt->data[1]);
    665c:	9f 81       	ldd	r25, Y+7	; 0x07
    665e:	80 e0       	ldi	r24, 0x00	; 0
    6660:	28 85       	ldd	r18, Y+8	; 0x08
    6662:	82 0f       	add	r24, r18
    6664:	91 1d       	adc	r25, r1
    6666:	90 93 36 07 	sts	0x0736, r25
    666a:	80 93 35 07 	sts	0x0735, r24
    666e:	90 c1       	rjmp	.+800    	; 0x6990 <ProcessCanMsg+0x570>
					//sys.data.chan.tcs_a1 = ch2word(pkt->data[2],pkt->data[3]);
					//sys.data.chan.tcs_a2 = ch2word(pkt->data[4],pkt->data[5]);
					//sys.data.chan.tcs_a3 = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_TCS4:
					sys.data.prm.fuel_kp = pkt->data[0];
    6670:	8f 81       	ldd	r24, Y+7	; 0x07
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	90 93 88 07 	sts	0x0788, r25
    6678:	80 93 87 07 	sts	0x0787, r24
					sys.data.prm.fuel_kd = pkt->data[1];
    667c:	88 85       	ldd	r24, Y+8	; 0x08
    667e:	90 e0       	ldi	r25, 0x00	; 0
    6680:	90 93 8a 07 	sts	0x078A, r25
    6684:	80 93 89 07 	sts	0x0789, r24
					sys.data.prm.fuel_ki = pkt->data[2];
    6688:	89 85       	ldd	r24, Y+9	; 0x09
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	90 93 8c 07 	sts	0x078C, r25
    6690:	80 93 8b 07 	sts	0x078B, r24
					sys.data.prm.timing_kp = pkt->data[3];
    6694:	8a 85       	ldd	r24, Y+10	; 0x0a
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	90 93 8e 07 	sts	0x078E, r25
    669c:	80 93 8d 07 	sts	0x078D, r24
					sys.data.prm.timing_kd = pkt->data[4];
    66a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	90 93 90 07 	sts	0x0790, r25
    66a8:	80 93 8f 07 	sts	0x078F, r24
					sys.data.prm.timing_ki = pkt->data[5];
    66ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	90 93 92 07 	sts	0x0792, r25
    66b4:	80 93 91 07 	sts	0x0791, r24
    66b8:	6b c1       	rjmp	.+726    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_IMU1:
					sys.data.status.IMU_status = pkt->data[0];
    66ba:	8f 81       	ldd	r24, Y+7	; 0x07
    66bc:	80 93 a6 07 	sts	0x07A6, r24
					sys.data.prm.x_acl_comp = ch2word(pkt->data[1],pkt->data[2]);
    66c0:	98 85       	ldd	r25, Y+8	; 0x08
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	29 85       	ldd	r18, Y+9	; 0x09
    66c6:	82 0f       	add	r24, r18
    66c8:	91 1d       	adc	r25, r1
    66ca:	90 93 98 07 	sts	0x0798, r25
    66ce:	80 93 97 07 	sts	0x0797, r24
					sys.data.prm.y_acl_comp = ch2word(pkt->data[3],pkt->data[4]);
    66d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    66d4:	80 e0       	ldi	r24, 0x00	; 0
    66d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    66d8:	82 0f       	add	r24, r18
    66da:	91 1d       	adc	r25, r1
    66dc:	90 93 9a 07 	sts	0x079A, r25
    66e0:	80 93 99 07 	sts	0x0799, r24
					sys.data.prm.z_acl_comp = ch2word(pkt->data[5],pkt->data[6]);
    66e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    66ea:	82 0f       	add	r24, r18
    66ec:	91 1d       	adc	r25, r1
    66ee:	90 93 9c 07 	sts	0x079C, r25
    66f2:	80 93 9b 07 	sts	0x079B, r24
    66f6:	4c c1       	rjmp	.+664    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_IMU2:
					sys.data.chan.acl_x = ch2word(pkt->data[0],pkt->data[1]);
    66f8:	9f 81       	ldd	r25, Y+7	; 0x07
    66fa:	80 e0       	ldi	r24, 0x00	; 0
    66fc:	28 85       	ldd	r18, Y+8	; 0x08
    66fe:	82 0f       	add	r24, r18
    6700:	91 1d       	adc	r25, r1
    6702:	90 93 fb 06 	sts	0x06FB, r25
    6706:	80 93 fa 06 	sts	0x06FA, r24
					sys.data.chan.acl_y = ch2word(pkt->data[2],pkt->data[3]);
    670a:	99 85       	ldd	r25, Y+9	; 0x09
    670c:	80 e0       	ldi	r24, 0x00	; 0
    670e:	2a 85       	ldd	r18, Y+10	; 0x0a
    6710:	82 0f       	add	r24, r18
    6712:	91 1d       	adc	r25, r1
    6714:	90 93 fd 06 	sts	0x06FD, r25
    6718:	80 93 fc 06 	sts	0x06FC, r24
					sys.data.chan.acl_z = ch2word(pkt->data[4],pkt->data[5]);
    671c:	9b 85       	ldd	r25, Y+11	; 0x0b
    671e:	80 e0       	ldi	r24, 0x00	; 0
    6720:	2c 85       	ldd	r18, Y+12	; 0x0c
    6722:	82 0f       	add	r24, r18
    6724:	91 1d       	adc	r25, r1
    6726:	90 93 ff 06 	sts	0x06FF, r25
    672a:	80 93 fe 06 	sts	0x06FE, r24
    672e:	30 c1       	rjmp	.+608    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_IMU3:
					sys.data.chan.gyro_x = ch2word(pkt->data[0],pkt->data[1]);
    6730:	9f 81       	ldd	r25, Y+7	; 0x07
    6732:	80 e0       	ldi	r24, 0x00	; 0
    6734:	28 85       	ldd	r18, Y+8	; 0x08
    6736:	82 0f       	add	r24, r18
    6738:	91 1d       	adc	r25, r1
    673a:	90 93 01 07 	sts	0x0701, r25
    673e:	80 93 00 07 	sts	0x0700, r24
					sys.data.chan.gyro_y = ch2word(pkt->data[2],pkt->data[3]);
    6742:	99 85       	ldd	r25, Y+9	; 0x09
    6744:	80 e0       	ldi	r24, 0x00	; 0
    6746:	2a 85       	ldd	r18, Y+10	; 0x0a
    6748:	82 0f       	add	r24, r18
    674a:	91 1d       	adc	r25, r1
    674c:	90 93 03 07 	sts	0x0703, r25
    6750:	80 93 02 07 	sts	0x0702, r24
					sys.data.chan.gyro_z = ch2word(pkt->data[4],pkt->data[5]);
    6754:	9b 85       	ldd	r25, Y+11	; 0x0b
    6756:	80 e0       	ldi	r24, 0x00	; 0
    6758:	2c 85       	ldd	r18, Y+12	; 0x0c
    675a:	82 0f       	add	r24, r18
    675c:	91 1d       	adc	r25, r1
    675e:	90 93 05 07 	sts	0x0705, r25
    6762:	80 93 04 07 	sts	0x0704, r24
    6766:	14 c1       	rjmp	.+552    	; 0x6990 <ProcessCanMsg+0x570>
					//sys.data.chan.mag_y = ch2word(pkt->data[2],pkt->data[3]);
					//sys.data.chan.mag_z = ch2word(pkt->data[4],pkt->data[5]);
					//sys.data.chan.mag_heading = ch2word(pkt->data[6],pkt->data[7]);
					return(msg_type);
				case CAN_DATA_STS1:
					sys.data.status.STS_status = ch2word(pkt->data[0],pkt->data[1]);
    6768:	88 85       	ldd	r24, Y+8	; 0x08
    676a:	80 93 a4 07 	sts	0x07A4, r24
    676e:	10 c1       	rjmp	.+544    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_STS2:
					sys.data.chan.fl_susp_trvl = ch2word(pkt->data[0],pkt->data[1]);
    6770:	9f 81       	ldd	r25, Y+7	; 0x07
    6772:	80 e0       	ldi	r24, 0x00	; 0
    6774:	28 85       	ldd	r18, Y+8	; 0x08
    6776:	82 0f       	add	r24, r18
    6778:	91 1d       	adc	r25, r1
    677a:	90 93 f3 06 	sts	0x06F3, r25
    677e:	80 93 f2 06 	sts	0x06F2, r24
					sys.data.chan.fr_susp_trvl = ch2word(pkt->data[2],pkt->data[3]);
    6782:	99 85       	ldd	r25, Y+9	; 0x09
    6784:	80 e0       	ldi	r24, 0x00	; 0
    6786:	2a 85       	ldd	r18, Y+10	; 0x0a
    6788:	82 0f       	add	r24, r18
    678a:	91 1d       	adc	r25, r1
    678c:	90 93 f5 06 	sts	0x06F5, r25
    6790:	80 93 f4 06 	sts	0x06F4, r24
					sys.data.chan.rl_susp_trvl = ch2word(pkt->data[4],pkt->data[5]);
    6794:	9b 85       	ldd	r25, Y+11	; 0x0b
    6796:	80 e0       	ldi	r24, 0x00	; 0
    6798:	2c 85       	ldd	r18, Y+12	; 0x0c
    679a:	82 0f       	add	r24, r18
    679c:	91 1d       	adc	r25, r1
    679e:	90 93 f7 06 	sts	0x06F7, r25
    67a2:	80 93 f6 06 	sts	0x06F6, r24
					sys.data.chan.rr_susp_trvl = ch2word(pkt->data[6],pkt->data[7]);
    67a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    67a8:	80 e0       	ldi	r24, 0x00	; 0
    67aa:	2e 85       	ldd	r18, Y+14	; 0x0e
    67ac:	82 0f       	add	r24, r18
    67ae:	91 1d       	adc	r25, r1
    67b0:	90 93 f9 06 	sts	0x06F9, r25
    67b4:	80 93 f8 06 	sts	0x06F8, r24
    67b8:	eb c0       	rjmp	.+470    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_STS3:
					sys.data.chan.ttemp_fli = ch2word(pkt->data[0],pkt->data[1]);
    67ba:	9f 81       	ldd	r25, Y+7	; 0x07
    67bc:	80 e0       	ldi	r24, 0x00	; 0
    67be:	28 85       	ldd	r18, Y+8	; 0x08
    67c0:	82 0f       	add	r24, r18
    67c2:	91 1d       	adc	r25, r1
    67c4:	90 93 3f 07 	sts	0x073F, r25
    67c8:	80 93 3e 07 	sts	0x073E, r24
					sys.data.chan.ttemp_fri = ch2word(pkt->data[2],pkt->data[3]);
    67cc:	99 85       	ldd	r25, Y+9	; 0x09
    67ce:	80 e0       	ldi	r24, 0x00	; 0
    67d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    67d2:	82 0f       	add	r24, r18
    67d4:	91 1d       	adc	r25, r1
    67d6:	90 93 45 07 	sts	0x0745, r25
    67da:	80 93 44 07 	sts	0x0744, r24
					sys.data.chan.ttemp_rli = ch2word(pkt->data[4],pkt->data[5]);
    67de:	9b 85       	ldd	r25, Y+11	; 0x0b
    67e0:	80 e0       	ldi	r24, 0x00	; 0
    67e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    67e4:	82 0f       	add	r24, r18
    67e6:	91 1d       	adc	r25, r1
    67e8:	90 93 4b 07 	sts	0x074B, r25
    67ec:	80 93 4a 07 	sts	0x074A, r24
					sys.data.chan.ttemp_rri = ch2word(pkt->data[6],pkt->data[7]);
    67f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    67f2:	80 e0       	ldi	r24, 0x00	; 0
    67f4:	2e 85       	ldd	r18, Y+14	; 0x0e
    67f6:	82 0f       	add	r24, r18
    67f8:	91 1d       	adc	r25, r1
    67fa:	90 93 51 07 	sts	0x0751, r25
    67fe:	80 93 50 07 	sts	0x0750, r24
    6802:	c6 c0       	rjmp	.+396    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_STS4:
					sys.data.chan.ttemp_flm = ch2word(pkt->data[0],pkt->data[1]);
    6804:	9f 81       	ldd	r25, Y+7	; 0x07
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	28 85       	ldd	r18, Y+8	; 0x08
    680a:	82 0f       	add	r24, r18
    680c:	91 1d       	adc	r25, r1
    680e:	90 93 41 07 	sts	0x0741, r25
    6812:	80 93 40 07 	sts	0x0740, r24
					sys.data.chan.ttemp_frm = ch2word(pkt->data[2],pkt->data[3]);
    6816:	99 85       	ldd	r25, Y+9	; 0x09
    6818:	80 e0       	ldi	r24, 0x00	; 0
    681a:	2a 85       	ldd	r18, Y+10	; 0x0a
    681c:	82 0f       	add	r24, r18
    681e:	91 1d       	adc	r25, r1
    6820:	90 93 47 07 	sts	0x0747, r25
    6824:	80 93 46 07 	sts	0x0746, r24
					sys.data.chan.ttemp_rlm = ch2word(pkt->data[4],pkt->data[5]);
    6828:	9b 85       	ldd	r25, Y+11	; 0x0b
    682a:	80 e0       	ldi	r24, 0x00	; 0
    682c:	2c 85       	ldd	r18, Y+12	; 0x0c
    682e:	82 0f       	add	r24, r18
    6830:	91 1d       	adc	r25, r1
    6832:	90 93 4d 07 	sts	0x074D, r25
    6836:	80 93 4c 07 	sts	0x074C, r24
					sys.data.chan.ttemp_rrm = ch2word(pkt->data[6],pkt->data[7]);
    683a:	9d 85       	ldd	r25, Y+13	; 0x0d
    683c:	80 e0       	ldi	r24, 0x00	; 0
    683e:	2e 85       	ldd	r18, Y+14	; 0x0e
    6840:	82 0f       	add	r24, r18
    6842:	91 1d       	adc	r25, r1
    6844:	90 93 53 07 	sts	0x0753, r25
    6848:	80 93 52 07 	sts	0x0752, r24
    684c:	a1 c0       	rjmp	.+322    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_STS5:
					sys.data.chan.ttemp_flo = ch2word(pkt->data[0],pkt->data[1]);
    684e:	9f 81       	ldd	r25, Y+7	; 0x07
    6850:	80 e0       	ldi	r24, 0x00	; 0
    6852:	28 85       	ldd	r18, Y+8	; 0x08
    6854:	82 0f       	add	r24, r18
    6856:	91 1d       	adc	r25, r1
    6858:	90 93 43 07 	sts	0x0743, r25
    685c:	80 93 42 07 	sts	0x0742, r24
					sys.data.chan.ttemp_fro = ch2word(pkt->data[2],pkt->data[3]);
    6860:	99 85       	ldd	r25, Y+9	; 0x09
    6862:	80 e0       	ldi	r24, 0x00	; 0
    6864:	2a 85       	ldd	r18, Y+10	; 0x0a
    6866:	82 0f       	add	r24, r18
    6868:	91 1d       	adc	r25, r1
    686a:	90 93 49 07 	sts	0x0749, r25
    686e:	80 93 48 07 	sts	0x0748, r24
					sys.data.chan.ttemp_rlo = ch2word(pkt->data[4],pkt->data[5]);
    6872:	9b 85       	ldd	r25, Y+11	; 0x0b
    6874:	80 e0       	ldi	r24, 0x00	; 0
    6876:	2c 85       	ldd	r18, Y+12	; 0x0c
    6878:	82 0f       	add	r24, r18
    687a:	91 1d       	adc	r25, r1
    687c:	90 93 4f 07 	sts	0x074F, r25
    6880:	80 93 4e 07 	sts	0x074E, r24
					sys.data.chan.ttemp_rro = ch2word(pkt->data[6],pkt->data[7]);
    6884:	9d 85       	ldd	r25, Y+13	; 0x0d
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	2e 85       	ldd	r18, Y+14	; 0x0e
    688a:	82 0f       	add	r24, r18
    688c:	91 1d       	adc	r25, r1
    688e:	90 93 55 07 	sts	0x0755, r25
    6892:	80 93 54 07 	sts	0x0754, r24
    6896:	7c c0       	rjmp	.+248    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_DLG1:
					sys.data.status.DLG_status = pkt->data[0];
    6898:	8f 81       	ldd	r24, Y+7	; 0x07
    689a:	80 93 a5 07 	sts	0x07A5, r24
					sys.data.prm.hmsphr = pkt->data[1];
    689e:	88 85       	ldd	r24, Y+8	; 0x08
    68a0:	80 93 81 07 	sts	0x0781, r24
					sys.data.prm.date = ch2word(pkt->data[4],pkt->data[5]);
    68a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    68a6:	80 93 7c 07 	sts	0x077C, r24
    68aa:	72 c0       	rjmp	.+228    	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_DLG2:
					sys.data.chan.lat = ch2dblword(pkt->data[0],pkt->data[1],pkt->data[2],pkt->data[3]);
    68ac:	2f 81       	ldd	r18, Y+7	; 0x07
    68ae:	30 e0       	ldi	r19, 0x00	; 0
    68b0:	40 e0       	ldi	r20, 0x00	; 0
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	52 2f       	mov	r21, r18
    68b6:	44 27       	eor	r20, r20
    68b8:	33 27       	eor	r19, r19
    68ba:	22 27       	eor	r18, r18
    68bc:	88 85       	ldd	r24, Y+8	; 0x08
    68be:	90 e0       	ldi	r25, 0x00	; 0
    68c0:	a0 e0       	ldi	r26, 0x00	; 0
    68c2:	b0 e0       	ldi	r27, 0x00	; 0
    68c4:	dc 01       	movw	r26, r24
    68c6:	99 27       	eor	r25, r25
    68c8:	88 27       	eor	r24, r24
    68ca:	28 0f       	add	r18, r24
    68cc:	39 1f       	adc	r19, r25
    68ce:	4a 1f       	adc	r20, r26
    68d0:	5b 1f       	adc	r21, r27
    68d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    68d4:	28 0f       	add	r18, r24
    68d6:	31 1d       	adc	r19, r1
    68d8:	41 1d       	adc	r20, r1
    68da:	51 1d       	adc	r21, r1
    68dc:	89 85       	ldd	r24, Y+9	; 0x09
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	a0 e0       	ldi	r26, 0x00	; 0
    68e2:	b0 e0       	ldi	r27, 0x00	; 0
    68e4:	ba 2f       	mov	r27, r26
    68e6:	a9 2f       	mov	r26, r25
    68e8:	98 2f       	mov	r25, r24
    68ea:	88 27       	eor	r24, r24
    68ec:	28 0f       	add	r18, r24
    68ee:	39 1f       	adc	r19, r25
    68f0:	4a 1f       	adc	r20, r26
    68f2:	5b 1f       	adc	r21, r27
    68f4:	20 93 56 07 	sts	0x0756, r18
    68f8:	30 93 57 07 	sts	0x0757, r19
    68fc:	40 93 58 07 	sts	0x0758, r20
    6900:	50 93 59 07 	sts	0x0759, r21
					sys.data.chan.lng = ch2dblword(pkt->data[4],pkt->data[5],pkt->data[6],pkt->data[7]);
    6904:	2b 85       	ldd	r18, Y+11	; 0x0b
    6906:	30 e0       	ldi	r19, 0x00	; 0
    6908:	40 e0       	ldi	r20, 0x00	; 0
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	52 2f       	mov	r21, r18
    690e:	44 27       	eor	r20, r20
    6910:	33 27       	eor	r19, r19
    6912:	22 27       	eor	r18, r18
    6914:	8c 85       	ldd	r24, Y+12	; 0x0c
    6916:	90 e0       	ldi	r25, 0x00	; 0
    6918:	a0 e0       	ldi	r26, 0x00	; 0
    691a:	b0 e0       	ldi	r27, 0x00	; 0
    691c:	dc 01       	movw	r26, r24
    691e:	99 27       	eor	r25, r25
    6920:	88 27       	eor	r24, r24
    6922:	28 0f       	add	r18, r24
    6924:	39 1f       	adc	r19, r25
    6926:	4a 1f       	adc	r20, r26
    6928:	5b 1f       	adc	r21, r27
    692a:	8e 85       	ldd	r24, Y+14	; 0x0e
    692c:	28 0f       	add	r18, r24
    692e:	31 1d       	adc	r19, r1
    6930:	41 1d       	adc	r20, r1
    6932:	51 1d       	adc	r21, r1
    6934:	8d 85       	ldd	r24, Y+13	; 0x0d
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	a0 e0       	ldi	r26, 0x00	; 0
    693a:	b0 e0       	ldi	r27, 0x00	; 0
    693c:	ba 2f       	mov	r27, r26
    693e:	a9 2f       	mov	r26, r25
    6940:	98 2f       	mov	r25, r24
    6942:	88 27       	eor	r24, r24
    6944:	28 0f       	add	r18, r24
    6946:	39 1f       	adc	r19, r25
    6948:	4a 1f       	adc	r20, r26
    694a:	5b 1f       	adc	r21, r27
    694c:	20 93 5a 07 	sts	0x075A, r18
    6950:	30 93 5b 07 	sts	0x075B, r19
    6954:	40 93 5c 07 	sts	0x075C, r20
    6958:	50 93 5d 07 	sts	0x075D, r21
    695c:	19 c0       	rjmp	.+50     	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_DLG3:
					sys.data.chan.heading = ch2word(pkt->data[0],pkt->data[1]);
    695e:	9f 81       	ldd	r25, Y+7	; 0x07
    6960:	80 e0       	ldi	r24, 0x00	; 0
    6962:	28 85       	ldd	r18, Y+8	; 0x08
    6964:	82 0f       	add	r24, r18
    6966:	91 1d       	adc	r25, r1
    6968:	90 93 5f 07 	sts	0x075F, r25
    696c:	80 93 5e 07 	sts	0x075E, r24
					sys.data.chan.speed = pkt->data[2];
    6970:	89 85       	ldd	r24, Y+9	; 0x09
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	90 93 61 07 	sts	0x0761, r25
    6978:	80 93 60 07 	sts	0x0760, r24
    697c:	09 c0       	rjmp	.+18     	; 0x6990 <ProcessCanMsg+0x570>
					}
					system.dont_log.log_name[7] = 0;
					return(msg_type);
					*/
				case CAN_DATA_STW1:
					sys.data.status.STW_status = pkt->data[0];
    697e:	8f 81       	ldd	r24, Y+7	; 0x07
    6980:	80 93 a7 07 	sts	0x07A7, r24
    6984:	05 c0       	rjmp	.+10     	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
				case CAN_DATA_WRL1:
					sys.data.status.WRL_status = pkt->data[0];
    6986:	8f 81       	ldd	r24, Y+7	; 0x07
    6988:	80 93 a8 07 	sts	0x07A8, r24
    698c:	01 c0       	rjmp	.+2      	; 0x6990 <ProcessCanMsg+0x570>
					return(msg_type);
    698e:	10 e0       	ldi	r17, 0x00	; 0

		default:
			return(0);
	}
	return(0);
}
    6990:	81 2f       	mov	r24, r17
    6992:	df 91       	pop	r29
    6994:	cf 91       	pop	r28
    6996:	1f 91       	pop	r17
    6998:	08 95       	ret

0000699a <__vector_18>:
	/*---------------------------------------------*/
}

//! CAN interrupt service routine
ISR( CANIT_vect)
{
    699a:	1f 92       	push	r1
    699c:	0f 92       	push	r0
    699e:	0f b6       	in	r0, 0x3f	; 63
    69a0:	0f 92       	push	r0
    69a2:	0b b6       	in	r0, 0x3b	; 59
    69a4:	0f 92       	push	r0
    69a6:	11 24       	eor	r1, r1
    69a8:	9f 92       	push	r9
    69aa:	af 92       	push	r10
    69ac:	bf 92       	push	r11
    69ae:	cf 92       	push	r12
    69b0:	df 92       	push	r13
    69b2:	ef 92       	push	r14
    69b4:	ff 92       	push	r15
    69b6:	0f 93       	push	r16
    69b8:	1f 93       	push	r17
    69ba:	2f 93       	push	r18
    69bc:	3f 93       	push	r19
    69be:	4f 93       	push	r20
    69c0:	5f 93       	push	r21
    69c2:	6f 93       	push	r22
    69c4:	7f 93       	push	r23
    69c6:	8f 93       	push	r24
    69c8:	9f 93       	push	r25
    69ca:	af 93       	push	r26
    69cc:	bf 93       	push	r27
    69ce:	ef 93       	push	r30
    69d0:	ff 93       	push	r31
    69d2:	df 93       	push	r29
    69d4:	cf 93       	push	r28
    69d6:	cd b7       	in	r28, 0x3d	; 61
    69d8:	de b7       	in	r29, 0x3e	; 62
    69da:	2f 97       	sbiw	r28, 0x0f	; 15
    69dc:	de bf       	out	0x3e, r29	; 62
    69de:	cd bf       	out	0x3d, r28	; 61
	TIMSK1 = 0;
	sei();

	*/
	/*-----------------------------------------------------------*/
	PORTD |= _BV(PD7);
    69e0:	5f 9a       	sbi	0x0b, 7	; 11

	mob=CANHPMOB; // get highest prio mob
    69e2:	90 90 ec 00 	lds	r9, 0x00EC

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
    69e6:	89 2d       	mov	r24, r9
    69e8:	80 7f       	andi	r24, 0xF0	; 240
    69ea:	80 93 ed 00 	sts	0x00ED, r24
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];
    69ee:	89 2d       	mov	r24, r9
    69f0:	82 95       	swap	r24
    69f2:	8f 70       	andi	r24, 0x0F	; 15
    69f4:	a8 2f       	mov	r26, r24
    69f6:	b0 e0       	ldi	r27, 0x00	; 0
    69f8:	fd 01       	movw	r30, r26
    69fa:	e0 5c       	subi	r30, 0xC0	; 192
    69fc:	fb 4f       	sbci	r31, 0xFB	; 251
    69fe:	e0 81       	ld	r30, Z

	if(packet.msg_type == CAN_TX_MSG)
    6a00:	e2 30       	cpi	r30, 0x02	; 2
    6a02:	b1 f4       	brne	.+44     	; 0x6a30 <__vector_18+0x96>
	{
		CANSTMOB = 0;
    6a04:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0;
    6a08:	10 92 ef 00 	sts	0x00EF, r1

		CANIDT1 = 0;
    6a0c:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;
    6a10:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;
    6a14:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
    6a18:	10 92 f0 00 	sts	0x00F0, r1
    6a1c:	80 e0       	ldi	r24, 0x00	; 0

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
    6a1e:	10 92 fa 00 	sts	0x00FA, r1
		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
    6a22:	8f 5f       	subi	r24, 0xFF	; 255
    6a24:	88 30       	cpi	r24, 0x08	; 8
    6a26:	d9 f7       	brne	.-10     	; 0x6a1e <__vector_18+0x84>
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
    6a28:	a0 5c       	subi	r26, 0xC0	; 192
    6a2a:	bb 4f       	sbci	r27, 0xFB	; 251
    6a2c:	1c 92       	st	X, r1
    6a2e:	79 c0       	rjmp	.+242    	; 0x6b22 <__vector_18+0x188>
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
    6a30:	80 91 ef 00 	lds	r24, 0x00EF
    6a34:	84 ff       	sbrs	r24, 4
    6a36:	3b c0       	rjmp	.+118    	; 0x6aae <__vector_18+0x114>
		{
			packet.id_type = CAN_EXT_MSG;
    6a38:	81 e0       	ldi	r24, 0x01	; 1
    6a3a:	8d 83       	std	Y+5, r24	; 0x05
			packet.id = 	(((uint32_t)CANIDT1) << 21)
    6a3c:	20 91 f3 00 	lds	r18, 0x00F3
    6a40:	80 91 f2 00 	lds	r24, 0x00F2
    6a44:	e0 90 f1 00 	lds	r14, 0x00F1
    6a48:	a0 90 f0 00 	lds	r10, 0x00F0
    6a4c:	90 e0       	ldi	r25, 0x00	; 0
    6a4e:	a0 e0       	ldi	r26, 0x00	; 0
    6a50:	b0 e0       	ldi	r27, 0x00	; 0
    6a52:	7d e0       	ldi	r23, 0x0D	; 13
    6a54:	88 0f       	add	r24, r24
    6a56:	99 1f       	adc	r25, r25
    6a58:	aa 1f       	adc	r26, r26
    6a5a:	bb 1f       	adc	r27, r27
    6a5c:	7a 95       	dec	r23
    6a5e:	d1 f7       	brne	.-12     	; 0x6a54 <__vector_18+0xba>
    6a60:	30 e0       	ldi	r19, 0x00	; 0
    6a62:	40 e0       	ldi	r20, 0x00	; 0
    6a64:	50 e0       	ldi	r21, 0x00	; 0
    6a66:	65 e1       	ldi	r22, 0x15	; 21
    6a68:	22 0f       	add	r18, r18
    6a6a:	33 1f       	adc	r19, r19
    6a6c:	44 1f       	adc	r20, r20
    6a6e:	55 1f       	adc	r21, r21
    6a70:	6a 95       	dec	r22
    6a72:	d1 f7       	brne	.-12     	; 0x6a68 <__vector_18+0xce>
    6a74:	82 2b       	or	r24, r18
    6a76:	93 2b       	or	r25, r19
    6a78:	a4 2b       	or	r26, r20
    6a7a:	b5 2b       	or	r27, r21
    6a7c:	ff 24       	eor	r15, r15
    6a7e:	00 e0       	ldi	r16, 0x00	; 0
    6a80:	10 e0       	ldi	r17, 0x00	; 0
    6a82:	25 e0       	ldi	r18, 0x05	; 5
    6a84:	ee 0c       	add	r14, r14
    6a86:	ff 1c       	adc	r15, r15
    6a88:	00 1f       	adc	r16, r16
    6a8a:	11 1f       	adc	r17, r17
    6a8c:	2a 95       	dec	r18
    6a8e:	d1 f7       	brne	.-12     	; 0x6a84 <__vector_18+0xea>
    6a90:	8e 29       	or	r24, r14
    6a92:	9f 29       	or	r25, r15
    6a94:	a0 2b       	or	r26, r16
    6a96:	b1 2b       	or	r27, r17
    6a98:	a6 94       	lsr	r10
    6a9a:	a6 94       	lsr	r10
    6a9c:	a6 94       	lsr	r10
    6a9e:	bb 24       	eor	r11, r11
    6aa0:	cc 24       	eor	r12, r12
    6aa2:	dd 24       	eor	r13, r13
    6aa4:	8a 29       	or	r24, r10
    6aa6:	9b 29       	or	r25, r11
    6aa8:	ac 29       	or	r26, r12
    6aaa:	bd 29       	or	r27, r13
    6aac:	15 c0       	rjmp	.+42     	; 0x6ad8 <__vector_18+0x13e>
						| (((uint32_t)CANIDT4) >> 3);
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
    6aae:	1d 82       	std	Y+5, r1	; 0x05
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
    6ab0:	20 91 f2 00 	lds	r18, 0x00F2
    6ab4:	80 91 f3 00 	lds	r24, 0x00F3
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	f3 e0       	ldi	r31, 0x03	; 3
    6abc:	88 0f       	add	r24, r24
    6abe:	99 1f       	adc	r25, r25
    6ac0:	fa 95       	dec	r31
    6ac2:	e1 f7       	brne	.-8      	; 0x6abc <__vector_18+0x122>
    6ac4:	22 95       	swap	r18
    6ac6:	26 95       	lsr	r18
    6ac8:	27 70       	andi	r18, 0x07	; 7
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	82 2b       	or	r24, r18
    6ace:	93 2b       	or	r25, r19
    6ad0:	aa 27       	eor	r26, r26
    6ad2:	97 fd       	sbrc	r25, 7
    6ad4:	a0 95       	com	r26
    6ad6:	ba 2f       	mov	r27, r26
    6ad8:	89 83       	std	Y+1, r24	; 0x01
    6ada:	9a 83       	std	Y+2, r25	; 0x02
    6adc:	ab 83       	std	Y+3, r26	; 0x03
    6ade:	bc 83       	std	Y+4, r27	; 0x04
		}

		length=CANCDMOB & 0x0f;
    6ae0:	40 91 ef 00 	lds	r20, 0x00EF
    6ae4:	4f 70       	andi	r20, 0x0F	; 15
    6ae6:	de 01       	movw	r26, r28
    6ae8:	18 96       	adiw	r26, 0x08	; 8
		packet.length=length;

		for (i = 0; i <length; ++i)
    6aea:	24 2f       	mov	r18, r20
    6aec:	30 e0       	ldi	r19, 0x00	; 0
    6aee:	29 5f       	subi	r18, 0xF9	; 249
    6af0:	3f 4f       	sbci	r19, 0xFF	; 255
    6af2:	be 01       	movw	r22, r28
    6af4:	6f 5f       	subi	r22, 0xFF	; 255
    6af6:	7f 4f       	sbci	r23, 0xFF	; 255
    6af8:	26 0f       	add	r18, r22
    6afa:	37 1f       	adc	r19, r23
    6afc:	03 c0       	rjmp	.+6      	; 0x6b04 <__vector_18+0x16a>
		{
			packet.data[i] = CANMSG;
    6afe:	80 91 fa 00 	lds	r24, 0x00FA
    6b02:	8d 93       	st	X+, r24
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
    6b04:	a2 17       	cp	r26, r18
    6b06:	b3 07       	cpc	r27, r19
    6b08:	d1 f7       	brne	.-12     	; 0x6afe <__vector_18+0x164>
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;
    6b0a:	4f 83       	std	Y+7, r20	; 0x07
	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];
    6b0c:	ee 83       	std	Y+6, r30	; 0x06
		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);
    6b0e:	cb 01       	movw	r24, r22
    6b10:	0e 94 10 32 	call	0x6420	; 0x6420 <ProcessCanMsg>

		CANSTMOB=0;		// reset INT reason
    6b14:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
    6b18:	80 91 ef 00 	lds	r24, 0x00EF
    6b1c:	80 79       	andi	r24, 0x90	; 144
    6b1e:	80 93 ef 00 	sts	0x00EF, r24
	/*-----------------------------------------------------------*/
	PORTD |= _BV(PD7);

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;
    6b22:	80 ef       	ldi	r24, 0xF0	; 240
    6b24:	98 2a       	or	r9, r24

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE
    6b26:	90 92 ed 00 	sts	0x00ED, r9


	/*-------------Device Specific-----------------*/
	PORTD &= ~_BV(PD7);
    6b2a:	5f 98       	cbi	0x0b, 7	; 11

	CANGIE=(1<<ENIT) | (1<< ENRX) | (1 << ENTX);
	TIMSK1 = _BV(OCIE1A);
	*/
	/*---------------------------------------------*/
}
    6b2c:	2f 96       	adiw	r28, 0x0f	; 15
    6b2e:	de bf       	out	0x3e, r29	; 62
    6b30:	cd bf       	out	0x3d, r28	; 61
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	ff 91       	pop	r31
    6b38:	ef 91       	pop	r30
    6b3a:	bf 91       	pop	r27
    6b3c:	af 91       	pop	r26
    6b3e:	9f 91       	pop	r25
    6b40:	8f 91       	pop	r24
    6b42:	7f 91       	pop	r23
    6b44:	6f 91       	pop	r22
    6b46:	5f 91       	pop	r21
    6b48:	4f 91       	pop	r20
    6b4a:	3f 91       	pop	r19
    6b4c:	2f 91       	pop	r18
    6b4e:	1f 91       	pop	r17
    6b50:	0f 91       	pop	r16
    6b52:	ff 90       	pop	r15
    6b54:	ef 90       	pop	r14
    6b56:	df 90       	pop	r13
    6b58:	cf 90       	pop	r12
    6b5a:	bf 90       	pop	r11
    6b5c:	af 90       	pop	r10
    6b5e:	9f 90       	pop	r9
    6b60:	0f 90       	pop	r0
    6b62:	0b be       	out	0x3b, r0	; 59
    6b64:	0f 90       	pop	r0
    6b66:	0f be       	out	0x3f, r0	; 63
    6b68:	0f 90       	pop	r0
    6b6a:	1f 90       	pop	r1
    6b6c:	18 95       	reti

00006b6e <handle_10ms_tick>:
	}
	return 1;
}

void handle_10ms_tick(void)
{
    6b6e:	df 93       	push	r29
    6b70:	cf 93       	push	r28
    6b72:	cd b7       	in	r28, 0x3d	; 61
    6b74:	de b7       	in	r29, 0x3e	; 62
    6b76:	2f 97       	sbiw	r28, 0x0f	; 15
    6b78:	0f b6       	in	r0, 0x3f	; 63
    6b7a:	f8 94       	cli
    6b7c:	de bf       	out	0x3e, r29	; 62
    6b7e:	0f be       	out	0x3f, r0	; 63
    6b80:	cd bf       	out	0x3d, r28	; 61
	CAN_packet pkt;
	glb_tmr += 10;
    6b82:	80 91 32 04 	lds	r24, 0x0432
    6b86:	90 91 33 04 	lds	r25, 0x0433
    6b8a:	a0 91 34 04 	lds	r26, 0x0434
    6b8e:	b0 91 35 04 	lds	r27, 0x0435
    6b92:	0a 96       	adiw	r24, 0x0a	; 10
    6b94:	a1 1d       	adc	r26, r1
    6b96:	b1 1d       	adc	r27, r1
    6b98:	80 93 32 04 	sts	0x0432, r24
    6b9c:	90 93 33 04 	sts	0x0433, r25
    6ba0:	a0 93 34 04 	sts	0x0434, r26
    6ba4:	b0 93 35 04 	sts	0x0435, r27
	sys.data.chan.curr_tick = TCNT3;
    6ba8:	80 91 94 00 	lds	r24, 0x0094
    6bac:	90 91 95 00 	lds	r25, 0x0095
    6bb0:	90 93 07 07 	sts	0x0707, r25
    6bb4:	80 93 06 07 	sts	0x0706, r24

	/*----------------Handle Interrupt Priority------------------*/
	CANGIT = 0;
    6bb8:	10 92 da 00 	sts	0x00DA, r1
	TIMSK1 = 0;
    6bbc:	10 92 6f 00 	sts	0x006F, r1
	sei();
    6bc0:	78 94       	sei
	/*-----------------------------------------------------------*/

	if(log_status == LOGGING)
    6bc2:	80 91 3b 04 	lds	r24, 0x043B
    6bc6:	81 30       	cpi	r24, 0x01	; 1
    6bc8:	09 f0       	breq	.+2      	; 0x6bcc <handle_10ms_tick+0x5e>
    6bca:	6f c0       	rjmp	.+222    	; 0x6caa <handle_10ms_tick+0x13c>
	{
		if((log_timer % 10) == 0)
    6bcc:	60 91 37 04 	lds	r22, 0x0437
    6bd0:	70 91 38 04 	lds	r23, 0x0438
    6bd4:	80 91 39 04 	lds	r24, 0x0439
    6bd8:	90 91 3a 04 	lds	r25, 0x043A
    6bdc:	2a e0       	ldi	r18, 0x0A	; 10
    6bde:	30 e0       	ldi	r19, 0x00	; 0
    6be0:	40 e0       	ldi	r20, 0x00	; 0
    6be2:	50 e0       	ldi	r21, 0x00	; 0
    6be4:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    6be8:	61 15       	cp	r22, r1
    6bea:	71 05       	cpc	r23, r1
    6bec:	81 05       	cpc	r24, r1
    6bee:	91 05       	cpc	r25, r1
    6bf0:	21 f4       	brne	.+8      	; 0x6bfa <handle_10ms_tick+0x8c>
		{
			log(sys.log.f100);
    6bf2:	8b ee       	ldi	r24, 0xEB	; 235
    6bf4:	96 e0       	ldi	r25, 0x06	; 6
    6bf6:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <_log>
		}

		if((log_timer % 100) == 0)
    6bfa:	60 91 37 04 	lds	r22, 0x0437
    6bfe:	70 91 38 04 	lds	r23, 0x0438
    6c02:	80 91 39 04 	lds	r24, 0x0439
    6c06:	90 91 3a 04 	lds	r25, 0x043A
    6c0a:	24 e6       	ldi	r18, 0x64	; 100
    6c0c:	30 e0       	ldi	r19, 0x00	; 0
    6c0e:	40 e0       	ldi	r20, 0x00	; 0
    6c10:	50 e0       	ldi	r21, 0x00	; 0
    6c12:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    6c16:	61 15       	cp	r22, r1
    6c18:	71 05       	cpc	r23, r1
    6c1a:	81 05       	cpc	r24, r1
    6c1c:	91 05       	cpc	r25, r1
    6c1e:	21 f4       	brne	.+8      	; 0x6c28 <handle_10ms_tick+0xba>
		{

		    log(sys.log.f10);
    6c20:	88 e0       	ldi	r24, 0x08	; 8
    6c22:	97 e0       	ldi	r25, 0x07	; 7
    6c24:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <_log>
		}

		if((log_timer % 200) == 0)
    6c28:	60 91 37 04 	lds	r22, 0x0437
    6c2c:	70 91 38 04 	lds	r23, 0x0438
    6c30:	80 91 39 04 	lds	r24, 0x0439
    6c34:	90 91 3a 04 	lds	r25, 0x043A
    6c38:	28 ec       	ldi	r18, 0xC8	; 200
    6c3a:	30 e0       	ldi	r19, 0x00	; 0
    6c3c:	40 e0       	ldi	r20, 0x00	; 0
    6c3e:	50 e0       	ldi	r21, 0x00	; 0
    6c40:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    6c44:	61 15       	cp	r22, r1
    6c46:	71 05       	cpc	r23, r1
    6c48:	81 05       	cpc	r24, r1
    6c4a:	91 05       	cpc	r25, r1
    6c4c:	21 f4       	brne	.+8      	; 0x6c56 <handle_10ms_tick+0xe8>
		{

		    log(sys.log.f5);
    6c4e:	87 e3       	ldi	r24, 0x37	; 55
    6c50:	97 e0       	ldi	r25, 0x07	; 7
    6c52:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <_log>
		}

		if((log_timer %1000) == 0)
    6c56:	60 91 37 04 	lds	r22, 0x0437
    6c5a:	70 91 38 04 	lds	r23, 0x0438
    6c5e:	80 91 39 04 	lds	r24, 0x0439
    6c62:	90 91 3a 04 	lds	r25, 0x043A
    6c66:	28 ee       	ldi	r18, 0xE8	; 232
    6c68:	33 e0       	ldi	r19, 0x03	; 3
    6c6a:	40 e0       	ldi	r20, 0x00	; 0
    6c6c:	50 e0       	ldi	r21, 0x00	; 0
    6c6e:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    6c72:	61 15       	cp	r22, r1
    6c74:	71 05       	cpc	r23, r1
    6c76:	81 05       	cpc	r24, r1
    6c78:	91 05       	cpc	r25, r1
    6c7a:	21 f4       	brne	.+8      	; 0x6c84 <handle_10ms_tick+0x116>
		{
		    log(sys.log.f1);
    6c7c:	84 e6       	ldi	r24, 0x64	; 100
    6c7e:	97 e0       	ldi	r25, 0x07	; 7
    6c80:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <_log>
		}

		log_timer+=10;
    6c84:	80 91 37 04 	lds	r24, 0x0437
    6c88:	90 91 38 04 	lds	r25, 0x0438
    6c8c:	a0 91 39 04 	lds	r26, 0x0439
    6c90:	b0 91 3a 04 	lds	r27, 0x043A
    6c94:	0a 96       	adiw	r24, 0x0a	; 10
    6c96:	a1 1d       	adc	r26, r1
    6c98:	b1 1d       	adc	r27, r1
    6c9a:	80 93 37 04 	sts	0x0437, r24
    6c9e:	90 93 38 04 	sts	0x0438, r25
    6ca2:	a0 93 39 04 	sts	0x0439, r26
    6ca6:	b0 93 3a 04 	sts	0x043A, r27
	}

	if((glb_tmr % 1000)== 0)
    6caa:	60 91 32 04 	lds	r22, 0x0432
    6cae:	70 91 33 04 	lds	r23, 0x0433
    6cb2:	80 91 34 04 	lds	r24, 0x0434
    6cb6:	90 91 35 04 	lds	r25, 0x0435
    6cba:	28 ee       	ldi	r18, 0xE8	; 232
    6cbc:	33 e0       	ldi	r19, 0x03	; 3
    6cbe:	40 e0       	ldi	r20, 0x00	; 0
    6cc0:	50 e0       	ldi	r21, 0x00	; 0
    6cc2:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    6cc6:	61 15       	cp	r22, r1
    6cc8:	71 05       	cpc	r23, r1
    6cca:	81 05       	cpc	r24, r1
    6ccc:	91 05       	cpc	r25, r1
    6cce:	d9 f4       	brne	.+54     	; 0x6d06 <handle_10ms_tick+0x198>
	{

		pkt.id = CAN_DATA_DLG1;
		pkt.id = pkt.id << 8;
    6cd0:	80 e0       	ldi	r24, 0x00	; 0
    6cd2:	9d ed       	ldi	r25, 0xDD	; 221
    6cd4:	af ef       	ldi	r26, 0xFF	; 255
    6cd6:	b0 e0       	ldi	r27, 0x00	; 0
    6cd8:	89 83       	std	Y+1, r24	; 0x01
    6cda:	9a 83       	std	Y+2, r25	; 0x02
    6cdc:	ab 83       	std	Y+3, r26	; 0x03
    6cde:	bc 83       	std	Y+4, r27	; 0x04
		pkt.id_type = CAN_EXT_MSG;
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	8d 83       	std	Y+5, r24	; 0x05
		pkt.length = 6;
    6ce4:	86 e0       	ldi	r24, 0x06	; 6
    6ce6:	8f 83       	std	Y+7, r24	; 0x07
		pkt.data[0] = log_status;
    6ce8:	80 91 3b 04 	lds	r24, 0x043B
    6cec:	88 87       	std	Y+8, r24	; 0x08
		pkt.data[1] = 0;
    6cee:	19 86       	std	Y+9, r1	; 0x09
		pkt.data[2] = 0;
    6cf0:	1a 86       	std	Y+10, r1	; 0x0a
		pkt.data[3] = 0;
    6cf2:	1b 86       	std	Y+11, r1	; 0x0b
		pkt.data[4] = 0;
    6cf4:	1c 86       	std	Y+12, r1	; 0x0c
		pkt.data[5] = 0;
    6cf6:	1d 86       	std	Y+13, r1	; 0x0d

		can_tx(get_open_mob(),&pkt);
    6cf8:	0e 94 df 31 	call	0x63be	; 0x63be <get_open_mob>
    6cfc:	be 01       	movw	r22, r28
    6cfe:	6f 5f       	subi	r22, 0xFF	; 255
    6d00:	7f 4f       	sbci	r23, 0xFF	; 255
    6d02:	0e 94 86 30 	call	0x610c	; 0x610c <can_tx>

	}
	/*-------------Device Specific-----------------*/
	cli();
    6d06:	f8 94       	cli
	CANGIE=(1<<ENIT) | (1<< ENRX) | (1 << ENTX);
    6d08:	80 eb       	ldi	r24, 0xB0	; 176
    6d0a:	80 93 db 00 	sts	0x00DB, r24
	TIMSK1 = _BV(OCIE1A);
    6d0e:	82 e0       	ldi	r24, 0x02	; 2
    6d10:	80 93 6f 00 	sts	0x006F, r24
	/*---------------------------------------------*/
}
    6d14:	2f 96       	adiw	r28, 0x0f	; 15
    6d16:	0f b6       	in	r0, 0x3f	; 63
    6d18:	f8 94       	cli
    6d1a:	de bf       	out	0x3e, r29	; 62
    6d1c:	0f be       	out	0x3f, r0	; 63
    6d1e:	cd bf       	out	0x3d, r28	; 61
    6d20:	cf 91       	pop	r28
    6d22:	df 91       	pop	r29
    6d24:	08 95       	ret

00006d26 <ProcessGpsString>:
}



uint8_t ProcessGpsString(const char *rx_str)
{
    6d26:	2f 92       	push	r2
    6d28:	3f 92       	push	r3
    6d2a:	4f 92       	push	r4
    6d2c:	5f 92       	push	r5
    6d2e:	6f 92       	push	r6
    6d30:	7f 92       	push	r7
    6d32:	8f 92       	push	r8
    6d34:	9f 92       	push	r9
    6d36:	af 92       	push	r10
    6d38:	bf 92       	push	r11
    6d3a:	cf 92       	push	r12
    6d3c:	df 92       	push	r13
    6d3e:	ef 92       	push	r14
    6d40:	ff 92       	push	r15
    6d42:	0f 93       	push	r16
    6d44:	1f 93       	push	r17
    6d46:	df 93       	push	r29
    6d48:	cf 93       	push	r28
    6d4a:	cd b7       	in	r28, 0x3d	; 61
    6d4c:	de b7       	in	r29, 0x3e	; 62
    6d4e:	60 97       	sbiw	r28, 0x10	; 16
    6d50:	0f b6       	in	r0, 0x3f	; 63
    6d52:	f8 94       	cli
    6d54:	de bf       	out	0x3e, r29	; 62
    6d56:	0f be       	out	0x3f, r0	; 63
    6d58:	cd bf       	out	0x3d, r28	; 61
    6d5a:	2c 01       	movw	r4, r24
    6d5c:	fe 01       	movw	r30, r28
    6d5e:	32 96       	adiw	r30, 0x02	; 2
	uint8_t parm_resp;
	uint8_t i;

	//char test_str[100];

	for(i = 0;i<15;i++)
    6d60:	ce 01       	movw	r24, r28
    6d62:	41 96       	adiw	r24, 0x11	; 17
	{
		parm_str[i] = 0;
    6d64:	11 92       	st	Z+, r1
	uint8_t parm_resp;
	uint8_t i;

	//char test_str[100];

	for(i = 0;i<15;i++)
    6d66:	e8 17       	cp	r30, r24
    6d68:	f9 07       	cpc	r31, r25
    6d6a:	e1 f7       	brne	.-8      	; 0x6d64 <ProcessGpsString+0x3e>



uint8_t ProcessGpsString(const char *rx_str)
{
	uint8_t idx = 0;
    6d6c:	19 82       	std	Y+1, r1	; 0x01
    6d6e:	80 e0       	ldi	r24, 0x00	; 0
				parm_idx++;
				break;

			case 14:	// Position Dilution

				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    6d70:	e2 e0       	ldi	r30, 0x02	; 2
    6d72:	2e 2e       	mov	r2, r30
    6d74:	31 2c       	mov	r3, r1
    6d76:	2c 0e       	add	r2, r28
    6d78:	3d 1e       	adc	r3, r29
    6d7a:	01 c0       	rjmp	.+2      	; 0x6d7e <ProcessGpsString+0x58>



uint8_t ProcessGpsString(const char *rx_str)
{
	uint8_t idx = 0;
    6d7c:	8d e0       	ldi	r24, 0x0D	; 13
		parm_str[i] = 0;
	}

	while(1)
	{
		switch(parm_idx)
    6d7e:	e8 2f       	mov	r30, r24
    6d80:	f0 e0       	ldi	r31, 0x00	; 0
    6d82:	e1 31       	cpi	r30, 0x11	; 17
    6d84:	f1 05       	cpc	r31, r1
    6d86:	08 f0       	brcs	.+2      	; 0x6d8a <ProcessGpsString+0x64>
    6d88:	2a c5       	rjmp	.+2644   	; 0x77de <ProcessGpsString+0xab8>
    6d8a:	ef 58       	subi	r30, 0x8F	; 143
    6d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d8e:	ee 0f       	add	r30, r30
    6d90:	ff 1f       	adc	r31, r31
    6d92:	05 90       	lpm	r0, Z+
    6d94:	f4 91       	lpm	r31, Z+
    6d96:	e0 2d       	mov	r30, r0
    6d98:	09 94       	ijmp
    6d9a:	80 e1       	ldi	r24, 0x10	; 16
    6d9c:	f0 cf       	rjmp	.-32     	; 0x6d7e <ProcessGpsString+0x58>
    6d9e:	81 e0       	ldi	r24, 0x01	; 1
    6da0:	1f c5       	rjmp	.+2622   	; 0x77e0 <ProcessGpsString+0xaba>
		{

			case 0:	// Process Start bytes
				if(			(rx_str[0] == '$')
    6da2:	f2 01       	movw	r30, r4
    6da4:	80 81       	ld	r24, Z
    6da6:	84 32       	cpi	r24, 0x24	; 36
    6da8:	09 f0       	breq	.+2      	; 0x6dac <ProcessGpsString+0x86>
    6daa:	19 c5       	rjmp	.+2610   	; 0x77de <ProcessGpsString+0xab8>
    6dac:	81 81       	ldd	r24, Z+1	; 0x01
    6dae:	80 35       	cpi	r24, 0x50	; 80
    6db0:	09 f0       	breq	.+2      	; 0x6db4 <ProcessGpsString+0x8e>
    6db2:	15 c5       	rjmp	.+2602   	; 0x77de <ProcessGpsString+0xab8>
    6db4:	82 81       	ldd	r24, Z+2	; 0x02
    6db6:	87 34       	cpi	r24, 0x47	; 71
    6db8:	09 f0       	breq	.+2      	; 0x6dbc <ProcessGpsString+0x96>
    6dba:	11 c5       	rjmp	.+2594   	; 0x77de <ProcessGpsString+0xab8>
    6dbc:	83 81       	ldd	r24, Z+3	; 0x03
    6dbe:	82 35       	cpi	r24, 0x52	; 82
    6dc0:	09 f0       	breq	.+2      	; 0x6dc4 <ProcessGpsString+0x9e>
    6dc2:	0d c5       	rjmp	.+2586   	; 0x77de <ProcessGpsString+0xab8>
    6dc4:	84 81       	ldd	r24, Z+4	; 0x04
    6dc6:	8d 34       	cpi	r24, 0x4D	; 77
    6dc8:	09 f0       	breq	.+2      	; 0x6dcc <ProcessGpsString+0xa6>
    6dca:	09 c5       	rjmp	.+2578   	; 0x77de <ProcessGpsString+0xab8>
    6dcc:	85 81       	ldd	r24, Z+5	; 0x05
    6dce:	86 34       	cpi	r24, 0x46	; 70
    6dd0:	09 f0       	breq	.+2      	; 0x6dd4 <ProcessGpsString+0xae>
    6dd2:	05 c5       	rjmp	.+2570   	; 0x77de <ProcessGpsString+0xab8>
    6dd4:	86 81       	ldd	r24, Z+6	; 0x06
    6dd6:	8c 32       	cpi	r24, 0x2C	; 44
    6dd8:	09 f0       	breq	.+2      	; 0x6ddc <ProcessGpsString+0xb6>
    6dda:	01 c5       	rjmp	.+2562   	; 0x77de <ProcessGpsString+0xab8>
						&& 	(rx_str[5] == 'F')
						&& 	(rx_str[6] == ','))
				{

					parm_idx++;
					idx = 7;
    6ddc:	f7 e0       	ldi	r31, 0x07	; 7
    6dde:	f9 83       	std	Y+1, r31	; 0x01
    6de0:	81 e0       	ldi	r24, 0x01	; 1
    6de2:	cd cf       	rjmp	.-102    	; 0x6d7e <ProcessGpsString+0x58>
				}
				break;

			case 1:	// GPS week number (Not used)

				parm_resp = GetParameterString(rx_str,&idx,parm_str,4,0);
    6de4:	c2 01       	movw	r24, r4
    6de6:	be 01       	movw	r22, r28
    6de8:	6f 5f       	subi	r22, 0xFF	; 255
    6dea:	7f 4f       	sbci	r23, 0xFF	; 255
    6dec:	a1 01       	movw	r20, r2
    6dee:	24 e0       	ldi	r18, 0x04	; 4
    6df0:	00 e0       	ldi	r16, 0x00	; 0
    6df2:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    6df6:	8f 3f       	cpi	r24, 0xFF	; 255
    6df8:	09 f4       	brne	.+2      	; 0x6dfc <ProcessGpsString+0xd6>
    6dfa:	f1 c4       	rjmp	.+2530   	; 0x77de <ProcessGpsString+0xab8>
				}



				// Process Parameter String
				if(parm_resp == 0)
    6dfc:	88 23       	and	r24, r24
    6dfe:	29 f4       	brne	.+10     	; 0x6e0a <ProcessGpsString+0xe4>
				{
					gps.week_num = 0;
    6e00:	10 92 54 04 	sts	0x0454, r1
    6e04:	10 92 53 04 	sts	0x0453, r1
    6e08:	07 c0       	rjmp	.+14     	; 0x6e18 <ProcessGpsString+0xf2>
				}
				else
				{
					gps.week_num = atoi(parm_str);
    6e0a:	c1 01       	movw	r24, r2
    6e0c:	0e 94 a5 44 	call	0x894a	; 0x894a <atoi>
    6e10:	90 93 54 04 	sts	0x0454, r25
    6e14:	80 93 53 04 	sts	0x0453, r24
    6e18:	82 e0       	ldi	r24, 0x02	; 2
    6e1a:	b1 cf       	rjmp	.-158    	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 2: // GPS seconds
				parm_resp = GetParameterString(rx_str,&idx,parm_str,6,0);
    6e1c:	c2 01       	movw	r24, r4
    6e1e:	be 01       	movw	r22, r28
    6e20:	6f 5f       	subi	r22, 0xFF	; 255
    6e22:	7f 4f       	sbci	r23, 0xFF	; 255
    6e24:	a1 01       	movw	r20, r2
    6e26:	26 e0       	ldi	r18, 0x06	; 6
    6e28:	00 e0       	ldi	r16, 0x00	; 0
    6e2a:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    6e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    6e30:	09 f4       	brne	.+2      	; 0x6e34 <ProcessGpsString+0x10e>
    6e32:	d5 c4       	rjmp	.+2474   	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    6e34:	88 23       	and	r24, r24
    6e36:	49 f4       	brne	.+18     	; 0x6e4a <ProcessGpsString+0x124>
				{
					gps.seconds = 0;
    6e38:	10 92 55 04 	sts	0x0455, r1
    6e3c:	10 92 56 04 	sts	0x0456, r1
    6e40:	10 92 57 04 	sts	0x0457, r1
    6e44:	10 92 58 04 	sts	0x0458, r1
    6e48:	0d c0       	rjmp	.+26     	; 0x6e64 <ProcessGpsString+0x13e>
				}
				else
				{
					gps.seconds = atol(parm_str);
    6e4a:	c1 01       	movw	r24, r2
    6e4c:	0e 94 c3 44 	call	0x8986	; 0x8986 <atol>
    6e50:	9b 01       	movw	r18, r22
    6e52:	ac 01       	movw	r20, r24
    6e54:	20 93 55 04 	sts	0x0455, r18
    6e58:	30 93 56 04 	sts	0x0456, r19
    6e5c:	40 93 57 04 	sts	0x0457, r20
    6e60:	50 93 58 04 	sts	0x0458, r21
    6e64:	83 e0       	ldi	r24, 0x03	; 3
    6e66:	8b cf       	rjmp	.-234    	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 3: // UTC Date
				parm_resp = GetParameterString(rx_str,&idx,parm_str,6,0);
    6e68:	c2 01       	movw	r24, r4
    6e6a:	be 01       	movw	r22, r28
    6e6c:	6f 5f       	subi	r22, 0xFF	; 255
    6e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e70:	a1 01       	movw	r20, r2
    6e72:	26 e0       	ldi	r18, 0x06	; 6
    6e74:	00 e0       	ldi	r16, 0x00	; 0
    6e76:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    6e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    6e7c:	09 f4       	brne	.+2      	; 0x6e80 <ProcessGpsString+0x15a>
    6e7e:	af c4       	rjmp	.+2398   	; 0x77de <ProcessGpsString+0xab8>
				}



				// Process Parameter String
				if(parm_resp == 0)
    6e80:	88 23       	and	r24, r24
    6e82:	89 f4       	brne	.+34     	; 0x6ea6 <ProcessGpsString+0x180>
				{
					gps.utc_day = 0;
    6e84:	10 92 59 04 	sts	0x0459, r1
    6e88:	10 92 5a 04 	sts	0x045A, r1
    6e8c:	10 92 5b 04 	sts	0x045B, r1
    6e90:	10 92 5c 04 	sts	0x045C, r1
					gps.utc_month = 0;
    6e94:	10 92 5d 04 	sts	0x045D, r1
    6e98:	10 92 5e 04 	sts	0x045E, r1
    6e9c:	10 92 5f 04 	sts	0x045F, r1
    6ea0:	10 92 60 04 	sts	0x0460, r1
    6ea4:	79 c0       	rjmp	.+242    	; 0x6f98 <ProcessGpsString+0x272>
					gps.utc_year = 0;
				}
				else
				{
					if(isdigit(parm_str[0]) && isdigit(parm_str[1]))
    6ea6:	4a 81       	ldd	r20, Y+2	; 0x02
    6ea8:	84 2f       	mov	r24, r20
    6eaa:	90 e0       	ldi	r25, 0x00	; 0
    6eac:	c0 97       	sbiw	r24, 0x30	; 48
    6eae:	0a 97       	sbiw	r24, 0x0a	; 10
    6eb0:	e8 f4       	brcc	.+58     	; 0x6eec <ProcessGpsString+0x1c6>
    6eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    6eb4:	28 2f       	mov	r18, r24
    6eb6:	30 e0       	ldi	r19, 0x00	; 0
    6eb8:	c9 01       	movw	r24, r18
    6eba:	c0 97       	sbiw	r24, 0x30	; 48
    6ebc:	0a 97       	sbiw	r24, 0x0a	; 10
    6ebe:	b0 f4       	brcc	.+44     	; 0x6eec <ProcessGpsString+0x1c6>
					{
						gps.utc_day = (parm_str[0]-48)*10 + (parm_str[1] - 48);
    6ec0:	20 51       	subi	r18, 0x10	; 16
    6ec2:	32 40       	sbci	r19, 0x02	; 2
    6ec4:	5a e0       	ldi	r21, 0x0A	; 10
    6ec6:	45 9f       	mul	r20, r21
    6ec8:	c0 01       	movw	r24, r0
    6eca:	11 24       	eor	r1, r1
    6ecc:	28 0f       	add	r18, r24
    6ece:	39 1f       	adc	r19, r25
    6ed0:	c9 01       	movw	r24, r18
    6ed2:	aa 27       	eor	r26, r26
    6ed4:	97 fd       	sbrc	r25, 7
    6ed6:	a0 95       	com	r26
    6ed8:	ba 2f       	mov	r27, r26
    6eda:	80 93 59 04 	sts	0x0459, r24
    6ede:	90 93 5a 04 	sts	0x045A, r25
    6ee2:	a0 93 5b 04 	sts	0x045B, r26
    6ee6:	b0 93 5c 04 	sts	0x045C, r27
    6eea:	08 c0       	rjmp	.+16     	; 0x6efc <ProcessGpsString+0x1d6>
					}
					else
					{
						gps.utc_day = 0;
    6eec:	10 92 59 04 	sts	0x0459, r1
    6ef0:	10 92 5a 04 	sts	0x045A, r1
    6ef4:	10 92 5b 04 	sts	0x045B, r1
    6ef8:	10 92 5c 04 	sts	0x045C, r1
					}

					if(isdigit(parm_str[2]) && isdigit(parm_str[3]))
    6efc:	4c 81       	ldd	r20, Y+4	; 0x04
    6efe:	84 2f       	mov	r24, r20
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	c0 97       	sbiw	r24, 0x30	; 48
    6f04:	0a 97       	sbiw	r24, 0x0a	; 10
    6f06:	e8 f4       	brcc	.+58     	; 0x6f42 <ProcessGpsString+0x21c>
    6f08:	8d 81       	ldd	r24, Y+5	; 0x05
    6f0a:	28 2f       	mov	r18, r24
    6f0c:	30 e0       	ldi	r19, 0x00	; 0
    6f0e:	c9 01       	movw	r24, r18
    6f10:	c0 97       	sbiw	r24, 0x30	; 48
    6f12:	0a 97       	sbiw	r24, 0x0a	; 10
    6f14:	b0 f4       	brcc	.+44     	; 0x6f42 <ProcessGpsString+0x21c>
					{
						gps.utc_month = (parm_str[2]-48)*10 + (parm_str[3] - 48);
    6f16:	20 51       	subi	r18, 0x10	; 16
    6f18:	32 40       	sbci	r19, 0x02	; 2
    6f1a:	6a e0       	ldi	r22, 0x0A	; 10
    6f1c:	46 9f       	mul	r20, r22
    6f1e:	c0 01       	movw	r24, r0
    6f20:	11 24       	eor	r1, r1
    6f22:	28 0f       	add	r18, r24
    6f24:	39 1f       	adc	r19, r25
    6f26:	c9 01       	movw	r24, r18
    6f28:	aa 27       	eor	r26, r26
    6f2a:	97 fd       	sbrc	r25, 7
    6f2c:	a0 95       	com	r26
    6f2e:	ba 2f       	mov	r27, r26
    6f30:	80 93 5d 04 	sts	0x045D, r24
    6f34:	90 93 5e 04 	sts	0x045E, r25
    6f38:	a0 93 5f 04 	sts	0x045F, r26
    6f3c:	b0 93 60 04 	sts	0x0460, r27
    6f40:	08 c0       	rjmp	.+16     	; 0x6f52 <ProcessGpsString+0x22c>
					}
					else
					{
						gps.utc_month = 0;
    6f42:	10 92 5d 04 	sts	0x045D, r1
    6f46:	10 92 5e 04 	sts	0x045E, r1
    6f4a:	10 92 5f 04 	sts	0x045F, r1
    6f4e:	10 92 60 04 	sts	0x0460, r1
					}

					if(isdigit(parm_str[4]) && isdigit(parm_str[5]))
    6f52:	4e 81       	ldd	r20, Y+6	; 0x06
    6f54:	84 2f       	mov	r24, r20
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	c0 97       	sbiw	r24, 0x30	; 48
    6f5a:	0a 97       	sbiw	r24, 0x0a	; 10
    6f5c:	e8 f4       	brcc	.+58     	; 0x6f98 <ProcessGpsString+0x272>
    6f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    6f60:	28 2f       	mov	r18, r24
    6f62:	30 e0       	ldi	r19, 0x00	; 0
    6f64:	c9 01       	movw	r24, r18
    6f66:	c0 97       	sbiw	r24, 0x30	; 48
    6f68:	0a 97       	sbiw	r24, 0x0a	; 10
    6f6a:	b0 f4       	brcc	.+44     	; 0x6f98 <ProcessGpsString+0x272>
					{
						gps.utc_year = (parm_str[4]-48)*10 + (parm_str[5] - 48);
    6f6c:	20 51       	subi	r18, 0x10	; 16
    6f6e:	32 40       	sbci	r19, 0x02	; 2
    6f70:	ea e0       	ldi	r30, 0x0A	; 10
    6f72:	4e 9f       	mul	r20, r30
    6f74:	c0 01       	movw	r24, r0
    6f76:	11 24       	eor	r1, r1
    6f78:	28 0f       	add	r18, r24
    6f7a:	39 1f       	adc	r19, r25
    6f7c:	c9 01       	movw	r24, r18
    6f7e:	aa 27       	eor	r26, r26
    6f80:	97 fd       	sbrc	r25, 7
    6f82:	a0 95       	com	r26
    6f84:	ba 2f       	mov	r27, r26
    6f86:	80 93 61 04 	sts	0x0461, r24
    6f8a:	90 93 62 04 	sts	0x0462, r25
    6f8e:	a0 93 63 04 	sts	0x0463, r26
    6f92:	b0 93 64 04 	sts	0x0464, r27
    6f96:	08 c0       	rjmp	.+16     	; 0x6fa8 <ProcessGpsString+0x282>
					}
					else
					{
						gps.utc_year = 0;
    6f98:	10 92 61 04 	sts	0x0461, r1
    6f9c:	10 92 62 04 	sts	0x0462, r1
    6fa0:	10 92 63 04 	sts	0x0463, r1
    6fa4:	10 92 64 04 	sts	0x0464, r1
    6fa8:	84 e0       	ldi	r24, 0x04	; 4
    6faa:	e9 ce       	rjmp	.-558    	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 4: // UTC Time
				parm_resp = GetParameterString(rx_str,&idx,parm_str,8,0);
    6fac:	c2 01       	movw	r24, r4
    6fae:	be 01       	movw	r22, r28
    6fb0:	6f 5f       	subi	r22, 0xFF	; 255
    6fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    6fb4:	a1 01       	movw	r20, r2
    6fb6:	28 e0       	ldi	r18, 0x08	; 8
    6fb8:	00 e0       	ldi	r16, 0x00	; 0
    6fba:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    6fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    6fc0:	09 f4       	brne	.+2      	; 0x6fc4 <ProcessGpsString+0x29e>
    6fc2:	0d c4       	rjmp	.+2074   	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    6fc4:	88 23       	and	r24, r24
    6fc6:	c9 f4       	brne	.+50     	; 0x6ffa <ProcessGpsString+0x2d4>
				{
					gps.utc_hour = 0;
    6fc8:	10 92 65 04 	sts	0x0465, r1
    6fcc:	10 92 66 04 	sts	0x0466, r1
    6fd0:	10 92 67 04 	sts	0x0467, r1
    6fd4:	10 92 68 04 	sts	0x0468, r1
					gps.utc_min = 0;
    6fd8:	10 92 69 04 	sts	0x0469, r1
    6fdc:	10 92 6a 04 	sts	0x046A, r1
    6fe0:	10 92 6b 04 	sts	0x046B, r1
    6fe4:	10 92 6c 04 	sts	0x046C, r1
					gps.utc_sec = 0;
    6fe8:	10 92 6d 04 	sts	0x046D, r1
    6fec:	10 92 6e 04 	sts	0x046E, r1
    6ff0:	10 92 6f 04 	sts	0x046F, r1
    6ff4:	10 92 70 04 	sts	0x0470, r1
    6ff8:	9a c0       	rjmp	.+308    	; 0x712e <ProcessGpsString+0x408>
					gps.utc_tenths = 0;
				}
				else
				{
					if(isdigit(parm_str[0]) && isdigit(parm_str[1]))
    6ffa:	4a 81       	ldd	r20, Y+2	; 0x02
    6ffc:	84 2f       	mov	r24, r20
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	c0 97       	sbiw	r24, 0x30	; 48
    7002:	0a 97       	sbiw	r24, 0x0a	; 10
    7004:	e8 f4       	brcc	.+58     	; 0x7040 <ProcessGpsString+0x31a>
    7006:	8b 81       	ldd	r24, Y+3	; 0x03
    7008:	28 2f       	mov	r18, r24
    700a:	30 e0       	ldi	r19, 0x00	; 0
    700c:	c9 01       	movw	r24, r18
    700e:	c0 97       	sbiw	r24, 0x30	; 48
    7010:	0a 97       	sbiw	r24, 0x0a	; 10
    7012:	b0 f4       	brcc	.+44     	; 0x7040 <ProcessGpsString+0x31a>
					{
						gps.utc_hour = (parm_str[0]-48)*10 + (parm_str[1] - 48);
    7014:	20 51       	subi	r18, 0x10	; 16
    7016:	32 40       	sbci	r19, 0x02	; 2
    7018:	fa e0       	ldi	r31, 0x0A	; 10
    701a:	4f 9f       	mul	r20, r31
    701c:	c0 01       	movw	r24, r0
    701e:	11 24       	eor	r1, r1
    7020:	28 0f       	add	r18, r24
    7022:	39 1f       	adc	r19, r25
    7024:	c9 01       	movw	r24, r18
    7026:	aa 27       	eor	r26, r26
    7028:	97 fd       	sbrc	r25, 7
    702a:	a0 95       	com	r26
    702c:	ba 2f       	mov	r27, r26
    702e:	80 93 65 04 	sts	0x0465, r24
    7032:	90 93 66 04 	sts	0x0466, r25
    7036:	a0 93 67 04 	sts	0x0467, r26
    703a:	b0 93 68 04 	sts	0x0468, r27
    703e:	08 c0       	rjmp	.+16     	; 0x7050 <ProcessGpsString+0x32a>
					}
					else
					{
						gps.utc_hour = 0;
    7040:	10 92 65 04 	sts	0x0465, r1
    7044:	10 92 66 04 	sts	0x0466, r1
    7048:	10 92 67 04 	sts	0x0467, r1
    704c:	10 92 68 04 	sts	0x0468, r1
					}

					if(isdigit(parm_str[2]) && isdigit(parm_str[3]))
    7050:	4c 81       	ldd	r20, Y+4	; 0x04
    7052:	84 2f       	mov	r24, r20
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	c0 97       	sbiw	r24, 0x30	; 48
    7058:	0a 97       	sbiw	r24, 0x0a	; 10
    705a:	e8 f4       	brcc	.+58     	; 0x7096 <ProcessGpsString+0x370>
    705c:	8d 81       	ldd	r24, Y+5	; 0x05
    705e:	28 2f       	mov	r18, r24
    7060:	30 e0       	ldi	r19, 0x00	; 0
    7062:	c9 01       	movw	r24, r18
    7064:	c0 97       	sbiw	r24, 0x30	; 48
    7066:	0a 97       	sbiw	r24, 0x0a	; 10
    7068:	b0 f4       	brcc	.+44     	; 0x7096 <ProcessGpsString+0x370>
					{
						gps.utc_min = (parm_str[2]-48)*10 + (parm_str[3] - 48);
    706a:	20 51       	subi	r18, 0x10	; 16
    706c:	32 40       	sbci	r19, 0x02	; 2
    706e:	5a e0       	ldi	r21, 0x0A	; 10
    7070:	45 9f       	mul	r20, r21
    7072:	c0 01       	movw	r24, r0
    7074:	11 24       	eor	r1, r1
    7076:	28 0f       	add	r18, r24
    7078:	39 1f       	adc	r19, r25
    707a:	c9 01       	movw	r24, r18
    707c:	aa 27       	eor	r26, r26
    707e:	97 fd       	sbrc	r25, 7
    7080:	a0 95       	com	r26
    7082:	ba 2f       	mov	r27, r26
    7084:	80 93 69 04 	sts	0x0469, r24
    7088:	90 93 6a 04 	sts	0x046A, r25
    708c:	a0 93 6b 04 	sts	0x046B, r26
    7090:	b0 93 6c 04 	sts	0x046C, r27
    7094:	08 c0       	rjmp	.+16     	; 0x70a6 <ProcessGpsString+0x380>
					}
					else
					{
						gps.utc_min = 0;
    7096:	10 92 69 04 	sts	0x0469, r1
    709a:	10 92 6a 04 	sts	0x046A, r1
    709e:	10 92 6b 04 	sts	0x046B, r1
    70a2:	10 92 6c 04 	sts	0x046C, r1
					}

					if(isdigit(parm_str[4]) && isdigit(parm_str[5]))
    70a6:	4e 81       	ldd	r20, Y+6	; 0x06
    70a8:	84 2f       	mov	r24, r20
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	c0 97       	sbiw	r24, 0x30	; 48
    70ae:	0a 97       	sbiw	r24, 0x0a	; 10
    70b0:	e8 f4       	brcc	.+58     	; 0x70ec <ProcessGpsString+0x3c6>
    70b2:	8f 81       	ldd	r24, Y+7	; 0x07
    70b4:	28 2f       	mov	r18, r24
    70b6:	30 e0       	ldi	r19, 0x00	; 0
    70b8:	c9 01       	movw	r24, r18
    70ba:	c0 97       	sbiw	r24, 0x30	; 48
    70bc:	0a 97       	sbiw	r24, 0x0a	; 10
    70be:	b0 f4       	brcc	.+44     	; 0x70ec <ProcessGpsString+0x3c6>
					{
						gps.utc_sec = (parm_str[4]-48)*10 + (parm_str[5] - 48);
    70c0:	20 51       	subi	r18, 0x10	; 16
    70c2:	32 40       	sbci	r19, 0x02	; 2
    70c4:	6a e0       	ldi	r22, 0x0A	; 10
    70c6:	46 9f       	mul	r20, r22
    70c8:	c0 01       	movw	r24, r0
    70ca:	11 24       	eor	r1, r1
    70cc:	28 0f       	add	r18, r24
    70ce:	39 1f       	adc	r19, r25
    70d0:	c9 01       	movw	r24, r18
    70d2:	aa 27       	eor	r26, r26
    70d4:	97 fd       	sbrc	r25, 7
    70d6:	a0 95       	com	r26
    70d8:	ba 2f       	mov	r27, r26
    70da:	80 93 6d 04 	sts	0x046D, r24
    70de:	90 93 6e 04 	sts	0x046E, r25
    70e2:	a0 93 6f 04 	sts	0x046F, r26
    70e6:	b0 93 70 04 	sts	0x0470, r27
    70ea:	08 c0       	rjmp	.+16     	; 0x70fc <ProcessGpsString+0x3d6>
					}
					else
					{
						gps.utc_sec = 0;
    70ec:	10 92 6d 04 	sts	0x046D, r1
    70f0:	10 92 6e 04 	sts	0x046E, r1
    70f4:	10 92 6f 04 	sts	0x046F, r1
    70f8:	10 92 70 04 	sts	0x0470, r1
					}

					if((parm_str[6] == '.') && (isdigit(parm_str[7])))
    70fc:	88 85       	ldd	r24, Y+8	; 0x08
    70fe:	8e 32       	cpi	r24, 0x2E	; 46
    7100:	b1 f4       	brne	.+44     	; 0x712e <ProcessGpsString+0x408>
    7102:	89 85       	ldd	r24, Y+9	; 0x09
    7104:	28 2f       	mov	r18, r24
    7106:	30 e0       	ldi	r19, 0x00	; 0
    7108:	20 53       	subi	r18, 0x30	; 48
    710a:	30 40       	sbci	r19, 0x00	; 0
    710c:	2a 30       	cpi	r18, 0x0A	; 10
    710e:	31 05       	cpc	r19, r1
    7110:	70 f4       	brcc	.+28     	; 0x712e <ProcessGpsString+0x408>
					{
						gps.utc_tenths = parm_str[7]-48;
    7112:	c9 01       	movw	r24, r18
    7114:	aa 27       	eor	r26, r26
    7116:	97 fd       	sbrc	r25, 7
    7118:	a0 95       	com	r26
    711a:	ba 2f       	mov	r27, r26
    711c:	80 93 71 04 	sts	0x0471, r24
    7120:	90 93 72 04 	sts	0x0472, r25
    7124:	a0 93 73 04 	sts	0x0473, r26
    7128:	b0 93 74 04 	sts	0x0474, r27
    712c:	08 c0       	rjmp	.+16     	; 0x713e <ProcessGpsString+0x418>
					}
					else
					{
						gps.utc_tenths = 0;
    712e:	10 92 71 04 	sts	0x0471, r1
    7132:	10 92 72 04 	sts	0x0472, r1
    7136:	10 92 73 04 	sts	0x0473, r1
    713a:	10 92 74 04 	sts	0x0474, r1
    713e:	85 e0       	ldi	r24, 0x05	; 5
    7140:	1e ce       	rjmp	.-964    	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 5:	// GPS leap second count
				parm_resp = GetParameterString(rx_str,&idx,parm_str,10,0);
    7142:	c2 01       	movw	r24, r4
    7144:	be 01       	movw	r22, r28
    7146:	6f 5f       	subi	r22, 0xFF	; 255
    7148:	7f 4f       	sbci	r23, 0xFF	; 255
    714a:	a1 01       	movw	r20, r2
    714c:	2a e0       	ldi	r18, 0x0A	; 10
    714e:	00 e0       	ldi	r16, 0x00	; 0
    7150:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    7154:	8f 3f       	cpi	r24, 0xFF	; 255
    7156:	09 f4       	brne	.+2      	; 0x715a <ProcessGpsString+0x434>
    7158:	42 c3       	rjmp	.+1668   	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    715a:	88 23       	and	r24, r24
    715c:	49 f4       	brne	.+18     	; 0x7170 <ProcessGpsString+0x44a>
				{
					gps.leap_sec = 0;
    715e:	10 92 75 04 	sts	0x0475, r1
    7162:	10 92 76 04 	sts	0x0476, r1
    7166:	10 92 77 04 	sts	0x0477, r1
    716a:	10 92 78 04 	sts	0x0478, r1
    716e:	0d c0       	rjmp	.+26     	; 0x718a <ProcessGpsString+0x464>
				}
				else
				{
					gps.leap_sec = atol(parm_str);
    7170:	c1 01       	movw	r24, r2
    7172:	0e 94 c3 44 	call	0x8986	; 0x8986 <atol>
    7176:	9b 01       	movw	r18, r22
    7178:	ac 01       	movw	r20, r24
    717a:	20 93 75 04 	sts	0x0475, r18
    717e:	30 93 76 04 	sts	0x0476, r19
    7182:	40 93 77 04 	sts	0x0477, r20
    7186:	50 93 78 04 	sts	0x0478, r21
    718a:	86 e0       	ldi	r24, 0x06	; 6
    718c:	f8 cd       	rjmp	.-1040   	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 6:	// Latitude
				parm_resp = GetParameterString(rx_str,&idx,parm_str,10,10);
    718e:	c2 01       	movw	r24, r4
    7190:	be 01       	movw	r22, r28
    7192:	6f 5f       	subi	r22, 0xFF	; 255
    7194:	7f 4f       	sbci	r23, 0xFF	; 255
    7196:	a1 01       	movw	r20, r2
    7198:	2a e0       	ldi	r18, 0x0A	; 10
    719a:	0a e0       	ldi	r16, 0x0A	; 10
    719c:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    71a0:	8f 3f       	cpi	r24, 0xFF	; 255
    71a2:	09 f4       	brne	.+2      	; 0x71a6 <ProcessGpsString+0x480>
    71a4:	1c c3       	rjmp	.+1592   	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    71a6:	88 23       	and	r24, r24
    71a8:	89 f4       	brne	.+34     	; 0x71cc <ProcessGpsString+0x4a6>
				{
					gps.lat_deg = 0;
    71aa:	10 92 7a 04 	sts	0x047A, r1
    71ae:	10 92 7b 04 	sts	0x047B, r1
    71b2:	10 92 7c 04 	sts	0x047C, r1
    71b6:	10 92 7d 04 	sts	0x047D, r1
					gps.lat_min = 0;
    71ba:	10 92 7e 04 	sts	0x047E, r1
    71be:	10 92 7f 04 	sts	0x047F, r1
    71c2:	10 92 80 04 	sts	0x0480, r1
    71c6:	10 92 81 04 	sts	0x0481, r1
    71ca:	1d c1       	rjmp	.+570    	; 0x7406 <ProcessGpsString+0x6e0>
					gps.lat_min_frac = 0;
				}
				else
				{
					if(isdigit(parm_str[0]) && isdigit(parm_str[1]))
    71cc:	4a 81       	ldd	r20, Y+2	; 0x02
    71ce:	84 2f       	mov	r24, r20
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	c0 97       	sbiw	r24, 0x30	; 48
    71d4:	0a 97       	sbiw	r24, 0x0a	; 10
    71d6:	e8 f4       	brcc	.+58     	; 0x7212 <ProcessGpsString+0x4ec>
    71d8:	8b 81       	ldd	r24, Y+3	; 0x03
    71da:	28 2f       	mov	r18, r24
    71dc:	30 e0       	ldi	r19, 0x00	; 0
    71de:	c9 01       	movw	r24, r18
    71e0:	c0 97       	sbiw	r24, 0x30	; 48
    71e2:	0a 97       	sbiw	r24, 0x0a	; 10
    71e4:	b0 f4       	brcc	.+44     	; 0x7212 <ProcessGpsString+0x4ec>
					{
						gps.lat_deg = (parm_str[0]-48)*10 + (parm_str[1] - 48);
    71e6:	20 51       	subi	r18, 0x10	; 16
    71e8:	32 40       	sbci	r19, 0x02	; 2
    71ea:	ea e0       	ldi	r30, 0x0A	; 10
    71ec:	4e 9f       	mul	r20, r30
    71ee:	c0 01       	movw	r24, r0
    71f0:	11 24       	eor	r1, r1
    71f2:	28 0f       	add	r18, r24
    71f4:	39 1f       	adc	r19, r25
    71f6:	c9 01       	movw	r24, r18
    71f8:	aa 27       	eor	r26, r26
    71fa:	97 fd       	sbrc	r25, 7
    71fc:	a0 95       	com	r26
    71fe:	ba 2f       	mov	r27, r26
    7200:	80 93 7a 04 	sts	0x047A, r24
    7204:	90 93 7b 04 	sts	0x047B, r25
    7208:	a0 93 7c 04 	sts	0x047C, r26
    720c:	b0 93 7d 04 	sts	0x047D, r27
    7210:	08 c0       	rjmp	.+16     	; 0x7222 <ProcessGpsString+0x4fc>
					}
					else
					{
						gps.lat_deg = 0;
    7212:	10 92 7a 04 	sts	0x047A, r1
    7216:	10 92 7b 04 	sts	0x047B, r1
    721a:	10 92 7c 04 	sts	0x047C, r1
    721e:	10 92 7d 04 	sts	0x047D, r1
					}

					if(isdigit(parm_str[2]) && isdigit(parm_str[3]))
    7222:	4c 81       	ldd	r20, Y+4	; 0x04
    7224:	84 2f       	mov	r24, r20
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	c0 97       	sbiw	r24, 0x30	; 48
    722a:	0a 97       	sbiw	r24, 0x0a	; 10
    722c:	e8 f4       	brcc	.+58     	; 0x7268 <ProcessGpsString+0x542>
    722e:	8d 81       	ldd	r24, Y+5	; 0x05
    7230:	28 2f       	mov	r18, r24
    7232:	30 e0       	ldi	r19, 0x00	; 0
    7234:	c9 01       	movw	r24, r18
    7236:	c0 97       	sbiw	r24, 0x30	; 48
    7238:	0a 97       	sbiw	r24, 0x0a	; 10
    723a:	b0 f4       	brcc	.+44     	; 0x7268 <ProcessGpsString+0x542>
					{
						gps.lat_min = (parm_str[2]-48)*10 + (parm_str[3] - 48);
    723c:	20 51       	subi	r18, 0x10	; 16
    723e:	32 40       	sbci	r19, 0x02	; 2
    7240:	fa e0       	ldi	r31, 0x0A	; 10
    7242:	4f 9f       	mul	r20, r31
    7244:	c0 01       	movw	r24, r0
    7246:	11 24       	eor	r1, r1
    7248:	28 0f       	add	r18, r24
    724a:	39 1f       	adc	r19, r25
    724c:	c9 01       	movw	r24, r18
    724e:	aa 27       	eor	r26, r26
    7250:	97 fd       	sbrc	r25, 7
    7252:	a0 95       	com	r26
    7254:	ba 2f       	mov	r27, r26
    7256:	80 93 7e 04 	sts	0x047E, r24
    725a:	90 93 7f 04 	sts	0x047F, r25
    725e:	a0 93 80 04 	sts	0x0480, r26
    7262:	b0 93 81 04 	sts	0x0481, r27
    7266:	08 c0       	rjmp	.+16     	; 0x7278 <ProcessGpsString+0x552>
					}
					else
					{
						gps.lat_min = 0;
    7268:	10 92 7e 04 	sts	0x047E, r1
    726c:	10 92 7f 04 	sts	0x047F, r1
    7270:	10 92 80 04 	sts	0x0480, r1
    7274:	10 92 81 04 	sts	0x0481, r1
					}

					if(			parm_str[4] == '.'
    7278:	8e 81       	ldd	r24, Y+6	; 0x06
    727a:	8e 32       	cpi	r24, 0x2E	; 46
    727c:	09 f0       	breq	.+2      	; 0x7280 <ProcessGpsString+0x55a>
    727e:	c3 c0       	rjmp	.+390    	; 0x7406 <ProcessGpsString+0x6e0>
    7280:	8f 81       	ldd	r24, Y+7	; 0x07
    7282:	28 2f       	mov	r18, r24
    7284:	30 e0       	ldi	r19, 0x00	; 0
    7286:	20 53       	subi	r18, 0x30	; 48
    7288:	30 40       	sbci	r19, 0x00	; 0
    728a:	2a 30       	cpi	r18, 0x0A	; 10
    728c:	31 05       	cpc	r19, r1
    728e:	08 f0       	brcs	.+2      	; 0x7292 <ProcessGpsString+0x56c>
    7290:	ba c0       	rjmp	.+372    	; 0x7406 <ProcessGpsString+0x6e0>
    7292:	88 85       	ldd	r24, Y+8	; 0x08
    7294:	c8 2e       	mov	r12, r24
    7296:	dd 24       	eor	r13, r13
    7298:	80 ed       	ldi	r24, 0xD0	; 208
    729a:	9f ef       	ldi	r25, 0xFF	; 255
    729c:	c8 0e       	add	r12, r24
    729e:	d9 1e       	adc	r13, r25
    72a0:	9a e0       	ldi	r25, 0x0A	; 10
    72a2:	c9 16       	cp	r12, r25
    72a4:	d1 04       	cpc	r13, r1
    72a6:	08 f0       	brcs	.+2      	; 0x72aa <ProcessGpsString+0x584>
    72a8:	ae c0       	rjmp	.+348    	; 0x7406 <ProcessGpsString+0x6e0>
    72aa:	89 85       	ldd	r24, Y+9	; 0x09
    72ac:	a8 2e       	mov	r10, r24
    72ae:	bb 24       	eor	r11, r11
    72b0:	e0 ed       	ldi	r30, 0xD0	; 208
    72b2:	ff ef       	ldi	r31, 0xFF	; 255
    72b4:	ae 0e       	add	r10, r30
    72b6:	bf 1e       	adc	r11, r31
    72b8:	fa e0       	ldi	r31, 0x0A	; 10
    72ba:	af 16       	cp	r10, r31
    72bc:	b1 04       	cpc	r11, r1
    72be:	08 f0       	brcs	.+2      	; 0x72c2 <ProcessGpsString+0x59c>
    72c0:	a2 c0       	rjmp	.+324    	; 0x7406 <ProcessGpsString+0x6e0>
    72c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    72c4:	88 2e       	mov	r8, r24
    72c6:	99 24       	eor	r9, r9
    72c8:	80 ed       	ldi	r24, 0xD0	; 208
    72ca:	9f ef       	ldi	r25, 0xFF	; 255
    72cc:	88 0e       	add	r8, r24
    72ce:	99 1e       	adc	r9, r25
    72d0:	9a e0       	ldi	r25, 0x0A	; 10
    72d2:	89 16       	cp	r8, r25
    72d4:	91 04       	cpc	r9, r1
    72d6:	08 f0       	brcs	.+2      	; 0x72da <ProcessGpsString+0x5b4>
    72d8:	96 c0       	rjmp	.+300    	; 0x7406 <ProcessGpsString+0x6e0>
    72da:	8b 85       	ldd	r24, Y+11	; 0x0b
    72dc:	68 2e       	mov	r6, r24
    72de:	77 24       	eor	r7, r7
    72e0:	e0 ed       	ldi	r30, 0xD0	; 208
    72e2:	ff ef       	ldi	r31, 0xFF	; 255
    72e4:	6e 0e       	add	r6, r30
    72e6:	7f 1e       	adc	r7, r31
    72e8:	fa e0       	ldi	r31, 0x0A	; 10
    72ea:	6f 16       	cp	r6, r31
    72ec:	71 04       	cpc	r7, r1
    72ee:	08 f0       	brcs	.+2      	; 0x72f2 <ProcessGpsString+0x5cc>
    72f0:	8a c0       	rjmp	.+276    	; 0x7406 <ProcessGpsString+0x6e0>
							&&	isdigit(parm_str[7])
							&&	isdigit(parm_str[8])
							&&	isdigit(parm_str[9]))
					{

						gps.lat_min_frac =	((uint32_t)(parm_str[5]-48))*10000;
    72f2:	b9 01       	movw	r22, r18
    72f4:	88 27       	eor	r24, r24
    72f6:	77 fd       	sbrc	r23, 7
    72f8:	80 95       	com	r24
    72fa:	98 2f       	mov	r25, r24
    72fc:	20 e1       	ldi	r18, 0x10	; 16
    72fe:	37 e2       	ldi	r19, 0x27	; 39
    7300:	40 e0       	ldi	r20, 0x00	; 0
    7302:	50 e0       	ldi	r21, 0x00	; 0
    7304:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7308:	60 93 82 04 	sts	0x0482, r22
    730c:	70 93 83 04 	sts	0x0483, r23
    7310:	80 93 84 04 	sts	0x0484, r24
    7314:	90 93 85 04 	sts	0x0485, r25
						gps.lat_min_frac +=	((uint32_t)(parm_str[6]-48))*1000;
    7318:	e0 90 82 04 	lds	r14, 0x0482
    731c:	f0 90 83 04 	lds	r15, 0x0483
    7320:	00 91 84 04 	lds	r16, 0x0484
    7324:	10 91 85 04 	lds	r17, 0x0485
    7328:	b6 01       	movw	r22, r12
    732a:	88 27       	eor	r24, r24
    732c:	77 fd       	sbrc	r23, 7
    732e:	80 95       	com	r24
    7330:	98 2f       	mov	r25, r24
    7332:	28 ee       	ldi	r18, 0xE8	; 232
    7334:	33 e0       	ldi	r19, 0x03	; 3
    7336:	40 e0       	ldi	r20, 0x00	; 0
    7338:	50 e0       	ldi	r21, 0x00	; 0
    733a:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    733e:	e6 0e       	add	r14, r22
    7340:	f7 1e       	adc	r15, r23
    7342:	08 1f       	adc	r16, r24
    7344:	19 1f       	adc	r17, r25
    7346:	e0 92 82 04 	sts	0x0482, r14
    734a:	f0 92 83 04 	sts	0x0483, r15
    734e:	00 93 84 04 	sts	0x0484, r16
    7352:	10 93 85 04 	sts	0x0485, r17
						gps.lat_min_frac +=	((uint32_t)(parm_str[7]-48))*100;
    7356:	e0 90 82 04 	lds	r14, 0x0482
    735a:	f0 90 83 04 	lds	r15, 0x0483
    735e:	00 91 84 04 	lds	r16, 0x0484
    7362:	10 91 85 04 	lds	r17, 0x0485
    7366:	b5 01       	movw	r22, r10
    7368:	88 27       	eor	r24, r24
    736a:	77 fd       	sbrc	r23, 7
    736c:	80 95       	com	r24
    736e:	98 2f       	mov	r25, r24
    7370:	24 e6       	ldi	r18, 0x64	; 100
    7372:	30 e0       	ldi	r19, 0x00	; 0
    7374:	40 e0       	ldi	r20, 0x00	; 0
    7376:	50 e0       	ldi	r21, 0x00	; 0
    7378:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    737c:	e6 0e       	add	r14, r22
    737e:	f7 1e       	adc	r15, r23
    7380:	08 1f       	adc	r16, r24
    7382:	19 1f       	adc	r17, r25
    7384:	e0 92 82 04 	sts	0x0482, r14
    7388:	f0 92 83 04 	sts	0x0483, r15
    738c:	00 93 84 04 	sts	0x0484, r16
    7390:	10 93 85 04 	sts	0x0485, r17
						gps.lat_min_frac +=	((uint32_t)(parm_str[8]-48))*10;
    7394:	e0 90 82 04 	lds	r14, 0x0482
    7398:	f0 90 83 04 	lds	r15, 0x0483
    739c:	00 91 84 04 	lds	r16, 0x0484
    73a0:	10 91 85 04 	lds	r17, 0x0485
    73a4:	b4 01       	movw	r22, r8
    73a6:	88 27       	eor	r24, r24
    73a8:	77 fd       	sbrc	r23, 7
    73aa:	80 95       	com	r24
    73ac:	98 2f       	mov	r25, r24
    73ae:	2a e0       	ldi	r18, 0x0A	; 10
    73b0:	30 e0       	ldi	r19, 0x00	; 0
    73b2:	40 e0       	ldi	r20, 0x00	; 0
    73b4:	50 e0       	ldi	r21, 0x00	; 0
    73b6:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    73ba:	e6 0e       	add	r14, r22
    73bc:	f7 1e       	adc	r15, r23
    73be:	08 1f       	adc	r16, r24
    73c0:	19 1f       	adc	r17, r25
    73c2:	e0 92 82 04 	sts	0x0482, r14
    73c6:	f0 92 83 04 	sts	0x0483, r15
    73ca:	00 93 84 04 	sts	0x0484, r16
    73ce:	10 93 85 04 	sts	0x0485, r17
						gps.lat_min_frac +=	((uint32_t)(parm_str[9]-48));
    73d2:	20 91 82 04 	lds	r18, 0x0482
    73d6:	30 91 83 04 	lds	r19, 0x0483
    73da:	40 91 84 04 	lds	r20, 0x0484
    73de:	50 91 85 04 	lds	r21, 0x0485
    73e2:	c3 01       	movw	r24, r6
    73e4:	aa 27       	eor	r26, r26
    73e6:	97 fd       	sbrc	r25, 7
    73e8:	a0 95       	com	r26
    73ea:	ba 2f       	mov	r27, r26
    73ec:	82 0f       	add	r24, r18
    73ee:	93 1f       	adc	r25, r19
    73f0:	a4 1f       	adc	r26, r20
    73f2:	b5 1f       	adc	r27, r21
    73f4:	80 93 82 04 	sts	0x0482, r24
    73f8:	90 93 83 04 	sts	0x0483, r25
    73fc:	a0 93 84 04 	sts	0x0484, r26
    7400:	b0 93 85 04 	sts	0x0485, r27
    7404:	08 c0       	rjmp	.+16     	; 0x7416 <ProcessGpsString+0x6f0>
					}
					else
					{
						gps.lat_min_frac = 0;
    7406:	10 92 82 04 	sts	0x0482, r1
    740a:	10 92 83 04 	sts	0x0483, r1
    740e:	10 92 84 04 	sts	0x0484, r1
    7412:	10 92 85 04 	sts	0x0485, r1
    7416:	87 e0       	ldi	r24, 0x07	; 7
    7418:	b2 cc       	rjmp	.-1692   	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 7: // Latitude Hemisphere
				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    741a:	c2 01       	movw	r24, r4
    741c:	be 01       	movw	r22, r28
    741e:	6f 5f       	subi	r22, 0xFF	; 255
    7420:	7f 4f       	sbci	r23, 0xFF	; 255
    7422:	a1 01       	movw	r20, r2
    7424:	21 e0       	ldi	r18, 0x01	; 1
    7426:	00 e0       	ldi	r16, 0x00	; 0
    7428:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    742c:	8f 3f       	cpi	r24, 0xFF	; 255
    742e:	09 f4       	brne	.+2      	; 0x7432 <ProcessGpsString+0x70c>
    7430:	d6 c1       	rjmp	.+940    	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				if((parm_str[0] == 'N')||(parm_str[0] == 'S'))
    7432:	8a 81       	ldd	r24, Y+2	; 0x02
    7434:	8e 34       	cpi	r24, 0x4E	; 78
    7436:	11 f0       	breq	.+4      	; 0x743c <ProcessGpsString+0x716>
    7438:	83 35       	cpi	r24, 0x53	; 83
    743a:	19 f4       	brne	.+6      	; 0x7442 <ProcessGpsString+0x71c>
				{
					gps.lat_hemi = parm_str[0];
    743c:	80 93 79 04 	sts	0x0479, r24
    7440:	02 c0       	rjmp	.+4      	; 0x7446 <ProcessGpsString+0x720>
				}
				else
				{
					gps.lat_hemi = 0;
    7442:	10 92 79 04 	sts	0x0479, r1
    7446:	88 e0       	ldi	r24, 0x08	; 8
    7448:	9a cc       	rjmp	.-1740   	; 0x6d7e <ProcessGpsString+0x58>
				parm_idx++;
				break;

			case 8:	// Longitude

				parm_resp = GetParameterString(rx_str,&idx,parm_str,11,11);
    744a:	c2 01       	movw	r24, r4
    744c:	be 01       	movw	r22, r28
    744e:	6f 5f       	subi	r22, 0xFF	; 255
    7450:	7f 4f       	sbci	r23, 0xFF	; 255
    7452:	a1 01       	movw	r20, r2
    7454:	2b e0       	ldi	r18, 0x0B	; 11
    7456:	0b e0       	ldi	r16, 0x0B	; 11
    7458:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    745c:	8f 3f       	cpi	r24, 0xFF	; 255
    745e:	09 f4       	brne	.+2      	; 0x7462 <ProcessGpsString+0x73c>
    7460:	be c1       	rjmp	.+892    	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    7462:	88 23       	and	r24, r24
    7464:	89 f4       	brne	.+34     	; 0x7488 <ProcessGpsString+0x762>
				{
					gps.lng_deg = 0;
    7466:	10 92 87 04 	sts	0x0487, r1
    746a:	10 92 88 04 	sts	0x0488, r1
    746e:	10 92 89 04 	sts	0x0489, r1
    7472:	10 92 8a 04 	sts	0x048A, r1
					gps.lng_min = 0;
    7476:	10 92 8b 04 	sts	0x048B, r1
    747a:	10 92 8c 04 	sts	0x048C, r1
    747e:	10 92 8d 04 	sts	0x048D, r1
    7482:	10 92 8e 04 	sts	0x048E, r1
    7486:	29 c1       	rjmp	.+594    	; 0x76da <ProcessGpsString+0x9b4>
					gps.lng_min_frac = 0;
				}
				else
				{
					if(isdigit(parm_str[0]) && isdigit(parm_str[1]) && isdigit(parm_str[2]))
    7488:	5a 81       	ldd	r21, Y+2	; 0x02
    748a:	85 2f       	mov	r24, r21
    748c:	90 e0       	ldi	r25, 0x00	; 0
    748e:	c0 97       	sbiw	r24, 0x30	; 48
    7490:	0a 97       	sbiw	r24, 0x0a	; 10
    7492:	48 f5       	brcc	.+82     	; 0x74e6 <ProcessGpsString+0x7c0>
    7494:	4b 81       	ldd	r20, Y+3	; 0x03
    7496:	84 2f       	mov	r24, r20
    7498:	90 e0       	ldi	r25, 0x00	; 0
    749a:	c0 97       	sbiw	r24, 0x30	; 48
    749c:	0a 97       	sbiw	r24, 0x0a	; 10
    749e:	18 f5       	brcc	.+70     	; 0x74e6 <ProcessGpsString+0x7c0>
    74a0:	8c 81       	ldd	r24, Y+4	; 0x04
    74a2:	28 2f       	mov	r18, r24
    74a4:	30 e0       	ldi	r19, 0x00	; 0
    74a6:	c9 01       	movw	r24, r18
    74a8:	c0 97       	sbiw	r24, 0x30	; 48
    74aa:	0a 97       	sbiw	r24, 0x0a	; 10
    74ac:	e0 f4       	brcc	.+56     	; 0x74e6 <ProcessGpsString+0x7c0>
					{
						gps.lng_deg = (parm_str[0]-48)*100 + (parm_str[1] - 48)*10 + (parm_str[2] - 48);
    74ae:	20 5d       	subi	r18, 0xD0	; 208
    74b0:	34 41       	sbci	r19, 0x14	; 20
    74b2:	64 e6       	ldi	r22, 0x64	; 100
    74b4:	56 9f       	mul	r21, r22
    74b6:	c0 01       	movw	r24, r0
    74b8:	11 24       	eor	r1, r1
    74ba:	28 0f       	add	r18, r24
    74bc:	39 1f       	adc	r19, r25
    74be:	ea e0       	ldi	r30, 0x0A	; 10
    74c0:	4e 9f       	mul	r20, r30
    74c2:	c0 01       	movw	r24, r0
    74c4:	11 24       	eor	r1, r1
    74c6:	28 0f       	add	r18, r24
    74c8:	39 1f       	adc	r19, r25
    74ca:	c9 01       	movw	r24, r18
    74cc:	aa 27       	eor	r26, r26
    74ce:	97 fd       	sbrc	r25, 7
    74d0:	a0 95       	com	r26
    74d2:	ba 2f       	mov	r27, r26
    74d4:	80 93 87 04 	sts	0x0487, r24
    74d8:	90 93 88 04 	sts	0x0488, r25
    74dc:	a0 93 89 04 	sts	0x0489, r26
    74e0:	b0 93 8a 04 	sts	0x048A, r27
    74e4:	08 c0       	rjmp	.+16     	; 0x74f6 <ProcessGpsString+0x7d0>
					}
					else
					{
						gps.lng_deg = 0;
    74e6:	10 92 87 04 	sts	0x0487, r1
    74ea:	10 92 88 04 	sts	0x0488, r1
    74ee:	10 92 89 04 	sts	0x0489, r1
    74f2:	10 92 8a 04 	sts	0x048A, r1
					}

					if(isdigit(parm_str[3]) && isdigit(parm_str[4]))
    74f6:	4d 81       	ldd	r20, Y+5	; 0x05
    74f8:	84 2f       	mov	r24, r20
    74fa:	90 e0       	ldi	r25, 0x00	; 0
    74fc:	c0 97       	sbiw	r24, 0x30	; 48
    74fe:	0a 97       	sbiw	r24, 0x0a	; 10
    7500:	e8 f4       	brcc	.+58     	; 0x753c <ProcessGpsString+0x816>
    7502:	8e 81       	ldd	r24, Y+6	; 0x06
    7504:	28 2f       	mov	r18, r24
    7506:	30 e0       	ldi	r19, 0x00	; 0
    7508:	c9 01       	movw	r24, r18
    750a:	c0 97       	sbiw	r24, 0x30	; 48
    750c:	0a 97       	sbiw	r24, 0x0a	; 10
    750e:	b0 f4       	brcc	.+44     	; 0x753c <ProcessGpsString+0x816>
					{
						gps.lng_min = (parm_str[3]-48)*10 + (parm_str[4] - 48);
    7510:	20 51       	subi	r18, 0x10	; 16
    7512:	32 40       	sbci	r19, 0x02	; 2
    7514:	fa e0       	ldi	r31, 0x0A	; 10
    7516:	4f 9f       	mul	r20, r31
    7518:	c0 01       	movw	r24, r0
    751a:	11 24       	eor	r1, r1
    751c:	28 0f       	add	r18, r24
    751e:	39 1f       	adc	r19, r25
    7520:	c9 01       	movw	r24, r18
    7522:	aa 27       	eor	r26, r26
    7524:	97 fd       	sbrc	r25, 7
    7526:	a0 95       	com	r26
    7528:	ba 2f       	mov	r27, r26
    752a:	80 93 8b 04 	sts	0x048B, r24
    752e:	90 93 8c 04 	sts	0x048C, r25
    7532:	a0 93 8d 04 	sts	0x048D, r26
    7536:	b0 93 8e 04 	sts	0x048E, r27
    753a:	08 c0       	rjmp	.+16     	; 0x754c <ProcessGpsString+0x826>
					}
					else
					{
						gps.lng_min = 0;
    753c:	10 92 8b 04 	sts	0x048B, r1
    7540:	10 92 8c 04 	sts	0x048C, r1
    7544:	10 92 8d 04 	sts	0x048D, r1
    7548:	10 92 8e 04 	sts	0x048E, r1
					}

					if(			parm_str[5] == '.'
    754c:	8f 81       	ldd	r24, Y+7	; 0x07
    754e:	8e 32       	cpi	r24, 0x2E	; 46
    7550:	09 f0       	breq	.+2      	; 0x7554 <ProcessGpsString+0x82e>
    7552:	c3 c0       	rjmp	.+390    	; 0x76da <ProcessGpsString+0x9b4>
    7554:	88 85       	ldd	r24, Y+8	; 0x08
    7556:	28 2f       	mov	r18, r24
    7558:	30 e0       	ldi	r19, 0x00	; 0
    755a:	20 53       	subi	r18, 0x30	; 48
    755c:	30 40       	sbci	r19, 0x00	; 0
    755e:	2a 30       	cpi	r18, 0x0A	; 10
    7560:	31 05       	cpc	r19, r1
    7562:	08 f0       	brcs	.+2      	; 0x7566 <ProcessGpsString+0x840>
    7564:	ba c0       	rjmp	.+372    	; 0x76da <ProcessGpsString+0x9b4>
    7566:	89 85       	ldd	r24, Y+9	; 0x09
    7568:	c8 2e       	mov	r12, r24
    756a:	dd 24       	eor	r13, r13
    756c:	80 ed       	ldi	r24, 0xD0	; 208
    756e:	9f ef       	ldi	r25, 0xFF	; 255
    7570:	c8 0e       	add	r12, r24
    7572:	d9 1e       	adc	r13, r25
    7574:	9a e0       	ldi	r25, 0x0A	; 10
    7576:	c9 16       	cp	r12, r25
    7578:	d1 04       	cpc	r13, r1
    757a:	08 f0       	brcs	.+2      	; 0x757e <ProcessGpsString+0x858>
    757c:	ae c0       	rjmp	.+348    	; 0x76da <ProcessGpsString+0x9b4>
    757e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7580:	a8 2e       	mov	r10, r24
    7582:	bb 24       	eor	r11, r11
    7584:	e0 ed       	ldi	r30, 0xD0	; 208
    7586:	ff ef       	ldi	r31, 0xFF	; 255
    7588:	ae 0e       	add	r10, r30
    758a:	bf 1e       	adc	r11, r31
    758c:	fa e0       	ldi	r31, 0x0A	; 10
    758e:	af 16       	cp	r10, r31
    7590:	b1 04       	cpc	r11, r1
    7592:	08 f0       	brcs	.+2      	; 0x7596 <ProcessGpsString+0x870>
    7594:	a2 c0       	rjmp	.+324    	; 0x76da <ProcessGpsString+0x9b4>
    7596:	8b 85       	ldd	r24, Y+11	; 0x0b
    7598:	88 2e       	mov	r8, r24
    759a:	99 24       	eor	r9, r9
    759c:	80 ed       	ldi	r24, 0xD0	; 208
    759e:	9f ef       	ldi	r25, 0xFF	; 255
    75a0:	88 0e       	add	r8, r24
    75a2:	99 1e       	adc	r9, r25
    75a4:	9a e0       	ldi	r25, 0x0A	; 10
    75a6:	89 16       	cp	r8, r25
    75a8:	91 04       	cpc	r9, r1
    75aa:	08 f0       	brcs	.+2      	; 0x75ae <ProcessGpsString+0x888>
    75ac:	96 c0       	rjmp	.+300    	; 0x76da <ProcessGpsString+0x9b4>
    75ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    75b0:	68 2e       	mov	r6, r24
    75b2:	77 24       	eor	r7, r7
    75b4:	e0 ed       	ldi	r30, 0xD0	; 208
    75b6:	ff ef       	ldi	r31, 0xFF	; 255
    75b8:	6e 0e       	add	r6, r30
    75ba:	7f 1e       	adc	r7, r31
    75bc:	fa e0       	ldi	r31, 0x0A	; 10
    75be:	6f 16       	cp	r6, r31
    75c0:	71 04       	cpc	r7, r1
    75c2:	08 f0       	brcs	.+2      	; 0x75c6 <ProcessGpsString+0x8a0>
    75c4:	8a c0       	rjmp	.+276    	; 0x76da <ProcessGpsString+0x9b4>
							&& 	isdigit(parm_str[7])
							&&	isdigit(parm_str[8])
							&&	isdigit(parm_str[9])
							&&	isdigit(parm_str[10]))
					{
						gps.lng_min_frac =	((uint32_t)(parm_str[6]-48))*10000;
    75c6:	b9 01       	movw	r22, r18
    75c8:	88 27       	eor	r24, r24
    75ca:	77 fd       	sbrc	r23, 7
    75cc:	80 95       	com	r24
    75ce:	98 2f       	mov	r25, r24
    75d0:	20 e1       	ldi	r18, 0x10	; 16
    75d2:	37 e2       	ldi	r19, 0x27	; 39
    75d4:	40 e0       	ldi	r20, 0x00	; 0
    75d6:	50 e0       	ldi	r21, 0x00	; 0
    75d8:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    75dc:	60 93 8f 04 	sts	0x048F, r22
    75e0:	70 93 90 04 	sts	0x0490, r23
    75e4:	80 93 91 04 	sts	0x0491, r24
    75e8:	90 93 92 04 	sts	0x0492, r25
						gps.lng_min_frac +=	((uint32_t)(parm_str[7]-48))*1000;
    75ec:	e0 90 8f 04 	lds	r14, 0x048F
    75f0:	f0 90 90 04 	lds	r15, 0x0490
    75f4:	00 91 91 04 	lds	r16, 0x0491
    75f8:	10 91 92 04 	lds	r17, 0x0492
    75fc:	b6 01       	movw	r22, r12
    75fe:	88 27       	eor	r24, r24
    7600:	77 fd       	sbrc	r23, 7
    7602:	80 95       	com	r24
    7604:	98 2f       	mov	r25, r24
    7606:	28 ee       	ldi	r18, 0xE8	; 232
    7608:	33 e0       	ldi	r19, 0x03	; 3
    760a:	40 e0       	ldi	r20, 0x00	; 0
    760c:	50 e0       	ldi	r21, 0x00	; 0
    760e:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7612:	e6 0e       	add	r14, r22
    7614:	f7 1e       	adc	r15, r23
    7616:	08 1f       	adc	r16, r24
    7618:	19 1f       	adc	r17, r25
    761a:	e0 92 8f 04 	sts	0x048F, r14
    761e:	f0 92 90 04 	sts	0x0490, r15
    7622:	00 93 91 04 	sts	0x0491, r16
    7626:	10 93 92 04 	sts	0x0492, r17
						gps.lng_min_frac +=	((uint32_t)(parm_str[8]-48))*100;
    762a:	e0 90 8f 04 	lds	r14, 0x048F
    762e:	f0 90 90 04 	lds	r15, 0x0490
    7632:	00 91 91 04 	lds	r16, 0x0491
    7636:	10 91 92 04 	lds	r17, 0x0492
    763a:	b5 01       	movw	r22, r10
    763c:	88 27       	eor	r24, r24
    763e:	77 fd       	sbrc	r23, 7
    7640:	80 95       	com	r24
    7642:	98 2f       	mov	r25, r24
    7644:	24 e6       	ldi	r18, 0x64	; 100
    7646:	30 e0       	ldi	r19, 0x00	; 0
    7648:	40 e0       	ldi	r20, 0x00	; 0
    764a:	50 e0       	ldi	r21, 0x00	; 0
    764c:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7650:	e6 0e       	add	r14, r22
    7652:	f7 1e       	adc	r15, r23
    7654:	08 1f       	adc	r16, r24
    7656:	19 1f       	adc	r17, r25
    7658:	e0 92 8f 04 	sts	0x048F, r14
    765c:	f0 92 90 04 	sts	0x0490, r15
    7660:	00 93 91 04 	sts	0x0491, r16
    7664:	10 93 92 04 	sts	0x0492, r17
						gps.lng_min_frac +=	((uint32_t)(parm_str[9]-48))*10;
    7668:	e0 90 8f 04 	lds	r14, 0x048F
    766c:	f0 90 90 04 	lds	r15, 0x0490
    7670:	00 91 91 04 	lds	r16, 0x0491
    7674:	10 91 92 04 	lds	r17, 0x0492
    7678:	b4 01       	movw	r22, r8
    767a:	88 27       	eor	r24, r24
    767c:	77 fd       	sbrc	r23, 7
    767e:	80 95       	com	r24
    7680:	98 2f       	mov	r25, r24
    7682:	2a e0       	ldi	r18, 0x0A	; 10
    7684:	30 e0       	ldi	r19, 0x00	; 0
    7686:	40 e0       	ldi	r20, 0x00	; 0
    7688:	50 e0       	ldi	r21, 0x00	; 0
    768a:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    768e:	e6 0e       	add	r14, r22
    7690:	f7 1e       	adc	r15, r23
    7692:	08 1f       	adc	r16, r24
    7694:	19 1f       	adc	r17, r25
    7696:	e0 92 8f 04 	sts	0x048F, r14
    769a:	f0 92 90 04 	sts	0x0490, r15
    769e:	00 93 91 04 	sts	0x0491, r16
    76a2:	10 93 92 04 	sts	0x0492, r17
						gps.lng_min_frac +=	((uint32_t)(parm_str[10]-48));
    76a6:	20 91 8f 04 	lds	r18, 0x048F
    76aa:	30 91 90 04 	lds	r19, 0x0490
    76ae:	40 91 91 04 	lds	r20, 0x0491
    76b2:	50 91 92 04 	lds	r21, 0x0492
    76b6:	c3 01       	movw	r24, r6
    76b8:	aa 27       	eor	r26, r26
    76ba:	97 fd       	sbrc	r25, 7
    76bc:	a0 95       	com	r26
    76be:	ba 2f       	mov	r27, r26
    76c0:	82 0f       	add	r24, r18
    76c2:	93 1f       	adc	r25, r19
    76c4:	a4 1f       	adc	r26, r20
    76c6:	b5 1f       	adc	r27, r21
    76c8:	80 93 8f 04 	sts	0x048F, r24
    76cc:	90 93 90 04 	sts	0x0490, r25
    76d0:	a0 93 91 04 	sts	0x0491, r26
    76d4:	b0 93 92 04 	sts	0x0492, r27
    76d8:	08 c0       	rjmp	.+16     	; 0x76ea <ProcessGpsString+0x9c4>
					}
					else
					{
						gps.lng_min_frac = 0;
    76da:	10 92 8f 04 	sts	0x048F, r1
    76de:	10 92 90 04 	sts	0x0490, r1
    76e2:	10 92 91 04 	sts	0x0491, r1
    76e6:	10 92 92 04 	sts	0x0492, r1
    76ea:	89 e0       	ldi	r24, 0x09	; 9
    76ec:	48 cb       	rjmp	.-2416   	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;

			case 9: // Longitude Hemisphere
				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    76ee:	c2 01       	movw	r24, r4
    76f0:	be 01       	movw	r22, r28
    76f2:	6f 5f       	subi	r22, 0xFF	; 255
    76f4:	7f 4f       	sbci	r23, 0xFF	; 255
    76f6:	a1 01       	movw	r20, r2
    76f8:	21 e0       	ldi	r18, 0x01	; 1
    76fa:	00 e0       	ldi	r16, 0x00	; 0
    76fc:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    7700:	8f 3f       	cpi	r24, 0xFF	; 255
    7702:	09 f4       	brne	.+2      	; 0x7706 <ProcessGpsString+0x9e0>
    7704:	6c c0       	rjmp	.+216    	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				if((parm_str[0] == 'E')||(parm_str[0] == 'W'))
    7706:	8a 81       	ldd	r24, Y+2	; 0x02
    7708:	85 34       	cpi	r24, 0x45	; 69
    770a:	11 f0       	breq	.+4      	; 0x7710 <ProcessGpsString+0x9ea>
    770c:	87 35       	cpi	r24, 0x57	; 87
    770e:	19 f4       	brne	.+6      	; 0x7716 <ProcessGpsString+0x9f0>
				{
					gps.lng_hemi = parm_str[0];
    7710:	80 93 86 04 	sts	0x0486, r24
    7714:	02 c0       	rjmp	.+4      	; 0x771a <ProcessGpsString+0x9f4>
				}
				else
				{
					gps.lng_hemi = 0;
    7716:	10 92 86 04 	sts	0x0486, r1
    771a:	8a e0       	ldi	r24, 0x0A	; 10
    771c:	30 cb       	rjmp	.-2464   	; 0x6d7e <ProcessGpsString+0x58>

				parm_idx++;
				break;

			case 10: // Mode
				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    771e:	c2 01       	movw	r24, r4
    7720:	be 01       	movw	r22, r28
    7722:	6f 5f       	subi	r22, 0xFF	; 255
    7724:	7f 4f       	sbci	r23, 0xFF	; 255
    7726:	a1 01       	movw	r20, r2
    7728:	21 e0       	ldi	r18, 0x01	; 1
    772a:	00 e0       	ldi	r16, 0x00	; 0
    772c:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    7730:	8f 3f       	cpi	r24, 0xFF	; 255
    7732:	09 f4       	brne	.+2      	; 0x7736 <ProcessGpsString+0xa10>
    7734:	54 c0       	rjmp	.+168    	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				if((parm_str[0] == 'A')||(parm_str[0] == 'M'))
    7736:	8a 81       	ldd	r24, Y+2	; 0x02
    7738:	81 34       	cpi	r24, 0x41	; 65
    773a:	11 f0       	breq	.+4      	; 0x7740 <ProcessGpsString+0xa1a>
    773c:	8d 34       	cpi	r24, 0x4D	; 77
    773e:	19 f4       	brne	.+6      	; 0x7746 <ProcessGpsString+0xa20>
				{
					gps.mode = parm_str[0];
    7740:	80 93 93 04 	sts	0x0493, r24
    7744:	02 c0       	rjmp	.+4      	; 0x774a <ProcessGpsString+0xa24>
				}
				else
				{
					gps.mode = 0;
    7746:	10 92 93 04 	sts	0x0493, r1
    774a:	8b e0       	ldi	r24, 0x0B	; 11
    774c:	18 cb       	rjmp	.-2512   	; 0x6d7e <ProcessGpsString+0x58>
				parm_idx++;
				break;

			case 11:	// Fix type

				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    774e:	c2 01       	movw	r24, r4
    7750:	be 01       	movw	r22, r28
    7752:	6f 5f       	subi	r22, 0xFF	; 255
    7754:	7f 4f       	sbci	r23, 0xFF	; 255
    7756:	a1 01       	movw	r20, r2
    7758:	21 e0       	ldi	r18, 0x01	; 1
    775a:	00 e0       	ldi	r16, 0x00	; 0
    775c:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    7760:	8f 3f       	cpi	r24, 0xFF	; 255
    7762:	e9 f1       	breq	.+122    	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    7764:	88 23       	and	r24, r24
    7766:	19 f4       	brne	.+6      	; 0x776e <ProcessGpsString+0xa48>
				{
					gps.fix_type = 0;
    7768:	10 92 9a 04 	sts	0x049A, r1
    776c:	05 c0       	rjmp	.+10     	; 0x7778 <ProcessGpsString+0xa52>
				}
				else
				{
					gps.fix_type = atoi(parm_str);
    776e:	c1 01       	movw	r24, r2
    7770:	0e 94 a5 44 	call	0x894a	; 0x894a <atoi>
    7774:	80 93 9a 04 	sts	0x049A, r24
    7778:	8c e0       	ldi	r24, 0x0C	; 12
    777a:	01 cb       	rjmp	.-2558   	; 0x6d7e <ProcessGpsString+0x58>
				parm_idx++;
				break;

			case 12:	// Speed

				parm_resp = GetParameterString(rx_str,&idx,parm_str,4,0);
    777c:	c2 01       	movw	r24, r4
    777e:	be 01       	movw	r22, r28
    7780:	6f 5f       	subi	r22, 0xFF	; 255
    7782:	7f 4f       	sbci	r23, 0xFF	; 255
    7784:	a1 01       	movw	r20, r2
    7786:	24 e0       	ldi	r18, 0x04	; 4
    7788:	00 e0       	ldi	r16, 0x00	; 0
    778a:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    778e:	8f 3f       	cpi	r24, 0xFF	; 255
    7790:	09 f0       	breq	.+2      	; 0x7794 <ProcessGpsString+0xa6e>
    7792:	f4 ca       	rjmp	.-2584   	; 0x6d7c <ProcessGpsString+0x56>
    7794:	24 c0       	rjmp	.+72     	; 0x77de <ProcessGpsString+0xab8>
				parm_idx++;
				break;

			case 13:	// Heading

				parm_resp = GetParameterString(rx_str,&idx,parm_str,3,0);
    7796:	c2 01       	movw	r24, r4
    7798:	be 01       	movw	r22, r28
    779a:	6f 5f       	subi	r22, 0xFF	; 255
    779c:	7f 4f       	sbci	r23, 0xFF	; 255
    779e:	a1 01       	movw	r20, r2
    77a0:	23 e0       	ldi	r18, 0x03	; 3
    77a2:	00 e0       	ldi	r16, 0x00	; 0
    77a4:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    77a8:	8f 3f       	cpi	r24, 0xFF	; 255
    77aa:	c9 f0       	breq	.+50     	; 0x77de <ProcessGpsString+0xab8>
    77ac:	8e e0       	ldi	r24, 0x0E	; 14
    77ae:	e7 ca       	rjmp	.-2610   	; 0x6d7e <ProcessGpsString+0x58>
				parm_idx++;
				break;

			case 14:	// Position Dilution

				parm_resp = GetParameterString(rx_str,&idx,parm_str,1,0);
    77b0:	c2 01       	movw	r24, r4
    77b2:	be 01       	movw	r22, r28
    77b4:	6f 5f       	subi	r22, 0xFF	; 255
    77b6:	7f 4f       	sbci	r23, 0xFF	; 255
    77b8:	a1 01       	movw	r20, r2
    77ba:	21 e0       	ldi	r18, 0x01	; 1
    77bc:	00 e0       	ldi	r16, 0x00	; 0
    77be:	0e 94 ec 31 	call	0x63d8	; 0x63d8 <GetParameterString>

				if(parm_resp == 0xFF)
    77c2:	8f 3f       	cpi	r24, 0xFF	; 255
    77c4:	61 f0       	breq	.+24     	; 0x77de <ProcessGpsString+0xab8>
				{
					return 0;
				}

				// Process Parameter String
				if(parm_resp == 0)
    77c6:	88 23       	and	r24, r24
    77c8:	19 f4       	brne	.+6      	; 0x77d0 <ProcessGpsString+0xaaa>
				{
					gps.pos_dil = 0;
    77ca:	10 92 98 04 	sts	0x0498, r1
    77ce:	05 c0       	rjmp	.+10     	; 0x77da <ProcessGpsString+0xab4>
				}
				else
				{
					gps.pos_dil = atoi(parm_str);
    77d0:	c1 01       	movw	r24, r2
    77d2:	0e 94 a5 44 	call	0x894a	; 0x894a <atoi>
    77d6:	80 93 98 04 	sts	0x0498, r24
    77da:	8f e0       	ldi	r24, 0x0F	; 15
    77dc:	d0 ca       	rjmp	.-2656   	; 0x6d7e <ProcessGpsString+0x58>
				}
				parm_idx++;
				break;
    77de:	80 e0       	ldi	r24, 0x00	; 0
				return 0;
		}

	}
	return 1;
}
    77e0:	60 96       	adiw	r28, 0x10	; 16
    77e2:	0f b6       	in	r0, 0x3f	; 63
    77e4:	f8 94       	cli
    77e6:	de bf       	out	0x3e, r29	; 62
    77e8:	0f be       	out	0x3f, r0	; 63
    77ea:	cd bf       	out	0x3d, r28	; 61
    77ec:	cf 91       	pop	r28
    77ee:	df 91       	pop	r29
    77f0:	1f 91       	pop	r17
    77f2:	0f 91       	pop	r16
    77f4:	ff 90       	pop	r15
    77f6:	ef 90       	pop	r14
    77f8:	df 90       	pop	r13
    77fa:	cf 90       	pop	r12
    77fc:	bf 90       	pop	r11
    77fe:	af 90       	pop	r10
    7800:	9f 90       	pop	r9
    7802:	8f 90       	pop	r8
    7804:	7f 90       	pop	r7
    7806:	6f 90       	pop	r6
    7808:	5f 90       	pop	r5
    780a:	4f 90       	pop	r4
    780c:	3f 90       	pop	r3
    780e:	2f 90       	pop	r2
    7810:	08 95       	ret

00007812 <main>:
#define NUM_ELEMENTS 30

volatile char test_string[6];

int main()
{
    7812:	2f 92       	push	r2
    7814:	3f 92       	push	r3
    7816:	4f 92       	push	r4
    7818:	5f 92       	push	r5
    781a:	6f 92       	push	r6
    781c:	7f 92       	push	r7
    781e:	8f 92       	push	r8
    7820:	9f 92       	push	r9
    7822:	af 92       	push	r10
    7824:	bf 92       	push	r11
    7826:	cf 92       	push	r12
    7828:	df 92       	push	r13
    782a:	ef 92       	push	r14
    782c:	ff 92       	push	r15
    782e:	0f 93       	push	r16
    7830:	1f 93       	push	r17
    7832:	df 93       	push	r29
    7834:	cf 93       	push	r28
    7836:	cd b7       	in	r28, 0x3d	; 61
    7838:	de b7       	in	r29, 0x3e	; 62
    783a:	c7 56       	subi	r28, 0x67	; 103
    783c:	d0 40       	sbci	r29, 0x00	; 0
    783e:	0f b6       	in	r0, 0x3f	; 63
    7840:	f8 94       	cli
    7842:	de bf       	out	0x3e, r29	; 62
    7844:	0f be       	out	0x3f, r0	; 63
    7846:	cd bf       	out	0x3d, r28	; 61
	char c;
	char gps_rx_str[GPS_RX_STR_SIZE+2] = "";
    7848:	1a 82       	std	Y+2, r1	; 0x02
    784a:	1b 82       	std	Y+3, r1	; 0x03
    784c:	1c 82       	std	Y+4, r1	; 0x04
    784e:	1d 82       	std	Y+5, r1	; 0x05
    7850:	fe 01       	movw	r30, r28
    7852:	36 96       	adiw	r30, 0x06	; 6
    7854:	82 e6       	ldi	r24, 0x62	; 98
    7856:	df 01       	movw	r26, r30
    7858:	1d 92       	st	X+, r1
    785a:	8a 95       	dec	r24
    785c:	e9 f7       	brne	.-6      	; 0x7858 <main+0x46>
	uint8_t gps_rx_idx = 0;

	sys.data.status.DLG_status = 0;
    785e:	10 92 a5 07 	sts	0x07A5, r1
	log_status = 0;
    7862:	10 92 3b 04 	sts	0x043B, r1
	uint8_t gps_rx_state = RX_WAIT_FOR_START;

	uart_init();
    7866:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <uart_init>

	//uart_puts_p(PSTR("\n------| START |------\n"));

	DDRE|=_BV(PE6);
    786a:	6e 9a       	sbi	0x0d, 6	; 13
	DDRD|=_BV(PD7);
    786c:	57 9a       	sbi	0x0a, 7	; 10

    init_log_system();
    786e:	0e 94 0c 40 	call	0x8018	; 0x8018 <init_log_system>
    gps_init();
    7872:	0e 94 96 3d 	call	0x7b2c	; 0x7b2c <gps_init>

	can_init();
    7876:	0e 94 bc 31 	call	0x6378	; 0x6378 <can_init>

	prepare_rx(0,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    787a:	80 e0       	ldi	r24, 0x00	; 0
    787c:	40 e0       	ldi	r20, 0x00	; 0
    787e:	50 e0       	ldi	r21, 0x00	; 0
    7880:	60 e0       	ldi	r22, 0x00	; 0
    7882:	70 e0       	ldi	r23, 0x00	; 0
    7884:	00 e0       	ldi	r16, 0x00	; 0
    7886:	10 e0       	ldi	r17, 0x00	; 0
    7888:	20 e0       	ldi	r18, 0x00	; 0
    788a:	30 e0       	ldi	r19, 0x00	; 0
    788c:	ee 24       	eor	r14, r14
    788e:	e3 94       	inc	r14
    7890:	cc 24       	eor	r12, r12
    7892:	c3 94       	inc	r12
    7894:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(1,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    7898:	81 e0       	ldi	r24, 0x01	; 1
    789a:	40 e0       	ldi	r20, 0x00	; 0
    789c:	50 e0       	ldi	r21, 0x00	; 0
    789e:	60 e0       	ldi	r22, 0x00	; 0
    78a0:	70 e0       	ldi	r23, 0x00	; 0
    78a2:	00 e0       	ldi	r16, 0x00	; 0
    78a4:	10 e0       	ldi	r17, 0x00	; 0
    78a6:	20 e0       	ldi	r18, 0x00	; 0
    78a8:	30 e0       	ldi	r19, 0x00	; 0
    78aa:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(2,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    78ae:	82 e0       	ldi	r24, 0x02	; 2
    78b0:	40 e0       	ldi	r20, 0x00	; 0
    78b2:	50 e0       	ldi	r21, 0x00	; 0
    78b4:	60 e0       	ldi	r22, 0x00	; 0
    78b6:	70 e0       	ldi	r23, 0x00	; 0
    78b8:	00 e0       	ldi	r16, 0x00	; 0
    78ba:	10 e0       	ldi	r17, 0x00	; 0
    78bc:	20 e0       	ldi	r18, 0x00	; 0
    78be:	30 e0       	ldi	r19, 0x00	; 0
    78c0:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(3,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    78c4:	83 e0       	ldi	r24, 0x03	; 3
    78c6:	40 e0       	ldi	r20, 0x00	; 0
    78c8:	50 e0       	ldi	r21, 0x00	; 0
    78ca:	60 e0       	ldi	r22, 0x00	; 0
    78cc:	70 e0       	ldi	r23, 0x00	; 0
    78ce:	00 e0       	ldi	r16, 0x00	; 0
    78d0:	10 e0       	ldi	r17, 0x00	; 0
    78d2:	20 e0       	ldi	r18, 0x00	; 0
    78d4:	30 e0       	ldi	r19, 0x00	; 0
    78d6:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(4,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    78da:	84 e0       	ldi	r24, 0x04	; 4
    78dc:	40 e0       	ldi	r20, 0x00	; 0
    78de:	50 e0       	ldi	r21, 0x00	; 0
    78e0:	60 e0       	ldi	r22, 0x00	; 0
    78e2:	70 e0       	ldi	r23, 0x00	; 0
    78e4:	00 e0       	ldi	r16, 0x00	; 0
    78e6:	10 e0       	ldi	r17, 0x00	; 0
    78e8:	20 e0       	ldi	r18, 0x00	; 0
    78ea:	30 e0       	ldi	r19, 0x00	; 0
    78ec:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(5,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    78f0:	85 e0       	ldi	r24, 0x05	; 5
    78f2:	40 e0       	ldi	r20, 0x00	; 0
    78f4:	50 e0       	ldi	r21, 0x00	; 0
    78f6:	60 e0       	ldi	r22, 0x00	; 0
    78f8:	70 e0       	ldi	r23, 0x00	; 0
    78fa:	00 e0       	ldi	r16, 0x00	; 0
    78fc:	10 e0       	ldi	r17, 0x00	; 0
    78fe:	20 e0       	ldi	r18, 0x00	; 0
    7900:	30 e0       	ldi	r19, 0x00	; 0
    7902:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(6,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    7906:	86 e0       	ldi	r24, 0x06	; 6
    7908:	40 e0       	ldi	r20, 0x00	; 0
    790a:	50 e0       	ldi	r21, 0x00	; 0
    790c:	60 e0       	ldi	r22, 0x00	; 0
    790e:	70 e0       	ldi	r23, 0x00	; 0
    7910:	00 e0       	ldi	r16, 0x00	; 0
    7912:	10 e0       	ldi	r17, 0x00	; 0
    7914:	20 e0       	ldi	r18, 0x00	; 0
    7916:	30 e0       	ldi	r19, 0x00	; 0
    7918:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>
	prepare_rx(7,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
    791c:	87 e0       	ldi	r24, 0x07	; 7
    791e:	40 e0       	ldi	r20, 0x00	; 0
    7920:	50 e0       	ldi	r21, 0x00	; 0
    7922:	60 e0       	ldi	r22, 0x00	; 0
    7924:	70 e0       	ldi	r23, 0x00	; 0
    7926:	00 e0       	ldi	r16, 0x00	; 0
    7928:	10 e0       	ldi	r17, 0x00	; 0
    792a:	20 e0       	ldi	r18, 0x00	; 0
    792c:	30 e0       	ldi	r19, 0x00	; 0
    792e:	0e 94 2d 31 	call	0x625a	; 0x625a <prepare_rx>

	systimer_10ms_restart(0);
    7932:	80 e0       	ldi	r24, 0x00	; 0
    7934:	0e 94 dd 41 	call	0x83ba	; 0x83ba <systimer_10ms_restart>

	sei();
    7938:	78 94       	sei
    793a:	44 24       	eor	r4, r4
    793c:	11 e0       	ldi	r17, 0x01	; 1
					}
					else if((c == '\n')||(c == '\r')||(c == '*'))
					{

						// Guarantee null byte at the end of string
						gps_rx_str[gps_rx_idx++] = ',';
    793e:	f2 e0       	ldi	r31, 0x02	; 2
    7940:	2f 2e       	mov	r2, r31
    7942:	31 2c       	mov	r3, r1
    7944:	2c 0e       	add	r2, r28
    7946:	3d 1e       	adc	r3, r29
    7948:	01 c0       	rjmp	.+2      	; 0x794c <main+0x13a>
	prepare_rx(6,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
	prepare_rx(7,0,0,CAN_EXT_MSG,CAN_DATABRDCST);

	systimer_10ms_restart(0);

	sei();
    794a:	11 e0       	ldi	r17, 0x01	; 1

	char out_str[100] = "";

	while(1)
	{
		if(gps_getc((uint8_t *)&c))
    794c:	ce 01       	movw	r24, r28
    794e:	01 96       	adiw	r24, 0x01	; 1
    7950:	0e 94 b4 3d 	call	0x7b68	; 0x7b68 <gps_getc>
    7954:	88 23       	and	r24, r24
    7956:	d1 f3       	breq	.-12     	; 0x794c <main+0x13a>
		{
			//uart_putc(c);
			switch(gps_rx_state)
    7958:	11 30       	cpi	r17, 0x01	; 1
    795a:	19 f0       	breq	.+6      	; 0x7962 <main+0x150>
    795c:	12 30       	cpi	r17, 0x02	; 2
    795e:	b1 f7       	brne	.-20     	; 0x794c <main+0x13a>
    7960:	08 c0       	rjmp	.+16     	; 0x7972 <main+0x160>
			{
				case RX_STOPPED:
					break;
				case RX_WAIT_FOR_START:
					if(c == '$')
    7962:	89 81       	ldd	r24, Y+1	; 0x01
    7964:	84 32       	cpi	r24, 0x24	; 36
    7966:	91 f7       	brne	.-28     	; 0x794c <main+0x13a>
					{
						gps_rx_state = RX_STARTED;
						gps_rx_str[0] = '$';
    7968:	8a 83       	std	Y+2, r24	; 0x02
    796a:	44 24       	eor	r4, r4
    796c:	43 94       	inc	r4
    796e:	12 e0       	ldi	r17, 0x02	; 2
    7970:	ed cf       	rjmp	.-38     	; 0x794c <main+0x13a>
						gps_rx_idx = 1;
					}
					break;
				case RX_STARTED:
					if(c == '$')
    7972:	89 81       	ldd	r24, Y+1	; 0x01
    7974:	84 32       	cpi	r24, 0x24	; 36
    7976:	21 f4       	brne	.+8      	; 0x7980 <main+0x16e>
					{
						gps_rx_str[0] = '$';
    7978:	8a 83       	std	Y+2, r24	; 0x02
    797a:	44 24       	eor	r4, r4
    797c:	43 94       	inc	r4
    797e:	e6 cf       	rjmp	.-52     	; 0x794c <main+0x13a>
						gps_rx_idx = 1;
					}
					else if((c == '\n')||(c == '\r')||(c == '*'))
    7980:	8a 30       	cpi	r24, 0x0A	; 10
    7982:	29 f0       	breq	.+10     	; 0x798e <main+0x17c>
    7984:	8d 30       	cpi	r24, 0x0D	; 13
    7986:	19 f0       	breq	.+6      	; 0x798e <main+0x17c>
    7988:	8a 32       	cpi	r24, 0x2A	; 42
    798a:	09 f0       	breq	.+2      	; 0x798e <main+0x17c>
    798c:	a5 c0       	rjmp	.+330    	; 0x7ad8 <main+0x2c6>
					{

						// Guarantee null byte at the end of string
						gps_rx_str[gps_rx_idx++] = ',';
    798e:	f1 01       	movw	r30, r2
    7990:	e4 0d       	add	r30, r4
    7992:	f1 1d       	adc	r31, r1
    7994:	bc e2       	ldi	r27, 0x2C	; 44
    7996:	b0 83       	st	Z, r27
    7998:	84 2d       	mov	r24, r4
    799a:	8f 5f       	subi	r24, 0xFF	; 255
						gps_rx_str[gps_rx_idx++] = 0;
    799c:	f1 01       	movw	r30, r2
    799e:	e8 0f       	add	r30, r24
    79a0:	f1 1d       	adc	r31, r1
    79a2:	10 82       	st	Z, r1
    79a4:	48 2e       	mov	r4, r24
    79a6:	43 94       	inc	r4

						uart_puts(gps_rx_str);
    79a8:	c1 01       	movw	r24, r2
    79aa:	0e 94 54 30 	call	0x60a8	; 0x60a8 <uart_puts>
						uart_puts("\r\n");
    79ae:	82 e1       	ldi	r24, 0x12	; 18
    79b0:	91 e0       	ldi	r25, 0x01	; 1
    79b2:	0e 94 54 30 	call	0x60a8	; 0x60a8 <uart_puts>
						if(ProcessGpsString(gps_rx_str))
    79b6:	c1 01       	movw	r24, r2
    79b8:	0e 94 93 36 	call	0x6d26	; 0x6d26 <ProcessGpsString>
    79bc:	88 23       	and	r24, r24
    79be:	29 f2       	breq	.-118    	; 0x794a <main+0x138>
						{
							ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    79c0:	5f b6       	in	r5, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    79c2:	f8 94       	cli
							{
								sys.data.chan.lat = gps.lat_min_frac + gps.lat_min*100000 + gps.lat_deg*6000000;
    79c4:	a0 90 82 04 	lds	r10, 0x0482
    79c8:	b0 90 83 04 	lds	r11, 0x0483
    79cc:	c0 90 84 04 	lds	r12, 0x0484
    79d0:	d0 90 85 04 	lds	r13, 0x0485
    79d4:	60 91 7a 04 	lds	r22, 0x047A
    79d8:	70 91 7b 04 	lds	r23, 0x047B
    79dc:	80 91 7c 04 	lds	r24, 0x047C
    79e0:	90 91 7d 04 	lds	r25, 0x047D
    79e4:	60 90 7e 04 	lds	r6, 0x047E
    79e8:	70 90 7f 04 	lds	r7, 0x047F
    79ec:	80 90 80 04 	lds	r8, 0x0480
    79f0:	90 90 81 04 	lds	r9, 0x0481
    79f4:	20 e8       	ldi	r18, 0x80	; 128
    79f6:	3d e8       	ldi	r19, 0x8D	; 141
    79f8:	4b e5       	ldi	r20, 0x5B	; 91
    79fa:	50 e0       	ldi	r21, 0x00	; 0
    79fc:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7a00:	7b 01       	movw	r14, r22
    7a02:	8c 01       	movw	r16, r24
    7a04:	c4 01       	movw	r24, r8
    7a06:	b3 01       	movw	r22, r6
    7a08:	20 ea       	ldi	r18, 0xA0	; 160
    7a0a:	36 e8       	ldi	r19, 0x86	; 134
    7a0c:	41 e0       	ldi	r20, 0x01	; 1
    7a0e:	50 e0       	ldi	r21, 0x00	; 0
    7a10:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7a14:	e6 0e       	add	r14, r22
    7a16:	f7 1e       	adc	r15, r23
    7a18:	08 1f       	adc	r16, r24
    7a1a:	19 1f       	adc	r17, r25
    7a1c:	ae 0c       	add	r10, r14
    7a1e:	bf 1c       	adc	r11, r15
    7a20:	c0 1e       	adc	r12, r16
    7a22:	d1 1e       	adc	r13, r17
    7a24:	a0 92 56 07 	sts	0x0756, r10
    7a28:	b0 92 57 07 	sts	0x0757, r11
    7a2c:	c0 92 58 07 	sts	0x0758, r12
    7a30:	d0 92 59 07 	sts	0x0759, r13
								sys.data.chan.lng = gps.lng_min_frac + gps.lng_min*100000 + gps.lng_deg*6000000;
    7a34:	a0 90 8f 04 	lds	r10, 0x048F
    7a38:	b0 90 90 04 	lds	r11, 0x0490
    7a3c:	c0 90 91 04 	lds	r12, 0x0491
    7a40:	d0 90 92 04 	lds	r13, 0x0492
    7a44:	60 91 87 04 	lds	r22, 0x0487
    7a48:	70 91 88 04 	lds	r23, 0x0488
    7a4c:	80 91 89 04 	lds	r24, 0x0489
    7a50:	90 91 8a 04 	lds	r25, 0x048A
    7a54:	60 90 8b 04 	lds	r6, 0x048B
    7a58:	70 90 8c 04 	lds	r7, 0x048C
    7a5c:	80 90 8d 04 	lds	r8, 0x048D
    7a60:	90 90 8e 04 	lds	r9, 0x048E
    7a64:	20 e8       	ldi	r18, 0x80	; 128
    7a66:	3d e8       	ldi	r19, 0x8D	; 141
    7a68:	4b e5       	ldi	r20, 0x5B	; 91
    7a6a:	50 e0       	ldi	r21, 0x00	; 0
    7a6c:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7a70:	7b 01       	movw	r14, r22
    7a72:	8c 01       	movw	r16, r24
    7a74:	c4 01       	movw	r24, r8
    7a76:	b3 01       	movw	r22, r6
    7a78:	20 ea       	ldi	r18, 0xA0	; 160
    7a7a:	36 e8       	ldi	r19, 0x86	; 134
    7a7c:	41 e0       	ldi	r20, 0x01	; 1
    7a7e:	50 e0       	ldi	r21, 0x00	; 0
    7a80:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    7a84:	e6 0e       	add	r14, r22
    7a86:	f7 1e       	adc	r15, r23
    7a88:	08 1f       	adc	r16, r24
    7a8a:	19 1f       	adc	r17, r25
    7a8c:	ae 0c       	add	r10, r14
    7a8e:	bf 1c       	adc	r11, r15
    7a90:	c0 1e       	adc	r12, r16
    7a92:	d1 1e       	adc	r13, r17
    7a94:	a0 92 5a 07 	sts	0x075A, r10
    7a98:	b0 92 5b 07 	sts	0x075B, r11
    7a9c:	c0 92 5c 07 	sts	0x075C, r12
    7aa0:	d0 92 5d 07 	sts	0x075D, r13
								sys.data.chan.heading = (uint16_t)gps.heading;
    7aa4:	80 91 96 04 	lds	r24, 0x0496
    7aa8:	90 91 97 04 	lds	r25, 0x0497
    7aac:	90 93 5f 07 	sts	0x075F, r25
    7ab0:	80 93 5e 07 	sts	0x075E, r24
								sys.data.chan.speed = (uint16_t)gps.speed;
    7ab4:	80 91 94 04 	lds	r24, 0x0494
    7ab8:	90 91 95 04 	lds	r25, 0x0495
    7abc:	90 93 61 07 	sts	0x0761, r25
    7ac0:	80 93 60 07 	sts	0x0760, r24
								sys.data.chan.last_tick = gps.last_tick;
    7ac4:	80 91 9b 04 	lds	r24, 0x049B
    7ac8:	90 91 9c 04 	lds	r25, 0x049C
    7acc:	90 93 63 07 	sts	0x0763, r25
    7ad0:	80 93 62 07 	sts	0x0762, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7ad4:	5f be       	out	0x3f, r5	; 63
    __asm__ volatile ("" ::: "memory");
    7ad6:	39 cf       	rjmp	.-398    	; 0x794a <main+0x138>
						}
						gps_rx_state = RX_WAIT_FOR_START;
					}
					else
					{
						gps_rx_str[gps_rx_idx++] = c;
    7ad8:	f1 01       	movw	r30, r2
    7ada:	e4 0d       	add	r30, r4
    7adc:	f1 1d       	adc	r31, r1
    7ade:	80 83       	st	Z, r24
    7ae0:	43 94       	inc	r4

						if(gps_rx_idx == GPS_RX_STR_SIZE)
    7ae2:	84 e6       	ldi	r24, 0x64	; 100
    7ae4:	48 16       	cp	r4, r24
    7ae6:	09 f0       	breq	.+2      	; 0x7aea <main+0x2d8>
    7ae8:	31 cf       	rjmp	.-414    	; 0x794c <main+0x13a>
    7aea:	2f cf       	rjmp	.-418    	; 0x794a <main+0x138>

00007aec <uart0_init>:
	uart0_init(GPS_BAUD);
	TCCR3B = 0x04;
}

void uart0_init(uint32_t baud)
{
    7aec:	9b 01       	movw	r18, r22
    7aee:	ac 01       	movw	r20, r24
	PORTE |= _BV(PE1)|_BV(PE0);
    7af0:	8e b1       	in	r24, 0x0e	; 14
    7af2:	83 60       	ori	r24, 0x03	; 3
    7af4:	8e b9       	out	0x0e, r24	; 14
	DDRE |= _BV(PE1);
    7af6:	69 9a       	sbi	0x0d, 1	; 13
	//UCSR0A=_BV(U2X1);
	UCSR0B=0x98;
    7af8:	88 e9       	ldi	r24, 0x98	; 152
    7afa:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=0x06;
    7afe:	86 e0       	ldi	r24, 0x06	; 6
    7b00:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = (F_CPU / (16UL * baud)) - 1;
    7b04:	84 e0       	ldi	r24, 0x04	; 4
    7b06:	22 0f       	add	r18, r18
    7b08:	33 1f       	adc	r19, r19
    7b0a:	44 1f       	adc	r20, r20
    7b0c:	55 1f       	adc	r21, r21
    7b0e:	8a 95       	dec	r24
    7b10:	d1 f7       	brne	.-12     	; 0x7b06 <uart0_init+0x1a>
    7b12:	60 e0       	ldi	r22, 0x00	; 0
    7b14:	74 e2       	ldi	r23, 0x24	; 36
    7b16:	84 ef       	ldi	r24, 0xF4	; 244
    7b18:	90 e0       	ldi	r25, 0x00	; 0
    7b1a:	0e 94 4c 44 	call	0x8898	; 0x8898 <__udivmodsi4>
    7b1e:	21 50       	subi	r18, 0x01	; 1
    7b20:	30 40       	sbci	r19, 0x00	; 0
    7b22:	30 93 c5 00 	sts	0x00C5, r19
    7b26:	20 93 c4 00 	sts	0x00C4, r18
}
    7b2a:	08 95       	ret

00007b2c <gps_init>:
	uint8_t idx;
}gps_recv;

void gps_init(void)
{
	uart0_init(GPS_BAUD);
    7b2c:	60 ec       	ldi	r22, 0xC0	; 192
    7b2e:	72 e1       	ldi	r23, 0x12	; 18
    7b30:	80 e0       	ldi	r24, 0x00	; 0
    7b32:	90 e0       	ldi	r25, 0x00	; 0
    7b34:	0e 94 76 3d 	call	0x7aec	; 0x7aec <uart0_init>
	TCCR3B = 0x04;
    7b38:	84 e0       	ldi	r24, 0x04	; 4
    7b3a:	80 93 91 00 	sts	0x0091, r24
}
    7b3e:	08 95       	ret

00007b40 <uart0_tx>:
	UCSR0C=0x06;
	UBRR0 = (F_CPU / (16UL * baud)) - 1;
}

void uart0_tx( unsigned char data )
{
    7b40:	98 2f       	mov	r25, r24
	//PORTD |= _BV(PD4);
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) ;
    7b42:	80 91 c0 00 	lds	r24, 0x00C0
    7b46:	85 ff       	sbrs	r24, 5
    7b48:	fc cf       	rjmp	.-8      	; 0x7b42 <uart0_tx+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    7b4a:	90 93 c6 00 	sts	0x00C6, r25
	//PORTD &= ~_BV(PD4);
}
    7b4e:	08 95       	ret

00007b50 <uart0_rx>:

uint8_t uart0_rx(char *c)
{
    7b50:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	if (UCSR0A & (1<<RXC0))
    7b52:	80 91 c0 00 	lds	r24, 0x00C0
    7b56:	87 fd       	sbrc	r24, 7
    7b58:	02 c0       	rjmp	.+4      	; 0x7b5e <uart0_rx+0xe>
    7b5a:	80 e0       	ldi	r24, 0x00	; 0
    7b5c:	08 95       	ret
	{
		//PORTD |=_BV(PD7);
		*c = UDR0;
    7b5e:	80 91 c6 00 	lds	r24, 0x00C6
    7b62:	80 83       	st	Z, r24
    7b64:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//PORTD &=~_BV(PD7);
		return 0;
	}
}
    7b66:	08 95       	ret

00007b68 <gps_getc>:
	uint8_t num_bytes;
	uint16_t overrun;
}rx;

uint8_t gps_getc(uint8_t *c)
{
    7b68:	dc 01       	movw	r26, r24
	uint8_t rtn;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7b6a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7b6c:	f8 94       	cli
	{
		if(rx.num_bytes)
    7b6e:	80 91 af 04 	lds	r24, 0x04AF
    7b72:	88 23       	and	r24, r24
    7b74:	b9 f0       	breq	.+46     	; 0x7ba4 <gps_getc+0x3c>
		{
			c[0] = rx.bfr[rx.tail];
    7b76:	e0 91 ae 04 	lds	r30, 0x04AE
    7b7a:	f0 e0       	ldi	r31, 0x00	; 0
    7b7c:	ed 55       	subi	r30, 0x5D	; 93
    7b7e:	fb 4f       	sbci	r31, 0xFB	; 251
    7b80:	80 81       	ld	r24, Z
    7b82:	8c 93       	st	X, r24
			rx.tail = (rx.tail+1)%RX_BUF_SIZE;
    7b84:	80 91 ae 04 	lds	r24, 0x04AE
    7b88:	90 e0       	ldi	r25, 0x00	; 0
    7b8a:	01 96       	adiw	r24, 0x01	; 1
    7b8c:	6a e0       	ldi	r22, 0x0A	; 10
    7b8e:	70 e0       	ldi	r23, 0x00	; 0
    7b90:	0e 94 39 44 	call	0x8872	; 0x8872 <__divmodhi4>
    7b94:	80 93 ae 04 	sts	0x04AE, r24
			rx.num_bytes--;
    7b98:	80 91 af 04 	lds	r24, 0x04AF
    7b9c:	81 50       	subi	r24, 0x01	; 1
    7b9e:	80 93 af 04 	sts	0x04AF, r24
    7ba2:	81 e0       	ldi	r24, 0x01	; 1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7ba4:	2f bf       	out	0x3f, r18	; 63
		{
			rtn = 0;
		}
	}
	return rtn;
}
    7ba6:	08 95       	ret

00007ba8 <__vector_21>:

ISR(USART0_RX_vect)
{
    7ba8:	1f 92       	push	r1
    7baa:	0f 92       	push	r0
    7bac:	0f b6       	in	r0, 0x3f	; 63
    7bae:	0f 92       	push	r0
    7bb0:	0b b6       	in	r0, 0x3b	; 59
    7bb2:	0f 92       	push	r0
    7bb4:	11 24       	eor	r1, r1
    7bb6:	2f 93       	push	r18
    7bb8:	5f 93       	push	r21
    7bba:	6f 93       	push	r22
    7bbc:	7f 93       	push	r23
    7bbe:	8f 93       	push	r24
    7bc0:	9f 93       	push	r25
    7bc2:	af 93       	push	r26
    7bc4:	bf 93       	push	r27
    7bc6:	ef 93       	push	r30
    7bc8:	ff 93       	push	r31
	uint8_t data;

	data = UDR0;
    7bca:	20 91 c6 00 	lds	r18, 0x00C6

	if(data == '$')
    7bce:	24 32       	cpi	r18, 0x24	; 36
    7bd0:	41 f4       	brne	.+16     	; 0x7be2 <__vector_21+0x3a>
	{
		gps.last_tick = TCNT3;
    7bd2:	80 91 94 00 	lds	r24, 0x0094
    7bd6:	90 91 95 00 	lds	r25, 0x0095
    7bda:	90 93 9c 04 	sts	0x049C, r25
    7bde:	80 93 9b 04 	sts	0x049B, r24
	}


	if(rx.num_bytes < RX_BUF_SIZE)
    7be2:	80 91 af 04 	lds	r24, 0x04AF
    7be6:	8a 30       	cpi	r24, 0x0A	; 10
    7be8:	b0 f4       	brcc	.+44     	; 0x7c16 <__vector_21+0x6e>
	{
		rx.bfr[rx.head] = data;
    7bea:	e0 91 ad 04 	lds	r30, 0x04AD
    7bee:	f0 e0       	ldi	r31, 0x00	; 0
    7bf0:	ed 55       	subi	r30, 0x5D	; 93
    7bf2:	fb 4f       	sbci	r31, 0xFB	; 251
    7bf4:	20 83       	st	Z, r18
		rx.head = (rx.head+1)%RX_BUF_SIZE;
    7bf6:	80 91 ad 04 	lds	r24, 0x04AD
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
    7bfc:	01 96       	adiw	r24, 0x01	; 1
    7bfe:	6a e0       	ldi	r22, 0x0A	; 10
    7c00:	70 e0       	ldi	r23, 0x00	; 0
    7c02:	0e 94 39 44 	call	0x8872	; 0x8872 <__divmodhi4>
    7c06:	80 93 ad 04 	sts	0x04AD, r24
		rx.num_bytes++;
    7c0a:	80 91 af 04 	lds	r24, 0x04AF
    7c0e:	8f 5f       	subi	r24, 0xFF	; 255
    7c10:	80 93 af 04 	sts	0x04AF, r24
    7c14:	09 c0       	rjmp	.+18     	; 0x7c28 <__vector_21+0x80>
	}
	else
	{
		rx.overrun++;
    7c16:	80 91 b0 04 	lds	r24, 0x04B0
    7c1a:	90 91 b1 04 	lds	r25, 0x04B1
    7c1e:	01 96       	adiw	r24, 0x01	; 1
    7c20:	90 93 b1 04 	sts	0x04B1, r25
    7c24:	80 93 b0 04 	sts	0x04B0, r24
	}
}
    7c28:	ff 91       	pop	r31
    7c2a:	ef 91       	pop	r30
    7c2c:	bf 91       	pop	r27
    7c2e:	af 91       	pop	r26
    7c30:	9f 91       	pop	r25
    7c32:	8f 91       	pop	r24
    7c34:	7f 91       	pop	r23
    7c36:	6f 91       	pop	r22
    7c38:	5f 91       	pop	r21
    7c3a:	2f 91       	pop	r18
    7c3c:	0f 90       	pop	r0
    7c3e:	0b be       	out	0x3b, r0	; 59
    7c40:	0f 90       	pop	r0
    7c42:	0f be       	out	0x3f, r0	; 63
    7c44:	0f 90       	pop	r0
    7c46:	1f 90       	pop	r1
    7c48:	18 95       	reti

00007c4a <clear_log>:
		uart_putc('\n');
	}
}

void clear_log(void)
{
    7c4a:	20 e0       	ldi	r18, 0x00	; 0
    7c4c:	30 e0       	ldi	r19, 0x00	; 0
    7c4e:	06 c0       	rjmp	.+12     	; 0x7c5c <clear_log+0x12>
	uint16_t i;

	for(i = 0;i<log_buf.size;i++)
	{
		log_buf.data[i] = 0;
    7c50:	f9 01       	movw	r30, r18
    7c52:	e9 51       	subi	r30, 0x19	; 25
    7c54:	fb 4f       	sbci	r31, 0xFB	; 251
    7c56:	10 82       	st	Z, r1

void clear_log(void)
{
	uint16_t i;

	for(i = 0;i<log_buf.size;i++)
    7c58:	2f 5f       	subi	r18, 0xFF	; 255
    7c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c5c:	80 91 e7 06 	lds	r24, 0x06E7
    7c60:	90 91 e8 06 	lds	r25, 0x06E8
    7c64:	28 17       	cp	r18, r24
    7c66:	39 07       	cpc	r19, r25
    7c68:	98 f3       	brcs	.-26     	; 0x7c50 <clear_log+0x6>
	{
		log_buf.data[i] = 0;
	}

	log_buf.next = 0;
    7c6a:	10 92 ea 06 	sts	0x06EA, r1
    7c6e:	10 92 e9 06 	sts	0x06E9, r1
}
    7c72:	08 95       	ret

00007c74 <print_log_buf>:
	return 1;

}

void print_log_buf(void)
{
    7c74:	0f 93       	push	r16
    7c76:	1f 93       	push	r17
    7c78:	cf 93       	push	r28
    7c7a:	df 93       	push	r29
    7c7c:	00 e0       	ldi	r16, 0x00	; 0
    7c7e:	10 e0       	ldi	r17, 0x00	; 0
    7c80:	18 c0       	rjmp	.+48     	; 0x7cb2 <print_log_buf+0x3e>
    7c82:	fe 01       	movw	r30, r28
    7c84:	e0 0f       	add	r30, r16
    7c86:	f1 1f       	adc	r31, r17

	for(i = 0;i<32;i++)
	{
		for(j=0;j<32;j++)
		{
			uart_putc_hex(log_buf.data[i*32+j]);
    7c88:	e9 51       	subi	r30, 0x19	; 25
    7c8a:	fb 4f       	sbci	r31, 0xFB	; 251
    7c8c:	80 81       	ld	r24, Z
    7c8e:	0e 94 64 2f 	call	0x5ec8	; 0x5ec8 <uart_putc_hex>
			uart_putc(' ');
    7c92:	80 e2       	ldi	r24, 0x20	; 32
    7c94:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <uart_putc>
{
	uint16_t i,j;

	for(i = 0;i<32;i++)
	{
		for(j=0;j<32;j++)
    7c98:	21 96       	adiw	r28, 0x01	; 1
    7c9a:	c0 32       	cpi	r28, 0x20	; 32
    7c9c:	d1 05       	cpc	r29, r1
    7c9e:	89 f7       	brne	.-30     	; 0x7c82 <print_log_buf+0xe>
		{
			uart_putc_hex(log_buf.data[i*32+j]);
			uart_putc(' ');
		}
		uart_putc('\n');
    7ca0:	8a e0       	ldi	r24, 0x0A	; 10
    7ca2:	0e 94 5c 2f 	call	0x5eb8	; 0x5eb8 <uart_putc>
    7ca6:	00 5e       	subi	r16, 0xE0	; 224
    7ca8:	1f 4f       	sbci	r17, 0xFF	; 255

void print_log_buf(void)
{
	uint16_t i,j;

	for(i = 0;i<32;i++)
    7caa:	84 e0       	ldi	r24, 0x04	; 4
    7cac:	00 30       	cpi	r16, 0x00	; 0
    7cae:	18 07       	cpc	r17, r24
    7cb0:	19 f0       	breq	.+6      	; 0x7cb8 <print_log_buf+0x44>
    7cb2:	c0 e0       	ldi	r28, 0x00	; 0
    7cb4:	d0 e0       	ldi	r29, 0x00	; 0
    7cb6:	e5 cf       	rjmp	.-54     	; 0x7c82 <print_log_buf+0xe>
			uart_putc_hex(log_buf.data[i*32+j]);
			uart_putc(' ');
		}
		uart_putc('\n');
	}
}
    7cb8:	df 91       	pop	r29
    7cba:	cf 91       	pop	r28
    7cbc:	1f 91       	pop	r17
    7cbe:	0f 91       	pop	r16
    7cc0:	08 95       	ret

00007cc2 <flush_log>:
	log_status = NOT_LOGGING;
}

void flush_log(void)
{
	PORTE |= _BV(PE6);
    7cc2:	76 9a       	sbi	0x0e, 6	; 14
	fat_write_file(f_log,(uint8_t *)log_buf.data,log_buf.next);
    7cc4:	40 91 e9 06 	lds	r20, 0x06E9
    7cc8:	50 91 ea 06 	lds	r21, 0x06EA
    7ccc:	80 91 13 08 	lds	r24, 0x0813
    7cd0:	90 91 14 08 	lds	r25, 0x0814
    7cd4:	67 ee       	ldi	r22, 0xE7	; 231
    7cd6:	74 e0       	ldi	r23, 0x04	; 4
    7cd8:	0e 94 84 21 	call	0x4308	; 0x4308 <fat_write_file>
	log_buf.next = 0;
    7cdc:	10 92 ea 06 	sts	0x06EA, r1
    7ce0:	10 92 e9 06 	sts	0x06E9, r1
	PORTE &= ~_BV(PE6);
    7ce4:	76 98       	cbi	0x0e, 6	; 14

#ifdef CLEAR_LOG_ON_FLUSH
	clear_log();
#endif
}
    7ce6:	08 95       	ret

00007ce8 <_log>:
}



uint8_t _log(uint8_t *blk)
{
    7ce8:	ef 92       	push	r14
    7cea:	ff 92       	push	r15
    7cec:	0f 93       	push	r16
    7cee:	1f 93       	push	r17
    7cf0:	cf 93       	push	r28
    7cf2:	df 93       	push	r29
    7cf4:	8c 01       	movw	r16, r24
	uint16_t size; // Size of block to be logged (comes from the block header info
	uint16_t idx = 0; // Current Block Index
	LOG_hdr_t *hdr = (LOG_hdr_t *) blk;		// Cast to Log header pointer to manipulate header info

	// Set the current timer log
	hdr->time = log_timer;
    7cf6:	80 91 37 04 	lds	r24, 0x0437
    7cfa:	90 91 38 04 	lds	r25, 0x0438
    7cfe:	a0 91 39 04 	lds	r26, 0x0439
    7d02:	b0 91 3a 04 	lds	r27, 0x043A
    7d06:	f8 01       	movw	r30, r16
    7d08:	81 83       	std	Z+1, r24	; 0x01
    7d0a:	92 83       	std	Z+2, r25	; 0x02
    7d0c:	a3 83       	std	Z+3, r26	; 0x03
    7d0e:	b4 83       	std	Z+4, r27	; 0x04

	// Get the block size
	size = hdr->size;
    7d10:	e5 80       	ldd	r14, Z+5	; 0x05
    7d12:	f6 80       	ldd	r15, Z+6	; 0x06

	if(f_log != 0)
    7d14:	80 91 13 08 	lds	r24, 0x0813
    7d18:	90 91 14 08 	lds	r25, 0x0814
    7d1c:	89 2b       	or	r24, r25
    7d1e:	11 f4       	brne	.+4      	; 0x7d24 <_log+0x3c>
    7d20:	80 e0       	ldi	r24, 0x00	; 0
    7d22:	26 c0       	rjmp	.+76     	; 0x7d70 <_log+0x88>
    7d24:	c0 e0       	ldi	r28, 0x00	; 0
    7d26:	d0 e0       	ldi	r29, 0x00	; 0
    7d28:	1f c0       	rjmp	.+62     	; 0x7d68 <_log+0x80>
	{
		while(idx < size)
		{
			if(!log_space())
    7d2a:	80 91 e9 06 	lds	r24, 0x06E9
    7d2e:	90 91 ea 06 	lds	r25, 0x06EA
    7d32:	80 50       	subi	r24, 0x00	; 0
    7d34:	92 40       	sbci	r25, 0x02	; 2
    7d36:	19 f4       	brne	.+6      	; 0x7d3e <_log+0x56>
			{
				flush_log();
    7d38:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <flush_log>
    7d3c:	15 c0       	rjmp	.+42     	; 0x7d68 <_log+0x80>
			}
			else
			{
				log_buf.data[log_buf.next] = blk[idx];
    7d3e:	e0 91 e9 06 	lds	r30, 0x06E9
    7d42:	f0 91 ea 06 	lds	r31, 0x06EA
    7d46:	d8 01       	movw	r26, r16
    7d48:	ac 0f       	add	r26, r28
    7d4a:	bd 1f       	adc	r27, r29
    7d4c:	8c 91       	ld	r24, X
    7d4e:	e9 51       	subi	r30, 0x19	; 25
    7d50:	fb 4f       	sbci	r31, 0xFB	; 251
    7d52:	80 83       	st	Z, r24
				log_buf.next++;
    7d54:	80 91 e9 06 	lds	r24, 0x06E9
    7d58:	90 91 ea 06 	lds	r25, 0x06EA
    7d5c:	01 96       	adiw	r24, 0x01	; 1
    7d5e:	90 93 ea 06 	sts	0x06EA, r25
    7d62:	80 93 e9 06 	sts	0x06E9, r24
				idx++;
    7d66:	21 96       	adiw	r28, 0x01	; 1
	// Get the block size
	size = hdr->size;

	if(f_log != 0)
	{
		while(idx < size)
    7d68:	ce 15       	cp	r28, r14
    7d6a:	df 05       	cpc	r29, r15
    7d6c:	f0 f2       	brcs	.-68     	; 0x7d2a <_log+0x42>
    7d6e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
    7d70:	df 91       	pop	r29
    7d72:	cf 91       	pop	r28
    7d74:	1f 91       	pop	r17
    7d76:	0f 91       	pop	r16
    7d78:	ff 90       	pop	r15
    7d7a:	ef 90       	pop	r14
    7d7c:	08 95       	ret

00007d7e <open_log>:
	clear_log();
#endif
}

uint8_t open_log(const char *path)
{
    7d7e:	af 92       	push	r10
    7d80:	bf 92       	push	r11
    7d82:	cf 92       	push	r12
    7d84:	df 92       	push	r13
    7d86:	ef 92       	push	r14
    7d88:	ff 92       	push	r15
    7d8a:	0f 93       	push	r16
    7d8c:	1f 93       	push	r17
    7d8e:	df 93       	push	r29
    7d90:	cf 93       	push	r28
    7d92:	cd b7       	in	r28, 0x3d	; 61
    7d94:	de b7       	in	r29, 0x3e	; 62
    7d96:	64 97       	sbiw	r28, 0x14	; 20
    7d98:	0f b6       	in	r0, 0x3f	; 63
    7d9a:	f8 94       	cli
    7d9c:	de bf       	out	0x3e, r29	; 62
    7d9e:	0f be       	out	0x3f, r0	; 63
    7da0:	cd bf       	out	0x3d, r28	; 61
    7da2:	6c 01       	movw	r12, r24
	char file_str[20] = "";
    7da4:	19 82       	std	Y+1, r1	; 0x01
    7da6:	1a 82       	std	Y+2, r1	; 0x02
    7da8:	1b 82       	std	Y+3, r1	; 0x03
    7daa:	1c 82       	std	Y+4, r1	; 0x04
    7dac:	fe 01       	movw	r30, r28
    7dae:	35 96       	adiw	r30, 0x05	; 5
    7db0:	80 e1       	ldi	r24, 0x10	; 16
    7db2:	df 01       	movw	r26, r30
    7db4:	1d 92       	st	X+, r1
    7db6:	8a 95       	dec	r24
    7db8:	e9 f7       	brne	.-6      	; 0x7db4 <open_log+0x36>
	uint8_t file_num = 0;
	uint8_t resp = 0;

    sprintf(file_str,"%s%u.log",path,file_num);
    7dba:	8d b7       	in	r24, 0x3d	; 61
    7dbc:	9e b7       	in	r25, 0x3e	; 62
    7dbe:	08 97       	sbiw	r24, 0x08	; 8
    7dc0:	0f b6       	in	r0, 0x3f	; 63
    7dc2:	f8 94       	cli
    7dc4:	9e bf       	out	0x3e, r25	; 62
    7dc6:	0f be       	out	0x3f, r0	; 63
    7dc8:	8d bf       	out	0x3d, r24	; 61
    7dca:	ed b7       	in	r30, 0x3d	; 61
    7dcc:	fe b7       	in	r31, 0x3e	; 62
    7dce:	31 96       	adiw	r30, 0x01	; 1
    7dd0:	ce 01       	movw	r24, r28
    7dd2:	01 96       	adiw	r24, 0x01	; 1
    7dd4:	ad b7       	in	r26, 0x3d	; 61
    7dd6:	be b7       	in	r27, 0x3e	; 62
    7dd8:	12 96       	adiw	r26, 0x02	; 2
    7dda:	9c 93       	st	X, r25
    7ddc:	8e 93       	st	-X, r24
    7dde:	11 97       	sbiw	r26, 0x01	; 1
    7de0:	85 e1       	ldi	r24, 0x15	; 21
    7de2:	91 e0       	ldi	r25, 0x01	; 1
    7de4:	93 83       	std	Z+3, r25	; 0x03
    7de6:	82 83       	std	Z+2, r24	; 0x02
    7de8:	d5 82       	std	Z+5, r13	; 0x05
    7dea:	c4 82       	std	Z+4, r12	; 0x04
    7dec:	17 82       	std	Z+7, r1	; 0x07
    7dee:	16 82       	std	Z+6, r1	; 0x06
    7df0:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <sprintf>

    uart_puts_p(PSTR("Opening New log\n"));
    7df4:	8d b7       	in	r24, 0x3d	; 61
    7df6:	9e b7       	in	r25, 0x3e	; 62
    7df8:	08 96       	adiw	r24, 0x08	; 8
    7dfa:	0f b6       	in	r0, 0x3f	; 63
    7dfc:	f8 94       	cli
    7dfe:	9e bf       	out	0x3e, r25	; 62
    7e00:	0f be       	out	0x3f, r0	; 63
    7e02:	8d bf       	out	0x3d, r24	; 61
    7e04:	85 e7       	ldi	r24, 0x75	; 117
    7e06:	91 e0       	ldi	r25, 0x01	; 1
    7e08:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>

	log_timer = 0;
    7e0c:	10 92 37 04 	sts	0x0437, r1
    7e10:	10 92 38 04 	sts	0x0438, r1
    7e14:	10 92 39 04 	sts	0x0439, r1
    7e18:	10 92 3a 04 	sts	0x043A, r1
    7e1c:	20 e0       	ldi	r18, 0x00	; 0
    7e1e:	30 e0       	ldi	r19, 0x00	; 0
    7e20:	06 c0       	rjmp	.+12     	; 0x7e2e <open_log+0xb0>
{
	uint16_t i;

	for(i = 0;i<log_buf.size;i++)
	{
		log_buf.data[i] = 0;
    7e22:	f9 01       	movw	r30, r18
    7e24:	e9 51       	subi	r30, 0x19	; 25
    7e26:	fb 4f       	sbci	r31, 0xFB	; 251
    7e28:	10 82       	st	Z, r1

void clear_log(void)
{
	uint16_t i;

	for(i = 0;i<log_buf.size;i++)
    7e2a:	2f 5f       	subi	r18, 0xFF	; 255
    7e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e2e:	80 91 e7 06 	lds	r24, 0x06E7
    7e32:	90 91 e8 06 	lds	r25, 0x06E8
    7e36:	28 17       	cp	r18, r24
    7e38:	39 07       	cpc	r19, r25
    7e3a:	98 f3       	brcs	.-26     	; 0x7e22 <open_log+0xa4>
	{
		log_buf.data[i] = 0;
	}

	log_buf.next = 0;
    7e3c:	10 92 ea 06 	sts	0x06EA, r1
    7e40:	10 92 e9 06 	sts	0x06E9, r1
    7e44:	00 e0       	ldi	r16, 0x00	; 0

	log_timer = 0;
	clear_log();
    do
    {
    	resp = fat_create_file(dd,file_str,&directory);
    7e46:	7e 01       	movw	r14, r28
    7e48:	08 94       	sec
    7e4a:	e1 1c       	adc	r14, r1
    7e4c:	f1 1c       	adc	r15, r1
    		return 0;
    	}
    	if(resp == 2)
    	{
    		file_num++;
    	    sprintf(file_str,"%s%u.log",path,file_num);
    7e4e:	85 e1       	ldi	r24, 0x15	; 21
    7e50:	a8 2e       	mov	r10, r24
    7e52:	81 e0       	ldi	r24, 0x01	; 1
    7e54:	b8 2e       	mov	r11, r24

	log_timer = 0;
	clear_log();
    do
    {
    	resp = fat_create_file(dd,file_str,&directory);
    7e56:	80 91 0f 08 	lds	r24, 0x080F
    7e5a:	90 91 10 08 	lds	r25, 0x0810
    7e5e:	b7 01       	movw	r22, r14
    7e60:	4b ea       	ldi	r20, 0xAB	; 171
    7e62:	57 e0       	ldi	r21, 0x07	; 7
    7e64:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <fat_create_file>
    7e68:	18 2f       	mov	r17, r24
    	if(resp == 0)
    7e6a:	88 23       	and	r24, r24
    7e6c:	19 f4       	brne	.+6      	; 0x7e74 <open_log+0xf6>
    	{
    		uart_puts_p(PSTR("Cannot Open File\n"));
    7e6e:	83 e6       	ldi	r24, 0x63	; 99
    7e70:	91 e0       	ldi	r25, 0x01	; 1
    7e72:	39 c0       	rjmp	.+114    	; 0x7ee6 <open_log+0x168>
    		return 0;
    	}
    	if(resp == 2)
    7e74:	82 30       	cpi	r24, 0x02	; 2
    7e76:	09 f5       	brne	.+66     	; 0x7eba <open_log+0x13c>
    	{
    		file_num++;
    7e78:	0f 5f       	subi	r16, 0xFF	; 255
    	    sprintf(file_str,"%s%u.log",path,file_num);
    7e7a:	ad b7       	in	r26, 0x3d	; 61
    7e7c:	be b7       	in	r27, 0x3e	; 62
    7e7e:	18 97       	sbiw	r26, 0x08	; 8
    7e80:	0f b6       	in	r0, 0x3f	; 63
    7e82:	f8 94       	cli
    7e84:	be bf       	out	0x3e, r27	; 62
    7e86:	0f be       	out	0x3f, r0	; 63
    7e88:	ad bf       	out	0x3d, r26	; 61
    7e8a:	ed b7       	in	r30, 0x3d	; 61
    7e8c:	fe b7       	in	r31, 0x3e	; 62
    7e8e:	31 96       	adiw	r30, 0x01	; 1
    7e90:	12 96       	adiw	r26, 0x02	; 2
    7e92:	fc 92       	st	X, r15
    7e94:	ee 92       	st	-X, r14
    7e96:	11 97       	sbiw	r26, 0x01	; 1
    7e98:	b3 82       	std	Z+3, r11	; 0x03
    7e9a:	a2 82       	std	Z+2, r10	; 0x02
    7e9c:	d5 82       	std	Z+5, r13	; 0x05
    7e9e:	c4 82       	std	Z+4, r12	; 0x04
    7ea0:	06 83       	std	Z+6, r16	; 0x06
    7ea2:	17 82       	std	Z+7, r1	; 0x07
    7ea4:	0e 94 53 45 	call	0x8aa6	; 0x8aa6 <sprintf>
    7ea8:	8d b7       	in	r24, 0x3d	; 61
    7eaa:	9e b7       	in	r25, 0x3e	; 62
    7eac:	08 96       	adiw	r24, 0x08	; 8
    7eae:	0f b6       	in	r0, 0x3f	; 63
    7eb0:	f8 94       	cli
    7eb2:	9e bf       	out	0x3e, r25	; 62
    7eb4:	0f be       	out	0x3f, r0	; 63
    7eb6:	8d bf       	out	0x3d, r24	; 61
    7eb8:	ce cf       	rjmp	.-100    	; 0x7e56 <open_log+0xd8>
    	}
    }
    while(resp != 1);
    7eba:	81 30       	cpi	r24, 0x01	; 1
    7ebc:	61 f6       	brne	.-104    	; 0x7e56 <open_log+0xd8>

    uart_puts_p(PSTR("File Created\n"));
    7ebe:	85 e5       	ldi	r24, 0x55	; 85
    7ec0:	91 e0       	ldi	r25, 0x01	; 1
    7ec2:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>

    f_log = fat_open_file(fsys,&directory);
    7ec6:	80 91 11 08 	lds	r24, 0x0811
    7eca:	90 91 12 08 	lds	r25, 0x0812
    7ece:	6b ea       	ldi	r22, 0xAB	; 171
    7ed0:	77 e0       	ldi	r23, 0x07	; 7
    7ed2:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <fat_open_file>
    7ed6:	90 93 14 08 	sts	0x0814, r25
    7eda:	80 93 13 08 	sts	0x0813, r24
    if(!f_log)
    7ede:	89 2b       	or	r24, r25
    7ee0:	31 f4       	brne	.+12     	; 0x7eee <open_log+0x170>
    {
    	uart_puts_p(PSTR("Creating File Opened\n"));
    7ee2:	8f e3       	ldi	r24, 0x3F	; 63
    7ee4:	91 e0       	ldi	r25, 0x01	; 1
    7ee6:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    7eea:	80 e0       	ldi	r24, 0x00	; 0
    7eec:	07 c0       	rjmp	.+14     	; 0x7efc <open_log+0x17e>
    	return 0;
    }

	log(sys.log.prm);
    7eee:	83 e7       	ldi	r24, 0x73	; 115
    7ef0:	97 e0       	ldi	r25, 0x07	; 7
    7ef2:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <_log>
	log_status = LOGGING;
    7ef6:	10 93 3b 04 	sts	0x043B, r17
    7efa:	81 e0       	ldi	r24, 0x01	; 1
	return 1;

}
    7efc:	64 96       	adiw	r28, 0x14	; 20
    7efe:	0f b6       	in	r0, 0x3f	; 63
    7f00:	f8 94       	cli
    7f02:	de bf       	out	0x3e, r29	; 62
    7f04:	0f be       	out	0x3f, r0	; 63
    7f06:	cd bf       	out	0x3d, r28	; 61
    7f08:	cf 91       	pop	r28
    7f0a:	df 91       	pop	r29
    7f0c:	1f 91       	pop	r17
    7f0e:	0f 91       	pop	r16
    7f10:	ff 90       	pop	r15
    7f12:	ef 90       	pop	r14
    7f14:	df 90       	pop	r13
    7f16:	cf 90       	pop	r12
    7f18:	bf 90       	pop	r11
    7f1a:	af 90       	pop	r10
    7f1c:	08 95       	ret

00007f1e <close_log>:
		return 0;
	}
}

void close_log(void)
{
    7f1e:	df 93       	push	r29
    7f20:	cf 93       	push	r28
    7f22:	00 d0       	rcall	.+0      	; 0x7f24 <close_log+0x6>
    7f24:	00 d0       	rcall	.+0      	; 0x7f26 <close_log+0x8>
    7f26:	cd b7       	in	r28, 0x3d	; 61
    7f28:	de b7       	in	r29, 0x3e	; 62
	uint8_t eof[4] = {LOG_EOF,LOG_EOF,LOG_EOF,LOG_EOF};
    7f2a:	8e ee       	ldi	r24, 0xEE	; 238
    7f2c:	89 83       	std	Y+1, r24	; 0x01
    7f2e:	8a 83       	std	Y+2, r24	; 0x02
    7f30:	8b 83       	std	Y+3, r24	; 0x03
    7f32:	8c 83       	std	Y+4, r24	; 0x04



	flush_log();
    7f34:	0e 94 61 3e 	call	0x7cc2	; 0x7cc2 <flush_log>
	fat_write_file(f_log,eof,4);
    7f38:	80 91 13 08 	lds	r24, 0x0813
    7f3c:	90 91 14 08 	lds	r25, 0x0814
    7f40:	be 01       	movw	r22, r28
    7f42:	6f 5f       	subi	r22, 0xFF	; 255
    7f44:	7f 4f       	sbci	r23, 0xFF	; 255
    7f46:	44 e0       	ldi	r20, 0x04	; 4
    7f48:	50 e0       	ldi	r21, 0x00	; 0
    7f4a:	0e 94 84 21 	call	0x4308	; 0x4308 <fat_write_file>
	fat_close_file(f_log);
    7f4e:	80 91 13 08 	lds	r24, 0x0813
    7f52:	90 91 14 08 	lds	r25, 0x0814
    7f56:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <fat_close_file>
	//fat_close_dir(dd);
	//fat_close(fsys);
	sd_raw_sync();
    7f5a:	0e 94 a5 2a 	call	0x554a	; 0x554a <sd_raw_sync>
	log_status = NOT_LOGGING;
    7f5e:	10 92 3b 04 	sts	0x043B, r1
}
    7f62:	0f 90       	pop	r0
    7f64:	0f 90       	pop	r0
    7f66:	0f 90       	pop	r0
    7f68:	0f 90       	pop	r0
    7f6a:	cf 91       	pop	r28
    7f6c:	df 91       	pop	r29
    7f6e:	08 95       	ret

00007f70 <fat_init>:
struct fat_dir_entry_struct new_dir;



char fat_init(void)
{
    7f70:	0f 93       	push	r16
	if(!sd_raw_init())
    7f72:	0e 94 4a 2d 	call	0x5a94	; 0x5a94 <sd_raw_init>
    7f76:	88 23       	and	r24, r24
    7f78:	31 f4       	brne	.+12     	; 0x7f86 <fat_init+0x16>
	{
		uart_puts_p("Raw SD Init Failed\n");
    7f7a:	8e e1       	ldi	r24, 0x1E	; 30
    7f7c:	91 e0       	ldi	r25, 0x01	; 1
    7f7e:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    7f82:	8f ef       	ldi	r24, 0xFF	; 255
    7f84:	47 c0       	rjmp	.+142    	; 0x8014 <fat_init+0xa4>
		return -1;
	}
	uart_puts_p(PSTR("Raw SD Init succeeded\n"));
    7f86:	8a ef       	ldi	r24, 0xFA	; 250
    7f88:	91 e0       	ldi	r25, 0x01	; 1
    7f8a:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>

	partition =	partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,0);
    7f8e:	80 ed       	ldi	r24, 0xD0	; 208
    7f90:	9a e2       	ldi	r25, 0x2A	; 42
    7f92:	6c e7       	ldi	r22, 0x7C	; 124
    7f94:	7c e2       	ldi	r23, 0x2C	; 44
    7f96:	41 ed       	ldi	r20, 0xD1	; 209
    7f98:	58 e2       	ldi	r21, 0x28	; 40
    7f9a:	23 e8       	ldi	r18, 0x83	; 131
    7f9c:	3e e2       	ldi	r19, 0x2E	; 46
    7f9e:	00 e0       	ldi	r16, 0x00	; 0
    7fa0:	0e 94 76 26 	call	0x4cec	; 0x4cec <partition_open>
    7fa4:	90 93 dd 07 	sts	0x07DD, r25
    7fa8:	80 93 dc 07 	sts	0x07DC, r24

	if(!partition)
    7fac:	89 2b       	or	r24, r25
    7fae:	b9 f4       	brne	.+46     	; 0x7fde <fat_init+0x6e>
	{
		uart_puts_p(PSTR("First partition Open failed, trying something else\n"));
    7fb0:	86 ec       	ldi	r24, 0xC6	; 198
    7fb2:	91 e0       	ldi	r25, 0x01	; 1
    7fb4:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
		partition = partition_open(sd_raw_read,sd_raw_read_interval,sd_raw_write,sd_raw_write_interval,-1);
    7fb8:	80 ed       	ldi	r24, 0xD0	; 208
    7fba:	9a e2       	ldi	r25, 0x2A	; 42
    7fbc:	6c e7       	ldi	r22, 0x7C	; 124
    7fbe:	7c e2       	ldi	r23, 0x2C	; 44
    7fc0:	41 ed       	ldi	r20, 0xD1	; 209
    7fc2:	58 e2       	ldi	r21, 0x28	; 40
    7fc4:	23 e8       	ldi	r18, 0x83	; 131
    7fc6:	3e e2       	ldi	r19, 0x2E	; 46
    7fc8:	0f ef       	ldi	r16, 0xFF	; 255
    7fca:	0e 94 76 26 	call	0x4cec	; 0x4cec <partition_open>
    7fce:	90 93 dd 07 	sts	0x07DD, r25
    7fd2:	80 93 dc 07 	sts	0x07DC, r24
		if(!partition)	return(-2);
    7fd6:	89 2b       	or	r24, r25
    7fd8:	11 f4       	brne	.+4      	; 0x7fde <fat_init+0x6e>
    7fda:	8e ef       	ldi	r24, 0xFE	; 254
    7fdc:	1b c0       	rjmp	.+54     	; 0x8014 <fat_init+0xa4>
	}

	uart_puts_p(PSTR("Partition Opened\n"));
    7fde:	84 eb       	ldi	r24, 0xB4	; 180
    7fe0:	91 e0       	ldi	r25, 0x01	; 1
    7fe2:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>

	fsys = fat_open(partition);
    7fe6:	80 91 dc 07 	lds	r24, 0x07DC
    7fea:	90 91 dd 07 	lds	r25, 0x07DD
    7fee:	0e 94 af 12 	call	0x255e	; 0x255e <fat_open>
    7ff2:	90 93 12 08 	sts	0x0812, r25
    7ff6:	80 93 11 08 	sts	0x0811, r24

	if(!fsys)
    7ffa:	89 2b       	or	r24, r25
    7ffc:	31 f4       	brne	.+12     	; 0x800a <fat_init+0x9a>
	{
		uart_puts_p(PSTR("Opening filesystem Failed\n"));
    7ffe:	89 e9       	ldi	r24, 0x99	; 153
    8000:	91 e0       	ldi	r25, 0x01	; 1
    8002:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    8006:	8d ef       	ldi	r24, 0xFD	; 253
    8008:	05 c0       	rjmp	.+10     	; 0x8014 <fat_init+0xa4>
		return(-3);
	}

	uart_puts_p(PSTR("Filesystem Opened\n"));
    800a:	86 e8       	ldi	r24, 0x86	; 134
    800c:	91 e0       	ldi	r25, 0x01	; 1
    800e:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    8012:	80 e0       	ldi	r24, 0x00	; 0

	return(0);

}
    8014:	0f 91       	pop	r16
    8016:	08 95       	ret

00008018 <init_log_system>:
	log_buf.next = 0;
}

uint8_t init_log_system(void)
{
	log_buf.size = LOG_BUF_SIZE;
    8018:	80 e0       	ldi	r24, 0x00	; 0
    801a:	92 e0       	ldi	r25, 0x02	; 2
    801c:	90 93 e8 06 	sts	0x06E8, r25
    8020:	80 93 e7 06 	sts	0x06E7, r24
	// Fat file system init should go here later
	sys.log.f100.hdr.blk_id = LOG_100HZ_ID;
    8024:	81 e0       	ldi	r24, 0x01	; 1
    8026:	80 93 eb 06 	sts	0x06EB, r24
	sys.log.f10.hdr.blk_id = LOG_10HZ_ID;
    802a:	82 e0       	ldi	r24, 0x02	; 2
    802c:	80 93 08 07 	sts	0x0708, r24
	sys.log.f5.hdr.blk_id = LOG_5HZ_ID;
    8030:	83 e0       	ldi	r24, 0x03	; 3
    8032:	80 93 37 07 	sts	0x0737, r24
	sys.log.f1.hdr.blk_id = LOG_1HZ_ID;
    8036:	84 e0       	ldi	r24, 0x04	; 4
    8038:	80 93 64 07 	sts	0x0764, r24
	sys.log.prm.hdr.blk_id = LOG_PRM_ID;
    803c:	85 e0       	ldi	r24, 0x05	; 5
    803e:	80 93 73 07 	sts	0x0773, r24
	sys.log.status.hdr.blk_id = LOG_STATUS_ID;
    8042:	86 e0       	ldi	r24, 0x06	; 6
    8044:	80 93 9d 07 	sts	0x079D, r24

	// Fat file system init should go here later
	sys.log.f100.hdr.size = sizeof(LOG_100HZ_t);
    8048:	8d e1       	ldi	r24, 0x1D	; 29
    804a:	90 e0       	ldi	r25, 0x00	; 0
    804c:	90 93 f1 06 	sts	0x06F1, r25
    8050:	80 93 f0 06 	sts	0x06F0, r24
	sys.log.f10.hdr.size = sizeof(LOG_10HZ_t);
    8054:	8f e2       	ldi	r24, 0x2F	; 47
    8056:	90 e0       	ldi	r25, 0x00	; 0
    8058:	90 93 0e 07 	sts	0x070E, r25
    805c:	80 93 0d 07 	sts	0x070D, r24
	sys.log.f5.hdr.size = sizeof(LOG_5HZ_t);
    8060:	8d e2       	ldi	r24, 0x2D	; 45
    8062:	90 e0       	ldi	r25, 0x00	; 0
    8064:	90 93 3d 07 	sts	0x073D, r25
    8068:	80 93 3c 07 	sts	0x073C, r24
	sys.log.f1.hdr.size = sizeof(LOG_1HZ_t);
    806c:	8f e0       	ldi	r24, 0x0F	; 15
    806e:	90 e0       	ldi	r25, 0x00	; 0
    8070:	90 93 6a 07 	sts	0x076A, r25
    8074:	80 93 69 07 	sts	0x0769, r24
	sys.log.prm.hdr.size = sizeof(LOG_PRM_t);
    8078:	8a e2       	ldi	r24, 0x2A	; 42
    807a:	90 e0       	ldi	r25, 0x00	; 0
    807c:	90 93 79 07 	sts	0x0779, r25
    8080:	80 93 78 07 	sts	0x0778, r24
	sys.log.status.hdr.size = sizeof(LOG_STATUS_t);
    8084:	8e e0       	ldi	r24, 0x0E	; 14
    8086:	90 e0       	ldi	r25, 0x00	; 0
    8088:	90 93 a3 07 	sts	0x07A3, r25
    808c:	80 93 a2 07 	sts	0x07A2, r24

    sys.data.chan.fl_susp_trvl 	= 0;
    8090:	10 92 f3 06 	sts	0x06F3, r1
    8094:	10 92 f2 06 	sts	0x06F2, r1
    sys.data.chan.fr_susp_trvl	= 0;
    8098:	10 92 f5 06 	sts	0x06F5, r1
    809c:	10 92 f4 06 	sts	0x06F4, r1
    sys.data.chan.rl_susp_trvl	= 0;
    80a0:	10 92 f7 06 	sts	0x06F7, r1
    80a4:	10 92 f6 06 	sts	0x06F6, r1
    sys.data.chan.rr_susp_trvl	= 0;
    80a8:	10 92 f9 06 	sts	0x06F9, r1
    80ac:	10 92 f8 06 	sts	0x06F8, r1
    sys.data.chan.acl_x 		= 0;
    80b0:	10 92 fb 06 	sts	0x06FB, r1
    80b4:	10 92 fa 06 	sts	0x06FA, r1
    sys.data.chan.acl_y 		= 0;
    80b8:	10 92 fd 06 	sts	0x06FD, r1
    80bc:	10 92 fc 06 	sts	0x06FC, r1
    sys.data.chan.acl_z 		= 0;
    80c0:	10 92 ff 06 	sts	0x06FF, r1
    80c4:	10 92 fe 06 	sts	0x06FE, r1
    sys.data.chan.gyro_x 		= 0;
    80c8:	10 92 01 07 	sts	0x0701, r1
    80cc:	10 92 00 07 	sts	0x0700, r1
    sys.data.chan.gyro_y 		= 0;
    80d0:	10 92 03 07 	sts	0x0703, r1
    80d4:	10 92 02 07 	sts	0x0702, r1
    sys.data.chan.gyro_z 		= 0;
    80d8:	10 92 05 07 	sts	0x0705, r1
    80dc:	10 92 04 07 	sts	0x0704, r1

    sys.data.chan.rpm = 0;			// 10 Hz
    80e0:	10 92 10 07 	sts	0x0710, r1
    80e4:	10 92 0f 07 	sts	0x070F, r1
    sys.data.chan.tps = 0;			// 10 Hz
    80e8:	10 92 12 07 	sts	0x0712, r1
    80ec:	10 92 11 07 	sts	0x0711, r1
    sys.data.chan.oil_pres = 0;		// 10 HZ
    80f0:	10 92 14 07 	sts	0x0714, r1
    80f4:	10 92 13 07 	sts	0x0713, r1
    sys.data.chan.fbrk_pres = 0;		// 10 HZ
    80f8:	10 92 16 07 	sts	0x0716, r1
    80fc:	10 92 15 07 	sts	0x0715, r1
    sys.data.chan.rbrk_pres = 0;		// 10 HZ
    8100:	10 92 18 07 	sts	0x0718, r1
    8104:	10 92 17 07 	sts	0x0717, r1
    sys.data.chan.fuel_open_time = 0;// 10 HZ
    8108:	10 92 1a 07 	sts	0x071A, r1
    810c:	10 92 19 07 	sts	0x0719, r1
    sys.data.chan.ign_angle = 0;		// 10 HZ
    8110:	10 92 1c 07 	sts	0x071C, r1
    8114:	10 92 1b 07 	sts	0x071B, r1
    sys.data.chan.map = 0;			// 10 HZ
    8118:	10 92 1e 07 	sts	0x071E, r1
    811c:	10 92 1d 07 	sts	0x071D, r1
    sys.data.chan.lambda = 0;		// 10 HZ
    8120:	10 92 20 07 	sts	0x0720, r1
    8124:	10 92 1f 07 	sts	0x071F, r1
    sys.data.chan.fuel_slip_err = 0;	// 10 HZ
    8128:	10 92 22 07 	sts	0x0722, r1
    812c:	10 92 21 07 	sts	0x0721, r1
    sys.data.chan.fuel_comp = 0;	// 10 HZ
    8130:	10 92 24 07 	sts	0x0724, r1
    8134:	10 92 23 07 	sts	0x0723, r1
    sys.data.chan.timing_err = 0;	// 10 HZ
    8138:	10 92 26 07 	sts	0x0726, r1
    813c:	10 92 25 07 	sts	0x0725, r1
    sys.data.chan.timing_comp = 0;	// 10 HZ
    8140:	10 92 28 07 	sts	0x0728, r1
    8144:	10 92 27 07 	sts	0x0727, r1
    sys.data.chan.fl_wspd = 0;		// 10 HZ
    8148:	10 92 2a 07 	sts	0x072A, r1
    814c:	10 92 29 07 	sts	0x0729, r1
    sys.data.chan.fr_wspd = 0;		// 10 HZ
    8150:	10 92 2c 07 	sts	0x072C, r1
    8154:	10 92 2b 07 	sts	0x072B, r1
    sys.data.chan.rl_wspd = 0;		// 10 HZ
    8158:	10 92 2e 07 	sts	0x072E, r1
    815c:	10 92 2d 07 	sts	0x072D, r1
    sys.data.chan.rr_wspd = 0;		// 10 HZ
    8160:	10 92 30 07 	sts	0x0730, r1
    8164:	10 92 2f 07 	sts	0x072F, r1
    sys.data.chan.lng_slip = 0;		// 10 HZ
    8168:	10 92 32 07 	sts	0x0732, r1
    816c:	10 92 31 07 	sts	0x0731, r1
    sys.data.chan.lat_slip = 0;		// 10 HZ
    8170:	10 92 34 07 	sts	0x0734, r1
    8174:	10 92 33 07 	sts	0x0733, r1
    sys.data.chan.sw_angle = 0;		// 10 HZ
    8178:	10 92 36 07 	sts	0x0736, r1
    817c:	10 92 35 07 	sts	0x0735, r1

    sys.data.chan.ttemp_fli = 0;	// 5HZ
    8180:	10 92 3f 07 	sts	0x073F, r1
    8184:	10 92 3e 07 	sts	0x073E, r1
    sys.data.chan.ttemp_flm = 0;	// 5HZ
    8188:	10 92 41 07 	sts	0x0741, r1
    818c:	10 92 40 07 	sts	0x0740, r1
    sys.data.chan.ttemp_flo = 0;	// 5HZ
    8190:	10 92 43 07 	sts	0x0743, r1
    8194:	10 92 42 07 	sts	0x0742, r1
    sys.data.chan.ttemp_fri = 0;	// 5HZ
    8198:	10 92 45 07 	sts	0x0745, r1
    819c:	10 92 44 07 	sts	0x0744, r1
    sys.data.chan.ttemp_frm = 0;	// 5HZ
    81a0:	10 92 47 07 	sts	0x0747, r1
    81a4:	10 92 46 07 	sts	0x0746, r1
    sys.data.chan.ttemp_fro = 0;	// 5HZ
    81a8:	10 92 49 07 	sts	0x0749, r1
    81ac:	10 92 48 07 	sts	0x0748, r1
    sys.data.chan.ttemp_rli = 0;	// 5HZ
    81b0:	10 92 4b 07 	sts	0x074B, r1
    81b4:	10 92 4a 07 	sts	0x074A, r1
    sys.data.chan.ttemp_rlm = 0;	// 5HZ
    81b8:	10 92 4d 07 	sts	0x074D, r1
    81bc:	10 92 4c 07 	sts	0x074C, r1
    sys.data.chan.ttemp_rlo = 0;	// 5HZ
    81c0:	10 92 4f 07 	sts	0x074F, r1
    81c4:	10 92 4e 07 	sts	0x074E, r1
    sys.data.chan.ttemp_rri = 0;	// 5HZ
    81c8:	10 92 51 07 	sts	0x0751, r1
    81cc:	10 92 50 07 	sts	0x0750, r1
    sys.data.chan.ttemp_rrm = 0;	// 5HZ
    81d0:	10 92 53 07 	sts	0x0753, r1
    81d4:	10 92 52 07 	sts	0x0752, r1
    sys.data.chan.ttemp_rro = 0;	// 5HZ
    81d8:	10 92 55 07 	sts	0x0755, r1
    81dc:	10 92 54 07 	sts	0x0754, r1
    sys.data.chan.lat = 0;			// 5HZ
    81e0:	10 92 56 07 	sts	0x0756, r1
    81e4:	10 92 57 07 	sts	0x0757, r1
    81e8:	10 92 58 07 	sts	0x0758, r1
    81ec:	10 92 59 07 	sts	0x0759, r1
    sys.data.chan.lng = 0;			// 5HZ
    81f0:	10 92 5a 07 	sts	0x075A, r1
    81f4:	10 92 5b 07 	sts	0x075B, r1
    81f8:	10 92 5c 07 	sts	0x075C, r1
    81fc:	10 92 5d 07 	sts	0x075D, r1
    sys.data.chan.heading = 0;	// 5HZ
    8200:	10 92 5f 07 	sts	0x075F, r1
    8204:	10 92 5e 07 	sts	0x075E, r1
    sys.data.chan.speed = 0;		// 5HZ
    8208:	10 92 61 07 	sts	0x0761, r1
    820c:	10 92 60 07 	sts	0x0760, r1

    sys.data.chan.batt_volt = 0;			// 1HZ
    8210:	10 92 6c 07 	sts	0x076C, r1
    8214:	10 92 6b 07 	sts	0x076B, r1
    sys.data.chan.air_temp  = 0;			// 1HZ
    8218:	10 92 6e 07 	sts	0x076E, r1
    821c:	10 92 6d 07 	sts	0x076D, r1
    sys.data.chan.wtr_temp  = 0;			// 1HZ
    8220:	10 92 70 07 	sts	0x0770, r1
    8224:	10 92 6f 07 	sts	0x076F, r1
    sys.data.chan.oil_temp  = 0;			// 1HZ
    8228:	10 92 72 07 	sts	0x0772, r1
    822c:	10 92 71 07 	sts	0x0771, r1

	// Log info
	sys.data.prm.log_num = 0;				// Parameter
    8230:	10 92 7a 07 	sts	0x077A, r1
	sys.data.prm.driver = 0;		// Parameter
    8234:	10 92 7b 07 	sts	0x077B, r1
	sys.data.prm.date = 0;			// Parameter
    8238:	10 92 7c 07 	sts	0x077C, r1
	sys.data.prm.time = 0;
    823c:	10 92 7d 07 	sts	0x077D, r1
    8240:	10 92 7e 07 	sts	0x077E, r1
    8244:	10 92 7f 07 	sts	0x077F, r1
    8248:	10 92 80 07 	sts	0x0780, r1
	sys.data.prm.hmsphr = 0;
    824c:	10 92 81 07 	sts	0x0781, r1

	// ECU info
	sys.data.prm.ver_mjr = 0;		// Parameter
    8250:	10 92 82 07 	sts	0x0782, r1
	sys.data.prm.ver_min = 0;		// Parameter
    8254:	10 92 83 07 	sts	0x0783, r1
	sys.data.prm.ver_bld = 0;		// Parameter
    8258:	10 92 84 07 	sts	0x0784, r1
	sys.data.prm.temp_type = 0;		// Parameter
    825c:	10 92 85 07 	sts	0x0785, r1
	sys.data.prm.pres_type = 0;		// Parameter
    8260:	10 92 86 07 	sts	0x0786, r1

	// Traction Control Parameters
	sys.data.prm.fuel_kp  = 0;		// Parameter
    8264:	10 92 88 07 	sts	0x0788, r1
    8268:	10 92 87 07 	sts	0x0787, r1
	sys.data.prm.fuel_kd = 0;		// Parameter
    826c:	10 92 8a 07 	sts	0x078A, r1
    8270:	10 92 89 07 	sts	0x0789, r1
	sys.data.prm.fuel_ki = 0;		// Parameter
    8274:	10 92 8c 07 	sts	0x078C, r1
    8278:	10 92 8b 07 	sts	0x078B, r1
	sys.data.prm.timing_kp = 0;		// Parameter
    827c:	10 92 8e 07 	sts	0x078E, r1
    8280:	10 92 8d 07 	sts	0x078D, r1
	sys.data.prm.timing_kd = 0;		// Parameter
    8284:	10 92 90 07 	sts	0x0790, r1
    8288:	10 92 8f 07 	sts	0x078F, r1
	sys.data.prm.timing_ki = 0;		// Parameter
    828c:	10 92 92 07 	sts	0x0792, r1
    8290:	10 92 91 07 	sts	0x0791, r1
	sys.data.prm.tcs_slip_pct = 0;	// Parameter
    8294:	10 92 94 07 	sts	0x0794, r1
    8298:	10 92 93 07 	sts	0x0793, r1
	sys.data.prm.lnc_dsb_spd = 0;	// Parameter
    829c:	10 92 96 07 	sts	0x0796, r1
    82a0:	10 92 95 07 	sts	0x0795, r1

	// Accelerometer Parameters
	sys.data.prm.x_acl_comp = 0;		// Parameter
    82a4:	10 92 98 07 	sts	0x0798, r1
    82a8:	10 92 97 07 	sts	0x0797, r1
	sys.data.prm.y_acl_comp = 0;		// Parameter
    82ac:	10 92 9a 07 	sts	0x079A, r1
    82b0:	10 92 99 07 	sts	0x0799, r1
	sys.data.prm.z_acl_comp = 0;		// Parameter
    82b4:	10 92 9c 07 	sts	0x079C, r1
    82b8:	10 92 9b 07 	sts	0x079B, r1

	sys.data.chan.curr_tick = TCNT3;
    82bc:	80 91 94 00 	lds	r24, 0x0094
    82c0:	90 91 95 00 	lds	r25, 0x0095
    82c4:	90 93 07 07 	sts	0x0707, r25
    82c8:	80 93 06 07 	sts	0x0706, r24
	sys.data.chan.last_tick = sys.data.chan.curr_tick;
    82cc:	80 91 06 07 	lds	r24, 0x0706
    82d0:	90 91 07 07 	lds	r25, 0x0707
    82d4:	90 93 63 07 	sts	0x0763, r25
    82d8:	80 93 62 07 	sts	0x0762, r24

	if(fat_init()!=0)
    82dc:	0e 94 b8 3f 	call	0x7f70	; 0x7f70 <fat_init>
    82e0:	88 23       	and	r24, r24
    82e2:	19 f0       	breq	.+6      	; 0x82ea <init_log_system+0x2d2>
	{
		uart_puts_p(PSTR("FAT Error\n"));
    82e4:	84 e3       	ldi	r24, 0x34	; 52
    82e6:	91 e0       	ldi	r25, 0x01	; 1
    82e8:	0e c0       	rjmp	.+28     	; 0x8306 <init_log_system+0x2ee>
		return 0;
	}

    if(!fat_get_dir_entry_of_path(fsys,"/",&directory))
    82ea:	80 91 11 08 	lds	r24, 0x0811
    82ee:	90 91 12 08 	lds	r25, 0x0812
    82f2:	62 e3       	ldi	r22, 0x32	; 50
    82f4:	71 e0       	ldi	r23, 0x01	; 1
    82f6:	4b ea       	ldi	r20, 0xAB	; 171
    82f8:	57 e0       	ldi	r21, 0x07	; 7
    82fa:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fat_get_dir_entry_of_path>
    82fe:	88 23       	and	r24, r24
    8300:	31 f4       	brne	.+12     	; 0x830e <init_log_system+0x2f6>
    {
    	uart_puts_p(PSTR("Get path failed\n"));
    8302:	83 e2       	ldi	r24, 0x23	; 35
    8304:	91 e0       	ldi	r25, 0x01	; 1
    8306:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    830a:	80 e0       	ldi	r24, 0x00	; 0
    830c:	08 95       	ret
    	return 0;
    }

    dd = fat_open_dir(fsys, &directory);
    830e:	80 91 11 08 	lds	r24, 0x0811
    8312:	90 91 12 08 	lds	r25, 0x0812
    8316:	6b ea       	ldi	r22, 0xAB	; 171
    8318:	77 e0       	ldi	r23, 0x07	; 7
    831a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <fat_open_dir>
    831e:	90 93 10 08 	sts	0x0810, r25
    8322:	80 93 0f 08 	sts	0x080F, r24
    if(!dd)
    8326:	89 2b       	or	r24, r25
    8328:	29 f4       	brne	.+10     	; 0x8334 <init_log_system+0x31c>
    {
        uart_puts_p(PSTR("opening root directory failed\n"));
    832a:	84 e0       	ldi	r24, 0x04	; 4
    832c:	91 e0       	ldi	r25, 0x01	; 1
    832e:	0e 94 61 30 	call	0x60c2	; 0x60c2 <uart_puts_p>
    8332:	ff cf       	rjmp	.-2      	; 0x8332 <init_log_system+0x31a>
    8334:	81 e0       	ldi	r24, 0x01	; 1
        while(1);
    }

	return 1;
}
    8336:	08 95       	ret

00008338 <__vector_12>:
		handle_10ms_tick();
	}
}

ISR(TIMER1_COMPA_vect)
{
    8338:	1f 92       	push	r1
    833a:	0f 92       	push	r0
    833c:	0f b6       	in	r0, 0x3f	; 63
    833e:	0f 92       	push	r0
    8340:	0b b6       	in	r0, 0x3b	; 59
    8342:	0f 92       	push	r0
    8344:	11 24       	eor	r1, r1
    8346:	2f 93       	push	r18
    8348:	3f 93       	push	r19
    834a:	4f 93       	push	r20
    834c:	5f 93       	push	r21
    834e:	6f 93       	push	r22
    8350:	7f 93       	push	r23
    8352:	8f 93       	push	r24
    8354:	9f 93       	push	r25
    8356:	af 93       	push	r26
    8358:	bf 93       	push	r27
    835a:	ef 93       	push	r30
    835c:	ff 93       	push	r31
	OCR1A = 2500; // Reset Output compare to 10ms
    835e:	84 ec       	ldi	r24, 0xC4	; 196
    8360:	99 e0       	ldi	r25, 0x09	; 9
    8362:	90 93 89 00 	sts	0x0089, r25
    8366:	80 93 88 00 	sts	0x0088, r24
	systimer_10ms += 10;
    836a:	80 91 3c 04 	lds	r24, 0x043C
    836e:	90 91 3d 04 	lds	r25, 0x043D
    8372:	a0 91 3e 04 	lds	r26, 0x043E
    8376:	b0 91 3f 04 	lds	r27, 0x043F
    837a:	0a 96       	adiw	r24, 0x0a	; 10
    837c:	a1 1d       	adc	r26, r1
    837e:	b1 1d       	adc	r27, r1
    8380:	80 93 3c 04 	sts	0x043C, r24
    8384:	90 93 3d 04 	sts	0x043D, r25
    8388:	a0 93 3e 04 	sts	0x043E, r26
    838c:	b0 93 3f 04 	sts	0x043F, r27
	handle_10ms_tick(); // Call the tick handling function
    8390:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <handle_10ms_tick>
}
    8394:	ff 91       	pop	r31
    8396:	ef 91       	pop	r30
    8398:	bf 91       	pop	r27
    839a:	af 91       	pop	r26
    839c:	9f 91       	pop	r25
    839e:	8f 91       	pop	r24
    83a0:	7f 91       	pop	r23
    83a2:	6f 91       	pop	r22
    83a4:	5f 91       	pop	r21
    83a6:	4f 91       	pop	r20
    83a8:	3f 91       	pop	r19
    83aa:	2f 91       	pop	r18
    83ac:	0f 90       	pop	r0
    83ae:	0b be       	out	0x3b, r0	; 59
    83b0:	0f 90       	pop	r0
    83b2:	0f be       	out	0x3f, r0	; 63
    83b4:	0f 90       	pop	r0
    83b6:	1f 90       	pop	r1
    83b8:	18 95       	reti

000083ba <systimer_10ms_restart>:
#include "systimer.h"

uint32_t systimer_10ms = 0;

void systimer_10ms_restart(uint8_t offset)
{
    83ba:	28 2f       	mov	r18, r24
	//Clear counter
	TCNT1 = 0;
    83bc:	10 92 85 00 	sts	0x0085, r1
    83c0:	10 92 84 00 	sts	0x0084, r1
	// Set for slot delay (using OCRnB)
	if(offset != 0)
    83c4:	88 23       	and	r24, r24
    83c6:	29 f0       	breq	.+10     	; 0x83d2 <systimer_10ms_restart+0x18>
	{
		OCR1A = 250 * offset; //1ms*offset
    83c8:	8a ef       	ldi	r24, 0xFA	; 250
    83ca:	28 9f       	mul	r18, r24
    83cc:	c0 01       	movw	r24, r0
    83ce:	11 24       	eor	r1, r1
    83d0:	02 c0       	rjmp	.+4      	; 0x83d6 <systimer_10ms_restart+0x1c>
	}
	else
	{
		OCR1A = 2500;
    83d2:	84 ec       	ldi	r24, 0xC4	; 196
    83d4:	99 e0       	ldi	r25, 0x09	; 9
    83d6:	90 93 89 00 	sts	0x0089, r25
    83da:	80 93 88 00 	sts	0x0088, r24
	}
	TIMSK1 = _BV(OCIE1A);
    83de:	82 e0       	ldi	r24, 0x02	; 2
    83e0:	80 93 6f 00 	sts	0x006F, r24
	TCCR1B = 0x0B; // CTC mode and clk/64
    83e4:	8b e0       	ldi	r24, 0x0B	; 11
    83e6:	80 93 81 00 	sts	0x0081, r24

	if(offset == 0)
    83ea:	22 23       	and	r18, r18
    83ec:	a9 f4       	brne	.+42     	; 0x8418 <systimer_10ms_restart+0x5e>
	{
		systimer_10ms += 10;
    83ee:	80 91 3c 04 	lds	r24, 0x043C
    83f2:	90 91 3d 04 	lds	r25, 0x043D
    83f6:	a0 91 3e 04 	lds	r26, 0x043E
    83fa:	b0 91 3f 04 	lds	r27, 0x043F
    83fe:	0a 96       	adiw	r24, 0x0a	; 10
    8400:	a1 1d       	adc	r26, r1
    8402:	b1 1d       	adc	r27, r1
    8404:	80 93 3c 04 	sts	0x043C, r24
    8408:	90 93 3d 04 	sts	0x043D, r25
    840c:	a0 93 3e 04 	sts	0x043E, r26
    8410:	b0 93 3f 04 	sts	0x043F, r27
		handle_10ms_tick();
    8414:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <handle_10ms_tick>
    8418:	08 95       	ret

0000841a <__muldi3>:
    841a:	a0 e3       	ldi	r26, 0x30	; 48
    841c:	b0 e0       	ldi	r27, 0x00	; 0
    841e:	e3 e1       	ldi	r30, 0x13	; 19
    8420:	f2 e4       	ldi	r31, 0x42	; 66
    8422:	0c 94 6e 44 	jmp	0x88dc	; 0x88dc <__prologue_saves__>
    8426:	a8 e0       	ldi	r26, 0x08	; 8
    8428:	4e 01       	movw	r8, r28
    842a:	08 94       	sec
    842c:	81 1c       	adc	r8, r1
    842e:	91 1c       	adc	r9, r1
    8430:	f4 01       	movw	r30, r8
    8432:	ba 2f       	mov	r27, r26
    8434:	11 92       	st	Z+, r1
    8436:	ba 95       	dec	r27
    8438:	e9 f7       	brne	.-6      	; 0x8434 <__muldi3+0x1a>
    843a:	29 83       	std	Y+1, r18	; 0x01
    843c:	3a 83       	std	Y+2, r19	; 0x02
    843e:	4b 83       	std	Y+3, r20	; 0x03
    8440:	5c 83       	std	Y+4, r21	; 0x04
    8442:	6d 83       	std	Y+5, r22	; 0x05
    8444:	7e 83       	std	Y+6, r23	; 0x06
    8446:	8f 83       	std	Y+7, r24	; 0x07
    8448:	98 87       	std	Y+8, r25	; 0x08
    844a:	ce 01       	movw	r24, r28
    844c:	09 96       	adiw	r24, 0x09	; 9
    844e:	fc 01       	movw	r30, r24
    8450:	11 92       	st	Z+, r1
    8452:	aa 95       	dec	r26
    8454:	e9 f7       	brne	.-6      	; 0x8450 <__muldi3+0x36>
    8456:	a9 86       	std	Y+9, r10	; 0x09
    8458:	ba 86       	std	Y+10, r11	; 0x0a
    845a:	cb 86       	std	Y+11, r12	; 0x0b
    845c:	dc 86       	std	Y+12, r13	; 0x0c
    845e:	ed 86       	std	Y+13, r14	; 0x0d
    8460:	fe 86       	std	Y+14, r15	; 0x0e
    8462:	0f 87       	std	Y+15, r16	; 0x0f
    8464:	18 8b       	std	Y+16, r17	; 0x10
    8466:	29 81       	ldd	r18, Y+1	; 0x01
    8468:	3a 81       	ldd	r19, Y+2	; 0x02
    846a:	4b 81       	ldd	r20, Y+3	; 0x03
    846c:	5c 81       	ldd	r21, Y+4	; 0x04
    846e:	2d a7       	std	Y+45, r18	; 0x2d
    8470:	3e a7       	std	Y+46, r19	; 0x2e
    8472:	4f a7       	std	Y+47, r20	; 0x2f
    8474:	58 ab       	std	Y+48, r21	; 0x30
    8476:	79 01       	movw	r14, r18
    8478:	8a 01       	movw	r16, r20
    847a:	8f ef       	ldi	r24, 0xFF	; 255
    847c:	9f ef       	ldi	r25, 0xFF	; 255
    847e:	a0 e0       	ldi	r26, 0x00	; 0
    8480:	b0 e0       	ldi	r27, 0x00	; 0
    8482:	e8 22       	and	r14, r24
    8484:	f9 22       	and	r15, r25
    8486:	0a 23       	and	r16, r26
    8488:	1b 23       	and	r17, r27
    848a:	1a 01       	movw	r2, r20
    848c:	44 24       	eor	r4, r4
    848e:	55 24       	eor	r5, r5
    8490:	29 85       	ldd	r18, Y+9	; 0x09
    8492:	3a 85       	ldd	r19, Y+10	; 0x0a
    8494:	4b 85       	ldd	r20, Y+11	; 0x0b
    8496:	5c 85       	ldd	r21, Y+12	; 0x0c
    8498:	29 a7       	std	Y+41, r18	; 0x29
    849a:	3a a7       	std	Y+42, r19	; 0x2a
    849c:	4b a7       	std	Y+43, r20	; 0x2b
    849e:	5c a7       	std	Y+44, r21	; 0x2c
    84a0:	59 01       	movw	r10, r18
    84a2:	6a 01       	movw	r12, r20
    84a4:	a8 22       	and	r10, r24
    84a6:	b9 22       	and	r11, r25
    84a8:	ca 22       	and	r12, r26
    84aa:	db 22       	and	r13, r27
    84ac:	3a 01       	movw	r6, r20
    84ae:	88 24       	eor	r8, r8
    84b0:	99 24       	eor	r9, r9
    84b2:	c6 01       	movw	r24, r12
    84b4:	b5 01       	movw	r22, r10
    84b6:	a8 01       	movw	r20, r16
    84b8:	97 01       	movw	r18, r14
    84ba:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    84be:	6d a3       	std	Y+37, r22	; 0x25
    84c0:	7e a3       	std	Y+38, r23	; 0x26
    84c2:	8f a3       	std	Y+39, r24	; 0x27
    84c4:	98 a7       	std	Y+40, r25	; 0x28
    84c6:	c4 01       	movw	r24, r8
    84c8:	b3 01       	movw	r22, r6
    84ca:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    84ce:	69 a3       	std	Y+33, r22	; 0x21
    84d0:	7a a3       	std	Y+34, r23	; 0x22
    84d2:	8b a3       	std	Y+35, r24	; 0x23
    84d4:	9c a3       	std	Y+36, r25	; 0x24
    84d6:	c6 01       	movw	r24, r12
    84d8:	b5 01       	movw	r22, r10
    84da:	a2 01       	movw	r20, r4
    84dc:	91 01       	movw	r18, r2
    84de:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    84e2:	7b 01       	movw	r14, r22
    84e4:	8c 01       	movw	r16, r24
    84e6:	c4 01       	movw	r24, r8
    84e8:	b3 01       	movw	r22, r6
    84ea:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    84ee:	5b 01       	movw	r10, r22
    84f0:	6c 01       	movw	r12, r24
    84f2:	89 a1       	ldd	r24, Y+33	; 0x21
    84f4:	9a a1       	ldd	r25, Y+34	; 0x22
    84f6:	ab a1       	ldd	r26, Y+35	; 0x23
    84f8:	bc a1       	ldd	r27, Y+36	; 0x24
    84fa:	8e 0d       	add	r24, r14
    84fc:	9f 1d       	adc	r25, r15
    84fe:	a0 1f       	adc	r26, r16
    8500:	b1 1f       	adc	r27, r17
    8502:	89 a3       	std	Y+33, r24	; 0x21
    8504:	9a a3       	std	Y+34, r25	; 0x22
    8506:	ab a3       	std	Y+35, r26	; 0x23
    8508:	bc a3       	std	Y+36, r27	; 0x24
    850a:	2d a1       	ldd	r18, Y+37	; 0x25
    850c:	3e a1       	ldd	r19, Y+38	; 0x26
    850e:	4f a1       	ldd	r20, Y+39	; 0x27
    8510:	58 a5       	ldd	r21, Y+40	; 0x28
    8512:	ca 01       	movw	r24, r20
    8514:	aa 27       	eor	r26, r26
    8516:	bb 27       	eor	r27, r27
    8518:	29 a1       	ldd	r18, Y+33	; 0x21
    851a:	3a a1       	ldd	r19, Y+34	; 0x22
    851c:	4b a1       	ldd	r20, Y+35	; 0x23
    851e:	5c a1       	ldd	r21, Y+36	; 0x24
    8520:	28 0f       	add	r18, r24
    8522:	39 1f       	adc	r19, r25
    8524:	4a 1f       	adc	r20, r26
    8526:	5b 1f       	adc	r21, r27
    8528:	29 a3       	std	Y+33, r18	; 0x21
    852a:	3a a3       	std	Y+34, r19	; 0x22
    852c:	4b a3       	std	Y+35, r20	; 0x23
    852e:	5c a3       	std	Y+36, r21	; 0x24
    8530:	2e 15       	cp	r18, r14
    8532:	3f 05       	cpc	r19, r15
    8534:	40 07       	cpc	r20, r16
    8536:	51 07       	cpc	r21, r17
    8538:	40 f4       	brcc	.+16     	; 0x854a <__muldi3+0x130>
    853a:	80 e0       	ldi	r24, 0x00	; 0
    853c:	90 e0       	ldi	r25, 0x00	; 0
    853e:	a1 e0       	ldi	r26, 0x01	; 1
    8540:	b0 e0       	ldi	r27, 0x00	; 0
    8542:	a8 0e       	add	r10, r24
    8544:	b9 1e       	adc	r11, r25
    8546:	ca 1e       	adc	r12, r26
    8548:	db 1e       	adc	r13, r27
    854a:	89 a1       	ldd	r24, Y+33	; 0x21
    854c:	9a a1       	ldd	r25, Y+34	; 0x22
    854e:	ab a1       	ldd	r26, Y+35	; 0x23
    8550:	bc a1       	ldd	r27, Y+36	; 0x24
    8552:	9d 01       	movw	r18, r26
    8554:	44 27       	eor	r20, r20
    8556:	55 27       	eor	r21, r21
    8558:	2a 0d       	add	r18, r10
    855a:	3b 1d       	adc	r19, r11
    855c:	4c 1d       	adc	r20, r12
    855e:	5d 1d       	adc	r21, r13
    8560:	2d 8f       	std	Y+29, r18	; 0x1d
    8562:	3e 8f       	std	Y+30, r19	; 0x1e
    8564:	4f 8f       	std	Y+31, r20	; 0x1f
    8566:	58 a3       	std	Y+32, r21	; 0x20
    8568:	6c 01       	movw	r12, r24
    856a:	bb 24       	eor	r11, r11
    856c:	aa 24       	eor	r10, r10
    856e:	8d a1       	ldd	r24, Y+37	; 0x25
    8570:	9e a1       	ldd	r25, Y+38	; 0x26
    8572:	af a1       	ldd	r26, Y+39	; 0x27
    8574:	b8 a5       	ldd	r27, Y+40	; 0x28
    8576:	a0 70       	andi	r26, 0x00	; 0
    8578:	b0 70       	andi	r27, 0x00	; 0
    857a:	a8 0e       	add	r10, r24
    857c:	b9 1e       	adc	r11, r25
    857e:	ca 1e       	adc	r12, r26
    8580:	db 1e       	adc	r13, r27
    8582:	a9 8e       	std	Y+25, r10	; 0x19
    8584:	ba 8e       	std	Y+26, r11	; 0x1a
    8586:	cb 8e       	std	Y+27, r12	; 0x1b
    8588:	dc 8e       	std	Y+28, r13	; 0x1c
    858a:	9a 8c       	ldd	r9, Y+26	; 0x1a
    858c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    858e:	7c 8c       	ldd	r7, Y+28	; 0x1c
    8590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8592:	6f 8d       	ldd	r22, Y+31	; 0x1f
    8594:	78 a1       	ldd	r23, Y+32	; 0x20
    8596:	fe 01       	movw	r30, r28
    8598:	71 96       	adiw	r30, 0x11	; 17
    859a:	88 e0       	ldi	r24, 0x08	; 8
    859c:	df 01       	movw	r26, r30
    859e:	1d 92       	st	X+, r1
    85a0:	8a 95       	dec	r24
    85a2:	e9 f7       	brne	.-6      	; 0x859e <__muldi3+0x184>
    85a4:	2d 8b       	std	Y+21, r18	; 0x15
    85a6:	9e 8b       	std	Y+22, r25	; 0x16
    85a8:	6f 8b       	std	Y+23, r22	; 0x17
    85aa:	78 8f       	std	Y+24, r23	; 0x18
    85ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    85ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    85b0:	4f 85       	ldd	r20, Y+15	; 0x0f
    85b2:	58 89       	ldd	r21, Y+16	; 0x10
    85b4:	6d a5       	ldd	r22, Y+45	; 0x2d
    85b6:	7e a5       	ldd	r23, Y+46	; 0x2e
    85b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    85ba:	98 a9       	ldd	r25, Y+48	; 0x30
    85bc:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    85c0:	7b 01       	movw	r14, r22
    85c2:	8c 01       	movw	r16, r24
    85c4:	2d 81       	ldd	r18, Y+5	; 0x05
    85c6:	3e 81       	ldd	r19, Y+6	; 0x06
    85c8:	4f 81       	ldd	r20, Y+7	; 0x07
    85ca:	58 85       	ldd	r21, Y+8	; 0x08
    85cc:	69 a5       	ldd	r22, Y+41	; 0x29
    85ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    85d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    85d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    85d4:	0e 94 06 44 	call	0x880c	; 0x880c <__mulsi3>
    85d8:	e6 0e       	add	r14, r22
    85da:	f7 1e       	adc	r15, r23
    85dc:	08 1f       	adc	r16, r24
    85de:	19 1f       	adc	r17, r25
    85e0:	6d 89       	ldd	r22, Y+21	; 0x15
    85e2:	7e 89       	ldd	r23, Y+22	; 0x16
    85e4:	8f 89       	ldd	r24, Y+23	; 0x17
    85e6:	98 8d       	ldd	r25, Y+24	; 0x18
    85e8:	6e 0d       	add	r22, r14
    85ea:	7f 1d       	adc	r23, r15
    85ec:	80 1f       	adc	r24, r16
    85ee:	91 1f       	adc	r25, r17
    85f0:	6d 8b       	std	Y+21, r22	; 0x15
    85f2:	7e 8b       	std	Y+22, r23	; 0x16
    85f4:	8f 8b       	std	Y+23, r24	; 0x17
    85f6:	98 8f       	std	Y+24, r25	; 0x18
    85f8:	ee 89       	ldd	r30, Y+22	; 0x16
    85fa:	2a 2d       	mov	r18, r10
    85fc:	39 2d       	mov	r19, r9
    85fe:	48 2d       	mov	r20, r8
    8600:	57 2d       	mov	r21, r7
    8602:	7e 2f       	mov	r23, r30
    8604:	8f 89       	ldd	r24, Y+23	; 0x17
    8606:	98 8d       	ldd	r25, Y+24	; 0x18
    8608:	e0 96       	adiw	r28, 0x30	; 48
    860a:	e2 e1       	ldi	r30, 0x12	; 18
    860c:	0c 94 8a 44 	jmp	0x8914	; 0x8914 <__epilogue_restores__>

00008610 <__lshrdi3>:
    8610:	ef 92       	push	r14
    8612:	ff 92       	push	r15
    8614:	0f 93       	push	r16
    8616:	df 93       	push	r29
    8618:	cf 93       	push	r28
    861a:	cd b7       	in	r28, 0x3d	; 61
    861c:	de b7       	in	r29, 0x3e	; 62
    861e:	60 97       	sbiw	r28, 0x10	; 16
    8620:	0f b6       	in	r0, 0x3f	; 63
    8622:	f8 94       	cli
    8624:	de bf       	out	0x3e, r29	; 62
    8626:	0f be       	out	0x3f, r0	; 63
    8628:	cd bf       	out	0x3d, r28	; 61
    862a:	a8 2f       	mov	r26, r24
    862c:	00 23       	and	r16, r16
    862e:	09 f4       	brne	.+2      	; 0x8632 <__lshrdi3+0x22>
    8630:	61 c0       	rjmp	.+194    	; 0x86f4 <__lshrdi3+0xe4>
    8632:	7e 01       	movw	r14, r28
    8634:	08 94       	sec
    8636:	e1 1c       	adc	r14, r1
    8638:	f1 1c       	adc	r15, r1
    863a:	88 e0       	ldi	r24, 0x08	; 8
    863c:	f7 01       	movw	r30, r14
    863e:	11 92       	st	Z+, r1
    8640:	8a 95       	dec	r24
    8642:	e9 f7       	brne	.-6      	; 0x863e <__lshrdi3+0x2e>
    8644:	29 83       	std	Y+1, r18	; 0x01
    8646:	3a 83       	std	Y+2, r19	; 0x02
    8648:	4b 83       	std	Y+3, r20	; 0x03
    864a:	5c 83       	std	Y+4, r21	; 0x04
    864c:	6d 83       	std	Y+5, r22	; 0x05
    864e:	7e 83       	std	Y+6, r23	; 0x06
    8650:	af 83       	std	Y+7, r26	; 0x07
    8652:	98 87       	std	Y+8, r25	; 0x08
    8654:	80 e2       	ldi	r24, 0x20	; 32
    8656:	80 1b       	sub	r24, r16
    8658:	e8 2f       	mov	r30, r24
    865a:	ff 27       	eor	r31, r31
    865c:	e7 fd       	sbrc	r30, 7
    865e:	f0 95       	com	r31
    8660:	4d 81       	ldd	r20, Y+5	; 0x05
    8662:	5e 81       	ldd	r21, Y+6	; 0x06
    8664:	6f 81       	ldd	r22, Y+7	; 0x07
    8666:	78 85       	ldd	r23, Y+8	; 0x08
    8668:	18 16       	cp	r1, r24
    866a:	84 f0       	brlt	.+32     	; 0x868c <__lshrdi3+0x7c>
    866c:	1d 86       	std	Y+13, r1	; 0x0d
    866e:	1e 86       	std	Y+14, r1	; 0x0e
    8670:	1f 86       	std	Y+15, r1	; 0x0f
    8672:	18 8a       	std	Y+16, r1	; 0x10
    8674:	88 27       	eor	r24, r24
    8676:	99 27       	eor	r25, r25
    8678:	8e 1b       	sub	r24, r30
    867a:	9f 0b       	sbc	r25, r31
    867c:	04 c0       	rjmp	.+8      	; 0x8686 <__lshrdi3+0x76>
    867e:	76 95       	lsr	r23
    8680:	67 95       	ror	r22
    8682:	57 95       	ror	r21
    8684:	47 95       	ror	r20
    8686:	8a 95       	dec	r24
    8688:	d2 f7       	brpl	.-12     	; 0x867e <__lshrdi3+0x6e>
    868a:	28 c0       	rjmp	.+80     	; 0x86dc <__lshrdi3+0xcc>
    868c:	20 2f       	mov	r18, r16
    868e:	33 27       	eor	r19, r19
    8690:	27 fd       	sbrc	r18, 7
    8692:	30 95       	com	r19
    8694:	db 01       	movw	r26, r22
    8696:	ca 01       	movw	r24, r20
    8698:	02 2e       	mov	r0, r18
    869a:	04 c0       	rjmp	.+8      	; 0x86a4 <__lshrdi3+0x94>
    869c:	b6 95       	lsr	r27
    869e:	a7 95       	ror	r26
    86a0:	97 95       	ror	r25
    86a2:	87 95       	ror	r24
    86a4:	0a 94       	dec	r0
    86a6:	d2 f7       	brpl	.-12     	; 0x869c <__lshrdi3+0x8c>
    86a8:	8d 87       	std	Y+13, r24	; 0x0d
    86aa:	9e 87       	std	Y+14, r25	; 0x0e
    86ac:	af 87       	std	Y+15, r26	; 0x0f
    86ae:	b8 8b       	std	Y+16, r27	; 0x10
    86b0:	04 c0       	rjmp	.+8      	; 0x86ba <__lshrdi3+0xaa>
    86b2:	44 0f       	add	r20, r20
    86b4:	55 1f       	adc	r21, r21
    86b6:	66 1f       	adc	r22, r22
    86b8:	77 1f       	adc	r23, r23
    86ba:	ea 95       	dec	r30
    86bc:	d2 f7       	brpl	.-12     	; 0x86b2 <__lshrdi3+0xa2>
    86be:	89 81       	ldd	r24, Y+1	; 0x01
    86c0:	9a 81       	ldd	r25, Y+2	; 0x02
    86c2:	ab 81       	ldd	r26, Y+3	; 0x03
    86c4:	bc 81       	ldd	r27, Y+4	; 0x04
    86c6:	04 c0       	rjmp	.+8      	; 0x86d0 <__lshrdi3+0xc0>
    86c8:	b6 95       	lsr	r27
    86ca:	a7 95       	ror	r26
    86cc:	97 95       	ror	r25
    86ce:	87 95       	ror	r24
    86d0:	2a 95       	dec	r18
    86d2:	d2 f7       	brpl	.-12     	; 0x86c8 <__lshrdi3+0xb8>
    86d4:	48 2b       	or	r20, r24
    86d6:	59 2b       	or	r21, r25
    86d8:	6a 2b       	or	r22, r26
    86da:	7b 2b       	or	r23, r27
    86dc:	49 87       	std	Y+9, r20	; 0x09
    86de:	5a 87       	std	Y+10, r21	; 0x0a
    86e0:	6b 87       	std	Y+11, r22	; 0x0b
    86e2:	7c 87       	std	Y+12, r23	; 0x0c
    86e4:	29 85       	ldd	r18, Y+9	; 0x09
    86e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    86e8:	4b 85       	ldd	r20, Y+11	; 0x0b
    86ea:	5c 85       	ldd	r21, Y+12	; 0x0c
    86ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    86ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    86f0:	af 85       	ldd	r26, Y+15	; 0x0f
    86f2:	98 89       	ldd	r25, Y+16	; 0x10
    86f4:	8a 2f       	mov	r24, r26
    86f6:	60 96       	adiw	r28, 0x10	; 16
    86f8:	0f b6       	in	r0, 0x3f	; 63
    86fa:	f8 94       	cli
    86fc:	de bf       	out	0x3e, r29	; 62
    86fe:	0f be       	out	0x3f, r0	; 63
    8700:	cd bf       	out	0x3d, r28	; 61
    8702:	cf 91       	pop	r28
    8704:	df 91       	pop	r29
    8706:	0f 91       	pop	r16
    8708:	ff 90       	pop	r15
    870a:	ef 90       	pop	r14
    870c:	08 95       	ret

0000870e <__ashldi3>:
    870e:	ef 92       	push	r14
    8710:	ff 92       	push	r15
    8712:	0f 93       	push	r16
    8714:	df 93       	push	r29
    8716:	cf 93       	push	r28
    8718:	cd b7       	in	r28, 0x3d	; 61
    871a:	de b7       	in	r29, 0x3e	; 62
    871c:	60 97       	sbiw	r28, 0x10	; 16
    871e:	0f b6       	in	r0, 0x3f	; 63
    8720:	f8 94       	cli
    8722:	de bf       	out	0x3e, r29	; 62
    8724:	0f be       	out	0x3f, r0	; 63
    8726:	cd bf       	out	0x3d, r28	; 61
    8728:	a8 2f       	mov	r26, r24
    872a:	00 23       	and	r16, r16
    872c:	09 f4       	brne	.+2      	; 0x8730 <__ashldi3+0x22>
    872e:	61 c0       	rjmp	.+194    	; 0x87f2 <__ashldi3+0xe4>
    8730:	7e 01       	movw	r14, r28
    8732:	08 94       	sec
    8734:	e1 1c       	adc	r14, r1
    8736:	f1 1c       	adc	r15, r1
    8738:	88 e0       	ldi	r24, 0x08	; 8
    873a:	f7 01       	movw	r30, r14
    873c:	11 92       	st	Z+, r1
    873e:	8a 95       	dec	r24
    8740:	e9 f7       	brne	.-6      	; 0x873c <__ashldi3+0x2e>
    8742:	29 83       	std	Y+1, r18	; 0x01
    8744:	3a 83       	std	Y+2, r19	; 0x02
    8746:	4b 83       	std	Y+3, r20	; 0x03
    8748:	5c 83       	std	Y+4, r21	; 0x04
    874a:	6d 83       	std	Y+5, r22	; 0x05
    874c:	7e 83       	std	Y+6, r23	; 0x06
    874e:	af 83       	std	Y+7, r26	; 0x07
    8750:	98 87       	std	Y+8, r25	; 0x08
    8752:	80 e2       	ldi	r24, 0x20	; 32
    8754:	80 1b       	sub	r24, r16
    8756:	e8 2f       	mov	r30, r24
    8758:	ff 27       	eor	r31, r31
    875a:	e7 fd       	sbrc	r30, 7
    875c:	f0 95       	com	r31
    875e:	49 81       	ldd	r20, Y+1	; 0x01
    8760:	5a 81       	ldd	r21, Y+2	; 0x02
    8762:	6b 81       	ldd	r22, Y+3	; 0x03
    8764:	7c 81       	ldd	r23, Y+4	; 0x04
    8766:	18 16       	cp	r1, r24
    8768:	84 f0       	brlt	.+32     	; 0x878a <__ashldi3+0x7c>
    876a:	19 86       	std	Y+9, r1	; 0x09
    876c:	1a 86       	std	Y+10, r1	; 0x0a
    876e:	1b 86       	std	Y+11, r1	; 0x0b
    8770:	1c 86       	std	Y+12, r1	; 0x0c
    8772:	88 27       	eor	r24, r24
    8774:	99 27       	eor	r25, r25
    8776:	8e 1b       	sub	r24, r30
    8778:	9f 0b       	sbc	r25, r31
    877a:	04 c0       	rjmp	.+8      	; 0x8784 <__ashldi3+0x76>
    877c:	44 0f       	add	r20, r20
    877e:	55 1f       	adc	r21, r21
    8780:	66 1f       	adc	r22, r22
    8782:	77 1f       	adc	r23, r23
    8784:	8a 95       	dec	r24
    8786:	d2 f7       	brpl	.-12     	; 0x877c <__ashldi3+0x6e>
    8788:	28 c0       	rjmp	.+80     	; 0x87da <__ashldi3+0xcc>
    878a:	20 2f       	mov	r18, r16
    878c:	33 27       	eor	r19, r19
    878e:	27 fd       	sbrc	r18, 7
    8790:	30 95       	com	r19
    8792:	db 01       	movw	r26, r22
    8794:	ca 01       	movw	r24, r20
    8796:	02 2e       	mov	r0, r18
    8798:	04 c0       	rjmp	.+8      	; 0x87a2 <__ashldi3+0x94>
    879a:	88 0f       	add	r24, r24
    879c:	99 1f       	adc	r25, r25
    879e:	aa 1f       	adc	r26, r26
    87a0:	bb 1f       	adc	r27, r27
    87a2:	0a 94       	dec	r0
    87a4:	d2 f7       	brpl	.-12     	; 0x879a <__ashldi3+0x8c>
    87a6:	89 87       	std	Y+9, r24	; 0x09
    87a8:	9a 87       	std	Y+10, r25	; 0x0a
    87aa:	ab 87       	std	Y+11, r26	; 0x0b
    87ac:	bc 87       	std	Y+12, r27	; 0x0c
    87ae:	04 c0       	rjmp	.+8      	; 0x87b8 <__ashldi3+0xaa>
    87b0:	76 95       	lsr	r23
    87b2:	67 95       	ror	r22
    87b4:	57 95       	ror	r21
    87b6:	47 95       	ror	r20
    87b8:	ea 95       	dec	r30
    87ba:	d2 f7       	brpl	.-12     	; 0x87b0 <__ashldi3+0xa2>
    87bc:	8d 81       	ldd	r24, Y+5	; 0x05
    87be:	9e 81       	ldd	r25, Y+6	; 0x06
    87c0:	af 81       	ldd	r26, Y+7	; 0x07
    87c2:	b8 85       	ldd	r27, Y+8	; 0x08
    87c4:	04 c0       	rjmp	.+8      	; 0x87ce <__ashldi3+0xc0>
    87c6:	88 0f       	add	r24, r24
    87c8:	99 1f       	adc	r25, r25
    87ca:	aa 1f       	adc	r26, r26
    87cc:	bb 1f       	adc	r27, r27
    87ce:	2a 95       	dec	r18
    87d0:	d2 f7       	brpl	.-12     	; 0x87c6 <__ashldi3+0xb8>
    87d2:	48 2b       	or	r20, r24
    87d4:	59 2b       	or	r21, r25
    87d6:	6a 2b       	or	r22, r26
    87d8:	7b 2b       	or	r23, r27
    87da:	4d 87       	std	Y+13, r20	; 0x0d
    87dc:	5e 87       	std	Y+14, r21	; 0x0e
    87de:	6f 87       	std	Y+15, r22	; 0x0f
    87e0:	78 8b       	std	Y+16, r23	; 0x10
    87e2:	29 85       	ldd	r18, Y+9	; 0x09
    87e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    87e6:	4b 85       	ldd	r20, Y+11	; 0x0b
    87e8:	5c 85       	ldd	r21, Y+12	; 0x0c
    87ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    87ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    87ee:	af 85       	ldd	r26, Y+15	; 0x0f
    87f0:	98 89       	ldd	r25, Y+16	; 0x10
    87f2:	8a 2f       	mov	r24, r26
    87f4:	60 96       	adiw	r28, 0x10	; 16
    87f6:	0f b6       	in	r0, 0x3f	; 63
    87f8:	f8 94       	cli
    87fa:	de bf       	out	0x3e, r29	; 62
    87fc:	0f be       	out	0x3f, r0	; 63
    87fe:	cd bf       	out	0x3d, r28	; 61
    8800:	cf 91       	pop	r28
    8802:	df 91       	pop	r29
    8804:	0f 91       	pop	r16
    8806:	ff 90       	pop	r15
    8808:	ef 90       	pop	r14
    880a:	08 95       	ret

0000880c <__mulsi3>:
    880c:	62 9f       	mul	r22, r18
    880e:	d0 01       	movw	r26, r0
    8810:	73 9f       	mul	r23, r19
    8812:	f0 01       	movw	r30, r0
    8814:	82 9f       	mul	r24, r18
    8816:	e0 0d       	add	r30, r0
    8818:	f1 1d       	adc	r31, r1
    881a:	64 9f       	mul	r22, r20
    881c:	e0 0d       	add	r30, r0
    881e:	f1 1d       	adc	r31, r1
    8820:	92 9f       	mul	r25, r18
    8822:	f0 0d       	add	r31, r0
    8824:	83 9f       	mul	r24, r19
    8826:	f0 0d       	add	r31, r0
    8828:	74 9f       	mul	r23, r20
    882a:	f0 0d       	add	r31, r0
    882c:	65 9f       	mul	r22, r21
    882e:	f0 0d       	add	r31, r0
    8830:	99 27       	eor	r25, r25
    8832:	72 9f       	mul	r23, r18
    8834:	b0 0d       	add	r27, r0
    8836:	e1 1d       	adc	r30, r1
    8838:	f9 1f       	adc	r31, r25
    883a:	63 9f       	mul	r22, r19
    883c:	b0 0d       	add	r27, r0
    883e:	e1 1d       	adc	r30, r1
    8840:	f9 1f       	adc	r31, r25
    8842:	bd 01       	movw	r22, r26
    8844:	cf 01       	movw	r24, r30
    8846:	11 24       	eor	r1, r1
    8848:	08 95       	ret

0000884a <__udivmodhi4>:
    884a:	aa 1b       	sub	r26, r26
    884c:	bb 1b       	sub	r27, r27
    884e:	51 e1       	ldi	r21, 0x11	; 17
    8850:	07 c0       	rjmp	.+14     	; 0x8860 <__udivmodhi4_ep>

00008852 <__udivmodhi4_loop>:
    8852:	aa 1f       	adc	r26, r26
    8854:	bb 1f       	adc	r27, r27
    8856:	a6 17       	cp	r26, r22
    8858:	b7 07       	cpc	r27, r23
    885a:	10 f0       	brcs	.+4      	; 0x8860 <__udivmodhi4_ep>
    885c:	a6 1b       	sub	r26, r22
    885e:	b7 0b       	sbc	r27, r23

00008860 <__udivmodhi4_ep>:
    8860:	88 1f       	adc	r24, r24
    8862:	99 1f       	adc	r25, r25
    8864:	5a 95       	dec	r21
    8866:	a9 f7       	brne	.-22     	; 0x8852 <__udivmodhi4_loop>
    8868:	80 95       	com	r24
    886a:	90 95       	com	r25
    886c:	bc 01       	movw	r22, r24
    886e:	cd 01       	movw	r24, r26
    8870:	08 95       	ret

00008872 <__divmodhi4>:
    8872:	97 fb       	bst	r25, 7
    8874:	09 2e       	mov	r0, r25
    8876:	07 26       	eor	r0, r23
    8878:	0a d0       	rcall	.+20     	; 0x888e <__divmodhi4_neg1>
    887a:	77 fd       	sbrc	r23, 7
    887c:	04 d0       	rcall	.+8      	; 0x8886 <__divmodhi4_neg2>
    887e:	e5 df       	rcall	.-54     	; 0x884a <__udivmodhi4>
    8880:	06 d0       	rcall	.+12     	; 0x888e <__divmodhi4_neg1>
    8882:	00 20       	and	r0, r0
    8884:	1a f4       	brpl	.+6      	; 0x888c <__divmodhi4_exit>

00008886 <__divmodhi4_neg2>:
    8886:	70 95       	com	r23
    8888:	61 95       	neg	r22
    888a:	7f 4f       	sbci	r23, 0xFF	; 255

0000888c <__divmodhi4_exit>:
    888c:	08 95       	ret

0000888e <__divmodhi4_neg1>:
    888e:	f6 f7       	brtc	.-4      	; 0x888c <__divmodhi4_exit>
    8890:	90 95       	com	r25
    8892:	81 95       	neg	r24
    8894:	9f 4f       	sbci	r25, 0xFF	; 255
    8896:	08 95       	ret

00008898 <__udivmodsi4>:
    8898:	a1 e2       	ldi	r26, 0x21	; 33
    889a:	1a 2e       	mov	r1, r26
    889c:	aa 1b       	sub	r26, r26
    889e:	bb 1b       	sub	r27, r27
    88a0:	fd 01       	movw	r30, r26
    88a2:	0d c0       	rjmp	.+26     	; 0x88be <__udivmodsi4_ep>

000088a4 <__udivmodsi4_loop>:
    88a4:	aa 1f       	adc	r26, r26
    88a6:	bb 1f       	adc	r27, r27
    88a8:	ee 1f       	adc	r30, r30
    88aa:	ff 1f       	adc	r31, r31
    88ac:	a2 17       	cp	r26, r18
    88ae:	b3 07       	cpc	r27, r19
    88b0:	e4 07       	cpc	r30, r20
    88b2:	f5 07       	cpc	r31, r21
    88b4:	20 f0       	brcs	.+8      	; 0x88be <__udivmodsi4_ep>
    88b6:	a2 1b       	sub	r26, r18
    88b8:	b3 0b       	sbc	r27, r19
    88ba:	e4 0b       	sbc	r30, r20
    88bc:	f5 0b       	sbc	r31, r21

000088be <__udivmodsi4_ep>:
    88be:	66 1f       	adc	r22, r22
    88c0:	77 1f       	adc	r23, r23
    88c2:	88 1f       	adc	r24, r24
    88c4:	99 1f       	adc	r25, r25
    88c6:	1a 94       	dec	r1
    88c8:	69 f7       	brne	.-38     	; 0x88a4 <__udivmodsi4_loop>
    88ca:	60 95       	com	r22
    88cc:	70 95       	com	r23
    88ce:	80 95       	com	r24
    88d0:	90 95       	com	r25
    88d2:	9b 01       	movw	r18, r22
    88d4:	ac 01       	movw	r20, r24
    88d6:	bd 01       	movw	r22, r26
    88d8:	cf 01       	movw	r24, r30
    88da:	08 95       	ret

000088dc <__prologue_saves__>:
    88dc:	2f 92       	push	r2
    88de:	3f 92       	push	r3
    88e0:	4f 92       	push	r4
    88e2:	5f 92       	push	r5
    88e4:	6f 92       	push	r6
    88e6:	7f 92       	push	r7
    88e8:	8f 92       	push	r8
    88ea:	9f 92       	push	r9
    88ec:	af 92       	push	r10
    88ee:	bf 92       	push	r11
    88f0:	cf 92       	push	r12
    88f2:	df 92       	push	r13
    88f4:	ef 92       	push	r14
    88f6:	ff 92       	push	r15
    88f8:	0f 93       	push	r16
    88fa:	1f 93       	push	r17
    88fc:	cf 93       	push	r28
    88fe:	df 93       	push	r29
    8900:	cd b7       	in	r28, 0x3d	; 61
    8902:	de b7       	in	r29, 0x3e	; 62
    8904:	ca 1b       	sub	r28, r26
    8906:	db 0b       	sbc	r29, r27
    8908:	0f b6       	in	r0, 0x3f	; 63
    890a:	f8 94       	cli
    890c:	de bf       	out	0x3e, r29	; 62
    890e:	0f be       	out	0x3f, r0	; 63
    8910:	cd bf       	out	0x3d, r28	; 61
    8912:	09 94       	ijmp

00008914 <__epilogue_restores__>:
    8914:	2a 88       	ldd	r2, Y+18	; 0x12
    8916:	39 88       	ldd	r3, Y+17	; 0x11
    8918:	48 88       	ldd	r4, Y+16	; 0x10
    891a:	5f 84       	ldd	r5, Y+15	; 0x0f
    891c:	6e 84       	ldd	r6, Y+14	; 0x0e
    891e:	7d 84       	ldd	r7, Y+13	; 0x0d
    8920:	8c 84       	ldd	r8, Y+12	; 0x0c
    8922:	9b 84       	ldd	r9, Y+11	; 0x0b
    8924:	aa 84       	ldd	r10, Y+10	; 0x0a
    8926:	b9 84       	ldd	r11, Y+9	; 0x09
    8928:	c8 84       	ldd	r12, Y+8	; 0x08
    892a:	df 80       	ldd	r13, Y+7	; 0x07
    892c:	ee 80       	ldd	r14, Y+6	; 0x06
    892e:	fd 80       	ldd	r15, Y+5	; 0x05
    8930:	0c 81       	ldd	r16, Y+4	; 0x04
    8932:	1b 81       	ldd	r17, Y+3	; 0x03
    8934:	aa 81       	ldd	r26, Y+2	; 0x02
    8936:	b9 81       	ldd	r27, Y+1	; 0x01
    8938:	ce 0f       	add	r28, r30
    893a:	d1 1d       	adc	r29, r1
    893c:	0f b6       	in	r0, 0x3f	; 63
    893e:	f8 94       	cli
    8940:	de bf       	out	0x3e, r29	; 62
    8942:	0f be       	out	0x3f, r0	; 63
    8944:	cd bf       	out	0x3d, r28	; 61
    8946:	ed 01       	movw	r28, r26
    8948:	08 95       	ret

0000894a <atoi>:
    894a:	fc 01       	movw	r30, r24
    894c:	88 27       	eor	r24, r24
    894e:	99 27       	eor	r25, r25
    8950:	e8 94       	clt
    8952:	21 91       	ld	r18, Z+
    8954:	20 32       	cpi	r18, 0x20	; 32
    8956:	e9 f3       	breq	.-6      	; 0x8952 <atoi+0x8>
    8958:	29 30       	cpi	r18, 0x09	; 9
    895a:	10 f0       	brcs	.+4      	; 0x8960 <atoi+0x16>
    895c:	2e 30       	cpi	r18, 0x0E	; 14
    895e:	c8 f3       	brcs	.-14     	; 0x8952 <atoi+0x8>
    8960:	2b 32       	cpi	r18, 0x2B	; 43
    8962:	41 f0       	breq	.+16     	; 0x8974 <atoi+0x2a>
    8964:	2d 32       	cpi	r18, 0x2D	; 45
    8966:	39 f4       	brne	.+14     	; 0x8976 <atoi+0x2c>
    8968:	68 94       	set
    896a:	04 c0       	rjmp	.+8      	; 0x8974 <atoi+0x2a>
    896c:	0e 94 4b 45 	call	0x8a96	; 0x8a96 <__mulhi_const_10>
    8970:	82 0f       	add	r24, r18
    8972:	91 1d       	adc	r25, r1
    8974:	21 91       	ld	r18, Z+
    8976:	20 53       	subi	r18, 0x30	; 48
    8978:	2a 30       	cpi	r18, 0x0A	; 10
    897a:	c0 f3       	brcs	.-16     	; 0x896c <atoi+0x22>
    897c:	1e f4       	brtc	.+6      	; 0x8984 <atoi+0x3a>
    897e:	90 95       	com	r25
    8980:	81 95       	neg	r24
    8982:	9f 4f       	sbci	r25, 0xFF	; 255
    8984:	08 95       	ret

00008986 <atol>:
    8986:	1f 93       	push	r17
    8988:	fc 01       	movw	r30, r24
    898a:	99 27       	eor	r25, r25
    898c:	88 27       	eor	r24, r24
    898e:	bc 01       	movw	r22, r24
    8990:	e8 94       	clt
    8992:	11 91       	ld	r17, Z+
    8994:	10 32       	cpi	r17, 0x20	; 32
    8996:	e9 f3       	breq	.-6      	; 0x8992 <atol+0xc>
    8998:	19 30       	cpi	r17, 0x09	; 9
    899a:	10 f0       	brcs	.+4      	; 0x89a0 <atol+0x1a>
    899c:	1e 30       	cpi	r17, 0x0E	; 14
    899e:	c8 f3       	brcs	.-14     	; 0x8992 <atol+0xc>
    89a0:	1b 32       	cpi	r17, 0x2B	; 43
    89a2:	51 f0       	breq	.+20     	; 0x89b8 <atol+0x32>
    89a4:	1d 32       	cpi	r17, 0x2D	; 45
    89a6:	49 f4       	brne	.+18     	; 0x89ba <atol+0x34>
    89a8:	68 94       	set
    89aa:	06 c0       	rjmp	.+12     	; 0x89b8 <atol+0x32>
    89ac:	0e 94 36 45 	call	0x8a6c	; 0x8a6c <__mulsi_const_10>
    89b0:	61 0f       	add	r22, r17
    89b2:	71 1d       	adc	r23, r1
    89b4:	81 1d       	adc	r24, r1
    89b6:	91 1d       	adc	r25, r1
    89b8:	11 91       	ld	r17, Z+
    89ba:	10 53       	subi	r17, 0x30	; 48
    89bc:	1a 30       	cpi	r17, 0x0A	; 10
    89be:	b0 f3       	brcs	.-20     	; 0x89ac <atol+0x26>
    89c0:	3e f4       	brtc	.+14     	; 0x89d0 <atol+0x4a>
    89c2:	90 95       	com	r25
    89c4:	80 95       	com	r24
    89c6:	70 95       	com	r23
    89c8:	61 95       	neg	r22
    89ca:	7f 4f       	sbci	r23, 0xFF	; 255
    89cc:	8f 4f       	sbci	r24, 0xFF	; 255
    89ce:	9f 4f       	sbci	r25, 0xFF	; 255
    89d0:	1f 91       	pop	r17
    89d2:	08 95       	ret

000089d4 <memcpy>:
    89d4:	fb 01       	movw	r30, r22
    89d6:	dc 01       	movw	r26, r24
    89d8:	02 c0       	rjmp	.+4      	; 0x89de <memcpy+0xa>
    89da:	01 90       	ld	r0, Z+
    89dc:	0d 92       	st	X+, r0
    89de:	41 50       	subi	r20, 0x01	; 1
    89e0:	50 40       	sbci	r21, 0x00	; 0
    89e2:	d8 f7       	brcc	.-10     	; 0x89da <memcpy+0x6>
    89e4:	08 95       	ret

000089e6 <memset>:
    89e6:	dc 01       	movw	r26, r24
    89e8:	01 c0       	rjmp	.+2      	; 0x89ec <memset+0x6>
    89ea:	6d 93       	st	X+, r22
    89ec:	41 50       	subi	r20, 0x01	; 1
    89ee:	50 40       	sbci	r21, 0x00	; 0
    89f0:	e0 f7       	brcc	.-8      	; 0x89ea <memset+0x4>
    89f2:	08 95       	ret

000089f4 <strchr>:
    89f4:	fc 01       	movw	r30, r24
    89f6:	81 91       	ld	r24, Z+
    89f8:	86 17       	cp	r24, r22
    89fa:	21 f0       	breq	.+8      	; 0x8a04 <strchr+0x10>
    89fc:	88 23       	and	r24, r24
    89fe:	d9 f7       	brne	.-10     	; 0x89f6 <strchr+0x2>
    8a00:	99 27       	eor	r25, r25
    8a02:	08 95       	ret
    8a04:	31 97       	sbiw	r30, 0x01	; 1
    8a06:	cf 01       	movw	r24, r30
    8a08:	08 95       	ret

00008a0a <strcmp>:
    8a0a:	fb 01       	movw	r30, r22
    8a0c:	dc 01       	movw	r26, r24
    8a0e:	8d 91       	ld	r24, X+
    8a10:	01 90       	ld	r0, Z+
    8a12:	80 19       	sub	r24, r0
    8a14:	01 10       	cpse	r0, r1
    8a16:	d9 f3       	breq	.-10     	; 0x8a0e <strcmp+0x4>
    8a18:	99 0b       	sbc	r25, r25
    8a1a:	08 95       	ret

00008a1c <strncmp>:
    8a1c:	fb 01       	movw	r30, r22
    8a1e:	dc 01       	movw	r26, r24
    8a20:	41 50       	subi	r20, 0x01	; 1
    8a22:	50 40       	sbci	r21, 0x00	; 0
    8a24:	30 f0       	brcs	.+12     	; 0x8a32 <strncmp+0x16>
    8a26:	8d 91       	ld	r24, X+
    8a28:	01 90       	ld	r0, Z+
    8a2a:	80 19       	sub	r24, r0
    8a2c:	19 f4       	brne	.+6      	; 0x8a34 <strncmp+0x18>
    8a2e:	00 20       	and	r0, r0
    8a30:	b9 f7       	brne	.-18     	; 0x8a20 <strncmp+0x4>
    8a32:	88 1b       	sub	r24, r24
    8a34:	99 0b       	sbc	r25, r25
    8a36:	08 95       	ret

00008a38 <strncpy>:
    8a38:	fb 01       	movw	r30, r22
    8a3a:	dc 01       	movw	r26, r24
    8a3c:	41 50       	subi	r20, 0x01	; 1
    8a3e:	50 40       	sbci	r21, 0x00	; 0
    8a40:	48 f0       	brcs	.+18     	; 0x8a54 <strncpy+0x1c>
    8a42:	01 90       	ld	r0, Z+
    8a44:	0d 92       	st	X+, r0
    8a46:	00 20       	and	r0, r0
    8a48:	c9 f7       	brne	.-14     	; 0x8a3c <strncpy+0x4>
    8a4a:	01 c0       	rjmp	.+2      	; 0x8a4e <strncpy+0x16>
    8a4c:	1d 92       	st	X+, r1
    8a4e:	41 50       	subi	r20, 0x01	; 1
    8a50:	50 40       	sbci	r21, 0x00	; 0
    8a52:	e0 f7       	brcc	.-8      	; 0x8a4c <strncpy+0x14>
    8a54:	08 95       	ret

00008a56 <strrchr>:
    8a56:	fc 01       	movw	r30, r24
    8a58:	81 e0       	ldi	r24, 0x01	; 1
    8a5a:	90 e0       	ldi	r25, 0x00	; 0
    8a5c:	01 90       	ld	r0, Z+
    8a5e:	06 16       	cp	r0, r22
    8a60:	09 f4       	brne	.+2      	; 0x8a64 <strrchr+0xe>
    8a62:	cf 01       	movw	r24, r30
    8a64:	00 20       	and	r0, r0
    8a66:	d1 f7       	brne	.-12     	; 0x8a5c <strrchr+0x6>
    8a68:	01 97       	sbiw	r24, 0x01	; 1
    8a6a:	08 95       	ret

00008a6c <__mulsi_const_10>:
    8a6c:	59 2f       	mov	r21, r25
    8a6e:	48 2f       	mov	r20, r24
    8a70:	37 2f       	mov	r19, r23
    8a72:	26 2f       	mov	r18, r22
    8a74:	66 0f       	add	r22, r22
    8a76:	77 1f       	adc	r23, r23
    8a78:	88 1f       	adc	r24, r24
    8a7a:	99 1f       	adc	r25, r25
    8a7c:	66 0f       	add	r22, r22
    8a7e:	77 1f       	adc	r23, r23
    8a80:	88 1f       	adc	r24, r24
    8a82:	99 1f       	adc	r25, r25
    8a84:	62 0f       	add	r22, r18
    8a86:	73 1f       	adc	r23, r19
    8a88:	84 1f       	adc	r24, r20
    8a8a:	95 1f       	adc	r25, r21
    8a8c:	66 0f       	add	r22, r22
    8a8e:	77 1f       	adc	r23, r23
    8a90:	88 1f       	adc	r24, r24
    8a92:	99 1f       	adc	r25, r25
    8a94:	08 95       	ret

00008a96 <__mulhi_const_10>:
    8a96:	7a e0       	ldi	r23, 0x0A	; 10
    8a98:	97 9f       	mul	r25, r23
    8a9a:	90 2d       	mov	r25, r0
    8a9c:	87 9f       	mul	r24, r23
    8a9e:	80 2d       	mov	r24, r0
    8aa0:	91 0d       	add	r25, r1
    8aa2:	11 24       	eor	r1, r1
    8aa4:	08 95       	ret

00008aa6 <sprintf>:
    8aa6:	0f 93       	push	r16
    8aa8:	1f 93       	push	r17
    8aaa:	df 93       	push	r29
    8aac:	cf 93       	push	r28
    8aae:	cd b7       	in	r28, 0x3d	; 61
    8ab0:	de b7       	in	r29, 0x3e	; 62
    8ab2:	2e 97       	sbiw	r28, 0x0e	; 14
    8ab4:	0f b6       	in	r0, 0x3f	; 63
    8ab6:	f8 94       	cli
    8ab8:	de bf       	out	0x3e, r29	; 62
    8aba:	0f be       	out	0x3f, r0	; 63
    8abc:	cd bf       	out	0x3d, r28	; 61
    8abe:	0d 89       	ldd	r16, Y+21	; 0x15
    8ac0:	1e 89       	ldd	r17, Y+22	; 0x16
    8ac2:	86 e0       	ldi	r24, 0x06	; 6
    8ac4:	8c 83       	std	Y+4, r24	; 0x04
    8ac6:	1a 83       	std	Y+2, r17	; 0x02
    8ac8:	09 83       	std	Y+1, r16	; 0x01
    8aca:	8f ef       	ldi	r24, 0xFF	; 255
    8acc:	9f e7       	ldi	r25, 0x7F	; 127
    8ace:	9e 83       	std	Y+6, r25	; 0x06
    8ad0:	8d 83       	std	Y+5, r24	; 0x05
    8ad2:	9e 01       	movw	r18, r28
    8ad4:	27 5e       	subi	r18, 0xE7	; 231
    8ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ad8:	ce 01       	movw	r24, r28
    8ada:	01 96       	adiw	r24, 0x01	; 1
    8adc:	6f 89       	ldd	r22, Y+23	; 0x17
    8ade:	78 8d       	ldd	r23, Y+24	; 0x18
    8ae0:	a9 01       	movw	r20, r18
    8ae2:	0e 94 84 45 	call	0x8b08	; 0x8b08 <vfprintf>
    8ae6:	2f 81       	ldd	r18, Y+7	; 0x07
    8ae8:	38 85       	ldd	r19, Y+8	; 0x08
    8aea:	02 0f       	add	r16, r18
    8aec:	13 1f       	adc	r17, r19
    8aee:	f8 01       	movw	r30, r16
    8af0:	10 82       	st	Z, r1
    8af2:	2e 96       	adiw	r28, 0x0e	; 14
    8af4:	0f b6       	in	r0, 0x3f	; 63
    8af6:	f8 94       	cli
    8af8:	de bf       	out	0x3e, r29	; 62
    8afa:	0f be       	out	0x3f, r0	; 63
    8afc:	cd bf       	out	0x3d, r28	; 61
    8afe:	cf 91       	pop	r28
    8b00:	df 91       	pop	r29
    8b02:	1f 91       	pop	r17
    8b04:	0f 91       	pop	r16
    8b06:	08 95       	ret

00008b08 <vfprintf>:
    8b08:	2f 92       	push	r2
    8b0a:	3f 92       	push	r3
    8b0c:	4f 92       	push	r4
    8b0e:	5f 92       	push	r5
    8b10:	6f 92       	push	r6
    8b12:	7f 92       	push	r7
    8b14:	8f 92       	push	r8
    8b16:	9f 92       	push	r9
    8b18:	af 92       	push	r10
    8b1a:	bf 92       	push	r11
    8b1c:	cf 92       	push	r12
    8b1e:	df 92       	push	r13
    8b20:	ef 92       	push	r14
    8b22:	ff 92       	push	r15
    8b24:	0f 93       	push	r16
    8b26:	1f 93       	push	r17
    8b28:	df 93       	push	r29
    8b2a:	cf 93       	push	r28
    8b2c:	cd b7       	in	r28, 0x3d	; 61
    8b2e:	de b7       	in	r29, 0x3e	; 62
    8b30:	2b 97       	sbiw	r28, 0x0b	; 11
    8b32:	0f b6       	in	r0, 0x3f	; 63
    8b34:	f8 94       	cli
    8b36:	de bf       	out	0x3e, r29	; 62
    8b38:	0f be       	out	0x3f, r0	; 63
    8b3a:	cd bf       	out	0x3d, r28	; 61
    8b3c:	3c 01       	movw	r6, r24
    8b3e:	2b 01       	movw	r4, r22
    8b40:	5a 01       	movw	r10, r20
    8b42:	fc 01       	movw	r30, r24
    8b44:	17 82       	std	Z+7, r1	; 0x07
    8b46:	16 82       	std	Z+6, r1	; 0x06
    8b48:	83 81       	ldd	r24, Z+3	; 0x03
    8b4a:	81 fd       	sbrc	r24, 1
    8b4c:	03 c0       	rjmp	.+6      	; 0x8b54 <vfprintf+0x4c>
    8b4e:	6f ef       	ldi	r22, 0xFF	; 255
    8b50:	7f ef       	ldi	r23, 0xFF	; 255
    8b52:	c6 c1       	rjmp	.+908    	; 0x8ee0 <vfprintf+0x3d8>
    8b54:	9a e0       	ldi	r25, 0x0A	; 10
    8b56:	89 2e       	mov	r8, r25
    8b58:	1e 01       	movw	r2, r28
    8b5a:	08 94       	sec
    8b5c:	21 1c       	adc	r2, r1
    8b5e:	31 1c       	adc	r3, r1
    8b60:	f3 01       	movw	r30, r6
    8b62:	23 81       	ldd	r18, Z+3	; 0x03
    8b64:	f2 01       	movw	r30, r4
    8b66:	23 fd       	sbrc	r18, 3
    8b68:	85 91       	lpm	r24, Z+
    8b6a:	23 ff       	sbrs	r18, 3
    8b6c:	81 91       	ld	r24, Z+
    8b6e:	2f 01       	movw	r4, r30
    8b70:	88 23       	and	r24, r24
    8b72:	09 f4       	brne	.+2      	; 0x8b76 <vfprintf+0x6e>
    8b74:	b2 c1       	rjmp	.+868    	; 0x8eda <vfprintf+0x3d2>
    8b76:	85 32       	cpi	r24, 0x25	; 37
    8b78:	39 f4       	brne	.+14     	; 0x8b88 <vfprintf+0x80>
    8b7a:	23 fd       	sbrc	r18, 3
    8b7c:	85 91       	lpm	r24, Z+
    8b7e:	23 ff       	sbrs	r18, 3
    8b80:	81 91       	ld	r24, Z+
    8b82:	2f 01       	movw	r4, r30
    8b84:	85 32       	cpi	r24, 0x25	; 37
    8b86:	29 f4       	brne	.+10     	; 0x8b92 <vfprintf+0x8a>
    8b88:	90 e0       	ldi	r25, 0x00	; 0
    8b8a:	b3 01       	movw	r22, r6
    8b8c:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8b90:	e7 cf       	rjmp	.-50     	; 0x8b60 <vfprintf+0x58>
    8b92:	98 2f       	mov	r25, r24
    8b94:	ff 24       	eor	r15, r15
    8b96:	ee 24       	eor	r14, r14
    8b98:	99 24       	eor	r9, r9
    8b9a:	ff e1       	ldi	r31, 0x1F	; 31
    8b9c:	ff 15       	cp	r31, r15
    8b9e:	d0 f0       	brcs	.+52     	; 0x8bd4 <vfprintf+0xcc>
    8ba0:	9b 32       	cpi	r25, 0x2B	; 43
    8ba2:	69 f0       	breq	.+26     	; 0x8bbe <vfprintf+0xb6>
    8ba4:	9c 32       	cpi	r25, 0x2C	; 44
    8ba6:	28 f4       	brcc	.+10     	; 0x8bb2 <vfprintf+0xaa>
    8ba8:	90 32       	cpi	r25, 0x20	; 32
    8baa:	59 f0       	breq	.+22     	; 0x8bc2 <vfprintf+0xba>
    8bac:	93 32       	cpi	r25, 0x23	; 35
    8bae:	91 f4       	brne	.+36     	; 0x8bd4 <vfprintf+0xcc>
    8bb0:	0e c0       	rjmp	.+28     	; 0x8bce <vfprintf+0xc6>
    8bb2:	9d 32       	cpi	r25, 0x2D	; 45
    8bb4:	49 f0       	breq	.+18     	; 0x8bc8 <vfprintf+0xc0>
    8bb6:	90 33       	cpi	r25, 0x30	; 48
    8bb8:	69 f4       	brne	.+26     	; 0x8bd4 <vfprintf+0xcc>
    8bba:	41 e0       	ldi	r20, 0x01	; 1
    8bbc:	24 c0       	rjmp	.+72     	; 0x8c06 <vfprintf+0xfe>
    8bbe:	52 e0       	ldi	r21, 0x02	; 2
    8bc0:	f5 2a       	or	r15, r21
    8bc2:	84 e0       	ldi	r24, 0x04	; 4
    8bc4:	f8 2a       	or	r15, r24
    8bc6:	28 c0       	rjmp	.+80     	; 0x8c18 <vfprintf+0x110>
    8bc8:	98 e0       	ldi	r25, 0x08	; 8
    8bca:	f9 2a       	or	r15, r25
    8bcc:	25 c0       	rjmp	.+74     	; 0x8c18 <vfprintf+0x110>
    8bce:	e0 e1       	ldi	r30, 0x10	; 16
    8bd0:	fe 2a       	or	r15, r30
    8bd2:	22 c0       	rjmp	.+68     	; 0x8c18 <vfprintf+0x110>
    8bd4:	f7 fc       	sbrc	r15, 7
    8bd6:	29 c0       	rjmp	.+82     	; 0x8c2a <vfprintf+0x122>
    8bd8:	89 2f       	mov	r24, r25
    8bda:	80 53       	subi	r24, 0x30	; 48
    8bdc:	8a 30       	cpi	r24, 0x0A	; 10
    8bde:	70 f4       	brcc	.+28     	; 0x8bfc <vfprintf+0xf4>
    8be0:	f6 fe       	sbrs	r15, 6
    8be2:	05 c0       	rjmp	.+10     	; 0x8bee <vfprintf+0xe6>
    8be4:	98 9c       	mul	r9, r8
    8be6:	90 2c       	mov	r9, r0
    8be8:	11 24       	eor	r1, r1
    8bea:	98 0e       	add	r9, r24
    8bec:	15 c0       	rjmp	.+42     	; 0x8c18 <vfprintf+0x110>
    8bee:	e8 9c       	mul	r14, r8
    8bf0:	e0 2c       	mov	r14, r0
    8bf2:	11 24       	eor	r1, r1
    8bf4:	e8 0e       	add	r14, r24
    8bf6:	f0 e2       	ldi	r31, 0x20	; 32
    8bf8:	ff 2a       	or	r15, r31
    8bfa:	0e c0       	rjmp	.+28     	; 0x8c18 <vfprintf+0x110>
    8bfc:	9e 32       	cpi	r25, 0x2E	; 46
    8bfe:	29 f4       	brne	.+10     	; 0x8c0a <vfprintf+0x102>
    8c00:	f6 fc       	sbrc	r15, 6
    8c02:	6b c1       	rjmp	.+726    	; 0x8eda <vfprintf+0x3d2>
    8c04:	40 e4       	ldi	r20, 0x40	; 64
    8c06:	f4 2a       	or	r15, r20
    8c08:	07 c0       	rjmp	.+14     	; 0x8c18 <vfprintf+0x110>
    8c0a:	9c 36       	cpi	r25, 0x6C	; 108
    8c0c:	19 f4       	brne	.+6      	; 0x8c14 <vfprintf+0x10c>
    8c0e:	50 e8       	ldi	r21, 0x80	; 128
    8c10:	f5 2a       	or	r15, r21
    8c12:	02 c0       	rjmp	.+4      	; 0x8c18 <vfprintf+0x110>
    8c14:	98 36       	cpi	r25, 0x68	; 104
    8c16:	49 f4       	brne	.+18     	; 0x8c2a <vfprintf+0x122>
    8c18:	f2 01       	movw	r30, r4
    8c1a:	23 fd       	sbrc	r18, 3
    8c1c:	95 91       	lpm	r25, Z+
    8c1e:	23 ff       	sbrs	r18, 3
    8c20:	91 91       	ld	r25, Z+
    8c22:	2f 01       	movw	r4, r30
    8c24:	99 23       	and	r25, r25
    8c26:	09 f0       	breq	.+2      	; 0x8c2a <vfprintf+0x122>
    8c28:	b8 cf       	rjmp	.-144    	; 0x8b9a <vfprintf+0x92>
    8c2a:	89 2f       	mov	r24, r25
    8c2c:	85 54       	subi	r24, 0x45	; 69
    8c2e:	83 30       	cpi	r24, 0x03	; 3
    8c30:	18 f0       	brcs	.+6      	; 0x8c38 <vfprintf+0x130>
    8c32:	80 52       	subi	r24, 0x20	; 32
    8c34:	83 30       	cpi	r24, 0x03	; 3
    8c36:	38 f4       	brcc	.+14     	; 0x8c46 <vfprintf+0x13e>
    8c38:	44 e0       	ldi	r20, 0x04	; 4
    8c3a:	50 e0       	ldi	r21, 0x00	; 0
    8c3c:	a4 0e       	add	r10, r20
    8c3e:	b5 1e       	adc	r11, r21
    8c40:	5f e3       	ldi	r21, 0x3F	; 63
    8c42:	59 83       	std	Y+1, r21	; 0x01
    8c44:	0f c0       	rjmp	.+30     	; 0x8c64 <vfprintf+0x15c>
    8c46:	93 36       	cpi	r25, 0x63	; 99
    8c48:	31 f0       	breq	.+12     	; 0x8c56 <vfprintf+0x14e>
    8c4a:	93 37       	cpi	r25, 0x73	; 115
    8c4c:	79 f0       	breq	.+30     	; 0x8c6c <vfprintf+0x164>
    8c4e:	93 35       	cpi	r25, 0x53	; 83
    8c50:	09 f0       	breq	.+2      	; 0x8c54 <vfprintf+0x14c>
    8c52:	56 c0       	rjmp	.+172    	; 0x8d00 <vfprintf+0x1f8>
    8c54:	20 c0       	rjmp	.+64     	; 0x8c96 <vfprintf+0x18e>
    8c56:	f5 01       	movw	r30, r10
    8c58:	80 81       	ld	r24, Z
    8c5a:	89 83       	std	Y+1, r24	; 0x01
    8c5c:	42 e0       	ldi	r20, 0x02	; 2
    8c5e:	50 e0       	ldi	r21, 0x00	; 0
    8c60:	a4 0e       	add	r10, r20
    8c62:	b5 1e       	adc	r11, r21
    8c64:	61 01       	movw	r12, r2
    8c66:	01 e0       	ldi	r16, 0x01	; 1
    8c68:	10 e0       	ldi	r17, 0x00	; 0
    8c6a:	12 c0       	rjmp	.+36     	; 0x8c90 <vfprintf+0x188>
    8c6c:	f5 01       	movw	r30, r10
    8c6e:	c0 80       	ld	r12, Z
    8c70:	d1 80       	ldd	r13, Z+1	; 0x01
    8c72:	f6 fc       	sbrc	r15, 6
    8c74:	03 c0       	rjmp	.+6      	; 0x8c7c <vfprintf+0x174>
    8c76:	6f ef       	ldi	r22, 0xFF	; 255
    8c78:	7f ef       	ldi	r23, 0xFF	; 255
    8c7a:	02 c0       	rjmp	.+4      	; 0x8c80 <vfprintf+0x178>
    8c7c:	69 2d       	mov	r22, r9
    8c7e:	70 e0       	ldi	r23, 0x00	; 0
    8c80:	42 e0       	ldi	r20, 0x02	; 2
    8c82:	50 e0       	ldi	r21, 0x00	; 0
    8c84:	a4 0e       	add	r10, r20
    8c86:	b5 1e       	adc	r11, r21
    8c88:	c6 01       	movw	r24, r12
    8c8a:	0e 94 95 47 	call	0x8f2a	; 0x8f2a <strnlen>
    8c8e:	8c 01       	movw	r16, r24
    8c90:	5f e7       	ldi	r21, 0x7F	; 127
    8c92:	f5 22       	and	r15, r21
    8c94:	14 c0       	rjmp	.+40     	; 0x8cbe <vfprintf+0x1b6>
    8c96:	f5 01       	movw	r30, r10
    8c98:	c0 80       	ld	r12, Z
    8c9a:	d1 80       	ldd	r13, Z+1	; 0x01
    8c9c:	f6 fc       	sbrc	r15, 6
    8c9e:	03 c0       	rjmp	.+6      	; 0x8ca6 <vfprintf+0x19e>
    8ca0:	6f ef       	ldi	r22, 0xFF	; 255
    8ca2:	7f ef       	ldi	r23, 0xFF	; 255
    8ca4:	02 c0       	rjmp	.+4      	; 0x8caa <vfprintf+0x1a2>
    8ca6:	69 2d       	mov	r22, r9
    8ca8:	70 e0       	ldi	r23, 0x00	; 0
    8caa:	42 e0       	ldi	r20, 0x02	; 2
    8cac:	50 e0       	ldi	r21, 0x00	; 0
    8cae:	a4 0e       	add	r10, r20
    8cb0:	b5 1e       	adc	r11, r21
    8cb2:	c6 01       	movw	r24, r12
    8cb4:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <strnlen_P>
    8cb8:	8c 01       	movw	r16, r24
    8cba:	50 e8       	ldi	r21, 0x80	; 128
    8cbc:	f5 2a       	or	r15, r21
    8cbe:	f3 fe       	sbrs	r15, 3
    8cc0:	07 c0       	rjmp	.+14     	; 0x8cd0 <vfprintf+0x1c8>
    8cc2:	1a c0       	rjmp	.+52     	; 0x8cf8 <vfprintf+0x1f0>
    8cc4:	80 e2       	ldi	r24, 0x20	; 32
    8cc6:	90 e0       	ldi	r25, 0x00	; 0
    8cc8:	b3 01       	movw	r22, r6
    8cca:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8cce:	ea 94       	dec	r14
    8cd0:	8e 2d       	mov	r24, r14
    8cd2:	90 e0       	ldi	r25, 0x00	; 0
    8cd4:	08 17       	cp	r16, r24
    8cd6:	19 07       	cpc	r17, r25
    8cd8:	a8 f3       	brcs	.-22     	; 0x8cc4 <vfprintf+0x1bc>
    8cda:	0e c0       	rjmp	.+28     	; 0x8cf8 <vfprintf+0x1f0>
    8cdc:	f6 01       	movw	r30, r12
    8cde:	f7 fc       	sbrc	r15, 7
    8ce0:	85 91       	lpm	r24, Z+
    8ce2:	f7 fe       	sbrs	r15, 7
    8ce4:	81 91       	ld	r24, Z+
    8ce6:	6f 01       	movw	r12, r30
    8ce8:	90 e0       	ldi	r25, 0x00	; 0
    8cea:	b3 01       	movw	r22, r6
    8cec:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8cf0:	e1 10       	cpse	r14, r1
    8cf2:	ea 94       	dec	r14
    8cf4:	01 50       	subi	r16, 0x01	; 1
    8cf6:	10 40       	sbci	r17, 0x00	; 0
    8cf8:	01 15       	cp	r16, r1
    8cfa:	11 05       	cpc	r17, r1
    8cfc:	79 f7       	brne	.-34     	; 0x8cdc <vfprintf+0x1d4>
    8cfe:	ea c0       	rjmp	.+468    	; 0x8ed4 <vfprintf+0x3cc>
    8d00:	94 36       	cpi	r25, 0x64	; 100
    8d02:	11 f0       	breq	.+4      	; 0x8d08 <vfprintf+0x200>
    8d04:	99 36       	cpi	r25, 0x69	; 105
    8d06:	69 f5       	brne	.+90     	; 0x8d62 <vfprintf+0x25a>
    8d08:	f7 fe       	sbrs	r15, 7
    8d0a:	08 c0       	rjmp	.+16     	; 0x8d1c <vfprintf+0x214>
    8d0c:	f5 01       	movw	r30, r10
    8d0e:	20 81       	ld	r18, Z
    8d10:	31 81       	ldd	r19, Z+1	; 0x01
    8d12:	42 81       	ldd	r20, Z+2	; 0x02
    8d14:	53 81       	ldd	r21, Z+3	; 0x03
    8d16:	84 e0       	ldi	r24, 0x04	; 4
    8d18:	90 e0       	ldi	r25, 0x00	; 0
    8d1a:	0a c0       	rjmp	.+20     	; 0x8d30 <vfprintf+0x228>
    8d1c:	f5 01       	movw	r30, r10
    8d1e:	80 81       	ld	r24, Z
    8d20:	91 81       	ldd	r25, Z+1	; 0x01
    8d22:	9c 01       	movw	r18, r24
    8d24:	44 27       	eor	r20, r20
    8d26:	37 fd       	sbrc	r19, 7
    8d28:	40 95       	com	r20
    8d2a:	54 2f       	mov	r21, r20
    8d2c:	82 e0       	ldi	r24, 0x02	; 2
    8d2e:	90 e0       	ldi	r25, 0x00	; 0
    8d30:	a8 0e       	add	r10, r24
    8d32:	b9 1e       	adc	r11, r25
    8d34:	9f e6       	ldi	r25, 0x6F	; 111
    8d36:	f9 22       	and	r15, r25
    8d38:	57 ff       	sbrs	r21, 7
    8d3a:	09 c0       	rjmp	.+18     	; 0x8d4e <vfprintf+0x246>
    8d3c:	50 95       	com	r21
    8d3e:	40 95       	com	r20
    8d40:	30 95       	com	r19
    8d42:	21 95       	neg	r18
    8d44:	3f 4f       	sbci	r19, 0xFF	; 255
    8d46:	4f 4f       	sbci	r20, 0xFF	; 255
    8d48:	5f 4f       	sbci	r21, 0xFF	; 255
    8d4a:	e0 e8       	ldi	r30, 0x80	; 128
    8d4c:	fe 2a       	or	r15, r30
    8d4e:	ca 01       	movw	r24, r20
    8d50:	b9 01       	movw	r22, r18
    8d52:	a1 01       	movw	r20, r2
    8d54:	2a e0       	ldi	r18, 0x0A	; 10
    8d56:	30 e0       	ldi	r19, 0x00	; 0
    8d58:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <__ultoa_invert>
    8d5c:	d8 2e       	mov	r13, r24
    8d5e:	d2 18       	sub	r13, r2
    8d60:	40 c0       	rjmp	.+128    	; 0x8de2 <vfprintf+0x2da>
    8d62:	95 37       	cpi	r25, 0x75	; 117
    8d64:	29 f4       	brne	.+10     	; 0x8d70 <vfprintf+0x268>
    8d66:	1f 2d       	mov	r17, r15
    8d68:	1f 7e       	andi	r17, 0xEF	; 239
    8d6a:	2a e0       	ldi	r18, 0x0A	; 10
    8d6c:	30 e0       	ldi	r19, 0x00	; 0
    8d6e:	1d c0       	rjmp	.+58     	; 0x8daa <vfprintf+0x2a2>
    8d70:	1f 2d       	mov	r17, r15
    8d72:	19 7f       	andi	r17, 0xF9	; 249
    8d74:	9f 36       	cpi	r25, 0x6F	; 111
    8d76:	61 f0       	breq	.+24     	; 0x8d90 <vfprintf+0x288>
    8d78:	90 37       	cpi	r25, 0x70	; 112
    8d7a:	20 f4       	brcc	.+8      	; 0x8d84 <vfprintf+0x27c>
    8d7c:	98 35       	cpi	r25, 0x58	; 88
    8d7e:	09 f0       	breq	.+2      	; 0x8d82 <vfprintf+0x27a>
    8d80:	ac c0       	rjmp	.+344    	; 0x8eda <vfprintf+0x3d2>
    8d82:	0f c0       	rjmp	.+30     	; 0x8da2 <vfprintf+0x29a>
    8d84:	90 37       	cpi	r25, 0x70	; 112
    8d86:	39 f0       	breq	.+14     	; 0x8d96 <vfprintf+0x28e>
    8d88:	98 37       	cpi	r25, 0x78	; 120
    8d8a:	09 f0       	breq	.+2      	; 0x8d8e <vfprintf+0x286>
    8d8c:	a6 c0       	rjmp	.+332    	; 0x8eda <vfprintf+0x3d2>
    8d8e:	04 c0       	rjmp	.+8      	; 0x8d98 <vfprintf+0x290>
    8d90:	28 e0       	ldi	r18, 0x08	; 8
    8d92:	30 e0       	ldi	r19, 0x00	; 0
    8d94:	0a c0       	rjmp	.+20     	; 0x8daa <vfprintf+0x2a2>
    8d96:	10 61       	ori	r17, 0x10	; 16
    8d98:	14 fd       	sbrc	r17, 4
    8d9a:	14 60       	ori	r17, 0x04	; 4
    8d9c:	20 e1       	ldi	r18, 0x10	; 16
    8d9e:	30 e0       	ldi	r19, 0x00	; 0
    8da0:	04 c0       	rjmp	.+8      	; 0x8daa <vfprintf+0x2a2>
    8da2:	14 fd       	sbrc	r17, 4
    8da4:	16 60       	ori	r17, 0x06	; 6
    8da6:	20 e1       	ldi	r18, 0x10	; 16
    8da8:	32 e0       	ldi	r19, 0x02	; 2
    8daa:	17 ff       	sbrs	r17, 7
    8dac:	08 c0       	rjmp	.+16     	; 0x8dbe <vfprintf+0x2b6>
    8dae:	f5 01       	movw	r30, r10
    8db0:	60 81       	ld	r22, Z
    8db2:	71 81       	ldd	r23, Z+1	; 0x01
    8db4:	82 81       	ldd	r24, Z+2	; 0x02
    8db6:	93 81       	ldd	r25, Z+3	; 0x03
    8db8:	44 e0       	ldi	r20, 0x04	; 4
    8dba:	50 e0       	ldi	r21, 0x00	; 0
    8dbc:	08 c0       	rjmp	.+16     	; 0x8dce <vfprintf+0x2c6>
    8dbe:	f5 01       	movw	r30, r10
    8dc0:	80 81       	ld	r24, Z
    8dc2:	91 81       	ldd	r25, Z+1	; 0x01
    8dc4:	bc 01       	movw	r22, r24
    8dc6:	80 e0       	ldi	r24, 0x00	; 0
    8dc8:	90 e0       	ldi	r25, 0x00	; 0
    8dca:	42 e0       	ldi	r20, 0x02	; 2
    8dcc:	50 e0       	ldi	r21, 0x00	; 0
    8dce:	a4 0e       	add	r10, r20
    8dd0:	b5 1e       	adc	r11, r21
    8dd2:	a1 01       	movw	r20, r2
    8dd4:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <__ultoa_invert>
    8dd8:	d8 2e       	mov	r13, r24
    8dda:	d2 18       	sub	r13, r2
    8ddc:	8f e7       	ldi	r24, 0x7F	; 127
    8dde:	f8 2e       	mov	r15, r24
    8de0:	f1 22       	and	r15, r17
    8de2:	f6 fe       	sbrs	r15, 6
    8de4:	0b c0       	rjmp	.+22     	; 0x8dfc <vfprintf+0x2f4>
    8de6:	5e ef       	ldi	r21, 0xFE	; 254
    8de8:	f5 22       	and	r15, r21
    8dea:	d9 14       	cp	r13, r9
    8dec:	38 f4       	brcc	.+14     	; 0x8dfc <vfprintf+0x2f4>
    8dee:	f4 fe       	sbrs	r15, 4
    8df0:	07 c0       	rjmp	.+14     	; 0x8e00 <vfprintf+0x2f8>
    8df2:	f2 fc       	sbrc	r15, 2
    8df4:	05 c0       	rjmp	.+10     	; 0x8e00 <vfprintf+0x2f8>
    8df6:	8f ee       	ldi	r24, 0xEF	; 239
    8df8:	f8 22       	and	r15, r24
    8dfa:	02 c0       	rjmp	.+4      	; 0x8e00 <vfprintf+0x2f8>
    8dfc:	1d 2d       	mov	r17, r13
    8dfe:	01 c0       	rjmp	.+2      	; 0x8e02 <vfprintf+0x2fa>
    8e00:	19 2d       	mov	r17, r9
    8e02:	f4 fe       	sbrs	r15, 4
    8e04:	0d c0       	rjmp	.+26     	; 0x8e20 <vfprintf+0x318>
    8e06:	fe 01       	movw	r30, r28
    8e08:	ed 0d       	add	r30, r13
    8e0a:	f1 1d       	adc	r31, r1
    8e0c:	80 81       	ld	r24, Z
    8e0e:	80 33       	cpi	r24, 0x30	; 48
    8e10:	19 f4       	brne	.+6      	; 0x8e18 <vfprintf+0x310>
    8e12:	99 ee       	ldi	r25, 0xE9	; 233
    8e14:	f9 22       	and	r15, r25
    8e16:	08 c0       	rjmp	.+16     	; 0x8e28 <vfprintf+0x320>
    8e18:	1f 5f       	subi	r17, 0xFF	; 255
    8e1a:	f2 fe       	sbrs	r15, 2
    8e1c:	05 c0       	rjmp	.+10     	; 0x8e28 <vfprintf+0x320>
    8e1e:	03 c0       	rjmp	.+6      	; 0x8e26 <vfprintf+0x31e>
    8e20:	8f 2d       	mov	r24, r15
    8e22:	86 78       	andi	r24, 0x86	; 134
    8e24:	09 f0       	breq	.+2      	; 0x8e28 <vfprintf+0x320>
    8e26:	1f 5f       	subi	r17, 0xFF	; 255
    8e28:	0f 2d       	mov	r16, r15
    8e2a:	f3 fc       	sbrc	r15, 3
    8e2c:	14 c0       	rjmp	.+40     	; 0x8e56 <vfprintf+0x34e>
    8e2e:	f0 fe       	sbrs	r15, 0
    8e30:	0f c0       	rjmp	.+30     	; 0x8e50 <vfprintf+0x348>
    8e32:	1e 15       	cp	r17, r14
    8e34:	10 f0       	brcs	.+4      	; 0x8e3a <vfprintf+0x332>
    8e36:	9d 2c       	mov	r9, r13
    8e38:	0b c0       	rjmp	.+22     	; 0x8e50 <vfprintf+0x348>
    8e3a:	9d 2c       	mov	r9, r13
    8e3c:	9e 0c       	add	r9, r14
    8e3e:	91 1a       	sub	r9, r17
    8e40:	1e 2d       	mov	r17, r14
    8e42:	06 c0       	rjmp	.+12     	; 0x8e50 <vfprintf+0x348>
    8e44:	80 e2       	ldi	r24, 0x20	; 32
    8e46:	90 e0       	ldi	r25, 0x00	; 0
    8e48:	b3 01       	movw	r22, r6
    8e4a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8e4e:	1f 5f       	subi	r17, 0xFF	; 255
    8e50:	1e 15       	cp	r17, r14
    8e52:	c0 f3       	brcs	.-16     	; 0x8e44 <vfprintf+0x33c>
    8e54:	04 c0       	rjmp	.+8      	; 0x8e5e <vfprintf+0x356>
    8e56:	1e 15       	cp	r17, r14
    8e58:	10 f4       	brcc	.+4      	; 0x8e5e <vfprintf+0x356>
    8e5a:	e1 1a       	sub	r14, r17
    8e5c:	01 c0       	rjmp	.+2      	; 0x8e60 <vfprintf+0x358>
    8e5e:	ee 24       	eor	r14, r14
    8e60:	04 ff       	sbrs	r16, 4
    8e62:	0f c0       	rjmp	.+30     	; 0x8e82 <vfprintf+0x37a>
    8e64:	80 e3       	ldi	r24, 0x30	; 48
    8e66:	90 e0       	ldi	r25, 0x00	; 0
    8e68:	b3 01       	movw	r22, r6
    8e6a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8e6e:	02 ff       	sbrs	r16, 2
    8e70:	1d c0       	rjmp	.+58     	; 0x8eac <vfprintf+0x3a4>
    8e72:	01 fd       	sbrc	r16, 1
    8e74:	03 c0       	rjmp	.+6      	; 0x8e7c <vfprintf+0x374>
    8e76:	88 e7       	ldi	r24, 0x78	; 120
    8e78:	90 e0       	ldi	r25, 0x00	; 0
    8e7a:	0e c0       	rjmp	.+28     	; 0x8e98 <vfprintf+0x390>
    8e7c:	88 e5       	ldi	r24, 0x58	; 88
    8e7e:	90 e0       	ldi	r25, 0x00	; 0
    8e80:	0b c0       	rjmp	.+22     	; 0x8e98 <vfprintf+0x390>
    8e82:	80 2f       	mov	r24, r16
    8e84:	86 78       	andi	r24, 0x86	; 134
    8e86:	91 f0       	breq	.+36     	; 0x8eac <vfprintf+0x3a4>
    8e88:	01 ff       	sbrs	r16, 1
    8e8a:	02 c0       	rjmp	.+4      	; 0x8e90 <vfprintf+0x388>
    8e8c:	8b e2       	ldi	r24, 0x2B	; 43
    8e8e:	01 c0       	rjmp	.+2      	; 0x8e92 <vfprintf+0x38a>
    8e90:	80 e2       	ldi	r24, 0x20	; 32
    8e92:	f7 fc       	sbrc	r15, 7
    8e94:	8d e2       	ldi	r24, 0x2D	; 45
    8e96:	90 e0       	ldi	r25, 0x00	; 0
    8e98:	b3 01       	movw	r22, r6
    8e9a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8e9e:	06 c0       	rjmp	.+12     	; 0x8eac <vfprintf+0x3a4>
    8ea0:	80 e3       	ldi	r24, 0x30	; 48
    8ea2:	90 e0       	ldi	r25, 0x00	; 0
    8ea4:	b3 01       	movw	r22, r6
    8ea6:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8eaa:	9a 94       	dec	r9
    8eac:	d9 14       	cp	r13, r9
    8eae:	c0 f3       	brcs	.-16     	; 0x8ea0 <vfprintf+0x398>
    8eb0:	da 94       	dec	r13
    8eb2:	f1 01       	movw	r30, r2
    8eb4:	ed 0d       	add	r30, r13
    8eb6:	f1 1d       	adc	r31, r1
    8eb8:	80 81       	ld	r24, Z
    8eba:	90 e0       	ldi	r25, 0x00	; 0
    8ebc:	b3 01       	movw	r22, r6
    8ebe:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8ec2:	dd 20       	and	r13, r13
    8ec4:	a9 f7       	brne	.-22     	; 0x8eb0 <vfprintf+0x3a8>
    8ec6:	06 c0       	rjmp	.+12     	; 0x8ed4 <vfprintf+0x3cc>
    8ec8:	80 e2       	ldi	r24, 0x20	; 32
    8eca:	90 e0       	ldi	r25, 0x00	; 0
    8ecc:	b3 01       	movw	r22, r6
    8ece:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <fputc>
    8ed2:	ea 94       	dec	r14
    8ed4:	ee 20       	and	r14, r14
    8ed6:	c1 f7       	brne	.-16     	; 0x8ec8 <vfprintf+0x3c0>
    8ed8:	43 ce       	rjmp	.-890    	; 0x8b60 <vfprintf+0x58>
    8eda:	f3 01       	movw	r30, r6
    8edc:	66 81       	ldd	r22, Z+6	; 0x06
    8ede:	77 81       	ldd	r23, Z+7	; 0x07
    8ee0:	cb 01       	movw	r24, r22
    8ee2:	2b 96       	adiw	r28, 0x0b	; 11
    8ee4:	0f b6       	in	r0, 0x3f	; 63
    8ee6:	f8 94       	cli
    8ee8:	de bf       	out	0x3e, r29	; 62
    8eea:	0f be       	out	0x3f, r0	; 63
    8eec:	cd bf       	out	0x3d, r28	; 61
    8eee:	cf 91       	pop	r28
    8ef0:	df 91       	pop	r29
    8ef2:	1f 91       	pop	r17
    8ef4:	0f 91       	pop	r16
    8ef6:	ff 90       	pop	r15
    8ef8:	ef 90       	pop	r14
    8efa:	df 90       	pop	r13
    8efc:	cf 90       	pop	r12
    8efe:	bf 90       	pop	r11
    8f00:	af 90       	pop	r10
    8f02:	9f 90       	pop	r9
    8f04:	8f 90       	pop	r8
    8f06:	7f 90       	pop	r7
    8f08:	6f 90       	pop	r6
    8f0a:	5f 90       	pop	r5
    8f0c:	4f 90       	pop	r4
    8f0e:	3f 90       	pop	r3
    8f10:	2f 90       	pop	r2
    8f12:	08 95       	ret

00008f14 <strnlen_P>:
    8f14:	fc 01       	movw	r30, r24
    8f16:	05 90       	lpm	r0, Z+
    8f18:	61 50       	subi	r22, 0x01	; 1
    8f1a:	70 40       	sbci	r23, 0x00	; 0
    8f1c:	01 10       	cpse	r0, r1
    8f1e:	d8 f7       	brcc	.-10     	; 0x8f16 <strnlen_P+0x2>
    8f20:	80 95       	com	r24
    8f22:	90 95       	com	r25
    8f24:	8e 0f       	add	r24, r30
    8f26:	9f 1f       	adc	r25, r31
    8f28:	08 95       	ret

00008f2a <strnlen>:
    8f2a:	fc 01       	movw	r30, r24
    8f2c:	61 50       	subi	r22, 0x01	; 1
    8f2e:	70 40       	sbci	r23, 0x00	; 0
    8f30:	01 90       	ld	r0, Z+
    8f32:	01 10       	cpse	r0, r1
    8f34:	d8 f7       	brcc	.-10     	; 0x8f2c <strnlen+0x2>
    8f36:	80 95       	com	r24
    8f38:	90 95       	com	r25
    8f3a:	8e 0f       	add	r24, r30
    8f3c:	9f 1f       	adc	r25, r31
    8f3e:	08 95       	ret

00008f40 <fputc>:
    8f40:	0f 93       	push	r16
    8f42:	1f 93       	push	r17
    8f44:	cf 93       	push	r28
    8f46:	df 93       	push	r29
    8f48:	8c 01       	movw	r16, r24
    8f4a:	eb 01       	movw	r28, r22
    8f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    8f4e:	81 ff       	sbrs	r24, 1
    8f50:	1b c0       	rjmp	.+54     	; 0x8f88 <fputc+0x48>
    8f52:	82 ff       	sbrs	r24, 2
    8f54:	0d c0       	rjmp	.+26     	; 0x8f70 <fputc+0x30>
    8f56:	2e 81       	ldd	r18, Y+6	; 0x06
    8f58:	3f 81       	ldd	r19, Y+7	; 0x07
    8f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    8f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    8f5e:	28 17       	cp	r18, r24
    8f60:	39 07       	cpc	r19, r25
    8f62:	64 f4       	brge	.+24     	; 0x8f7c <fputc+0x3c>
    8f64:	e8 81       	ld	r30, Y
    8f66:	f9 81       	ldd	r31, Y+1	; 0x01
    8f68:	01 93       	st	Z+, r16
    8f6a:	f9 83       	std	Y+1, r31	; 0x01
    8f6c:	e8 83       	st	Y, r30
    8f6e:	06 c0       	rjmp	.+12     	; 0x8f7c <fputc+0x3c>
    8f70:	e8 85       	ldd	r30, Y+8	; 0x08
    8f72:	f9 85       	ldd	r31, Y+9	; 0x09
    8f74:	80 2f       	mov	r24, r16
    8f76:	09 95       	icall
    8f78:	89 2b       	or	r24, r25
    8f7a:	31 f4       	brne	.+12     	; 0x8f88 <fputc+0x48>
    8f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    8f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    8f80:	01 96       	adiw	r24, 0x01	; 1
    8f82:	9f 83       	std	Y+7, r25	; 0x07
    8f84:	8e 83       	std	Y+6, r24	; 0x06
    8f86:	02 c0       	rjmp	.+4      	; 0x8f8c <fputc+0x4c>
    8f88:	0f ef       	ldi	r16, 0xFF	; 255
    8f8a:	1f ef       	ldi	r17, 0xFF	; 255
    8f8c:	c8 01       	movw	r24, r16
    8f8e:	df 91       	pop	r29
    8f90:	cf 91       	pop	r28
    8f92:	1f 91       	pop	r17
    8f94:	0f 91       	pop	r16
    8f96:	08 95       	ret

00008f98 <__ultoa_invert>:
    8f98:	fa 01       	movw	r30, r20
    8f9a:	aa 27       	eor	r26, r26
    8f9c:	28 30       	cpi	r18, 0x08	; 8
    8f9e:	51 f1       	breq	.+84     	; 0x8ff4 <__ultoa_invert+0x5c>
    8fa0:	20 31       	cpi	r18, 0x10	; 16
    8fa2:	81 f1       	breq	.+96     	; 0x9004 <__ultoa_invert+0x6c>
    8fa4:	e8 94       	clt
    8fa6:	6f 93       	push	r22
    8fa8:	6e 7f       	andi	r22, 0xFE	; 254
    8faa:	6e 5f       	subi	r22, 0xFE	; 254
    8fac:	7f 4f       	sbci	r23, 0xFF	; 255
    8fae:	8f 4f       	sbci	r24, 0xFF	; 255
    8fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    8fb2:	af 4f       	sbci	r26, 0xFF	; 255
    8fb4:	b1 e0       	ldi	r27, 0x01	; 1
    8fb6:	3e d0       	rcall	.+124    	; 0x9034 <__ultoa_invert+0x9c>
    8fb8:	b4 e0       	ldi	r27, 0x04	; 4
    8fba:	3c d0       	rcall	.+120    	; 0x9034 <__ultoa_invert+0x9c>
    8fbc:	67 0f       	add	r22, r23
    8fbe:	78 1f       	adc	r23, r24
    8fc0:	89 1f       	adc	r24, r25
    8fc2:	9a 1f       	adc	r25, r26
    8fc4:	a1 1d       	adc	r26, r1
    8fc6:	68 0f       	add	r22, r24
    8fc8:	79 1f       	adc	r23, r25
    8fca:	8a 1f       	adc	r24, r26
    8fcc:	91 1d       	adc	r25, r1
    8fce:	a1 1d       	adc	r26, r1
    8fd0:	6a 0f       	add	r22, r26
    8fd2:	71 1d       	adc	r23, r1
    8fd4:	81 1d       	adc	r24, r1
    8fd6:	91 1d       	adc	r25, r1
    8fd8:	a1 1d       	adc	r26, r1
    8fda:	20 d0       	rcall	.+64     	; 0x901c <__ultoa_invert+0x84>
    8fdc:	09 f4       	brne	.+2      	; 0x8fe0 <__ultoa_invert+0x48>
    8fde:	68 94       	set
    8fe0:	3f 91       	pop	r19
    8fe2:	2a e0       	ldi	r18, 0x0A	; 10
    8fe4:	26 9f       	mul	r18, r22
    8fe6:	11 24       	eor	r1, r1
    8fe8:	30 19       	sub	r19, r0
    8fea:	30 5d       	subi	r19, 0xD0	; 208
    8fec:	31 93       	st	Z+, r19
    8fee:	de f6       	brtc	.-74     	; 0x8fa6 <__ultoa_invert+0xe>
    8ff0:	cf 01       	movw	r24, r30
    8ff2:	08 95       	ret
    8ff4:	46 2f       	mov	r20, r22
    8ff6:	47 70       	andi	r20, 0x07	; 7
    8ff8:	40 5d       	subi	r20, 0xD0	; 208
    8ffa:	41 93       	st	Z+, r20
    8ffc:	b3 e0       	ldi	r27, 0x03	; 3
    8ffe:	0f d0       	rcall	.+30     	; 0x901e <__ultoa_invert+0x86>
    9000:	c9 f7       	brne	.-14     	; 0x8ff4 <__ultoa_invert+0x5c>
    9002:	f6 cf       	rjmp	.-20     	; 0x8ff0 <__ultoa_invert+0x58>
    9004:	46 2f       	mov	r20, r22
    9006:	4f 70       	andi	r20, 0x0F	; 15
    9008:	40 5d       	subi	r20, 0xD0	; 208
    900a:	4a 33       	cpi	r20, 0x3A	; 58
    900c:	18 f0       	brcs	.+6      	; 0x9014 <__ultoa_invert+0x7c>
    900e:	49 5d       	subi	r20, 0xD9	; 217
    9010:	31 fd       	sbrc	r19, 1
    9012:	40 52       	subi	r20, 0x20	; 32
    9014:	41 93       	st	Z+, r20
    9016:	02 d0       	rcall	.+4      	; 0x901c <__ultoa_invert+0x84>
    9018:	a9 f7       	brne	.-22     	; 0x9004 <__ultoa_invert+0x6c>
    901a:	ea cf       	rjmp	.-44     	; 0x8ff0 <__ultoa_invert+0x58>
    901c:	b4 e0       	ldi	r27, 0x04	; 4
    901e:	a6 95       	lsr	r26
    9020:	97 95       	ror	r25
    9022:	87 95       	ror	r24
    9024:	77 95       	ror	r23
    9026:	67 95       	ror	r22
    9028:	ba 95       	dec	r27
    902a:	c9 f7       	brne	.-14     	; 0x901e <__ultoa_invert+0x86>
    902c:	00 97       	sbiw	r24, 0x00	; 0
    902e:	61 05       	cpc	r22, r1
    9030:	71 05       	cpc	r23, r1
    9032:	08 95       	ret
    9034:	9b 01       	movw	r18, r22
    9036:	ac 01       	movw	r20, r24
    9038:	0a 2e       	mov	r0, r26
    903a:	06 94       	lsr	r0
    903c:	57 95       	ror	r21
    903e:	47 95       	ror	r20
    9040:	37 95       	ror	r19
    9042:	27 95       	ror	r18
    9044:	ba 95       	dec	r27
    9046:	c9 f7       	brne	.-14     	; 0x903a <__ultoa_invert+0xa2>
    9048:	62 0f       	add	r22, r18
    904a:	73 1f       	adc	r23, r19
    904c:	84 1f       	adc	r24, r20
    904e:	95 1f       	adc	r25, r21
    9050:	a0 1d       	adc	r26, r0
    9052:	08 95       	ret

00009054 <_exit>:
    9054:	f8 94       	cli

00009056 <__stop_program>:
    9056:	ff cf       	rjmp	.-2      	; 0x9056 <__stop_program>
