
printf_getline_example_gcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000034c  00800100  00000e8c  00000f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000408  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000084  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000011a  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ba  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000215  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c90  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00002fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000033  00000000  00000000  00003081  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
   c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  60:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  7c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  84:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  88:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  8c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
  90:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	14 e0       	ldi	r17, 0x04	; 4
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec e8       	ldi	r30, 0x8C	; 140
  a8:	fe e0       	ldi	r31, 0x0E	; 14
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 34       	cpi	r26, 0x4C	; 76
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	14 e0       	ldi	r17, 0x04	; 4
  bc:	ac e4       	ldi	r26, 0x4C	; 76
  be:	b4 e0       	ldi	r27, 0x04	; 4
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	ac 34       	cpi	r26, 0x4C	; 76
  c6:	b1 07       	cpc	r27, r17
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0c 94 69 00 	jmp	0xd2	; 0xd2 <main>

000000ce <__bad_interrupt>:
  ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <main>:
#include "uart_drv.h"


int main (void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	6c 97       	sbiw	r28, 0x1c	; 28
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
U8 uart_str[]= ".....                ";
  e6:	ce 01       	movw	r24, r28
  e8:	02 96       	adiw	r24, 0x02	; 2
  ea:	99 8f       	std	Y+25, r25	; 0x19
  ec:	88 8f       	std	Y+24, r24	; 0x18
  ee:	ec e5       	ldi	r30, 0x5C	; 92
  f0:	f2 e0       	ldi	r31, 0x02	; 2
  f2:	fb 8f       	std	Y+27, r31	; 0x1b
  f4:	ea 8f       	std	Y+26, r30	; 0x1a
  f6:	f6 e1       	ldi	r31, 0x16	; 22
  f8:	fc 8f       	std	Y+28, r31	; 0x1c
  fa:	ea 8d       	ldd	r30, Y+26	; 0x1a
  fc:	fb 8d       	ldd	r31, Y+27	; 0x1b
  fe:	00 80       	ld	r0, Z
 100:	8a 8d       	ldd	r24, Y+26	; 0x1a
 102:	9b 8d       	ldd	r25, Y+27	; 0x1b
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	9b 8f       	std	Y+27, r25	; 0x1b
 108:	8a 8f       	std	Y+26, r24	; 0x1a
 10a:	e8 8d       	ldd	r30, Y+24	; 0x18
 10c:	f9 8d       	ldd	r31, Y+25	; 0x19
 10e:	00 82       	st	Z, r0
 110:	88 8d       	ldd	r24, Y+24	; 0x18
 112:	99 8d       	ldd	r25, Y+25	; 0x19
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	99 8f       	std	Y+25, r25	; 0x19
 118:	88 8f       	std	Y+24, r24	; 0x18
 11a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 11c:	91 50       	subi	r25, 0x01	; 1
 11e:	9c 8f       	std	Y+28, r25	; 0x1c
 120:	ec 8d       	ldd	r30, Y+28	; 0x1c
 122:	ee 23       	and	r30, r30
 124:	51 f7       	brne	.-44     	; 0xfa <main+0x28>
U8 u8_temp;

  // UART Initialization
    uart_init(CONF_8BIT_NOPAR_1STOP,UART_BAUDRATE);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	56 e9       	ldi	r21, 0x96	; 150
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 59 01 	call	0x2b2	; 0x2b2 <uart_init>
    
  // 'printf' test
    uart_mini_printf("\r\n\n... printf_getline_example ...\r\n");
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	9f 93       	push	r25
 13a:	8f 93       	push	r24
 13c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
    u8_temp=0x55;
 144:	85 e5       	ldi	r24, 0x55	; 85
 146:	89 83       	std	Y+1, r24	; 0x01
    uart_mini_printf("Hello world, the magic number is = 0x%X ... fifty-five !\r\n", u8_temp);
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	99 27       	eor	r25, r25
 14c:	9f 93       	push	r25
 14e:	8f 93       	push	r24
 150:	84 e2       	ldi	r24, 0x24	; 36
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	9f 93       	push	r25
 156:	8f 93       	push	r24
 158:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
    u8_temp++;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	89 83       	std	Y+1, r24	; 0x01
    uart_mini_printf("Hello world, the magic number is = 0x%X ... fifty-six !\r\n", u8_temp);
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	99 27       	eor	r25, r25
 16e:	9f 93       	push	r25
 170:	8f 93       	push	r24
 172:	8f e5       	ldi	r24, 0x5F	; 95
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9f 93       	push	r25
 178:	8f 93       	push	r24
 17a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
    u8_temp++;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	89 83       	std	Y+1, r24	; 0x01
    uart_mini_printf("Hello world, the magic number is = 0x%X ... fifty-seven !\r\n", u8_temp);
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	99 27       	eor	r25, r25
 190:	9f 93       	push	r25
 192:	8f 93       	push	r24
 194:	89 e9       	ldi	r24, 0x99	; 153
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	9f 93       	push	r25
 19a:	8f 93       	push	r24
 19c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
    u8_temp++;
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	89 83       	std	Y+1, r24	; 0x01
    uart_mini_printf("Hello world, the magic number is = 0x%X ... fifty-height !\r\n", u8_temp);
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	99 27       	eor	r25, r25
 1b2:	9f 93       	push	r25
 1b4:	8f 93       	push	r24
 1b6:	85 ed       	ldi	r24, 0xD5	; 213
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	9f 93       	push	r25
 1bc:	8f 93       	push	r24
 1be:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
    u8_temp++;
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	89 83       	std	Y+1, r24	; 0x01
    uart_mini_printf("Hello world, the magic number is = 0x%X ... fifty-nine !\r\n", u8_temp);
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	99 27       	eor	r25, r25
 1d4:	9f 93       	push	r25
 1d6:	8f 93       	push	r24
 1d8:	82 e1       	ldi	r24, 0x12	; 18
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
    u8_temp++;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	89 83       	std	Y+1, r24	; 0x01
 
    while(1) // No-Stop !
    {
        // get characters test
        uart_get_editedline(&uart_str[5], 13);
 1f2:	ce 01       	movw	r24, r28
 1f4:	02 96       	adiw	r24, 0x02	; 2
 1f6:	05 96       	adiw	r24, 0x05	; 5
 1f8:	6d e0       	ldi	r22, 0x0D	; 13
 1fa:	0e 94 fd 05 	call	0xbfa	; 0xbfa <uart_get_editedline>
        uart_mini_printf("\r\nGot: %s\r\n", &uart_str[5]);
 1fe:	ce 01       	movw	r24, r28
 200:	02 96       	adiw	r24, 0x02	; 2
 202:	05 96       	adiw	r24, 0x05	; 5
 204:	9f 93       	push	r25
 206:	8f 93       	push	r24
 208:	8d e4       	ldi	r24, 0x4D	; 77
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	9f 93       	push	r25
 20e:	8f 93       	push	r24
 210:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
        uart_put_string (uart_str);
 21c:	ce 01       	movw	r24, r28
 21e:	02 96       	adiw	r24, 0x02	; 2
 220:	0e 94 37 02 	call	0x46e	; 0x46e <uart_put_string>
        uart_mini_printf("\r\n");
 224:	89 e5       	ldi	r24, 0x59	; 89
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	9f 93       	push	r25
 22a:	8f 93       	push	r24
 22c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <uart_mini_printf>
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
    }
 234:	de cf       	rjmp	.-68     	; 0x1f2 <main+0x120>

00000236 <uart_rx_get_3_data>:
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	21 97       	sbiw	r28, 0x01	; 1
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
U8 u8_temp = 0;
 24a:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
 24c:	ec e2       	ldi	r30, 0x2C	; 44
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	ec e2       	ldi	r30, 0x2C	; 44
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	98 23       	and	r25, r24
 25a:	ec e2       	ldi	r30, 0x2C	; 44
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	89 23       	and	r24, r25
 262:	81 70       	andi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    }
    if (uart_selected == UART_1)
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	99 27       	eor	r25, r25
 26a:	21 96       	adiw	r28, 0x01	; 1
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <uart_rx_get_data>:
}


//------------------------------------------------------------------------------
//  @fn uart_rx_get_data
//!
//! This function returns the UART pin value.
//!
//! @warning none
//!
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	21 97       	sbiw	r28, 0x01	; 1
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
U8 u8_temp = 0;
 290:	19 82       	std	Y+1, r1	; 0x01

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
 292:	ec e2       	ldi	r30, 0x2C	; 44
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	81 70       	andi	r24, 0x01	; 1
 29a:	89 83       	std	Y+1, r24	; 0x01
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
    }
    if (uart_selected == UART_1)
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	99 27       	eor	r25, r25
 2a0:	21 96       	adiw	r28, 0x01	; 1
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <uart_init>:
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	27 97       	sbiw	r28, 0x07	; 7
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	4a 83       	std	Y+2, r20	; 0x02
 2ca:	5b 83       	std	Y+3, r21	; 0x03
 2cc:	6c 83       	std	Y+4, r22	; 0x04
 2ce:	7d 83       	std	Y+5, r23	; 0x05
    Uart_clear();       // Flush, Disable and Reset UART
 2d0:	e1 ec       	ldi	r30, 0xC1	; 193
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	10 82       	st	Z, r1
 2d6:	a2 ec       	ldi	r26, 0xC2	; 194
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	e6 ec       	ldi	r30, 0xC6	; 198
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8c 93       	st	X, r24
 2e2:	e0 ec       	ldi	r30, 0xC0	; 192
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 e4       	ldi	r24, 0x40	; 64
 2e8:	80 83       	st	Z, r24
 2ea:	e2 ec       	ldi	r30, 0xC2	; 194
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	86 e0       	ldi	r24, 0x06	; 6
 2f0:	80 83       	st	Z, r24
 2f2:	e5 ec       	ldi	r30, 0xC5	; 197
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	10 82       	st	Z, r1
 2f8:	e4 ec       	ldi	r30, 0xC4	; 196
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	10 82       	st	Z, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
 2fe:	e5 ec       	ldi	r30, 0xC5	; 197
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	10 82       	st	Z, r1
 304:	e4 ec       	ldi	r30, 0xC4	; 196
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	89 e1       	ldi	r24, 0x19	; 25
 30a:	80 83       	st	Z, r24
 30c:	a0 ec       	ldi	r26, 0xC0	; 192
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e0 ec       	ldi	r30, 0xC0	; 192
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	82 60       	ori	r24, 0x02	; 2
 318:	8c 93       	st	X, r24
 31a:	8c 91       	ld	r24, X
 31c:	88 23       	and	r24, r24
 31e:	19 f4       	brne	.+6      	; 0x326 <uart_init+0x74>
 320:	1f 82       	std	Y+7, r1	; 0x07
 322:	1e 82       	std	Y+6, r1	; 0x06
 324:	36 c0       	rjmp	.+108    	; 0x392 <uart_init+0xe0>
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
 326:	a0 ec       	ldi	r26, 0xC0	; 192
 328:	b0 e0       	ldi	r27, 0x00	; 0
 32a:	e0 ec       	ldi	r30, 0xC0	; 192
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	80 81       	ld	r24, Z
 330:	80 62       	ori	r24, 0x20	; 32
 332:	8c 93       	st	X, r24
 334:	a1 ec       	ldi	r26, 0xC1	; 193
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e1 ec       	ldi	r30, 0xC1	; 193
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8b 7f       	andi	r24, 0xFB	; 251
 340:	8c 93       	st	X, r24
 342:	a1 ec       	ldi	r26, 0xC1	; 193
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e1 ec       	ldi	r30, 0xC1	; 193
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	98 2f       	mov	r25, r24
 34e:	89 81       	ldd	r24, Y+1	; 0x01
 350:	84 70       	andi	r24, 0x04	; 4
 352:	89 2b       	or	r24, r25
 354:	8c 93       	st	X, r24
 356:	e2 ec       	ldi	r30, 0xC2	; 194
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	89 81       	ldd	r24, Y+1	; 0x01
 35c:	88 73       	andi	r24, 0x38	; 56
 35e:	80 83       	st	Z, r24
 360:	a2 ec       	ldi	r26, 0xC2	; 194
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e2 ec       	ldi	r30, 0xC2	; 194
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	28 2f       	mov	r18, r24
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	99 27       	eor	r25, r25
 370:	83 70       	andi	r24, 0x03	; 3
 372:	90 70       	andi	r25, 0x00	; 0
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	82 2b       	or	r24, r18
 37a:	8c 93       	st	X, r24
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
 37c:	a1 ec       	ldi	r26, 0xC1	; 193
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e1 ec       	ldi	r30, 0xC1	; 193
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	88 61       	ori	r24, 0x18	; 24
 388:	8c 93       	st	X, r24
    return (1);
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9f 83       	std	Y+7, r25	; 0x07
 390:	8e 83       	std	Y+6, r24	; 0x06
 392:	8e 81       	ldd	r24, Y+6	; 0x06
 394:	9f 81       	ldd	r25, Y+7	; 0x07
 396:	27 96       	adiw	r28, 0x07	; 7
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <uart_test_hit>:
}

//------------------------------------------------------------------------------
//  @fn uart_test_hit
//!
//! Check if something has been received on the UART peripheral.
//!
//! @warning none
//!
//! @param  none
//!
//! @return Baudrate Status
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
    return (Uart_rx_ready());
 3b0:	e0 ec       	ldi	r30, 0xC0	; 192
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	99 27       	eor	r25, r25
 3b8:	80 78       	andi	r24, 0x80	; 128
 3ba:	90 70       	andi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	89 2f       	mov	r24, r25
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 0b       	sbc	r25, r25
 3c4:	99 27       	eor	r25, r25
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <uart_putchar>:
}

//------------------------------------------------------------------------------
//  @fn uart_putchar
//!
//! Send a character on the UART peripheral.
//!
//! @warning none
//!
//! @param  character to send
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	21 97       	sbiw	r28, 0x01	; 1
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	89 83       	std	Y+1, r24	; 0x01
    while(!Uart_tx_ready());
 3e2:	e0 ec       	ldi	r30, 0xC0	; 192
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	99 27       	eor	r25, r25
 3ea:	80 72       	andi	r24, 0x20	; 32
 3ec:	90 70       	andi	r25, 0x00	; 0
 3ee:	95 95       	asr	r25
 3f0:	87 95       	ror	r24
 3f2:	95 95       	asr	r25
 3f4:	87 95       	ror	r24
 3f6:	95 95       	asr	r25
 3f8:	87 95       	ror	r24
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	00 97       	sbiw	r24, 0x00	; 0
 404:	71 f3       	breq	.-36     	; 0x3e2 <uart_putchar+0x16>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
 406:	e6 ec       	ldi	r30, 0xC6	; 198
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	80 83       	st	Z, r24
    return (ch);
 40e:	89 81       	ldd	r24, Y+1	; 0x01
 410:	99 27       	eor	r25, r25
 412:	21 96       	adiw	r28, 0x01	; 1
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <uart_getchar>:
}

//------------------------------------------------------------------------------
//  @fn uart_getchar
//!
//! Get a character from the UART peripheral.
//!
//! @warning none
//!
//! @param  none
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	21 97       	sbiw	r28, 0x01	; 1
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
    U8 ch;

    while(!Uart_rx_ready());
 438:	e0 ec       	ldi	r30, 0xC0	; 192
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	99 27       	eor	r25, r25
 440:	80 78       	andi	r24, 0x80	; 128
 442:	90 70       	andi	r25, 0x00	; 0
 444:	88 0f       	add	r24, r24
 446:	89 2f       	mov	r24, r25
 448:	88 1f       	adc	r24, r24
 44a:	99 0b       	sbc	r25, r25
 44c:	00 97       	sbiw	r24, 0x00	; 0
 44e:	a1 f3       	breq	.-24     	; 0x438 <uart_getchar+0x14>
    ch = Uart_get_byte();
 450:	e6 ec       	ldi	r30, 0xC6	; 198
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	89 83       	std	Y+1, r24	; 0x01
    Uart_ack_rx_byte();
    return ch;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	99 27       	eor	r25, r25
 45c:	21 96       	adiw	r28, 0x01	; 1
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <uart_put_string>:
}

//------------------------------------------------------------------------------
//  @fn uart_put_string
//!
//! Put a data-string on TX UART. The data-string is send up to null
//! character is found.
//!
//! @warning "uart_init()" must be performed before
//!
//! @param Pointer on U8 data-string
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	22 97       	sbiw	r28, 0x02	; 2
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
    while(*data_string) uart_putchar (*data_string++);
 486:	0b c0       	rjmp	.+22     	; 0x49e <uart_put_string+0x30>
 488:	e9 81       	ldd	r30, Y+1	; 0x01
 48a:	fa 81       	ldd	r31, Y+2	; 0x02
 48c:	20 81       	ld	r18, Z
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	9a 81       	ldd	r25, Y+2	; 0x02
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	9a 83       	std	Y+2, r25	; 0x02
 496:	89 83       	std	Y+1, r24	; 0x01
 498:	82 2f       	mov	r24, r18
 49a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 49e:	e9 81       	ldd	r30, Y+1	; 0x01
 4a0:	fa 81       	ldd	r31, Y+2	; 0x02
 4a2:	80 81       	ld	r24, Z
 4a4:	88 23       	and	r24, r24
 4a6:	81 f7       	brne	.-32     	; 0x488 <uart_put_string+0x1a>
 4a8:	22 96       	adiw	r28, 0x02	; 2
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <uart_mini_printf>:
    }
#endif  // REDUCED_UART_LIB

//------------------------------------------------------------------------------
//  @fn uart_mini_printf
//!
//! Minimal "PRINTF" with variable argument list. Write several variables
//! formatted by a format string to a file descriptor.
//! Example:
//! ========
//! { u8_toto = 0xAA;
//!   uart_mini_printf ("toto = %04d (0x%012X)\r\n", u8_toto, u8_toto);
//!   /*   Expected:     toto = 0170 (0x0000000000AA)   &  Cr+Lf       */ }
//!
//! @warning "uart_init()" must be performed before
//!
//! @param argument list
//!
//!     The format string is interpreted like this:
//!        ,---------------,---------------------------------------------------,
//!        | Any character | Output as is                                      |
//!        |---------------+---------------------------------------------------|
//!        |     %c:       | interpret argument as character                   |
//!        |     %s:       | interpret argument as pointer to string           |
//!        |     %d:       | interpret argument as decimal (signed) S16        |
//!        |     %ld:      | interpret argument as decimal (signed) S32        |
//!        |     %u:       | interpret argument as decimal (unsigned) U16      |
//!        |     %lu:      | interpret argument as decimal (unsigned) U32      |
//!        |     %x:       | interpret argument as hex U16 (lower case chars)  |
//!        |     %lx:      | interpret argument as hex U32 (lower case chars)  |
//!        |     %X:       | interpret argument as hex U16 (upper case chars)  |
//!        |     %lX:      | interpret argument as hex U32 (upper case chars)  |
//!        |     %%:       | print a percent ('%') character                   |
//!        '---------------'---------------------------------------------------'
//!
//!     Field width (in decimal) always starts with "0" and its maximum is
//!     given by "DATA_BUF_LEN" defined in "uart_lib.h".
//!        ,----------------------,-----------,--------------,-----------------,
//!        |       Variable       | Writting  |  Printing    |    Comment      |
//!        |----------------------+-----------+--------------|-----------------|
//!        |                      |   %x      | aa           |        -        |
//!        |  u8_xx = 0xAA        |   %04d    | 0170         |        -        |
//!        |                      |   %012X   | 0000000000AA |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        | u16_xx = -5678       |   %010d   | -0000005678  |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        | u32_xx = -4100000000 |   %011lu  | 00194967296  |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        |          -           |   %8x     | 8x           | Writting error! |
//!        |----------------------+-----------+--------------|-----------------|
//!        |          -           |   %0s     | 0s           | Writting error! |
//!        '----------------------'-----------'--------------'-----------------'
//!       
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	af 97       	sbiw	r28, 0x2f	; 47
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
    va_list arg_ptr;
    U8      *p,*sval;
    U8      u8_temp, n_sign, data_idx, min_size;
    U8      data_buf[DATA_BUF_LEN];
    S8      long_flag, alt_p_c;
    S8      s8_val;
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
 4d2:	1f 86       	std	Y+15, r1	; 0x0f
    alt_p_c = FALSE;
 4d4:	1e 86       	std	Y+14, r1	; 0x0e
    min_size = DATA_BUF_LEN-1;
 4d6:	8b e0       	ldi	r24, 0x0B	; 11
 4d8:	88 8b       	std	Y+16, r24	; 0x10

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
 4da:	ce 01       	movw	r24, r28
 4dc:	c8 96       	adiw	r24, 0x38	; 56
 4de:	99 8f       	std	Y+25, r25	; 0x19
 4e0:	88 8f       	std	Y+24, r24	; 0x18
    for (p = (U8 *) format; *p; p++)
 4e2:	8e a9       	ldd	r24, Y+54	; 0x36
 4e4:	9f a9       	ldd	r25, Y+55	; 0x37
 4e6:	9f 8b       	std	Y+23, r25	; 0x17
 4e8:	8e 8b       	std	Y+22, r24	; 0x16
 4ea:	74 c3       	rjmp	.+1768   	; 0xbd4 <uart_mini_printf+0x71a>
    {
        if ((*p == '%') || (alt_p_c == TRUE))
 4ec:	ee 89       	ldd	r30, Y+22	; 0x16
 4ee:	ff 89       	ldd	r31, Y+23	; 0x17
 4f0:	80 81       	ld	r24, Z
 4f2:	85 32       	cpi	r24, 0x25	; 37
 4f4:	21 f0       	breq	.+8      	; 0x4fe <uart_mini_printf+0x44>
 4f6:	8e 85       	ldd	r24, Y+14	; 0x0e
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	09 f0       	breq	.+2      	; 0x4fe <uart_mini_printf+0x44>
 4fc:	47 c0       	rjmp	.+142    	; 0x58c <uart_mini_printf+0xd2>
        {
            p++;
 4fe:	8e 89       	ldd	r24, Y+22	; 0x16
 500:	9f 89       	ldd	r25, Y+23	; 0x17
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	9f 8b       	std	Y+23, r25	; 0x17
 506:	8e 8b       	std	Y+22, r24	; 0x16
        }
        else
        {
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
 508:	ee 89       	ldd	r30, Y+22	; 0x16
 50a:	ff 89       	ldd	r31, Y+23	; 0x17
 50c:	80 81       	ld	r24, Z
 50e:	28 2f       	mov	r18, r24
 510:	33 27       	eor	r19, r19
 512:	3f a7       	std	Y+47, r19	; 0x2f
 514:	2e a7       	std	Y+46, r18	; 0x2e
 516:	8e a5       	ldd	r24, Y+46	; 0x2e
 518:	9f a5       	ldd	r25, Y+47	; 0x2f
 51a:	84 36       	cpi	r24, 0x64	; 100
 51c:	91 05       	cpc	r25, r1
 51e:	09 f4       	brne	.+2      	; 0x522 <uart_mini_printf+0x68>
 520:	96 c0       	rjmp	.+300    	; 0x64e <uart_mini_printf+0x194>
 522:	2e a5       	ldd	r18, Y+46	; 0x2e
 524:	3f a5       	ldd	r19, Y+47	; 0x2f
 526:	25 36       	cpi	r18, 0x65	; 101
 528:	31 05       	cpc	r19, r1
 52a:	94 f4       	brge	.+36     	; 0x550 <uart_mini_printf+0x96>
 52c:	8e a5       	ldd	r24, Y+46	; 0x2e
 52e:	9f a5       	ldd	r25, Y+47	; 0x2f
 530:	88 35       	cpi	r24, 0x58	; 88
 532:	91 05       	cpc	r25, r1
 534:	09 f4       	brne	.+2      	; 0x538 <uart_mini_printf+0x7e>
 536:	fe c1       	rjmp	.+1020   	; 0x934 <uart_mini_printf+0x47a>
 538:	2e a5       	ldd	r18, Y+46	; 0x2e
 53a:	3f a5       	ldd	r19, Y+47	; 0x2f
 53c:	23 36       	cpi	r18, 0x63	; 99
 53e:	31 05       	cpc	r19, r1
 540:	69 f1       	breq	.+90     	; 0x59c <uart_mini_printf+0xe2>
 542:	8e a5       	ldd	r24, Y+46	; 0x2e
 544:	9f a5       	ldd	r25, Y+47	; 0x2f
 546:	80 33       	cpi	r24, 0x30	; 48
 548:	91 05       	cpc	r25, r1
 54a:	09 f4       	brne	.+2      	; 0x54e <uart_mini_printf+0x94>
 54c:	bd c2       	rjmp	.+1402   	; 0xac8 <uart_mini_printf+0x60e>
 54e:	2e c3       	rjmp	.+1628   	; 0xbac <uart_mini_printf+0x6f2>
 550:	2e a5       	ldd	r18, Y+46	; 0x2e
 552:	3f a5       	ldd	r19, Y+47	; 0x2f
 554:	23 37       	cpi	r18, 0x73	; 115
 556:	31 05       	cpc	r19, r1
 558:	e9 f1       	breq	.+122    	; 0x5d4 <uart_mini_printf+0x11a>
 55a:	8e a5       	ldd	r24, Y+46	; 0x2e
 55c:	9f a5       	ldd	r25, Y+47	; 0x2f
 55e:	84 37       	cpi	r24, 0x74	; 116
 560:	91 05       	cpc	r25, r1
 562:	3c f4       	brge	.+14     	; 0x572 <uart_mini_printf+0xb8>
 564:	2e a5       	ldd	r18, Y+46	; 0x2e
 566:	3f a5       	ldd	r19, Y+47	; 0x2f
 568:	2c 36       	cpi	r18, 0x6C	; 108
 56a:	31 05       	cpc	r19, r1
 56c:	09 f4       	brne	.+2      	; 0x570 <uart_mini_printf+0xb6>
 56e:	5c c0       	rjmp	.+184    	; 0x628 <uart_mini_printf+0x16e>
 570:	1d c3       	rjmp	.+1594   	; 0xbac <uart_mini_printf+0x6f2>
 572:	8e a5       	ldd	r24, Y+46	; 0x2e
 574:	9f a5       	ldd	r25, Y+47	; 0x2f
 576:	85 37       	cpi	r24, 0x75	; 117
 578:	91 05       	cpc	r25, r1
 57a:	09 f4       	brne	.+2      	; 0x57e <uart_mini_printf+0xc4>
 57c:	37 c1       	rjmp	.+622    	; 0x7ec <uart_mini_printf+0x332>
 57e:	2e a5       	ldd	r18, Y+46	; 0x2e
 580:	3f a5       	ldd	r19, Y+47	; 0x2f
 582:	28 37       	cpi	r18, 0x78	; 120
 584:	31 05       	cpc	r19, r1
 586:	09 f4       	brne	.+2      	; 0x58a <uart_mini_printf+0xd0>
 588:	d5 c1       	rjmp	.+938    	; 0x934 <uart_mini_printf+0x47a>
 58a:	10 c3       	rjmp	.+1568   	; 0xbac <uart_mini_printf+0x6f2>
 58c:	ee 89       	ldd	r30, Y+22	; 0x16
 58e:	ff 89       	ldd	r31, Y+23	; 0x17
 590:	80 81       	ld	r24, Z
 592:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 596:	1e 86       	std	Y+14, r1	; 0x0e
 598:	1f 86       	std	Y+15, r1	; 0x0f
 59a:	17 c3       	rjmp	.+1582   	; 0xbca <uart_mini_printf+0x710>
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
 59c:	8f 85       	ldd	r24, Y+15	; 0x0f
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	39 f4       	brne	.+14     	; 0x5b0 <uart_mini_printf+0xf6>
                {
                    uart_putchar('l');
 5a2:	8c e6       	ldi	r24, 0x6C	; 108
 5a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                    uart_putchar('c');
 5a8:	83 e6       	ldi	r24, 0x63	; 99
 5aa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 5ae:	0d c0       	rjmp	.+26     	; 0x5ca <uart_mini_printf+0x110>
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
 5b0:	28 8d       	ldd	r18, Y+24	; 0x18
 5b2:	39 8d       	ldd	r19, Y+25	; 0x19
 5b4:	c9 01       	movw	r24, r18
 5b6:	02 96       	adiw	r24, 0x02	; 2
 5b8:	99 8f       	std	Y+25, r25	; 0x19
 5ba:	88 8f       	std	Y+24, r24	; 0x18
 5bc:	f9 01       	movw	r30, r18
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	8d 87       	std	Y+13, r24	; 0x0d
                    uart_putchar((U8)(s8_val));
 5c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 5c6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
 5ca:	8b e0       	ldi	r24, 0x0B	; 11
 5cc:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 5ce:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 5d0:	1f 86       	std	Y+15, r1	; 0x0f
                break; // case 'c'
 5d2:	fb c2       	rjmp	.+1526   	; 0xbca <uart_mini_printf+0x710>
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
 5d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <uart_mini_printf+0x12e>
                {
                    uart_putchar('l');
 5da:	8c e6       	ldi	r24, 0x6C	; 108
 5dc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                    uart_putchar('s');
 5e0:	83 e7       	ldi	r24, 0x73	; 115
 5e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 5e6:	1b c0       	rjmp	.+54     	; 0x61e <uart_mini_printf+0x164>
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
 5e8:	28 8d       	ldd	r18, Y+24	; 0x18
 5ea:	39 8d       	ldd	r19, Y+25	; 0x19
 5ec:	c9 01       	movw	r24, r18
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	99 8f       	std	Y+25, r25	; 0x19
 5f2:	88 8f       	std	Y+24, r24	; 0x18
 5f4:	f9 01       	movw	r30, r18
 5f6:	80 81       	ld	r24, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	9d 8b       	std	Y+21, r25	; 0x15
 5fc:	8c 8b       	std	Y+20, r24	; 0x14
 5fe:	0a c0       	rjmp	.+20     	; 0x614 <uart_mini_printf+0x15a>
                    {
                        uart_putchar(*sval);
 600:	ec 89       	ldd	r30, Y+20	; 0x14
 602:	fd 89       	ldd	r31, Y+21	; 0x15
 604:	80 81       	ld	r24, Z
 606:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 60a:	8c 89       	ldd	r24, Y+20	; 0x14
 60c:	9d 89       	ldd	r25, Y+21	; 0x15
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	9d 8b       	std	Y+21, r25	; 0x15
 612:	8c 8b       	std	Y+20, r24	; 0x14
 614:	ec 89       	ldd	r30, Y+20	; 0x14
 616:	fd 89       	ldd	r31, Y+21	; 0x15
 618:	80 81       	ld	r24, Z
 61a:	88 23       	and	r24, r24
 61c:	89 f7       	brne	.-30     	; 0x600 <uart_mini_printf+0x146>
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
 61e:	8b e0       	ldi	r24, 0x0B	; 11
 620:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 622:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 624:	1f 86       	std	Y+15, r1	; 0x0f
                break;  // case 's'
 626:	d1 c2       	rjmp	.+1442   	; 0xbca <uart_mini_printf+0x710>
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
 628:	8f 85       	ldd	r24, Y+15	; 0x0f
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	31 f4       	brne	.+12     	; 0x63a <uart_mini_printf+0x180>
                {
                    uart_putchar('l');
 62e:	8c e6       	ldi	r24, 0x6C	; 108
 630:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                    alt_p_c = FALSE;
 634:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
 636:	1f 86       	std	Y+15, r1	; 0x0f
 638:	04 c0       	rjmp	.+8      	; 0x642 <uart_mini_printf+0x188>
                }
                else
                {
                    alt_p_c = TRUE;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	8e 87       	std	Y+14, r24	; 0x0e
                    long_flag = TRUE;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	8f 87       	std	Y+15, r24	; 0x0f
                }
                p--;
 642:	8e 89       	ldd	r24, Y+22	; 0x16
 644:	9f 89       	ldd	r25, Y+23	; 0x17
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	9f 8b       	std	Y+23, r25	; 0x17
 64a:	8e 8b       	std	Y+22, r24	; 0x16
                break;  // case 'l'
 64c:	be c2       	rjmp	.+1404   	; 0xbca <uart_mini_printf+0x710>
                
            case 'd':
                n_sign  = FALSE;               
 64e:	1a 8a       	std	Y+18, r1	; 0x12
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
 650:	19 8a       	std	Y+17, r1	; 0x11
 652:	0d c0       	rjmp	.+26     	; 0x66e <uart_mini_printf+0x1b4>
                {
                    data_buf[data_idx] = '0';
 654:	89 89       	ldd	r24, Y+17	; 0x11
 656:	28 2f       	mov	r18, r24
 658:	33 27       	eor	r19, r19
 65a:	ce 01       	movw	r24, r28
 65c:	4a 96       	adiw	r24, 0x1a	; 26
 65e:	fc 01       	movw	r30, r24
 660:	e2 0f       	add	r30, r18
 662:	f3 1f       	adc	r31, r19
 664:	80 e3       	ldi	r24, 0x30	; 48
 666:	80 83       	st	Z, r24
 668:	89 89       	ldd	r24, Y+17	; 0x11
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	89 8b       	std	Y+17, r24	; 0x11
 66e:	89 89       	ldd	r24, Y+17	; 0x11
 670:	8b 30       	cpi	r24, 0x0B	; 11
 672:	80 f3       	brcs	.-32     	; 0x654 <uart_mini_printf+0x19a>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
 674:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
 676:	8a e0       	ldi	r24, 0x0A	; 10
 678:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
 67a:	8f 85       	ldd	r24, Y+15	; 0x0f
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <uart_mini_printf+0x1c8>
 680:	5d c0       	rjmp	.+186    	; 0x73c <uart_mini_printf+0x282>
                {
                    s32_val = va_arg(arg_ptr, S32);
 682:	28 8d       	ldd	r18, Y+24	; 0x18
 684:	39 8d       	ldd	r19, Y+25	; 0x19
 686:	c9 01       	movw	r24, r18
 688:	04 96       	adiw	r24, 0x04	; 4
 68a:	99 8f       	std	Y+25, r25	; 0x19
 68c:	88 8f       	std	Y+24, r24	; 0x18
 68e:	f9 01       	movw	r30, r18
 690:	80 81       	ld	r24, Z
 692:	91 81       	ldd	r25, Z+1	; 0x01
 694:	a2 81       	ldd	r26, Z+2	; 0x02
 696:	b3 81       	ldd	r27, Z+3	; 0x03
 698:	8f 83       	std	Y+7, r24	; 0x07
 69a:	98 87       	std	Y+8, r25	; 0x08
 69c:	a9 87       	std	Y+9, r26	; 0x09
 69e:	ba 87       	std	Y+10, r27	; 0x0a
                    if (s32_val < 0)
 6a0:	8f 81       	ldd	r24, Y+7	; 0x07
 6a2:	98 85       	ldd	r25, Y+8	; 0x08
 6a4:	a9 85       	ldd	r26, Y+9	; 0x09
 6a6:	ba 85       	ldd	r27, Y+10	; 0x0a
 6a8:	bb 23       	and	r27, r27
 6aa:	8c f4       	brge	.+34     	; 0x6ce <uart_mini_printf+0x214>
                    {
                        n_sign = TRUE;
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	8a 8b       	std	Y+18, r24	; 0x12
                        s32_val  = -s32_val;
 6b0:	8f 81       	ldd	r24, Y+7	; 0x07
 6b2:	98 85       	ldd	r25, Y+8	; 0x08
 6b4:	a9 85       	ldd	r26, Y+9	; 0x09
 6b6:	ba 85       	ldd	r27, Y+10	; 0x0a
 6b8:	b0 95       	com	r27
 6ba:	a0 95       	com	r26
 6bc:	90 95       	com	r25
 6be:	81 95       	neg	r24
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	af 4f       	sbci	r26, 0xFF	; 255
 6c4:	bf 4f       	sbci	r27, 0xFF	; 255
 6c6:	8f 83       	std	Y+7, r24	; 0x07
 6c8:	98 87       	std	Y+8, r25	; 0x08
 6ca:	a9 87       	std	Y+9, r26	; 0x09
 6cc:	ba 87       	std	Y+10, r27	; 0x0a
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
 6ce:	89 89       	ldd	r24, Y+17	; 0x11
 6d0:	08 2f       	mov	r16, r24
 6d2:	11 27       	eor	r17, r17
 6d4:	8f 81       	ldd	r24, Y+7	; 0x07
 6d6:	98 85       	ldd	r25, Y+8	; 0x08
 6d8:	a9 85       	ldd	r26, Y+9	; 0x09
 6da:	ba 85       	ldd	r27, Y+10	; 0x0a
 6dc:	2a e0       	ldi	r18, 0x0A	; 10
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	50 e0       	ldi	r21, 0x00	; 0
 6e4:	bc 01       	movw	r22, r24
 6e6:	cd 01       	movw	r24, r26
 6e8:	0e 94 2b 07 	call	0xe56	; 0xe56 <__divmodsi4>
 6ec:	dc 01       	movw	r26, r24
 6ee:	cb 01       	movw	r24, r22
 6f0:	28 2f       	mov	r18, r24
 6f2:	20 5d       	subi	r18, 0xD0	; 208
 6f4:	ce 01       	movw	r24, r28
 6f6:	4a 96       	adiw	r24, 0x1a	; 26
 6f8:	fc 01       	movw	r30, r24
 6fa:	e0 0f       	add	r30, r16
 6fc:	f1 1f       	adc	r31, r17
 6fe:	20 83       	st	Z, r18
                        s32_val /= 10;
 700:	8f 81       	ldd	r24, Y+7	; 0x07
 702:	98 85       	ldd	r25, Y+8	; 0x08
 704:	a9 85       	ldd	r26, Y+9	; 0x09
 706:	ba 85       	ldd	r27, Y+10	; 0x0a
 708:	2a e0       	ldi	r18, 0x0A	; 10
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	bc 01       	movw	r22, r24
 712:	cd 01       	movw	r24, r26
 714:	0e 94 2b 07 	call	0xe56	; 0xe56 <__divmodsi4>
 718:	da 01       	movw	r26, r20
 71a:	c9 01       	movw	r24, r18
 71c:	8f 83       	std	Y+7, r24	; 0x07
 71e:	98 87       	std	Y+8, r25	; 0x08
 720:	a9 87       	std	Y+9, r26	; 0x09
 722:	ba 87       	std	Y+10, r27	; 0x0a
                        data_idx--;
 724:	89 89       	ldd	r24, Y+17	; 0x11
 726:	81 50       	subi	r24, 0x01	; 1
 728:	89 8b       	std	Y+17, r24	; 0x11
						if (s32_val==0) break;
 72a:	8f 81       	ldd	r24, Y+7	; 0x07
 72c:	98 85       	ldd	r25, Y+8	; 0x08
 72e:	a9 85       	ldd	r26, Y+9	; 0x09
 730:	ba 85       	ldd	r27, Y+10	; 0x0a
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	a1 05       	cpc	r26, r1
 736:	b1 05       	cpc	r27, r1
 738:	e1 f1       	breq	.+120    	; 0x7b2 <uart_mini_printf+0x2f8>
                   }
 73a:	c9 cf       	rjmp	.-110    	; 0x6ce <uart_mini_printf+0x214>
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
 73c:	28 8d       	ldd	r18, Y+24	; 0x18
 73e:	39 8d       	ldd	r19, Y+25	; 0x19
 740:	c9 01       	movw	r24, r18
 742:	02 96       	adiw	r24, 0x02	; 2
 744:	99 8f       	std	Y+25, r25	; 0x19
 746:	88 8f       	std	Y+24, r24	; 0x18
 748:	f9 01       	movw	r30, r18
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	9c 87       	std	Y+12, r25	; 0x0c
 750:	8b 87       	std	Y+11, r24	; 0x0b
                    if (s16_val < 0)
 752:	8b 85       	ldd	r24, Y+11	; 0x0b
 754:	9c 85       	ldd	r25, Y+12	; 0x0c
 756:	99 23       	and	r25, r25
 758:	4c f4       	brge	.+18     	; 0x76c <uart_mini_printf+0x2b2>
                    {
                        n_sign = TRUE;
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	8a 8b       	std	Y+18, r24	; 0x12
                        s16_val  = -s16_val;
 75e:	8b 85       	ldd	r24, Y+11	; 0x0b
 760:	9c 85       	ldd	r25, Y+12	; 0x0c
 762:	90 95       	com	r25
 764:	81 95       	neg	r24
 766:	9f 4f       	sbci	r25, 0xFF	; 255
 768:	9c 87       	std	Y+12, r25	; 0x0c
 76a:	8b 87       	std	Y+11, r24	; 0x0b
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
 76c:	89 89       	ldd	r24, Y+17	; 0x11
 76e:	e8 2f       	mov	r30, r24
 770:	ff 27       	eor	r31, r31
 772:	8b 85       	ldd	r24, Y+11	; 0x0b
 774:	9c 85       	ldd	r25, Y+12	; 0x0c
 776:	2a e0       	ldi	r18, 0x0A	; 10
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	b9 01       	movw	r22, r18
 77c:	0e 94 f6 06 	call	0xdec	; 0xdec <__divmodhi4>
 780:	28 2f       	mov	r18, r24
 782:	20 5d       	subi	r18, 0xD0	; 208
 784:	ce 01       	movw	r24, r28
 786:	4a 96       	adiw	r24, 0x1a	; 26
 788:	e8 0f       	add	r30, r24
 78a:	f9 1f       	adc	r31, r25
 78c:	20 83       	st	Z, r18
                        s16_val /= 10;
 78e:	8b 85       	ldd	r24, Y+11	; 0x0b
 790:	9c 85       	ldd	r25, Y+12	; 0x0c
 792:	2a e0       	ldi	r18, 0x0A	; 10
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	b9 01       	movw	r22, r18
 798:	0e 94 f6 06 	call	0xdec	; 0xdec <__divmodhi4>
 79c:	cb 01       	movw	r24, r22
 79e:	9c 87       	std	Y+12, r25	; 0x0c
 7a0:	8b 87       	std	Y+11, r24	; 0x0b
                        data_idx--;
 7a2:	89 89       	ldd	r24, Y+17	; 0x11
 7a4:	81 50       	subi	r24, 0x01	; 1
 7a6:	89 8b       	std	Y+17, r24	; 0x11
						if (s16_val==0) break;
 7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
 7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	09 f0       	breq	.+2      	; 0x7b2 <uart_mini_printf+0x2f8>
                    }
 7b0:	dd cf       	rjmp	.-70     	; 0x76c <uart_mini_printf+0x2b2>
                }
                if (n_sign) { uart_putchar('-'); }
 7b2:	8a 89       	ldd	r24, Y+18	; 0x12
 7b4:	88 23       	and	r24, r24
 7b6:	19 f0       	breq	.+6      	; 0x7be <uart_mini_printf+0x304>
 7b8:	8d e2       	ldi	r24, 0x2D	; 45
 7ba:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                data_idx++;
 7be:	89 89       	ldd	r24, Y+17	; 0x11
 7c0:	8f 5f       	subi	r24, 0xFF	; 255
 7c2:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
 7c4:	98 89       	ldd	r25, Y+16	; 0x10
 7c6:	89 89       	ldd	r24, Y+17	; 0x11
 7c8:	98 17       	cp	r25, r24
 7ca:	10 f4       	brcc	.+4      	; 0x7d0 <uart_mini_printf+0x316>
                {
                    data_idx = min_size;
 7cc:	88 89       	ldd	r24, Y+16	; 0x10
 7ce:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
 7d0:	89 89       	ldd	r24, Y+17	; 0x11
 7d2:	99 27       	eor	r25, r25
 7d4:	9c 01       	movw	r18, r24
 7d6:	ce 01       	movw	r24, r28
 7d8:	4a 96       	adiw	r24, 0x1a	; 26
 7da:	82 0f       	add	r24, r18
 7dc:	93 1f       	adc	r25, r19
 7de:	0e 94 37 02 	call	0x46e	; 0x46e <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
 7e2:	8b e0       	ldi	r24, 0x0B	; 11
 7e4:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 7e6:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 7e8:	1f 86       	std	Y+15, r1	; 0x0f
                break;  // case 'd'
 7ea:	ef c1       	rjmp	.+990    	; 0xbca <uart_mini_printf+0x710>
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
 7ec:	19 8a       	std	Y+17, r1	; 0x11
 7ee:	0d c0       	rjmp	.+26     	; 0x80a <uart_mini_printf+0x350>
                {
                    data_buf[data_idx] = '0';
 7f0:	89 89       	ldd	r24, Y+17	; 0x11
 7f2:	28 2f       	mov	r18, r24
 7f4:	33 27       	eor	r19, r19
 7f6:	ce 01       	movw	r24, r28
 7f8:	4a 96       	adiw	r24, 0x1a	; 26
 7fa:	fc 01       	movw	r30, r24
 7fc:	e2 0f       	add	r30, r18
 7fe:	f3 1f       	adc	r31, r19
 800:	80 e3       	ldi	r24, 0x30	; 48
 802:	80 83       	st	Z, r24
 804:	89 89       	ldd	r24, Y+17	; 0x11
 806:	8f 5f       	subi	r24, 0xFF	; 255
 808:	89 8b       	std	Y+17, r24	; 0x11
 80a:	89 89       	ldd	r24, Y+17	; 0x11
 80c:	8b 30       	cpi	r24, 0x0B	; 11
 80e:	80 f3       	brcs	.-32     	; 0x7f0 <uart_mini_printf+0x336>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
 810:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
 812:	8a e0       	ldi	r24, 0x0A	; 10
 814:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
 816:	8f 85       	ldd	r24, Y+15	; 0x0f
 818:	88 23       	and	r24, r24
 81a:	09 f4       	brne	.+2      	; 0x81e <uart_mini_printf+0x364>
 81c:	46 c0       	rjmp	.+140    	; 0x8aa <uart_mini_printf+0x3f0>
                {
                    u32_val = va_arg(arg_ptr, U32);
 81e:	28 8d       	ldd	r18, Y+24	; 0x18
 820:	39 8d       	ldd	r19, Y+25	; 0x19
 822:	c9 01       	movw	r24, r18
 824:	04 96       	adiw	r24, 0x04	; 4
 826:	99 8f       	std	Y+25, r25	; 0x19
 828:	88 8f       	std	Y+24, r24	; 0x18
 82a:	f9 01       	movw	r30, r18
 82c:	80 81       	ld	r24, Z
 82e:	91 81       	ldd	r25, Z+1	; 0x01
 830:	a2 81       	ldd	r26, Z+2	; 0x02
 832:	b3 81       	ldd	r27, Z+3	; 0x03
 834:	89 83       	std	Y+1, r24	; 0x01
 836:	9a 83       	std	Y+2, r25	; 0x02
 838:	ab 83       	std	Y+3, r26	; 0x03
 83a:	bc 83       	std	Y+4, r27	; 0x04
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
 83c:	89 89       	ldd	r24, Y+17	; 0x11
 83e:	08 2f       	mov	r16, r24
 840:	11 27       	eor	r17, r17
 842:	89 81       	ldd	r24, Y+1	; 0x01
 844:	9a 81       	ldd	r25, Y+2	; 0x02
 846:	ab 81       	ldd	r26, Y+3	; 0x03
 848:	bc 81       	ldd	r27, Y+4	; 0x04
 84a:	2a e0       	ldi	r18, 0x0A	; 10
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	40 e0       	ldi	r20, 0x00	; 0
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	bc 01       	movw	r22, r24
 854:	cd 01       	movw	r24, r26
 856:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
 85a:	dc 01       	movw	r26, r24
 85c:	cb 01       	movw	r24, r22
 85e:	28 2f       	mov	r18, r24
 860:	20 5d       	subi	r18, 0xD0	; 208
 862:	ce 01       	movw	r24, r28
 864:	4a 96       	adiw	r24, 0x1a	; 26
 866:	fc 01       	movw	r30, r24
 868:	e0 0f       	add	r30, r16
 86a:	f1 1f       	adc	r31, r17
 86c:	20 83       	st	Z, r18
                        u32_val /= 10;
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	9a 81       	ldd	r25, Y+2	; 0x02
 872:	ab 81       	ldd	r26, Y+3	; 0x03
 874:	bc 81       	ldd	r27, Y+4	; 0x04
 876:	2a e0       	ldi	r18, 0x0A	; 10
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	40 e0       	ldi	r20, 0x00	; 0
 87c:	50 e0       	ldi	r21, 0x00	; 0
 87e:	bc 01       	movw	r22, r24
 880:	cd 01       	movw	r24, r26
 882:	0e 94 09 07 	call	0xe12	; 0xe12 <__udivmodsi4>
 886:	da 01       	movw	r26, r20
 888:	c9 01       	movw	r24, r18
 88a:	89 83       	std	Y+1, r24	; 0x01
 88c:	9a 83       	std	Y+2, r25	; 0x02
 88e:	ab 83       	std	Y+3, r26	; 0x03
 890:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
 892:	89 89       	ldd	r24, Y+17	; 0x11
 894:	81 50       	subi	r24, 0x01	; 1
 896:	89 8b       	std	Y+17, r24	; 0x11
						if (u32_val==0) break;
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	9a 81       	ldd	r25, Y+2	; 0x02
 89c:	ab 81       	ldd	r26, Y+3	; 0x03
 89e:	bc 81       	ldd	r27, Y+4	; 0x04
 8a0:	00 97       	sbiw	r24, 0x00	; 0
 8a2:	a1 05       	cpc	r26, r1
 8a4:	b1 05       	cpc	r27, r1
 8a6:	79 f1       	breq	.+94     	; 0x906 <uart_mini_printf+0x44c>
                    }
 8a8:	c9 cf       	rjmp	.-110    	; 0x83c <uart_mini_printf+0x382>
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
 8aa:	28 8d       	ldd	r18, Y+24	; 0x18
 8ac:	39 8d       	ldd	r19, Y+25	; 0x19
 8ae:	c9 01       	movw	r24, r18
 8b0:	02 96       	adiw	r24, 0x02	; 2
 8b2:	99 8f       	std	Y+25, r25	; 0x19
 8b4:	88 8f       	std	Y+24, r24	; 0x18
 8b6:	f9 01       	movw	r30, r18
 8b8:	80 81       	ld	r24, Z
 8ba:	91 81       	ldd	r25, Z+1	; 0x01
 8bc:	9e 83       	std	Y+6, r25	; 0x06
 8be:	8d 83       	std	Y+5, r24	; 0x05
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
 8c0:	89 89       	ldd	r24, Y+17	; 0x11
 8c2:	e8 2f       	mov	r30, r24
 8c4:	ff 27       	eor	r31, r31
 8c6:	8d 81       	ldd	r24, Y+5	; 0x05
 8c8:	9e 81       	ldd	r25, Y+6	; 0x06
 8ca:	2a e0       	ldi	r18, 0x0A	; 10
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	b9 01       	movw	r22, r18
 8d0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodhi4>
 8d4:	28 2f       	mov	r18, r24
 8d6:	20 5d       	subi	r18, 0xD0	; 208
 8d8:	ce 01       	movw	r24, r28
 8da:	4a 96       	adiw	r24, 0x1a	; 26
 8dc:	e8 0f       	add	r30, r24
 8de:	f9 1f       	adc	r31, r25
 8e0:	20 83       	st	Z, r18
                        data_idx--;
 8e2:	89 89       	ldd	r24, Y+17	; 0x11
 8e4:	81 50       	subi	r24, 0x01	; 1
 8e6:	89 8b       	std	Y+17, r24	; 0x11
                        u16_val /= 10;
 8e8:	8d 81       	ldd	r24, Y+5	; 0x05
 8ea:	9e 81       	ldd	r25, Y+6	; 0x06
 8ec:	2a e0       	ldi	r18, 0x0A	; 10
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	b9 01       	movw	r22, r18
 8f2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodhi4>
 8f6:	cb 01       	movw	r24, r22
 8f8:	9e 83       	std	Y+6, r25	; 0x06
 8fa:	8d 83       	std	Y+5, r24	; 0x05
						if (u16_val==0) break;
 8fc:	8d 81       	ldd	r24, Y+5	; 0x05
 8fe:	9e 81       	ldd	r25, Y+6	; 0x06
 900:	00 97       	sbiw	r24, 0x00	; 0
 902:	09 f0       	breq	.+2      	; 0x906 <uart_mini_printf+0x44c>
                    }
 904:	dd cf       	rjmp	.-70     	; 0x8c0 <uart_mini_printf+0x406>
                }
                data_idx++;
 906:	89 89       	ldd	r24, Y+17	; 0x11
 908:	8f 5f       	subi	r24, 0xFF	; 255
 90a:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
 90c:	98 89       	ldd	r25, Y+16	; 0x10
 90e:	89 89       	ldd	r24, Y+17	; 0x11
 910:	98 17       	cp	r25, r24
 912:	10 f4       	brcc	.+4      	; 0x918 <uart_mini_printf+0x45e>
                {
                    data_idx = min_size;
 914:	88 89       	ldd	r24, Y+16	; 0x10
 916:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
 918:	89 89       	ldd	r24, Y+17	; 0x11
 91a:	99 27       	eor	r25, r25
 91c:	9c 01       	movw	r18, r24
 91e:	ce 01       	movw	r24, r28
 920:	4a 96       	adiw	r24, 0x1a	; 26
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	0e 94 37 02 	call	0x46e	; 0x46e <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
 92a:	8b e0       	ldi	r24, 0x0B	; 11
 92c:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 92e:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 930:	1f 86       	std	Y+15, r1	; 0x0f
                break;  // case 'u':
 932:	4b c1       	rjmp	.+662    	; 0xbca <uart_mini_printf+0x710>
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
 934:	19 8a       	std	Y+17, r1	; 0x11
 936:	0d c0       	rjmp	.+26     	; 0x952 <uart_mini_printf+0x498>
                {
                    data_buf[data_idx] = '0';
 938:	89 89       	ldd	r24, Y+17	; 0x11
 93a:	28 2f       	mov	r18, r24
 93c:	33 27       	eor	r19, r19
 93e:	ce 01       	movw	r24, r28
 940:	4a 96       	adiw	r24, 0x1a	; 26
 942:	fc 01       	movw	r30, r24
 944:	e2 0f       	add	r30, r18
 946:	f3 1f       	adc	r31, r19
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	80 83       	st	Z, r24
 94c:	89 89       	ldd	r24, Y+17	; 0x11
 94e:	8f 5f       	subi	r24, 0xFF	; 255
 950:	89 8b       	std	Y+17, r24	; 0x11
 952:	89 89       	ldd	r24, Y+17	; 0x11
 954:	8b 30       	cpi	r24, 0x0B	; 11
 956:	80 f3       	brcs	.-32     	; 0x938 <uart_mini_printf+0x47e>
                }
                data_buf[DATA_BUF_LEN-1] = 0;
 958:	1d a2       	std	Y+37, r1	; 0x25
                data_idx = DATA_BUF_LEN - 2;
 95a:	8a e0       	ldi	r24, 0x0A	; 10
 95c:	89 8b       	std	Y+17, r24	; 0x11
                if (long_flag)  // 32-bit
 95e:	8f 85       	ldd	r24, Y+15	; 0x0f
 960:	88 23       	and	r24, r24
 962:	09 f4       	brne	.+2      	; 0x966 <uart_mini_printf+0x4ac>
 964:	55 c0       	rjmp	.+170    	; 0xa10 <uart_mini_printf+0x556>
                { 
                    u32_val = va_arg(arg_ptr, U32);
 966:	28 8d       	ldd	r18, Y+24	; 0x18
 968:	39 8d       	ldd	r19, Y+25	; 0x19
 96a:	c9 01       	movw	r24, r18
 96c:	04 96       	adiw	r24, 0x04	; 4
 96e:	99 8f       	std	Y+25, r25	; 0x19
 970:	88 8f       	std	Y+24, r24	; 0x18
 972:	f9 01       	movw	r30, r18
 974:	80 81       	ld	r24, Z
 976:	91 81       	ldd	r25, Z+1	; 0x01
 978:	a2 81       	ldd	r26, Z+2	; 0x02
 97a:	b3 81       	ldd	r27, Z+3	; 0x03
 97c:	89 83       	std	Y+1, r24	; 0x01
 97e:	9a 83       	std	Y+2, r25	; 0x02
 980:	ab 83       	std	Y+3, r26	; 0x03
 982:	bc 83       	std	Y+4, r27	; 0x04
                    while (u32_val)
 984:	3b c0       	rjmp	.+118    	; 0x9fc <uart_mini_printf+0x542>
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
 986:	89 81       	ldd	r24, Y+1	; 0x01
 988:	8f 70       	andi	r24, 0x0F	; 15
 98a:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
 98c:	89 89       	ldd	r24, Y+17	; 0x11
 98e:	28 2f       	mov	r18, r24
 990:	33 27       	eor	r19, r19
 992:	3d a7       	std	Y+45, r19	; 0x2d
 994:	2c a7       	std	Y+44, r18	; 0x2c
 996:	8b 89       	ldd	r24, Y+19	; 0x13
 998:	8a 30       	cpi	r24, 0x0A	; 10
 99a:	28 f4       	brcc	.+10     	; 0x9a6 <uart_mini_printf+0x4ec>
 99c:	8b 89       	ldd	r24, Y+19	; 0x13
 99e:	38 2f       	mov	r19, r24
 9a0:	30 5d       	subi	r19, 0xD0	; 208
 9a2:	3b a7       	std	Y+43, r19	; 0x2b
 9a4:	10 c0       	rjmp	.+32     	; 0x9c6 <uart_mini_printf+0x50c>
 9a6:	ee 89       	ldd	r30, Y+22	; 0x16
 9a8:	ff 89       	ldd	r31, Y+23	; 0x17
 9aa:	80 81       	ld	r24, Z
 9ac:	88 37       	cpi	r24, 0x78	; 120
 9ae:	19 f4       	brne	.+6      	; 0x9b6 <uart_mini_printf+0x4fc>
 9b0:	81 e6       	ldi	r24, 0x61	; 97
 9b2:	8a a7       	std	Y+42, r24	; 0x2a
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <uart_mini_printf+0x500>
 9b6:	91 e4       	ldi	r25, 0x41	; 65
 9b8:	9a a7       	std	Y+42, r25	; 0x2a
 9ba:	8b 89       	ldd	r24, Y+19	; 0x13
 9bc:	2a a5       	ldd	r18, Y+42	; 0x2a
 9be:	82 0f       	add	r24, r18
 9c0:	38 2f       	mov	r19, r24
 9c2:	3a 50       	subi	r19, 0x0A	; 10
 9c4:	3b a7       	std	Y+43, r19	; 0x2b
 9c6:	ce 01       	movw	r24, r28
 9c8:	4a 96       	adiw	r24, 0x1a	; 26
 9ca:	ec a5       	ldd	r30, Y+44	; 0x2c
 9cc:	fd a5       	ldd	r31, Y+45	; 0x2d
 9ce:	e8 0f       	add	r30, r24
 9d0:	f9 1f       	adc	r31, r25
 9d2:	8b a5       	ldd	r24, Y+43	; 0x2b
 9d4:	80 83       	st	Z, r24
                        u32_val >>= 4;
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	9a 81       	ldd	r25, Y+2	; 0x02
 9da:	ab 81       	ldd	r26, Y+3	; 0x03
 9dc:	bc 81       	ldd	r27, Y+4	; 0x04
 9de:	68 94       	set
 9e0:	13 f8       	bld	r1, 3
 9e2:	b6 95       	lsr	r27
 9e4:	a7 95       	ror	r26
 9e6:	97 95       	ror	r25
 9e8:	87 95       	ror	r24
 9ea:	16 94       	lsr	r1
 9ec:	d1 f7       	brne	.-12     	; 0x9e2 <uart_mini_printf+0x528>
 9ee:	89 83       	std	Y+1, r24	; 0x01
 9f0:	9a 83       	std	Y+2, r25	; 0x02
 9f2:	ab 83       	std	Y+3, r26	; 0x03
 9f4:	bc 83       	std	Y+4, r27	; 0x04
                        data_idx--;
 9f6:	89 89       	ldd	r24, Y+17	; 0x11
 9f8:	81 50       	subi	r24, 0x01	; 1
 9fa:	89 8b       	std	Y+17, r24	; 0x11
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	9a 81       	ldd	r25, Y+2	; 0x02
 a00:	ab 81       	ldd	r26, Y+3	; 0x03
 a02:	bc 81       	ldd	r27, Y+4	; 0x04
 a04:	00 97       	sbiw	r24, 0x00	; 0
 a06:	a1 05       	cpc	r26, r1
 a08:	b1 05       	cpc	r27, r1
 a0a:	09 f0       	breq	.+2      	; 0xa0e <uart_mini_printf+0x554>
 a0c:	bc cf       	rjmp	.-136    	; 0x986 <uart_mini_printf+0x4cc>
 a0e:	45 c0       	rjmp	.+138    	; 0xa9a <uart_mini_printf+0x5e0>
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
 a10:	28 8d       	ldd	r18, Y+24	; 0x18
 a12:	39 8d       	ldd	r19, Y+25	; 0x19
 a14:	c9 01       	movw	r24, r18
 a16:	02 96       	adiw	r24, 0x02	; 2
 a18:	99 8f       	std	Y+25, r25	; 0x19
 a1a:	88 8f       	std	Y+24, r24	; 0x18
 a1c:	f9 01       	movw	r30, r18
 a1e:	80 81       	ld	r24, Z
 a20:	91 81       	ldd	r25, Z+1	; 0x01
 a22:	9e 83       	std	Y+6, r25	; 0x06
 a24:	8d 83       	std	Y+5, r24	; 0x05
                    while (u16_val)
 a26:	35 c0       	rjmp	.+106    	; 0xa92 <uart_mini_printf+0x5d8>
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
 a28:	8d 81       	ldd	r24, Y+5	; 0x05
 a2a:	8f 70       	andi	r24, 0x0F	; 15
 a2c:	8b 8b       	std	Y+19, r24	; 0x13
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
 a2e:	89 89       	ldd	r24, Y+17	; 0x11
 a30:	28 2f       	mov	r18, r24
 a32:	33 27       	eor	r19, r19
 a34:	39 a7       	std	Y+41, r19	; 0x29
 a36:	28 a7       	std	Y+40, r18	; 0x28
 a38:	8b 89       	ldd	r24, Y+19	; 0x13
 a3a:	8a 30       	cpi	r24, 0x0A	; 10
 a3c:	28 f4       	brcc	.+10     	; 0xa48 <uart_mini_printf+0x58e>
 a3e:	8b 89       	ldd	r24, Y+19	; 0x13
 a40:	38 2f       	mov	r19, r24
 a42:	30 5d       	subi	r19, 0xD0	; 208
 a44:	3f a3       	std	Y+39, r19	; 0x27
 a46:	10 c0       	rjmp	.+32     	; 0xa68 <uart_mini_printf+0x5ae>
 a48:	ee 89       	ldd	r30, Y+22	; 0x16
 a4a:	ff 89       	ldd	r31, Y+23	; 0x17
 a4c:	80 81       	ld	r24, Z
 a4e:	88 37       	cpi	r24, 0x78	; 120
 a50:	19 f4       	brne	.+6      	; 0xa58 <uart_mini_printf+0x59e>
 a52:	81 e6       	ldi	r24, 0x61	; 97
 a54:	8e a3       	std	Y+38, r24	; 0x26
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <uart_mini_printf+0x5a2>
 a58:	91 e4       	ldi	r25, 0x41	; 65
 a5a:	9e a3       	std	Y+38, r25	; 0x26
 a5c:	8b 89       	ldd	r24, Y+19	; 0x13
 a5e:	2e a1       	ldd	r18, Y+38	; 0x26
 a60:	82 0f       	add	r24, r18
 a62:	38 2f       	mov	r19, r24
 a64:	3a 50       	subi	r19, 0x0A	; 10
 a66:	3f a3       	std	Y+39, r19	; 0x27
 a68:	ce 01       	movw	r24, r28
 a6a:	4a 96       	adiw	r24, 0x1a	; 26
 a6c:	e8 a5       	ldd	r30, Y+40	; 0x28
 a6e:	f9 a5       	ldd	r31, Y+41	; 0x29
 a70:	e8 0f       	add	r30, r24
 a72:	f9 1f       	adc	r31, r25
 a74:	8f a1       	ldd	r24, Y+39	; 0x27
 a76:	80 83       	st	Z, r24
                        u16_val >>= 4;
 a78:	8d 81       	ldd	r24, Y+5	; 0x05
 a7a:	9e 81       	ldd	r25, Y+6	; 0x06
 a7c:	92 95       	swap	r25
 a7e:	82 95       	swap	r24
 a80:	8f 70       	andi	r24, 0x0F	; 15
 a82:	89 27       	eor	r24, r25
 a84:	9f 70       	andi	r25, 0x0F	; 15
 a86:	89 27       	eor	r24, r25
 a88:	9e 83       	std	Y+6, r25	; 0x06
 a8a:	8d 83       	std	Y+5, r24	; 0x05
                        data_idx--;
 a8c:	89 89       	ldd	r24, Y+17	; 0x11
 a8e:	81 50       	subi	r24, 0x01	; 1
 a90:	89 8b       	std	Y+17, r24	; 0x11
 a92:	8d 81       	ldd	r24, Y+5	; 0x05
 a94:	9e 81       	ldd	r25, Y+6	; 0x06
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	39 f6       	brne	.-114    	; 0xa28 <uart_mini_printf+0x56e>
                    }
                }
                data_idx++;
 a9a:	89 89       	ldd	r24, Y+17	; 0x11
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	89 8b       	std	Y+17, r24	; 0x11
                if (min_size < data_idx)
 aa0:	98 89       	ldd	r25, Y+16	; 0x10
 aa2:	89 89       	ldd	r24, Y+17	; 0x11
 aa4:	98 17       	cp	r25, r24
 aa6:	10 f4       	brcc	.+4      	; 0xaac <uart_mini_printf+0x5f2>
                {
                    data_idx = min_size;
 aa8:	88 89       	ldd	r24, Y+16	; 0x10
 aaa:	89 8b       	std	Y+17, r24	; 0x11
                }
                uart_put_string (data_buf + data_idx);
 aac:	89 89       	ldd	r24, Y+17	; 0x11
 aae:	99 27       	eor	r25, r25
 ab0:	9c 01       	movw	r18, r24
 ab2:	ce 01       	movw	r24, r28
 ab4:	4a 96       	adiw	r24, 0x1a	; 26
 ab6:	82 0f       	add	r24, r18
 ab8:	93 1f       	adc	r25, r19
 aba:	0e 94 37 02 	call	0x46e	; 0x46e <uart_put_string>
                // Clean up
                min_size = DATA_BUF_LEN-1;
 abe:	8b e0       	ldi	r24, 0x0B	; 11
 ac0:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 ac2:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 ac4:	1f 86       	std	Y+15, r1	; 0x0f
                break;  // case 'x' & 'X'
 ac6:	81 c0       	rjmp	.+258    	; 0xbca <uart_mini_printf+0x710>
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
 ac8:	8b e0       	ldi	r24, 0x0B	; 11
 aca:	88 8b       	std	Y+16, r24	; 0x10
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
 acc:	8f 85       	ldd	r24, Y+15	; 0x0f
 ace:	81 30       	cpi	r24, 0x01	; 1
 ad0:	49 f4       	brne	.+18     	; 0xae4 <uart_mini_printf+0x62a>
                {
                    uart_putchar('l');
 ad2:	8c e6       	ldi	r24, 0x6C	; 108
 ad4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                    uart_putchar('0');
 ad8:	80 e3       	ldi	r24, 0x30	; 48
 ada:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                    // Clean up
                    alt_p_c = FALSE;
 ade:	1e 86       	std	Y+14, r1	; 0x0e
                    long_flag = FALSE;
 ae0:	1f 86       	std	Y+15, r1	; 0x0f
                    break;
 ae2:	73 c0       	rjmp	.+230    	; 0xbca <uart_mini_printf+0x710>
                }
                u8_temp = *++p;
 ae4:	8e 89       	ldd	r24, Y+22	; 0x16
 ae6:	9f 89       	ldd	r25, Y+23	; 0x17
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	9f 8b       	std	Y+23, r25	; 0x17
 aec:	8e 8b       	std	Y+22, r24	; 0x16
 aee:	ee 89       	ldd	r30, Y+22	; 0x16
 af0:	ff 89       	ldd	r31, Y+23	; 0x17
 af2:	80 81       	ld	r24, Z
 af4:	8b 8b       	std	Y+19, r24	; 0x13
                if ((u8_temp >='0') && (u8_temp <='9'))
 af6:	8b 89       	ldd	r24, Y+19	; 0x13
 af8:	80 33       	cpi	r24, 0x30	; 48
 afa:	08 f4       	brcc	.+2      	; 0xafe <uart_mini_printf+0x644>
 afc:	4c c0       	rjmp	.+152    	; 0xb96 <uart_mini_printf+0x6dc>
 afe:	8b 89       	ldd	r24, Y+19	; 0x13
 b00:	8a 33       	cpi	r24, 0x3A	; 58
 b02:	08 f0       	brcs	.+2      	; 0xb06 <uart_mini_printf+0x64c>
 b04:	48 c0       	rjmp	.+144    	; 0xb96 <uart_mini_printf+0x6dc>
                {
                    min_size = u8_temp & 0x0F;
 b06:	8b 89       	ldd	r24, Y+19	; 0x13
 b08:	8f 70       	andi	r24, 0x0F	; 15
 b0a:	88 8b       	std	Y+16, r24	; 0x10
                    u8_temp = *++p;
 b0c:	8e 89       	ldd	r24, Y+22	; 0x16
 b0e:	9f 89       	ldd	r25, Y+23	; 0x17
 b10:	01 96       	adiw	r24, 0x01	; 1
 b12:	9f 8b       	std	Y+23, r25	; 0x17
 b14:	8e 8b       	std	Y+22, r24	; 0x16
 b16:	ee 89       	ldd	r30, Y+22	; 0x16
 b18:	ff 89       	ldd	r31, Y+23	; 0x17
 b1a:	80 81       	ld	r24, Z
 b1c:	8b 8b       	std	Y+19, r24	; 0x13
                    if ((u8_temp >='0') && (u8_temp <='9'))
 b1e:	8b 89       	ldd	r24, Y+19	; 0x13
 b20:	80 33       	cpi	r24, 0x30	; 48
 b22:	90 f0       	brcs	.+36     	; 0xb48 <uart_mini_printf+0x68e>
 b24:	8b 89       	ldd	r24, Y+19	; 0x13
 b26:	8a 33       	cpi	r24, 0x3A	; 58
 b28:	78 f4       	brcc	.+30     	; 0xb48 <uart_mini_printf+0x68e>
                    {
                        min_size <<= 4;
 b2a:	88 89       	ldd	r24, Y+16	; 0x10
 b2c:	82 95       	swap	r24
 b2e:	80 7f       	andi	r24, 0xF0	; 240
 b30:	88 8b       	std	Y+16, r24	; 0x10
                        min_size |= (u8_temp & 0x0F);
 b32:	8b 89       	ldd	r24, Y+19	; 0x13
 b34:	98 2f       	mov	r25, r24
 b36:	9f 70       	andi	r25, 0x0F	; 15
 b38:	88 89       	ldd	r24, Y+16	; 0x10
 b3a:	89 2b       	or	r24, r25
 b3c:	88 8b       	std	Y+16, r24	; 0x10
                        p++;
 b3e:	8e 89       	ldd	r24, Y+22	; 0x16
 b40:	9f 89       	ldd	r25, Y+23	; 0x17
 b42:	01 96       	adiw	r24, 0x01	; 1
 b44:	9f 8b       	std	Y+23, r25	; 0x17
 b46:	8e 8b       	std	Y+22, r24	; 0x16
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
 b48:	88 89       	ldd	r24, Y+16	; 0x10
 b4a:	48 2f       	mov	r20, r24
 b4c:	4f 70       	andi	r20, 0x0F	; 15
 b4e:	88 89       	ldd	r24, Y+16	; 0x10
 b50:	82 95       	swap	r24
 b52:	8f 70       	andi	r24, 0x0F	; 15
 b54:	99 27       	eor	r25, r25
 b56:	9c 01       	movw	r18, r24
 b58:	22 0f       	add	r18, r18
 b5a:	33 1f       	adc	r19, r19
 b5c:	c9 01       	movw	r24, r18
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	82 0f       	add	r24, r18
 b68:	93 1f       	adc	r25, r19
 b6a:	84 0f       	add	r24, r20
 b6c:	88 8b       	std	Y+16, r24	; 0x10
                    if (min_size > (DATA_BUF_LEN-1))
 b6e:	88 89       	ldd	r24, Y+16	; 0x10
 b70:	8c 30       	cpi	r24, 0x0C	; 12
 b72:	10 f0       	brcs	.+4      	; 0xb78 <uart_mini_printf+0x6be>
                    {
                        min_size = (DATA_BUF_LEN-1);
 b74:	8b e0       	ldi	r24, 0x0B	; 11
 b76:	88 8b       	std	Y+16, r24	; 0x10
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
 b78:	9b e0       	ldi	r25, 0x0B	; 11
 b7a:	88 89       	ldd	r24, Y+16	; 0x10
 b7c:	29 2f       	mov	r18, r25
 b7e:	28 1b       	sub	r18, r24
 b80:	82 2f       	mov	r24, r18
 b82:	88 8b       	std	Y+16, r24	; 0x10
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
                    uart_putchar(*p);
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
 b84:	8e 89       	ldd	r24, Y+22	; 0x16
 b86:	9f 89       	ldd	r25, Y+23	; 0x17
 b88:	02 97       	sbiw	r24, 0x02	; 2
 b8a:	9f 8b       	std	Y+23, r25	; 0x17
 b8c:	8e 8b       	std	Y+22, r24	; 0x16
                alt_p_c = TRUE;
 b8e:	81 e0       	ldi	r24, 0x01	; 1
 b90:	8e 87       	std	Y+14, r24	; 0x0e
                // Clean up
                long_flag = FALSE;
 b92:	1f 86       	std	Y+15, r1	; 0x0f
                break;  // case '0'
 b94:	1a c0       	rjmp	.+52     	; 0xbca <uart_mini_printf+0x710>
 b96:	80 e3       	ldi	r24, 0x30	; 48
 b98:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 b9c:	ee 89       	ldd	r30, Y+22	; 0x16
 b9e:	ff 89       	ldd	r31, Y+23	; 0x17
 ba0:	80 81       	ld	r24, Z
 ba2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 ba6:	1e 86       	std	Y+14, r1	; 0x0e
 ba8:	1f 86       	std	Y+15, r1	; 0x0f
 baa:	0f c0       	rjmp	.+30     	; 0xbca <uart_mini_printf+0x710>
                
            default:
                if (long_flag == TRUE)
 bac:	8f 85       	ldd	r24, Y+15	; 0x0f
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	19 f4       	brne	.+6      	; 0xbb8 <uart_mini_printf+0x6fe>
                {
                    uart_putchar('l');
 bb2:	8c e6       	ldi	r24, 0x6C	; 108
 bb4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                }
                uart_putchar(*p);
 bb8:	ee 89       	ldd	r30, Y+22	; 0x16
 bba:	ff 89       	ldd	r31, Y+23	; 0x17
 bbc:	80 81       	ld	r24, Z
 bbe:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                // Clean up
                min_size = DATA_BUF_LEN-1;
 bc2:	8b e0       	ldi	r24, 0x0B	; 11
 bc4:	88 8b       	std	Y+16, r24	; 0x10
                alt_p_c = FALSE;
 bc6:	1e 86       	std	Y+14, r1	; 0x0e
                long_flag = FALSE;
 bc8:	1f 86       	std	Y+15, r1	; 0x0f
 bca:	8e 89       	ldd	r24, Y+22	; 0x16
 bcc:	9f 89       	ldd	r25, Y+23	; 0x17
 bce:	01 96       	adiw	r24, 0x01	; 1
 bd0:	9f 8b       	std	Y+23, r25	; 0x17
 bd2:	8e 8b       	std	Y+22, r24	; 0x16
 bd4:	ee 89       	ldd	r30, Y+22	; 0x16
 bd6:	ff 89       	ldd	r31, Y+23	; 0x17
 bd8:	80 81       	ld	r24, Z
 bda:	88 23       	and	r24, r24
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <uart_mini_printf+0x726>
 bde:	86 cc       	rjmp	.-1780   	; 0x4ec <uart_mini_printf+0x32>
                break;  // default
                
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	90 e0       	ldi	r25, 0x00	; 0
 be4:	af 96       	adiw	r28, 0x2f	; 47
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	1f 91       	pop	r17
 bf6:	0f 91       	pop	r16
 bf8:	08 95       	ret

00000bfa <uart_get_editedline>:
}
#endif  // REDUCED_UART_LIB

//------------------------------------------------------------------------------
//  @fn uart_get_editedline
//!
//! This function is a simple line-editor that allows to delete and
//! re-edit the characters entered, until either (CR) or (NL) is entered.
//! Printable characters entered will be echoed using uart_putchar().
//! 
//! Editing characters:
//! - \b (BS) or \x7F (DEL) delete the previous character
//! - \t will be replaced by a single space
//! - ^z (or ^Z) kills the entire input buffer
//! 
//! All other control characters will be ignored. (CR) or (NL) used to stop
//! the line acquisition is not recorded.
//! 
//! The internal line buffer is [size] characters long, which includes
//! the terminating \0, the 'END OF STRING' flag.  If the buffer is full 
//! (i.e. at [size-1] characters in order to keep space for the
//! 'END OF STRING' flag), the function will be automatically finished.
//! 
//! The data-string can be re-sent up to null character ('END OF STRING' flag)
//! by uart_mini_printf() or uart_put_string () functions.
//!
//! @warning "uart_init()" must be performed before
//!
//! @param  Pointer on the line buffer
//!         Size of the buffer (0 not allowed)
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_get_editedline (U8 *data_string, U8 size)
{
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
 c02:	29 97       	sbiw	r28, 0x09	; 9
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	de bf       	out	0x3e, r29	; 62
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	cd bf       	out	0x3d, r28	; 61
 c0e:	9e 83       	std	Y+6, r25	; 0x06
 c10:	8d 83       	std	Y+5, r24	; 0x05
 c12:	6f 83       	std	Y+7, r22	; 0x07
    U8      i, u8_temp;
    U8      index=0;
 c14:	1a 82       	std	Y+2, r1	; 0x02
    U8      xx=1;
 c16:	81 e0       	ldi	r24, 0x01	; 1
 c18:	89 83       	std	Y+1, r24	; 0x01
    
    if (size == 0) xx = 0;        // 1 <= size <= 255 
 c1a:	8f 81       	ldd	r24, Y+7	; 0x07
 c1c:	88 23       	and	r24, r24
 c1e:	09 f4       	brne	.+2      	; 0xc22 <uart_get_editedline+0x28>
 c20:	19 82       	std	Y+1, r1	; 0x01
    data_string[0] = 0;           // For care !
 c22:	ed 81       	ldd	r30, Y+5	; 0x05
 c24:	fe 81       	ldd	r31, Y+6	; 0x06
 c26:	10 82       	st	Z, r1
    
    while(xx)
 c28:	c0 c0       	rjmp	.+384    	; 0xdaa <uart_get_editedline+0x1b0>
    {
        if (index == size-1)      // Force END_OF_DATA 
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	28 2f       	mov	r18, r24
 c2e:	33 27       	eor	r19, r19
 c30:	8f 81       	ldd	r24, Y+7	; 0x07
 c32:	99 27       	eor	r25, r25
 c34:	01 97       	sbiw	r24, 0x01	; 1
 c36:	28 17       	cp	r18, r24
 c38:	39 07       	cpc	r19, r25
 c3a:	69 f4       	brne	.+26     	; 0xc56 <uart_get_editedline+0x5c>
        {
            data_string[index++] = 0;
 c3c:	8a 81       	ldd	r24, Y+2	; 0x02
 c3e:	99 27       	eor	r25, r25
 c40:	9c 01       	movw	r18, r24
 c42:	8d 81       	ldd	r24, Y+5	; 0x05
 c44:	9e 81       	ldd	r25, Y+6	; 0x06
 c46:	f9 01       	movw	r30, r18
 c48:	e8 0f       	add	r30, r24
 c4a:	f9 1f       	adc	r31, r25
 c4c:	10 82       	st	Z, r1
 c4e:	8a 81       	ldd	r24, Y+2	; 0x02
 c50:	8f 5f       	subi	r24, 0xFF	; 255
 c52:	8a 83       	std	Y+2, r24	; 0x02
            break;
 c54:	ae c0       	rjmp	.+348    	; 0xdb2 <uart_get_editedline+0x1b8>
        }
        
        // Get one character, this character will be examinated !
        u8_temp = uart_getchar();
 c56:	0e 94 12 02 	call	0x424	; 0x424 <uart_getchar>
 c5a:	8b 83       	std	Y+3, r24	; 0x03
        
        // Character processing
        switch (u8_temp)
 c5c:	8b 81       	ldd	r24, Y+3	; 0x03
 c5e:	28 2f       	mov	r18, r24
 c60:	33 27       	eor	r19, r19
 c62:	39 87       	std	Y+9, r19	; 0x09
 c64:	28 87       	std	Y+8, r18	; 0x08
 c66:	88 85       	ldd	r24, Y+8	; 0x08
 c68:	99 85       	ldd	r25, Y+9	; 0x09
 c6a:	8a 30       	cpi	r24, 0x0A	; 10
 c6c:	91 05       	cpc	r25, r1
 c6e:	09 f1       	breq	.+66     	; 0xcb2 <uart_get_editedline+0xb8>
 c70:	28 85       	ldd	r18, Y+8	; 0x08
 c72:	39 85       	ldd	r19, Y+9	; 0x09
 c74:	2b 30       	cpi	r18, 0x0B	; 11
 c76:	31 05       	cpc	r19, r1
 c78:	5c f4       	brge	.+22     	; 0xc90 <uart_get_editedline+0x96>
 c7a:	88 85       	ldd	r24, Y+8	; 0x08
 c7c:	99 85       	ldd	r25, Y+9	; 0x09
 c7e:	88 30       	cpi	r24, 0x08	; 8
 c80:	91 05       	cpc	r25, r1
 c82:	b9 f1       	breq	.+110    	; 0xcf2 <uart_get_editedline+0xf8>
 c84:	28 85       	ldd	r18, Y+8	; 0x08
 c86:	39 85       	ldd	r19, Y+9	; 0x09
 c88:	29 30       	cpi	r18, 0x09	; 9
 c8a:	31 05       	cpc	r19, r1
 c8c:	09 f1       	breq	.+66     	; 0xcd0 <uart_get_editedline+0xd6>
 c8e:	7d c0       	rjmp	.+250    	; 0xd8a <uart_get_editedline+0x190>
 c90:	88 85       	ldd	r24, Y+8	; 0x08
 c92:	99 85       	ldd	r25, Y+9	; 0x09
 c94:	8a 31       	cpi	r24, 0x1A	; 26
 c96:	91 05       	cpc	r25, r1
 c98:	09 f4       	brne	.+2      	; 0xc9c <uart_get_editedline+0xa2>
 c9a:	5c c0       	rjmp	.+184    	; 0xd54 <uart_get_editedline+0x15a>
 c9c:	28 85       	ldd	r18, Y+8	; 0x08
 c9e:	39 85       	ldd	r19, Y+9	; 0x09
 ca0:	2f 37       	cpi	r18, 0x7F	; 127
 ca2:	31 05       	cpc	r19, r1
 ca4:	31 f1       	breq	.+76     	; 0xcf2 <uart_get_editedline+0xf8>
 ca6:	88 85       	ldd	r24, Y+8	; 0x08
 ca8:	99 85       	ldd	r25, Y+9	; 0x09
 caa:	8d 30       	cpi	r24, 0x0D	; 13
 cac:	91 05       	cpc	r25, r1
 cae:	09 f0       	breq	.+2      	; 0xcb2 <uart_get_editedline+0xb8>
 cb0:	6c c0       	rjmp	.+216    	; 0xd8a <uart_get_editedline+0x190>
        {
        case '\n':      // New line
        case '\r':      // Carriage return
            xx = data_string[index++] = 0;   // Force END_OF_DATA
 cb2:	8a 81       	ldd	r24, Y+2	; 0x02
 cb4:	99 27       	eor	r25, r25
 cb6:	9c 01       	movw	r18, r24
 cb8:	8d 81       	ldd	r24, Y+5	; 0x05
 cba:	9e 81       	ldd	r25, Y+6	; 0x06
 cbc:	f9 01       	movw	r30, r18
 cbe:	e8 0f       	add	r30, r24
 cc0:	f9 1f       	adc	r31, r25
 cc2:	10 82       	st	Z, r1
 cc4:	80 81       	ld	r24, Z
 cc6:	89 83       	std	Y+1, r24	; 0x01
 cc8:	8a 81       	ldd	r24, Y+2	; 0x02
 cca:	8f 5f       	subi	r24, 0xFF	; 255
 ccc:	8a 83       	std	Y+2, r24	; 0x02
            break;  // case '\n' & '\r'
 cce:	6d c0       	rjmp	.+218    	; 0xdaa <uart_get_editedline+0x1b0>

        case '\t':      // Tabulation
            uart_putchar(' ');
 cd0:	80 e2       	ldi	r24, 0x20	; 32
 cd2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            data_string[index] = ' ';
 cd6:	8a 81       	ldd	r24, Y+2	; 0x02
 cd8:	99 27       	eor	r25, r25
 cda:	9c 01       	movw	r18, r24
 cdc:	8d 81       	ldd	r24, Y+5	; 0x05
 cde:	9e 81       	ldd	r25, Y+6	; 0x06
 ce0:	f9 01       	movw	r30, r18
 ce2:	e8 0f       	add	r30, r24
 ce4:	f9 1f       	adc	r31, r25
 ce6:	80 e2       	ldi	r24, 0x20	; 32
 ce8:	80 83       	st	Z, r24
            index++;
 cea:	8a 81       	ldd	r24, Y+2	; 0x02
 cec:	8f 5f       	subi	r24, 0xFF	; 255
 cee:	8a 83       	std	Y+2, r24	; 0x02
            break;  // case '\t'
 cf0:	5c c0       	rjmp	.+184    	; 0xdaa <uart_get_editedline+0x1b0>
            
        case '\b':      // Back-space
        case '\x7f':    // Delete
            if (index == 0)
 cf2:	8a 81       	ldd	r24, Y+2	; 0x02
 cf4:	88 23       	and	r24, r24
 cf6:	21 f4       	brne	.+8      	; 0xd00 <uart_get_editedline+0x106>
            {
                uart_putchar('\a');   // Bell
 cf8:	87 e0       	ldi	r24, 0x07	; 7
 cfa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                break;
 cfe:	55 c0       	rjmp	.+170    	; 0xdaa <uart_get_editedline+0x1b0>
            }
            uart_putchar('\r');
 d00:	8d e0       	ldi	r24, 0x0D	; 13
 d02:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            for (i=0; i<index; i++) uart_putchar(' ');
 d06:	1c 82       	std	Y+4, r1	; 0x04
 d08:	06 c0       	rjmp	.+12     	; 0xd16 <uart_get_editedline+0x11c>
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 d10:	8c 81       	ldd	r24, Y+4	; 0x04
 d12:	8f 5f       	subi	r24, 0xFF	; 255
 d14:	8c 83       	std	Y+4, r24	; 0x04
 d16:	9c 81       	ldd	r25, Y+4	; 0x04
 d18:	8a 81       	ldd	r24, Y+2	; 0x02
 d1a:	98 17       	cp	r25, r24
 d1c:	b0 f3       	brcs	.-20     	; 0xd0a <uart_get_editedline+0x110>
            uart_putchar('\r');
 d1e:	8d e0       	ldi	r24, 0x0D	; 13
 d20:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            index--;
 d24:	8a 81       	ldd	r24, Y+2	; 0x02
 d26:	81 50       	subi	r24, 0x01	; 1
 d28:	8a 83       	std	Y+2, r24	; 0x02
            for (i=0; i<index; i++) uart_putchar(data_string[i]);
 d2a:	1c 82       	std	Y+4, r1	; 0x04
 d2c:	0e c0       	rjmp	.+28     	; 0xd4a <uart_get_editedline+0x150>
 d2e:	8c 81       	ldd	r24, Y+4	; 0x04
 d30:	99 27       	eor	r25, r25
 d32:	9c 01       	movw	r18, r24
 d34:	8d 81       	ldd	r24, Y+5	; 0x05
 d36:	9e 81       	ldd	r25, Y+6	; 0x06
 d38:	f9 01       	movw	r30, r18
 d3a:	e8 0f       	add	r30, r24
 d3c:	f9 1f       	adc	r31, r25
 d3e:	80 81       	ld	r24, Z
 d40:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 d44:	8c 81       	ldd	r24, Y+4	; 0x04
 d46:	8f 5f       	subi	r24, 0xFF	; 255
 d48:	8c 83       	std	Y+4, r24	; 0x04
 d4a:	9c 81       	ldd	r25, Y+4	; 0x04
 d4c:	8a 81       	ldd	r24, Y+2	; 0x02
 d4e:	98 17       	cp	r25, r24
 d50:	70 f3       	brcs	.-36     	; 0xd2e <uart_get_editedline+0x134>
            break;  // case '\b' & '\x7F'
 d52:	2b c0       	rjmp	.+86     	; 0xdaa <uart_get_editedline+0x1b0>
            
        case '\x1A':    // Control-z or control-Z
            if (index == 0)
 d54:	8a 81       	ldd	r24, Y+2	; 0x02
 d56:	88 23       	and	r24, r24
 d58:	21 f4       	brne	.+8      	; 0xd62 <uart_get_editedline+0x168>
            {
                uart_putchar('\a');   // Bell
 d5a:	87 e0       	ldi	r24, 0x07	; 7
 d5c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
                break;
 d60:	24 c0       	rjmp	.+72     	; 0xdaa <uart_get_editedline+0x1b0>
            }
            uart_putchar('\r');
 d62:	8d e0       	ldi	r24, 0x0D	; 13
 d64:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            for (i=0; i<index; i++) uart_putchar(' ');
 d68:	1c 82       	std	Y+4, r1	; 0x04
 d6a:	06 c0       	rjmp	.+12     	; 0xd78 <uart_get_editedline+0x17e>
 d6c:	80 e2       	ldi	r24, 0x20	; 32
 d6e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
 d72:	8c 81       	ldd	r24, Y+4	; 0x04
 d74:	8f 5f       	subi	r24, 0xFF	; 255
 d76:	8c 83       	std	Y+4, r24	; 0x04
 d78:	9c 81       	ldd	r25, Y+4	; 0x04
 d7a:	8a 81       	ldd	r24, Y+2	; 0x02
 d7c:	98 17       	cp	r25, r24
 d7e:	b0 f3       	brcs	.-20     	; 0xd6c <uart_get_editedline+0x172>
            uart_putchar('\r');
 d80:	8d e0       	ldi	r24, 0x0D	; 13
 d82:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            index = 0;
 d86:	1a 82       	std	Y+2, r1	; 0x02
            break;  // case '\x1A'
 d88:	10 c0       	rjmp	.+32     	; 0xdaa <uart_get_editedline+0x1b0>
            
        default:
            uart_putchar(u8_temp);
 d8a:	8b 81       	ldd	r24, Y+3	; 0x03
 d8c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <uart_putchar>
            data_string[index] = u8_temp;
 d90:	8a 81       	ldd	r24, Y+2	; 0x02
 d92:	99 27       	eor	r25, r25
 d94:	9c 01       	movw	r18, r24
 d96:	8d 81       	ldd	r24, Y+5	; 0x05
 d98:	9e 81       	ldd	r25, Y+6	; 0x06
 d9a:	f9 01       	movw	r30, r18
 d9c:	e8 0f       	add	r30, r24
 d9e:	f9 1f       	adc	r31, r25
 da0:	8b 81       	ldd	r24, Y+3	; 0x03
 da2:	80 83       	st	Z, r24
            index++;
 da4:	8a 81       	ldd	r24, Y+2	; 0x02
 da6:	8f 5f       	subi	r24, 0xFF	; 255
 da8:	8a 83       	std	Y+2, r24	; 0x02
 daa:	89 81       	ldd	r24, Y+1	; 0x01
 dac:	88 23       	and	r24, r24
 dae:	09 f0       	breq	.+2      	; 0xdb2 <uart_get_editedline+0x1b8>
 db0:	3c cf       	rjmp	.-392    	; 0xc2a <uart_get_editedline+0x30>
 db2:	29 96       	adiw	r28, 0x09	; 9
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	df 91       	pop	r29
 dc0:	cf 91       	pop	r28
 dc2:	08 95       	ret

00000dc4 <__udivmodhi4>:
 dc4:	aa 1b       	sub	r26, r26
 dc6:	bb 1b       	sub	r27, r27
 dc8:	51 e1       	ldi	r21, 0x11	; 17
 dca:	07 c0       	rjmp	.+14     	; 0xdda <__udivmodhi4_ep>

00000dcc <__udivmodhi4_loop>:
 dcc:	aa 1f       	adc	r26, r26
 dce:	bb 1f       	adc	r27, r27
 dd0:	a6 17       	cp	r26, r22
 dd2:	b7 07       	cpc	r27, r23
 dd4:	10 f0       	brcs	.+4      	; 0xdda <__udivmodhi4_ep>
 dd6:	a6 1b       	sub	r26, r22
 dd8:	b7 0b       	sbc	r27, r23

00000dda <__udivmodhi4_ep>:
 dda:	88 1f       	adc	r24, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	5a 95       	dec	r21
 de0:	a9 f7       	brne	.-22     	; 0xdcc <__udivmodhi4_loop>
 de2:	80 95       	com	r24
 de4:	90 95       	com	r25
 de6:	bc 01       	movw	r22, r24
 de8:	cd 01       	movw	r24, r26
 dea:	08 95       	ret

00000dec <__divmodhi4>:
 dec:	97 fb       	bst	r25, 7
 dee:	09 2e       	mov	r0, r25
 df0:	07 26       	eor	r0, r23
 df2:	0a d0       	rcall	.+20     	; 0xe08 <__divmodhi4_neg1>
 df4:	77 fd       	sbrc	r23, 7
 df6:	04 d0       	rcall	.+8      	; 0xe00 <__divmodhi4_neg2>
 df8:	e5 df       	rcall	.-54     	; 0xdc4 <__udivmodhi4>
 dfa:	06 d0       	rcall	.+12     	; 0xe08 <__divmodhi4_neg1>
 dfc:	00 20       	and	r0, r0
 dfe:	1a f4       	brpl	.+6      	; 0xe06 <__divmodhi4_exit>

00000e00 <__divmodhi4_neg2>:
 e00:	70 95       	com	r23
 e02:	61 95       	neg	r22
 e04:	7f 4f       	sbci	r23, 0xFF	; 255

00000e06 <__divmodhi4_exit>:
 e06:	08 95       	ret

00000e08 <__divmodhi4_neg1>:
 e08:	f6 f7       	brtc	.-4      	; 0xe06 <__divmodhi4_exit>
 e0a:	90 95       	com	r25
 e0c:	81 95       	neg	r24
 e0e:	9f 4f       	sbci	r25, 0xFF	; 255
 e10:	08 95       	ret

00000e12 <__udivmodsi4>:
 e12:	a1 e2       	ldi	r26, 0x21	; 33
 e14:	1a 2e       	mov	r1, r26
 e16:	aa 1b       	sub	r26, r26
 e18:	bb 1b       	sub	r27, r27
 e1a:	fd 01       	movw	r30, r26
 e1c:	0d c0       	rjmp	.+26     	; 0xe38 <__udivmodsi4_ep>

00000e1e <__udivmodsi4_loop>:
 e1e:	aa 1f       	adc	r26, r26
 e20:	bb 1f       	adc	r27, r27
 e22:	ee 1f       	adc	r30, r30
 e24:	ff 1f       	adc	r31, r31
 e26:	a2 17       	cp	r26, r18
 e28:	b3 07       	cpc	r27, r19
 e2a:	e4 07       	cpc	r30, r20
 e2c:	f5 07       	cpc	r31, r21
 e2e:	20 f0       	brcs	.+8      	; 0xe38 <__udivmodsi4_ep>
 e30:	a2 1b       	sub	r26, r18
 e32:	b3 0b       	sbc	r27, r19
 e34:	e4 0b       	sbc	r30, r20
 e36:	f5 0b       	sbc	r31, r21

00000e38 <__udivmodsi4_ep>:
 e38:	66 1f       	adc	r22, r22
 e3a:	77 1f       	adc	r23, r23
 e3c:	88 1f       	adc	r24, r24
 e3e:	99 1f       	adc	r25, r25
 e40:	1a 94       	dec	r1
 e42:	69 f7       	brne	.-38     	; 0xe1e <__udivmodsi4_loop>
 e44:	60 95       	com	r22
 e46:	70 95       	com	r23
 e48:	80 95       	com	r24
 e4a:	90 95       	com	r25
 e4c:	9b 01       	movw	r18, r22
 e4e:	ac 01       	movw	r20, r24
 e50:	bd 01       	movw	r22, r26
 e52:	cf 01       	movw	r24, r30
 e54:	08 95       	ret

00000e56 <__divmodsi4>:
 e56:	97 fb       	bst	r25, 7
 e58:	09 2e       	mov	r0, r25
 e5a:	05 26       	eor	r0, r21
 e5c:	0e d0       	rcall	.+28     	; 0xe7a <__divmodsi4_neg1>
 e5e:	57 fd       	sbrc	r21, 7
 e60:	04 d0       	rcall	.+8      	; 0xe6a <__divmodsi4_neg2>
 e62:	d7 df       	rcall	.-82     	; 0xe12 <__udivmodsi4>
 e64:	0a d0       	rcall	.+20     	; 0xe7a <__divmodsi4_neg1>
 e66:	00 1c       	adc	r0, r0
 e68:	38 f4       	brcc	.+14     	; 0xe78 <__divmodsi4_exit>

00000e6a <__divmodsi4_neg2>:
 e6a:	50 95       	com	r21
 e6c:	40 95       	com	r20
 e6e:	30 95       	com	r19
 e70:	21 95       	neg	r18
 e72:	3f 4f       	sbci	r19, 0xFF	; 255
 e74:	4f 4f       	sbci	r20, 0xFF	; 255
 e76:	5f 4f       	sbci	r21, 0xFF	; 255

00000e78 <__divmodsi4_exit>:
 e78:	08 95       	ret

00000e7a <__divmodsi4_neg1>:
 e7a:	f6 f7       	brtc	.-4      	; 0xe78 <__divmodsi4_exit>
 e7c:	90 95       	com	r25
 e7e:	80 95       	com	r24
 e80:	70 95       	com	r23
 e82:	61 95       	neg	r22
 e84:	7f 4f       	sbci	r23, 0xFF	; 255
 e86:	8f 4f       	sbci	r24, 0xFF	; 255
 e88:	9f 4f       	sbci	r25, 0xFF	; 255
 e8a:	08 95       	ret
