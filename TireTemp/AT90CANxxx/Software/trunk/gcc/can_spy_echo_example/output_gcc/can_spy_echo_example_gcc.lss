
can_spy_echo_example_gcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000484  00800100  00002180  00002214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800584  00800584  00002698  2**0
                  ALLOC
  3 .stab         00000414  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00002b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000036d  00000000  00000000  00002c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001165  00000000  00000000  00002f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007cd  00000000  00000000  000040ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bc1  00000000  00000000  000048bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00006480  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006f3  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f8f  00000000  00000000  00006df3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_9>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	15 e0       	ldi	r17, 0x05	; 5
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e0 e8       	ldi	r30, 0x80	; 128
      a8:	f1 e2       	ldi	r31, 0x21	; 33
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 38       	cpi	r26, 0x84	; 132
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	15 e0       	ldi	r17, 0x05	; 5
      bc:	a4 e8       	ldi	r26, 0x84	; 132
      be:	b5 e0       	ldi	r27, 0x05	; 5
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a0 39       	cpi	r26, 0x90	; 144
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 18 02 	call	0x430	; 0x430 <main>
      ce:	0c 94 bf 10 	jmp	0x217e	; 0x217e <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <spy_printing>:
//! @return  none
//!
//------------------------------------------------------------------------------
void spy_printing(U8 rxtx, st_cmd_t* msg)
{
      d6:	cf 92       	push	r12
      d8:	df 92       	push	r13
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	7b 01       	movw	r14, r22
U8 indx;

    if (msg->ctrl.ide) 
      e8:	fb 01       	movw	r30, r22
      ea:	94 85       	ldd	r25, Z+12	; 0x0c
      ec:	c8 2f       	mov	r28, r24
      ee:	dd 27       	eor	r29, r29
      f0:	99 23       	and	r25, r25
      f2:	09 f4       	brne	.+2      	; 0xf6 <spy_printing+0x20>
      f4:	46 c0       	rjmp	.+140    	; 0x182 <spy_printing+0xac>
    {
        Uart_select(UART_0);
      f6:	10 92 85 05 	sts	0x0585, r1
        uart_mini_printf ("-0- %cxCAN @ %02X%02X: 0x%08lX(Ext.), L=%d, ", rxtx, CANSTMH, CANSTML, msg->id.ext, msg->dlc);
      fa:	20 91 f8 00 	lds	r18, 0x00F8
      fe:	40 91 f9 00 	lds	r20, 0x00F9
     102:	87 81       	ldd	r24, Z+7	; 0x07
     104:	99 27       	eor	r25, r25
     106:	9f 93       	push	r25
     108:	8f 93       	push	r24
     10a:	83 81       	ldd	r24, Z+3	; 0x03
     10c:	94 81       	ldd	r25, Z+4	; 0x04
     10e:	a5 81       	ldd	r26, Z+5	; 0x05
     110:	b6 81       	ldd	r27, Z+6	; 0x06
     112:	bf 93       	push	r27
     114:	af 93       	push	r26
     116:	9f 93       	push	r25
     118:	8f 93       	push	r24
     11a:	33 27       	eor	r19, r19
     11c:	3f 93       	push	r19
     11e:	2f 93       	push	r18
     120:	55 27       	eor	r21, r21
     122:	5f 93       	push	r21
     124:	4f 93       	push	r20
     126:	df 93       	push	r29
     128:	cf 93       	push	r28
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	9f 93       	push	r25
     130:	8f 93       	push	r24
     132:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
        Uart_select(UART_1);
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 85 05 	sts	0x0585, r24
        uart_mini_printf ("-1- %cxCAN @ %02X%02X: 0x%08lX(Ext.), L=%d, ", rxtx, CANSTMH, CANSTML, msg->id.ext, msg->dlc);
     13c:	20 91 f8 00 	lds	r18, 0x00F8
     140:	40 91 f9 00 	lds	r20, 0x00F9
     144:	f7 01       	movw	r30, r14
     146:	87 81       	ldd	r24, Z+7	; 0x07
     148:	99 27       	eor	r25, r25
     14a:	9f 93       	push	r25
     14c:	8f 93       	push	r24
     14e:	83 81       	ldd	r24, Z+3	; 0x03
     150:	94 81       	ldd	r25, Z+4	; 0x04
     152:	a5 81       	ldd	r26, Z+5	; 0x05
     154:	b6 81       	ldd	r27, Z+6	; 0x06
     156:	bf 93       	push	r27
     158:	af 93       	push	r26
     15a:	9f 93       	push	r25
     15c:	8f 93       	push	r24
     15e:	33 27       	eor	r19, r19
     160:	3f 93       	push	r19
     162:	2f 93       	push	r18
     164:	55 27       	eor	r21, r21
     166:	5f 93       	push	r21
     168:	4f 93       	push	r20
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	8d e2       	ldi	r24, 0x2D	; 45
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     17a:	8d b7       	in	r24, 0x3d	; 61
     17c:	9e b7       	in	r25, 0x3e	; 62
     17e:	4c 96       	adiw	r24, 0x1c	; 28
     180:	3e c0       	rjmp	.+124    	; 0x1fe <spy_printing+0x128>
    }
    else
    {
        Uart_select(UART_0);
     182:	10 92 85 05 	sts	0x0585, r1
        uart_mini_printf ("-0- %cxCAN @ %02X%02X:      0x%03X(Std.), L=%d, ", rxtx, CANSTMH, CANSTML, msg->id.std, msg->dlc);
     186:	20 91 f8 00 	lds	r18, 0x00F8
     18a:	40 91 f9 00 	lds	r20, 0x00F9
     18e:	fb 01       	movw	r30, r22
     190:	87 81       	ldd	r24, Z+7	; 0x07
     192:	99 27       	eor	r25, r25
     194:	9f 93       	push	r25
     196:	8f 93       	push	r24
     198:	83 81       	ldd	r24, Z+3	; 0x03
     19a:	94 81       	ldd	r25, Z+4	; 0x04
     19c:	9f 93       	push	r25
     19e:	8f 93       	push	r24
     1a0:	33 27       	eor	r19, r19
     1a2:	3f 93       	push	r19
     1a4:	2f 93       	push	r18
     1a6:	55 27       	eor	r21, r21
     1a8:	5f 93       	push	r21
     1aa:	4f 93       	push	r20
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	8a e5       	ldi	r24, 0x5A	; 90
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	9f 93       	push	r25
     1b6:	8f 93       	push	r24
     1b8:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
        Uart_select(UART_1);
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	80 93 85 05 	sts	0x0585, r24
        uart_mini_printf ("-1- %cxCAN @ %02X%02X:      0x%03X(Std.), L=%d, ", rxtx, CANSTMH, CANSTML, msg->id.std, msg->dlc);
     1c2:	20 91 f8 00 	lds	r18, 0x00F8
     1c6:	40 91 f9 00 	lds	r20, 0x00F9
     1ca:	f7 01       	movw	r30, r14
     1cc:	87 81       	ldd	r24, Z+7	; 0x07
     1ce:	99 27       	eor	r25, r25
     1d0:	9f 93       	push	r25
     1d2:	8f 93       	push	r24
     1d4:	83 81       	ldd	r24, Z+3	; 0x03
     1d6:	94 81       	ldd	r25, Z+4	; 0x04
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	33 27       	eor	r19, r19
     1de:	3f 93       	push	r19
     1e0:	2f 93       	push	r18
     1e2:	55 27       	eor	r21, r21
     1e4:	5f 93       	push	r21
     1e6:	4f 93       	push	r20
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	8b e8       	ldi	r24, 0x8B	; 139
     1ee:	91 e0       	ldi	r25, 0x01	; 1
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     1f8:	8d b7       	in	r24, 0x3d	; 61
     1fa:	9e b7       	in	r25, 0x3e	; 62
     1fc:	48 96       	adiw	r24, 0x18	; 24
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	9e bf       	out	0x3e, r25	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	8d bf       	out	0x3d, r24	; 61
    }
    if (msg->ctrl.rtr)
     208:	f7 01       	movw	r30, r14
     20a:	83 85       	ldd	r24, Z+11	; 0x0b
     20c:	88 23       	and	r24, r24
     20e:	19 f4       	brne	.+6      	; 0x216 <spy_printing+0x140>
     210:	cc 24       	eor	r12, r12
     212:	dd 24       	eor	r13, r13
     214:	3d c0       	rjmp	.+122    	; 0x290 <spy_printing+0x1ba>
    {
        Uart_select(UART_0); uart_mini_printf ("Remote\r\n"); 
     216:	10 92 85 05 	sts	0x0585, r1
     21a:	0c eb       	ldi	r16, 0xBC	; 188
     21c:	11 e0       	ldi	r17, 0x01	; 1
     21e:	1f 93       	push	r17
     220:	0f 93       	push	r16
     222:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
        Uart_select(UART_1); uart_mini_printf ("Remote\r\n"); 
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 85 05 	sts	0x0585, r24
     22c:	1f 93       	push	r17
     22e:	0f 93       	push	r16
     230:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	5e c0       	rjmp	.+188    	; 0x2fa <spy_printing+0x224>
    } 
    else
    {
        for(indx=0; indx< (msg->dlc-1); indx++)
        {
            Uart_select(UART_0); uart_mini_printf ("%02X-", *(msg->pt_data + indx)); 
     23e:	10 92 85 05 	sts	0x0585, r1
     242:	f7 01       	movw	r30, r14
     244:	a0 85       	ldd	r26, Z+8	; 0x08
     246:	b1 85       	ldd	r27, Z+9	; 0x09
     248:	ac 0f       	add	r26, r28
     24a:	bd 1f       	adc	r27, r29
     24c:	8c 91       	ld	r24, X
     24e:	99 27       	eor	r25, r25
     250:	9f 93       	push	r25
     252:	8f 93       	push	r24
     254:	05 ec       	ldi	r16, 0xC5	; 197
     256:	11 e0       	ldi	r17, 0x01	; 1
     258:	1f 93       	push	r17
     25a:	0f 93       	push	r16
     25c:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
            Uart_select(UART_1); uart_mini_printf ("%02X-", *(msg->pt_data + indx)); 
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 85 05 	sts	0x0585, r24
     266:	f7 01       	movw	r30, r14
     268:	80 85       	ldd	r24, Z+8	; 0x08
     26a:	91 85       	ldd	r25, Z+9	; 0x09
     26c:	c8 0f       	add	r28, r24
     26e:	d9 1f       	adc	r29, r25
     270:	88 81       	ld	r24, Y
     272:	99 27       	eor	r25, r25
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	1f 93       	push	r17
     27a:	0f 93       	push	r16
     27c:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     280:	8d b7       	in	r24, 0x3d	; 61
     282:	9e b7       	in	r25, 0x3e	; 62
     284:	08 96       	adiw	r24, 0x08	; 8
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	9e bf       	out	0x3e, r25	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	8d bf       	out	0x3d, r24	; 61
     290:	8c 2d       	mov	r24, r12
     292:	08 94       	sec
     294:	c1 1c       	adc	r12, r1
     296:	d1 1c       	adc	r13, r1
     298:	c8 2f       	mov	r28, r24
     29a:	dd 27       	eor	r29, r29
     29c:	f7 01       	movw	r30, r14
     29e:	87 81       	ldd	r24, Z+7	; 0x07
     2a0:	99 27       	eor	r25, r25
     2a2:	01 97       	sbiw	r24, 0x01	; 1
     2a4:	c8 17       	cp	r28, r24
     2a6:	d9 07       	cpc	r29, r25
     2a8:	54 f2       	brlt	.-108    	; 0x23e <spy_printing+0x168>
        }
        Uart_select(UART_0); uart_mini_printf ("%02X\r\n", *(msg->pt_data + indx));                  
     2aa:	10 92 85 05 	sts	0x0585, r1
     2ae:	a0 85       	ldd	r26, Z+8	; 0x08
     2b0:	b1 85       	ldd	r27, Z+9	; 0x09
     2b2:	ac 0f       	add	r26, r28
     2b4:	bd 1f       	adc	r27, r29
     2b6:	8c 91       	ld	r24, X
     2b8:	99 27       	eor	r25, r25
     2ba:	9f 93       	push	r25
     2bc:	8f 93       	push	r24
     2be:	0b ec       	ldi	r16, 0xCB	; 203
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	1f 93       	push	r17
     2c4:	0f 93       	push	r16
     2c6:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
        Uart_select(UART_1); uart_mini_printf ("%02X\r\n", *(msg->pt_data + indx));
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	80 93 85 05 	sts	0x0585, r24
     2d0:	f7 01       	movw	r30, r14
     2d2:	80 85       	ldd	r24, Z+8	; 0x08
     2d4:	91 85       	ldd	r25, Z+9	; 0x09
     2d6:	c8 0f       	add	r28, r24
     2d8:	d9 1f       	adc	r29, r25
     2da:	88 81       	ld	r24, Y
     2dc:	99 27       	eor	r25, r25
     2de:	9f 93       	push	r25
     2e0:	8f 93       	push	r24
     2e2:	1f 93       	push	r17
     2e4:	0f 93       	push	r16
     2e6:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     2ea:	8d b7       	in	r24, 0x3d	; 61
     2ec:	9e b7       	in	r25, 0x3e	; 62
     2ee:	08 96       	adiw	r24, 0x08	; 8
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	9e bf       	out	0x3e, r25	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	8d bf       	out	0x3d, r24	; 61
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	08 95       	ret

0000030c <can_error_mode>:
    }                  

}

//------------------------------------------------------------------------------
//  @fn can_error_mode
//!
//! Exit in UART ECHO MODE if CAN ID == 0 as CAN error simulation.
//!
//! @warning UART's at 38400 bauds
//!
//! @param  none.
//!
//! @return  none
//!
//------------------------------------------------------------------------------

    
//--- C A N    E R R O R

void can_error_mode(void)
{
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	a2 97       	sbiw	r28, 0x22	; 34
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
U8 i;
U8 txt_ech_mod[]="======= UART in ECHO MODE =======";
     328:	de 01       	movw	r26, r28
     32a:	11 96       	adiw	r26, 0x01	; 1
     32c:	ed e6       	ldi	r30, 0x6D	; 109
     32e:	f2 e0       	ldi	r31, 0x02	; 2
     330:	82 e2       	ldi	r24, 0x22	; 34
     332:	01 90       	ld	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	81 50       	subi	r24, 0x01	; 1
     338:	e1 f7       	brne	.-8      	; 0x332 <can_error_mode+0x26>

    Uart_select(UART_0); uart_mini_printf ("\r\n-0- ======= CAN LINE ERROR ");
     33a:	10 92 85 05 	sts	0x0585, r1
     33e:	82 ed       	ldi	r24, 0xD2	; 210
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	9f 93       	push	r25
     344:	8f 93       	push	r24
     346:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
    Uart_select(UART_1); uart_mini_printf ("\r\n-1- ======= CAN LINE ERROR ");
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 85 05 	sts	0x0585, r24
     350:	80 ef       	ldi	r24, 0xF0	; 240
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	9f 93       	push	r25
     356:	8f 93       	push	r24
     358:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     35c:	ff 24       	eor	r15, r15
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
    
    for(i=0; i<6; i++)
    {
        wait_for(1000); //- Wait for 1000 milli-seconds (1 s)
     366:	88 ee       	ldi	r24, 0xE8	; 232
     368:	93 e0       	ldi	r25, 0x03	; 3
     36a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <wait_for>
        Uart_select(UART_0); uart_mini_printf ("*");
     36e:	10 92 85 05 	sts	0x0585, r1
     372:	0e e0       	ldi	r16, 0x0E	; 14
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	1f 93       	push	r17
     378:	0f 93       	push	r16
     37a:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
        Uart_select(UART_1); uart_mini_printf ("*");
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	e8 2e       	mov	r14, r24
     382:	e0 92 85 05 	sts	0x0585, r14
     386:	1f 93       	push	r17
     388:	0f 93       	push	r16
     38a:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     38e:	f3 94       	inc	r15
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	86 e0       	ldi	r24, 0x06	; 6
     39a:	f8 16       	cp	r15, r24
     39c:	21 f7       	brne	.-56     	; 0x366 <can_error_mode+0x5a>
    }

    wait_for(1000); //- Wait for 1000 milli seconds
     39e:	88 ee       	ldi	r24, 0xE8	; 232
     3a0:	93 e0       	ldi	r25, 0x03	; 3
     3a2:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <wait_for>

    Uart_select(UART_0); uart_mini_printf (" Exit From Program! ======= -0-\r\n\n");
     3a6:	10 92 85 05 	sts	0x0585, r1
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
    Uart_select(UART_1); uart_mini_printf (" Exit From Program! ======= -1-x\r\n\n");
     3b6:	e0 92 85 05 	sts	0x0585, r14
     3ba:	83 e3       	ldi	r24, 0x33	; 51
     3bc:	92 e0       	ldi	r25, 0x02	; 2
     3be:	9f 93       	push	r25
     3c0:	8f 93       	push	r24
     3c2:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
    
//- UART ECHO
    Uart_select(UART_0); uart_mini_printf ("-0 %s 0-\r\n",txt_ech_mod);
     3c6:	10 92 85 05 	sts	0x0585, r1
     3ca:	8e 01       	movw	r16, r28
     3cc:	0f 5f       	subi	r16, 0xFF	; 255
     3ce:	1f 4f       	sbci	r17, 0xFF	; 255
     3d0:	1f 93       	push	r17
     3d2:	0f 93       	push	r16
     3d4:	87 e5       	ldi	r24, 0x57	; 87
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
    Uart_select(UART_1); uart_mini_printf ("-1 %s 1-\r\n",txt_ech_mod);
     3e0:	e0 92 85 05 	sts	0x0585, r14
     3e4:	1f 93       	push	r17
     3e6:	0f 93       	push	r16
     3e8:	82 e6       	ldi	r24, 0x62	; 98
     3ea:	92 e0       	ldi	r25, 0x02	; 2
     3ec:	9f 93       	push	r25
     3ee:	8f 93       	push	r24
     3f0:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     3f4:	8d b7       	in	r24, 0x3d	; 61
     3f6:	9e b7       	in	r25, 0x3e	; 62
     3f8:	0c 96       	adiw	r24, 0x0c	; 12
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	9e bf       	out	0x3e, r25	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	8d bf       	out	0x3d, r24	; 61
    while(1)
    {
        Uart_select(UART_0);
     404:	10 92 85 05 	sts	0x0585, r1
        if (uart_test_hit())
     408:	0e 94 25 04 	call	0x84a	; 0x84a <uart_test_hit>
     40c:	88 23       	and	r24, r24
     40e:	21 f0       	breq	.+8      	; 0x418 <can_error_mode+0x10c>
        {
            uart_putchar(uart_getchar());   // Echo on UART-0
     410:	0e 94 4e 04 	call	0x89c	; 0x89c <uart_getchar>
     414:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
        }
        Uart_select(UART_1);
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	80 93 85 05 	sts	0x0585, r24
        if (uart_test_hit())
     41e:	0e 94 25 04 	call	0x84a	; 0x84a <uart_test_hit>
     422:	88 23       	and	r24, r24
     424:	79 f3       	breq	.-34     	; 0x404 <can_error_mode+0xf8>
        {
            uart_putchar(uart_getchar());   // Echo on UART-1
     426:	0e 94 4e 04 	call	0x89c	; 0x89c <uart_getchar>
     42a:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     42e:	ea cf       	rjmp	.-44     	; 0x404 <can_error_mode+0xf8>

00000430 <main>:
     430:	5f 92       	push	r5
     432:	6f 92       	push	r6
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	c6 56       	subi	r28, 0x66	; 102
     454:	d0 40       	sbci	r29, 0x00	; 0
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	de 01       	movw	r26, r28
     462:	56 96       	adiw	r26, 0x16	; 22
     464:	ea e5       	ldi	r30, 0x5A	; 90
     466:	f3 e0       	ldi	r31, 0x03	; 3
     468:	85 e2       	ldi	r24, 0x25	; 37
     46a:	01 90       	ld	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	81 50       	subi	r24, 0x01	; 1
     470:	e1 f7       	brne	.-8      	; 0x46a <main+0x3a>
     472:	de 01       	movw	r26, r28
     474:	db 96       	adiw	r26, 0x3b	; 59
     476:	ef e7       	ldi	r30, 0x7F	; 127
     478:	f3 e0       	ldi	r31, 0x03	; 3
     47a:	8c e2       	ldi	r24, 0x2C	; 44
     47c:	01 90       	ld	r0, Z+
     47e:	0d 92       	st	X+, r0
     480:	81 50       	subi	r24, 0x01	; 1
     482:	e1 f7       	brne	.-8      	; 0x47c <main+0x4c>
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	80 93 61 00 	sts	0x0061, r24
     48a:	10 92 61 00 	sts	0x0061, r1
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	81 b9       	out	0x01, r24	; 1
     492:	56 98       	cbi	0x0a, 6	; 10
     494:	55 98       	cbi	0x0a, 5	; 10
     496:	5e 9a       	sbi	0x0b, 6	; 11
     498:	5d 9a       	sbi	0x0b, 5	; 11
     49a:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <key_init>
     49e:	0e 94 02 10 	call	0x2004	; 0x2004 <get_key>
     4a2:	58 2e       	mov	r5, r24
     4a4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <led_init>
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <write_led>
     4ae:	10 92 85 05 	sts	0x0585, r1
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	56 e9       	ldi	r21, 0x96	; 150
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_init>
     4c0:	8f e8       	ldi	r24, 0x8F	; 143
     4c2:	92 e0       	ldi	r25, 0x02	; 2
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     4cc:	6b ea       	ldi	r22, 0xAB	; 171
     4ce:	a6 2e       	mov	r10, r22
     4d0:	63 e0       	ldi	r22, 0x03	; 3
     4d2:	b6 2e       	mov	r11, r22
     4d4:	bf 92       	push	r11
     4d6:	af 92       	push	r10
     4d8:	51 ec       	ldi	r21, 0xC1	; 193
     4da:	85 2e       	mov	r8, r21
     4dc:	52 e0       	ldi	r21, 0x02	; 2
     4de:	95 2e       	mov	r9, r21
     4e0:	9f 92       	push	r9
     4e2:	8f 92       	push	r8
     4e4:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     4e8:	8d b7       	in	r24, 0x3d	; 61
     4ea:	9e b7       	in	r25, 0x3e	; 62
     4ec:	06 96       	adiw	r24, 0x06	; 6
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	9e bf       	out	0x3e, r25	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	8d bf       	out	0x3d, r24	; 61
     4f8:	44 ec       	ldi	r20, 0xC4	; 196
     4fa:	e4 2e       	mov	r14, r20
     4fc:	42 e0       	ldi	r20, 0x02	; 2
     4fe:	f4 2e       	mov	r15, r20
     500:	30 ed       	ldi	r19, 0xD0	; 208
     502:	c3 2e       	mov	r12, r19
     504:	32 e0       	ldi	r19, 0x02	; 2
     506:	d3 2e       	mov	r13, r19
     508:	26 ef       	ldi	r18, 0xF6	; 246
     50a:	62 2e       	mov	r6, r18
     50c:	22 e0       	ldi	r18, 0x02	; 2
     50e:	72 2e       	mov	r7, r18
     510:	55 20       	and	r5, r5
     512:	31 f5       	brne	.+76     	; 0x560 <main+0x130>
     514:	8e 01       	movw	r16, r28
     516:	05 5c       	subi	r16, 0xC5	; 197
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	1f 93       	push	r17
     51c:	0f 93       	push	r16
     51e:	ff 92       	push	r15
     520:	ef 92       	push	r14
     522:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     526:	df 92       	push	r13
     528:	cf 92       	push	r12
     52a:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 85 05 	sts	0x0585, r24
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	56 e9       	ldi	r21, 0x96	; 150
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_init>
     542:	7f 92       	push	r7
     544:	6f 92       	push	r6
     546:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     54a:	bf 92       	push	r11
     54c:	af 92       	push	r10
     54e:	9f 92       	push	r9
     550:	8f 92       	push	r8
     552:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     556:	1f 93       	push	r17
     558:	0f 93       	push	r16
     55a:	ff 92       	push	r15
     55c:	ef 92       	push	r14
     55e:	27 c0       	rjmp	.+78     	; 0x5ae <main+0x17e>
     560:	8e 01       	movw	r16, r28
     562:	0a 5e       	subi	r16, 0xEA	; 234
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	ff 92       	push	r15
     56c:	ef 92       	push	r14
     56e:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     572:	df 92       	push	r13
     574:	cf 92       	push	r12
     576:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	80 93 85 05 	sts	0x0585, r24
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	56 e9       	ldi	r21, 0x96	; 150
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	0e 94 9d 03 	call	0x73a	; 0x73a <uart_init>
     58e:	7f 92       	push	r7
     590:	6f 92       	push	r6
     592:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     596:	bf 92       	push	r11
     598:	af 92       	push	r10
     59a:	9f 92       	push	r9
     59c:	8f 92       	push	r8
     59e:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     5a2:	1f 93       	push	r17
     5a4:	0f 93       	push	r16
     5a6:	88 e2       	ldi	r24, 0x28	; 40
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     5b2:	8d b7       	in	r24, 0x3d	; 61
     5b4:	9e b7       	in	r25, 0x3e	; 62
     5b6:	40 96       	adiw	r24, 0x10	; 16
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	9e bf       	out	0x3e, r25	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	8d bf       	out	0x3d, r24	; 61
     5c2:	84 e3       	ldi	r24, 0x34	; 52
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 08 05 	call	0xa10	; 0xa10 <uart_mini_printf>
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	4e 99       	sbic	0x09, 6	; 9
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <main+0x1a2>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 d8 00 	sts	0x00D8, r24
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <can_init>
     5e2:	80 91 e2 00 	lds	r24, 0x00E2
     5e6:	80 93 e5 00 	sts	0x00E5, r24
     5ea:	fe 01       	movw	r30, r28
     5ec:	31 96       	adiw	r30, 0x01	; 1
     5ee:	ce 01       	movw	r24, r28
     5f0:	09 96       	adiw	r24, 0x09	; 9
     5f2:	11 92       	st	Z+, r1
     5f4:	e8 17       	cp	r30, r24
     5f6:	f9 07       	cpc	r31, r25
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0x1c2>
     5fa:	ce 01       	movw	r24, r28
     5fc:	01 96       	adiw	r24, 0x01	; 1
     5fe:	9a 8b       	std	Y+18, r25	; 0x12
     600:	89 8b       	std	Y+17, r24	; 0x11
     602:	84 e0       	ldi	r24, 0x04	; 4
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9b 87       	std	Y+11, r25	; 0x0b
     608:	8a 87       	std	Y+10, r24	; 0x0a
     60a:	ce 01       	movw	r24, r28
     60c:	09 96       	adiw	r24, 0x09	; 9
     60e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <can_cmd>
     612:	88 23       	and	r24, r24
     614:	d1 f7       	brne	.-12     	; 0x60a <main+0x1da>
     616:	ce 01       	movw	r24, r28
     618:	09 96       	adiw	r24, 0x09	; 9
     61a:	0e 94 3b 09 	call	0x1276	; 0x1276 <can_get_status>
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	d1 f3       	breq	.-12     	; 0x616 <main+0x1e6>
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	d9 f1       	breq	.+118    	; 0x69c <main+0x26c>
     626:	2c 85       	ldd	r18, Y+12	; 0x0c
     628:	3d 85       	ldd	r19, Y+13	; 0x0d
     62a:	4e 85       	ldd	r20, Y+14	; 0x0e
     62c:	5f 85       	ldd	r21, Y+15	; 0x0f
     62e:	21 15       	cp	r18, r1
     630:	31 05       	cpc	r19, r1
     632:	41 05       	cpc	r20, r1
     634:	51 05       	cpc	r21, r1
     636:	91 f1       	breq	.+100    	; 0x69c <main+0x26c>
     638:	8c 85       	ldd	r24, Y+12	; 0x0c
     63a:	9d 85       	ldd	r25, Y+13	; 0x0d
     63c:	89 2b       	or	r24, r25
     63e:	71 f1       	breq	.+92     	; 0x69c <main+0x26c>
     640:	55 20       	and	r5, r5
     642:	99 f6       	brne	.-90     	; 0x5ea <main+0x1ba>
     644:	80 91 f9 00 	lds	r24, 0x00F9
     648:	8f 83       	std	Y+7, r24	; 0x07
     64a:	80 91 f8 00 	lds	r24, 0x00F8
     64e:	88 87       	std	Y+8, r24	; 0x08
     650:	2f 5f       	subi	r18, 0xFF	; 255
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	4f 4f       	sbci	r20, 0xFF	; 255
     656:	5f 4f       	sbci	r21, 0xFF	; 255
     658:	2c 87       	std	Y+12, r18	; 0x0c
     65a:	3d 87       	std	Y+13, r19	; 0x0d
     65c:	4e 87       	std	Y+14, r20	; 0x0e
     65e:	5f 87       	std	Y+15, r21	; 0x0f
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	88 8b       	std	Y+16, r24	; 0x10
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	9b 87       	std	Y+11, r25	; 0x0b
     66a:	8a 87       	std	Y+10, r24	; 0x0a
     66c:	ce 01       	movw	r24, r28
     66e:	09 96       	adiw	r24, 0x09	; 9
     670:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <can_cmd>
     674:	88 23       	and	r24, r24
     676:	d1 f7       	brne	.-12     	; 0x66c <main+0x23c>
     678:	99 e0       	ldi	r25, 0x09	; 9
     67a:	e9 2e       	mov	r14, r25
     67c:	f1 2c       	mov	r15, r1
     67e:	ec 0e       	add	r14, r28
     680:	fd 1e       	adc	r15, r29
     682:	c7 01       	movw	r24, r14
     684:	0e 94 3b 09 	call	0x1276	; 0x1276 <can_get_status>
     688:	08 2f       	mov	r16, r24
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	a9 f3       	breq	.-22     	; 0x678 <main+0x248>
     68e:	b7 01       	movw	r22, r14
     690:	84 e5       	ldi	r24, 0x54	; 84
     692:	0e 94 6b 00 	call	0xd6	; 0xd6 <spy_printing>
     696:	02 30       	cpi	r16, 0x02	; 2
     698:	09 f0       	breq	.+2      	; 0x69c <main+0x26c>
     69a:	a7 cf       	rjmp	.-178    	; 0x5ea <main+0x1ba>
     69c:	0e 94 86 01 	call	0x30c	; 0x30c <can_error_mode>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	ca 59       	subi	r28, 0x9A	; 154
     6a6:	df 4f       	sbci	r29, 0xFF	; 255
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	ef 90       	pop	r14
     6be:	df 90       	pop	r13
     6c0:	cf 90       	pop	r12
     6c2:	bf 90       	pop	r11
     6c4:	af 90       	pop	r10
     6c6:	9f 90       	pop	r9
     6c8:	8f 90       	pop	r8
     6ca:	7f 90       	pop	r7
     6cc:	6f 90       	pop	r6
     6ce:	5f 90       	pop	r5
     6d0:	08 95       	ret

000006d2 <uart_rx_get_3_data>:
//!
//! @return UART pin value sampled 3 times
//------------------------------------------------------------------------------
Bool uart_rx_get_3_data (void)
{
     6d2:	80 91 85 05 	lds	r24, 0x0585
     6d6:	88 23       	and	r24, r24
     6d8:	39 f4       	brne	.+14     	; 0x6e8 <uart_rx_get_3_data+0x16>
U8 u8_temp = 0;

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_3_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    {
        u8_temp = (UART_0_PORT_IN  & UART_0_PORT_IN  & UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
     6da:	8c b1       	in	r24, 0x0c	; 12
     6dc:	9c b1       	in	r25, 0x0c	; 12
     6de:	2c b1       	in	r18, 0x0c	; 12
     6e0:	89 23       	and	r24, r25
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	28 23       	and	r18, r24
     6e6:	11 c0       	rjmp	.+34     	; 0x70a <uart_rx_get_3_data+0x38>
    }
    if (uart_selected == UART_1)
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	11 f0       	breq	.+4      	; 0x6f0 <uart_rx_get_3_data+0x1e>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	0d c0       	rjmp	.+26     	; 0x70a <uart_rx_get_3_data+0x38>
    {
        u8_temp = (UART_1_PORT_IN  & UART_1_PORT_IN  & UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
     6f0:	89 b1       	in	r24, 0x09	; 9
     6f2:	29 b1       	in	r18, 0x09	; 9
     6f4:	39 b1       	in	r19, 0x09	; 9
     6f6:	82 23       	and	r24, r18
     6f8:	83 23       	and	r24, r19
     6fa:	99 27       	eor	r25, r25
     6fc:	84 70       	andi	r24, 0x04	; 4
     6fe:	90 70       	andi	r25, 0x00	; 0
     700:	95 95       	asr	r25
     702:	87 95       	ror	r24
     704:	95 95       	asr	r25
     706:	87 95       	ror	r24
     708:	28 2f       	mov	r18, r24
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
}
     70a:	82 2f       	mov	r24, r18
     70c:	99 27       	eor	r25, r25
     70e:	08 95       	ret

00000710 <uart_rx_get_data>:


//------------------------------------------------------------------------------
//  @fn uart_rx_get_data
//!
//! This function returns the UART pin value.
//!
//! @warning none
//!
//! @param  none
//!
//! @return UART pin value
//------------------------------------------------------------------------------
Bool uart_rx_get_data (void)
{
     710:	80 91 85 05 	lds	r24, 0x0585
     714:	88 23       	and	r24, r24
     716:	19 f4       	brne	.+6      	; 0x71e <uart_rx_get_data+0xe>
U8 u8_temp = 0;

#if ((USE_UART == UART_0) || (USE_UART == UART_1))
    u8_temp = Uart_rx_get_data();
    
#elif (USE_UART ==  BOTH_UART)
    if (uart_selected == UART_0)
    {
        u8_temp = (UART_0_PORT_IN  & (1<<UART_0_INPUT_PIN)) >> UART_0_INPUT_PIN;
     718:	8c b1       	in	r24, 0x0c	; 12
     71a:	81 70       	andi	r24, 0x01	; 1
     71c:	0c c0       	rjmp	.+24     	; 0x736 <uart_rx_get_data+0x26>
    }
    if (uart_selected == UART_1)
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	11 f0       	breq	.+4      	; 0x726 <uart_rx_get_data+0x16>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	08 c0       	rjmp	.+16     	; 0x736 <uart_rx_get_data+0x26>
    {
        u8_temp = (UART_1_PORT_IN  & (1<<UART_1_INPUT_PIN)) >> UART_1_INPUT_PIN;
     726:	89 b1       	in	r24, 0x09	; 9
     728:	99 27       	eor	r25, r25
     72a:	84 70       	andi	r24, 0x04	; 4
     72c:	90 70       	andi	r25, 0x00	; 0
     72e:	95 95       	asr	r25
     730:	87 95       	ror	r24
     732:	95 95       	asr	r25
     734:	87 95       	ror	r24
    }
#   else
#       error USE_UART definition is not referenced in "uart_drv.h" file
#endif

    return u8_temp;
}
     736:	99 27       	eor	r25, r25
     738:	08 95       	ret

0000073a <uart_init>:
//!         ==1: baudrate performed
//!
//------------------------------------------------------------------------------
U8 uart_init (U8 mode, U32 baudrate)
{
     73a:	90 91 85 05 	lds	r25, 0x0585
     73e:	48 2f       	mov	r20, r24
     740:	44 70       	andi	r20, 0x04	; 4
     742:	58 2f       	mov	r21, r24
     744:	58 73       	andi	r21, 0x38	; 56
     746:	28 2f       	mov	r18, r24
     748:	33 27       	eor	r19, r19
     74a:	99 23       	and	r25, r25
     74c:	f1 f5       	brne	.+124    	; 0x7ca <uart_init+0x90>
    Uart_clear();       // Flush, Disable and Reset UART
     74e:	10 92 c1 00 	sts	0x00C1, r1
     752:	80 91 c6 00 	lds	r24, 0x00C6
     756:	80 93 c2 00 	sts	0x00C2, r24
     75a:	80 e4       	ldi	r24, 0x40	; 64
     75c:	80 93 c0 00 	sts	0x00C0, r24
     760:	86 e0       	ldi	r24, 0x06	; 6
     762:	80 93 c2 00 	sts	0x00C2, r24
     766:	10 92 c5 00 	sts	0x00C5, r1
     76a:	10 92 c4 00 	sts	0x00C4, r1
    if (Uart_set_baudrate(baudrate) == 0) return 0;  //!<  c.f. macro in "uart_drv.h"
     76e:	10 92 c5 00 	sts	0x00C5, r1
     772:	89 e1       	ldi	r24, 0x19	; 25
     774:	80 93 c4 00 	sts	0x00C4, r24
     778:	80 91 c0 00 	lds	r24, 0x00C0
     77c:	82 60       	ori	r24, 0x02	; 2
     77e:	80 93 c0 00 	sts	0x00C0, r24
    Uart_hw_init(mode);     //!<  c.f. macro in "uart_drv.h"
     782:	80 91 c0 00 	lds	r24, 0x00C0
     786:	80 62       	ori	r24, 0x20	; 32
     788:	80 93 c0 00 	sts	0x00C0, r24
     78c:	80 91 c1 00 	lds	r24, 0x00C1
     790:	8b 7f       	andi	r24, 0xFB	; 251
     792:	80 93 c1 00 	sts	0x00C1, r24
     796:	80 91 c1 00 	lds	r24, 0x00C1
     79a:	84 2b       	or	r24, r20
     79c:	80 93 c1 00 	sts	0x00C1, r24
     7a0:	50 93 c2 00 	sts	0x00C2, r21
     7a4:	80 91 c2 00 	lds	r24, 0x00C2
     7a8:	23 70       	andi	r18, 0x03	; 3
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	22 0f       	add	r18, r18
     7ae:	33 1f       	adc	r19, r19
     7b0:	82 2b       	or	r24, r18
     7b2:	80 93 c2 00 	sts	0x00C2, r24
     7b6:	80 91 c2 00 	lds	r24, 0x00C2
    Uart_enable();          //!<  c.f. macro in "uart_drv.h"
     7ba:	80 91 c1 00 	lds	r24, 0x00C1
     7be:	88 61       	ori	r24, 0x18	; 24
     7c0:	80 93 c1 00 	sts	0x00C1, r24
     7c4:	80 91 c1 00 	lds	r24, 0x00C1
     7c8:	3d c0       	rjmp	.+122    	; 0x844 <uart_init+0x10a>
     7ca:	10 92 c9 00 	sts	0x00C9, r1
     7ce:	80 91 ce 00 	lds	r24, 0x00CE
     7d2:	80 93 ca 00 	sts	0x00CA, r24
     7d6:	80 e4       	ldi	r24, 0x40	; 64
     7d8:	80 93 c8 00 	sts	0x00C8, r24
     7dc:	86 e0       	ldi	r24, 0x06	; 6
     7de:	80 93 ca 00 	sts	0x00CA, r24
     7e2:	10 92 cd 00 	sts	0x00CD, r1
     7e6:	10 92 cc 00 	sts	0x00CC, r1
     7ea:	10 92 cd 00 	sts	0x00CD, r1
     7ee:	89 e1       	ldi	r24, 0x19	; 25
     7f0:	80 93 cc 00 	sts	0x00CC, r24
     7f4:	80 91 c8 00 	lds	r24, 0x00C8
     7f8:	82 60       	ori	r24, 0x02	; 2
     7fa:	80 93 c8 00 	sts	0x00C8, r24
     7fe:	80 91 c8 00 	lds	r24, 0x00C8
     802:	80 62       	ori	r24, 0x20	; 32
     804:	80 93 c8 00 	sts	0x00C8, r24
     808:	80 91 c9 00 	lds	r24, 0x00C9
     80c:	8b 7f       	andi	r24, 0xFB	; 251
     80e:	80 93 c9 00 	sts	0x00C9, r24
     812:	80 91 c9 00 	lds	r24, 0x00C9
     816:	84 2b       	or	r24, r20
     818:	80 93 c9 00 	sts	0x00C9, r24
     81c:	50 93 ca 00 	sts	0x00CA, r21
     820:	80 91 ca 00 	lds	r24, 0x00CA
     824:	23 70       	andi	r18, 0x03	; 3
     826:	30 70       	andi	r19, 0x00	; 0
     828:	22 0f       	add	r18, r18
     82a:	33 1f       	adc	r19, r19
     82c:	82 2b       	or	r24, r18
     82e:	80 93 ca 00 	sts	0x00CA, r24
     832:	80 91 ca 00 	lds	r24, 0x00CA
     836:	80 91 c9 00 	lds	r24, 0x00C9
     83a:	88 61       	ori	r24, 0x18	; 24
     83c:	80 93 c9 00 	sts	0x00C9, r24
     840:	80 91 c9 00 	lds	r24, 0x00C9
    return (1);
}
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	08 95       	ret

0000084a <uart_test_hit>:

//------------------------------------------------------------------------------
//  @fn uart_test_hit
//!
//! Check if something has been received on the UART peripheral.
//!
//! @warning none
//!
//! @param  none
//!
//! @return Baudrate Status
//!         ==0: Nothing has been received
//!         ==1: A character has been received
//!
//------------------------------------------------------------------------------
U8 uart_test_hit (void)
{
     84a:	80 91 85 05 	lds	r24, 0x0585
     84e:	88 23       	and	r24, r24
     850:	19 f4       	brne	.+6      	; 0x858 <uart_test_hit+0xe>
    return (Uart_rx_ready());
     852:	80 91 c0 00 	lds	r24, 0x00C0
     856:	02 c0       	rjmp	.+4      	; 0x85c <uart_test_hit+0x12>
     858:	80 91 c8 00 	lds	r24, 0x00C8
     85c:	88 1f       	adc	r24, r24
     85e:	88 27       	eor	r24, r24
     860:	88 1f       	adc	r24, r24
}
     862:	99 27       	eor	r25, r25
     864:	08 95       	ret

00000866 <uart_putchar>:

//------------------------------------------------------------------------------
//  @fn uart_putchar
//!
//! Send a character on the UART peripheral.
//!
//! @warning none
//!
//! @param  character to send
//!
//! @return character sent
//!
//------------------------------------------------------------------------------
U8 uart_putchar (U8 ch)
{
     866:	98 2f       	mov	r25, r24
    while(!Uart_tx_ready());
     868:	20 91 85 05 	lds	r18, 0x0585
     86c:	22 23       	and	r18, r18
     86e:	29 f4       	brne	.+10     	; 0x87a <uart_putchar+0x14>
     870:	80 91 c0 00 	lds	r24, 0x00C0
     874:	85 fd       	sbrc	r24, 5
     876:	06 c0       	rjmp	.+12     	; 0x884 <uart_putchar+0x1e>
     878:	f9 cf       	rjmp	.-14     	; 0x86c <uart_putchar+0x6>
     87a:	80 91 c8 00 	lds	r24, 0x00C8
     87e:	85 ff       	sbrs	r24, 5
     880:	f5 cf       	rjmp	.-22     	; 0x86c <uart_putchar+0x6>
    Uart_set_tx_busy();     // Set Busy flag before sending (always)
    Uart_send_byte(ch);
     882:	05 c0       	rjmp	.+10     	; 0x88e <uart_putchar+0x28>
     884:	90 93 c6 00 	sts	0x00C6, r25
     888:	80 91 c6 00 	lds	r24, 0x00C6
     88c:	04 c0       	rjmp	.+8      	; 0x896 <uart_putchar+0x30>
     88e:	90 93 ce 00 	sts	0x00CE, r25
     892:	80 91 ce 00 	lds	r24, 0x00CE
    return (ch);
}
     896:	89 2f       	mov	r24, r25
     898:	99 27       	eor	r25, r25
     89a:	08 95       	ret

0000089c <uart_getchar>:

//------------------------------------------------------------------------------
//  @fn uart_getchar
//!
//! Get a character from the UART peripheral.
//!
//! @warning none
//!
//! @param  none
//!
//! @return read (received) character on the UART
//!
//------------------------------------------------------------------------------
U8 uart_getchar (void)
{
     89c:	20 91 85 05 	lds	r18, 0x0585
    U8 ch;

    while(!Uart_rx_ready());
     8a0:	22 23       	and	r18, r18
     8a2:	59 f4       	brne	.+22     	; 0x8ba <uart_getchar+0x1e>
     8a4:	80 91 c0 00 	lds	r24, 0x00C0
     8a8:	99 27       	eor	r25, r25
     8aa:	88 0f       	add	r24, r24
     8ac:	89 2f       	mov	r24, r25
     8ae:	88 1f       	adc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	91 95       	neg	r25
     8b4:	89 2b       	or	r24, r25
     8b6:	61 f4       	brne	.+24     	; 0x8d0 <uart_getchar+0x34>
     8b8:	f3 cf       	rjmp	.-26     	; 0x8a0 <uart_getchar+0x4>
     8ba:	80 91 c8 00 	lds	r24, 0x00C8
     8be:	99 27       	eor	r25, r25
     8c0:	88 0f       	add	r24, r24
     8c2:	89 2f       	mov	r24, r25
     8c4:	88 1f       	adc	r24, r24
     8c6:	99 0b       	sbc	r25, r25
     8c8:	91 95       	neg	r25
     8ca:	89 2b       	or	r24, r25
     8cc:	49 f3       	breq	.-46     	; 0x8a0 <uart_getchar+0x4>
    ch = Uart_get_byte();
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <uart_getchar+0x3a>
     8d0:	80 91 c6 00 	lds	r24, 0x00C6
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <uart_getchar+0x3e>
     8d6:	80 91 ce 00 	lds	r24, 0x00CE
    Uart_ack_rx_byte();
    return ch;
}
     8da:	99 27       	eor	r25, r25
     8dc:	08 95       	ret

000008de <uart_put_string>:

//------------------------------------------------------------------------------
//  @fn uart_put_string
//!
//! Put a data-string on TX UART. The data-string is send up to null
//! character is found.
//!
//! @warning "uart_init()" must be performed before
//!
//! @param Pointer on U8 data-string
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_put_string (U8 *data_string)
    {
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	ec 01       	movw	r28, r24
     8e4:	03 c0       	rjmp	.+6      	; 0x8ec <uart_put_string+0xe>
    while(*data_string) uart_putchar (*data_string++);
     8e6:	21 96       	adiw	r28, 0x01	; 1
     8e8:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     8ec:	88 81       	ld	r24, Y
     8ee:	88 23       	and	r24, r24
     8f0:	d1 f7       	brne	.-12     	; 0x8e6 <uart_put_string+0x8>
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <uart_get_editedline>:
    }
#endif  // REDUCED_UART_LIB

//------------------------------------------------------------------------------
//  @fn uart_mini_printf
//!
//! Minimal "PRINTF" with variable argument list. Write several variables
//! formatted by a format string to a file descriptor.
//! Example:
//! ========
//! { u8_toto = 0xAA;
//!   uart_mini_printf ("toto = %04d (0x%012X)\r\n", u8_toto, u8_toto);
//!   /*   Expected:     toto = 0170 (0x0000000000AA)   &  Cr+Lf       */ }
//!
//! @warning "uart_init()" must be performed before
//!
//! @param argument list
//!
//!     The format string is interpreted like this:
//!        ,---------------,---------------------------------------------------,
//!        | Any character | Output as is                                      |
//!        |---------------+---------------------------------------------------|
//!        |     %c:       | interpret argument as character                   |
//!        |     %s:       | interpret argument as pointer to string           |
//!        |     %d:       | interpret argument as decimal (signed) S16        |
//!        |     %ld:      | interpret argument as decimal (signed) S32        |
//!        |     %u:       | interpret argument as decimal (unsigned) U16      |
//!        |     %lu:      | interpret argument as decimal (unsigned) U32      |
//!        |     %x:       | interpret argument as hex U16 (lower case chars)  |
//!        |     %lx:      | interpret argument as hex U32 (lower case chars)  |
//!        |     %X:       | interpret argument as hex U16 (upper case chars)  |
//!        |     %lX:      | interpret argument as hex U32 (upper case chars)  |
//!        |     %%:       | print a percent ('%') character                   |
//!        '---------------'---------------------------------------------------'
//!
//!     Field width (in decimal) always starts with "0" and its maximum is
//!     given by "DATA_BUF_LEN" defined in "uart_lib.h".
//!        ,----------------------,-----------,--------------,-----------------,
//!        |       Variable       | Writting  |  Printing    |    Comment      |
//!        |----------------------+-----------+--------------|-----------------|
//!        |                      |   %x      | aa           |        -        |
//!        |  u8_xx = 0xAA        |   %04d    | 0170         |        -        |
//!        |                      |   %012X   | 0000000000AA |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        | u16_xx = -5678       |   %010d   | -0000005678  |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        | u32_xx = -4100000000 |   %011lu  | 00194967296  |        -        |
//!        |----------------------+-----------+--------------|-----------------|
//!        |          -           |   %8x     | 8x           | Writting error! |
//!        |----------------------+-----------+--------------|-----------------|
//!        |          -           |   %0s     | 0s           | Writting error! |
//!        '----------------------'-----------'--------------'-----------------'
//!       
//! Return: 0 = O.K.
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
U8 uart_mini_printf(char *format, ...)
{
    va_list arg_ptr;
    U8      *p,*sval;
    U8      u8_temp, n_sign, data_idx, min_size;
    U8      data_buf[DATA_BUF_LEN];
    S8      long_flag, alt_p_c;
    S8      s8_val;
    S16     s16_val;
    S32     s32_val;
    U16     u16_val;
    U32     u32_val;

    long_flag = FALSE;
    alt_p_c = FALSE;
    min_size = DATA_BUF_LEN-1;

    va_start(arg_ptr, format);   // make arg_ptr point to the first unnamed arg
    for (p = (U8 *) format; *p; p++)
    {
        if ((*p == '%') || (alt_p_c == TRUE))
        {
            p++;
        }
        else
        {
            uart_putchar(*p);
            alt_p_c = FALSE;
            long_flag = FALSE;
            continue;   // "switch (*p)" section skipped
        }
        switch (*p)
        {
            case 'c':
                if (long_flag == TRUE)      // ERROR: 'l' before any 'c'
                {
                    uart_putchar('l');
                    uart_putchar('c');
                }
                else
                {
                    s8_val = (S8)(va_arg(arg_ptr, int));    // s8_val = (S8)(va_arg(arg_ptr, S16));
                    uart_putchar((U8)(s8_val));
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break; // case 'c'
                
            case 's':
                if (long_flag == TRUE)      // ERROR: 'l' before any 's'
                {
                    uart_putchar('l');
                    uart_putchar('s');
                }
                else
                {
                    for (sval = va_arg(arg_ptr, U8 *); *sval; sval++)
                    {
                        uart_putchar(*sval);
                    }
                }
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 's'
                
            case 'l':  // It is not the number "ONE" but the lower case of "L" character
                if (long_flag == TRUE)      // ERROR: two consecutive 'l'
                {
                    uart_putchar('l');
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                }
                else
                {
                    alt_p_c = TRUE;
                    long_flag = TRUE;
                }
                p--;
                break;  // case 'l'
                
            case 'd':
                n_sign  = FALSE;               
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                {
                    s32_val = va_arg(arg_ptr, S32);
                    if (s32_val < 0)
                    {
                        n_sign = TRUE;
                        s32_val  = -s32_val;
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s32_val % 10 + '0';
                        s32_val /= 10;
                        data_idx--;
						if (s32_val==0) break;
                   }
                }
                else  // 16-bit
                {
                    s16_val = (S16)(va_arg(arg_ptr, int)); // s16_val = va_arg(arg_ptr, S16);
                    if (s16_val < 0)
                    {
                        n_sign = TRUE;
                        s16_val  = -s16_val;
                    }
                    while (1)
                    {
                        data_buf[data_idx] = s16_val % 10 + '0';
                        s16_val /= 10;
                        data_idx--;
						if (s16_val==0) break;
                    }
                }
                if (n_sign) { uart_putchar('-'); }
                data_idx++;
                if (min_size < data_idx)
                {
                    data_idx = min_size;
                }
                uart_put_string (data_buf + data_idx);
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'd'
                
            case 'u':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                {
                    u32_val = va_arg(arg_ptr, U32);
                    while (1)
                    {
                        data_buf[data_idx] = u32_val % 10 + '0';
                        u32_val /= 10;
                        data_idx--;
						if (u32_val==0) break;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (1)
                    {
                        data_buf[data_idx] = u16_val % 10 + '0';
                        data_idx--;
                        u16_val /= 10;
						if (u16_val==0) break;
                    }
                }
                data_idx++;
                if (min_size < data_idx)
                {
                    data_idx = min_size;
                }
                uart_put_string (data_buf + data_idx);
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'u':
                
            case 'x':
            case 'X':
                for(data_idx = 0; data_idx < (DATA_BUF_LEN-1); data_idx++)
                {
                    data_buf[data_idx] = '0';
                }
                data_buf[DATA_BUF_LEN-1] = 0;
                data_idx = DATA_BUF_LEN - 2;
                if (long_flag)  // 32-bit
                { 
                    u32_val = va_arg(arg_ptr, U32);
                    while (u32_val)
                    {
                        u8_temp = (U8)(u32_val & 0x0F);
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u32_val >>= 4;
                        data_idx--;
                    }
                }
                else  // 16-bit
                {
                    u16_val = (U16)(va_arg(arg_ptr, int)); // u16_val = va_arg(arg_ptr, U16);
                    while (u16_val)
                    {
                        u8_temp = (U8)(u16_val & 0x0F);
                        data_buf[data_idx] = (u8_temp < 10)? u8_temp+'0':u8_temp-10+(*p=='x'?'a':'A');
                        u16_val >>= 4;
                        data_idx--;
                    }
                }
                data_idx++;
                if (min_size < data_idx)
                {
                    data_idx = min_size;
                }
                uart_put_string (data_buf + data_idx);
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // case 'x' & 'X'
                
            case '0':   // Max allowed "min_size" 2 decimal digit, truncated to DATA_BUF_LEN-1.
                min_size = DATA_BUF_LEN-1;
                if (long_flag == TRUE)      // ERROR: 'l' before '0'
                {
                    uart_putchar('l');
                    uart_putchar('0');
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                u8_temp = *++p;
                if ((u8_temp >='0') && (u8_temp <='9'))
                {
                    min_size = u8_temp & 0x0F;
                    u8_temp = *++p;
                    if ((u8_temp >='0') && (u8_temp <='9'))
                    {
                        min_size <<= 4;
                        min_size |= (u8_temp & 0x0F);
                        p++;
                    }
                    min_size = ((min_size & 0x0F) + ((min_size >> 4) *10));  // Decimal to hexa
                    if (min_size > (DATA_BUF_LEN-1))
                    {
                        min_size = (DATA_BUF_LEN-1);
                    }  // Truncation
                    min_size = DATA_BUF_LEN-1 - min_size;  // "min_size" formatted as "data_ix"
                }
                else      // ERROR: any "char" after '0'
                {
                    uart_putchar('0');
                    uart_putchar(*p);
                    // Clean up
                    alt_p_c = FALSE;
                    long_flag = FALSE;
                    break;
                }
                p-=2;
                alt_p_c = TRUE;
                // Clean up
                long_flag = FALSE;
                break;  // case '0'
                
            default:
                if (long_flag == TRUE)
                {
                    uart_putchar('l');
                }
                uart_putchar(*p);
                // Clean up
                min_size = DATA_BUF_LEN-1;
                alt_p_c = FALSE;
                long_flag = FALSE;
                break;  // default
                
        }   // switch (*p ...
        
    }   // for (p = ...
    
    va_end(arg_ptr);
    return 0;
}
#endif  // REDUCED_UART_LIB

//------------------------------------------------------------------------------
//  @fn uart_get_editedline
//!
//! This function is a simple line-editor that allows to delete and
//! re-edit the characters entered, until either (CR) or (NL) is entered.
//! Printable characters entered will be echoed using uart_putchar().
//! 
//! Editing characters:
//! - \b (BS) or \x7F (DEL) delete the previous character
//! - \t will be replaced by a single space
//! - ^z (or ^Z) kills the entire input buffer
//! 
//! All other control characters will be ignored. (CR) or (NL) used to stop
//! the line acquisition is not recorded.
//! 
//! The internal line buffer is [size] characters long, which includes
//! the terminating \0, the 'END OF STRING' flag.  If the buffer is full 
//! (i.e. at [size-1] characters in order to keep space for the
//! 'END OF STRING' flag), the function will be automatically finished.
//! 
//! The data-string can be re-sent up to null character ('END OF STRING' flag)
//! by uart_mini_printf() or uart_put_string () functions.
//!
//! @warning "uart_init()" must be performed before
//!
//! @param  Pointer on the line buffer
//!         Size of the buffer (0 not allowed)
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
#ifndef REDUCED_UART_LIB
void uart_get_editedline (U8 *data_string, U8 size)
{
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	7c 01       	movw	r14, r24
     90c:	b6 2e       	mov	r11, r22
     90e:	cc 24       	eor	r12, r12
     910:	66 23       	and	r22, r22
     912:	11 f4       	brne	.+4      	; 0x918 <uart_get_editedline+0x20>
     914:	71 e0       	ldi	r23, 0x01	; 1
     916:	c7 2e       	mov	r12, r23
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	c8 26       	eor	r12, r24
    U8      i, u8_temp;
    U8      index=0;
    U8      xx=1;
    
    if (size == 0) xx = 0;        // 1 <= size <= 255 
    data_string[0] = 0;           // For care !
     91c:	f7 01       	movw	r30, r14
     91e:	10 82       	st	Z, r1
     920:	60 c0       	rjmp	.+192    	; 0x9e2 <uart_get_editedline+0xea>
    
    while(xx)
    {
        if (index == size-1)      // Force END_OF_DATA 
     922:	c0 2f       	mov	r28, r16
     924:	dd 27       	eor	r29, r29
     926:	8b 2d       	mov	r24, r11
     928:	99 27       	eor	r25, r25
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	c8 17       	cp	r28, r24
     92e:	d9 07       	cpc	r29, r25
     930:	21 f4       	brne	.+8      	; 0x93a <uart_get_editedline+0x42>
        {
            data_string[index++] = 0;
     932:	ce 0d       	add	r28, r14
     934:	df 1d       	adc	r29, r15
     936:	18 82       	st	Y, r1
     938:	61 c0       	rjmp	.+194    	; 0x9fc <uart_get_editedline+0x104>
            break;
        }
        
        // Get one character, this character will be examinated !
        u8_temp = uart_getchar();
     93a:	0e 94 4e 04 	call	0x89c	; 0x89c <uart_getchar>
     93e:	18 2f       	mov	r17, r24
        
        // Character processing
        switch (u8_temp)
     940:	8a 30       	cpi	r24, 0x0A	; 10
     942:	79 f0       	breq	.+30     	; 0x962 <uart_get_editedline+0x6a>
     944:	8b 30       	cpi	r24, 0x0B	; 11
     946:	30 f4       	brcc	.+12     	; 0x954 <uart_get_editedline+0x5c>
     948:	88 30       	cpi	r24, 0x08	; 8
     94a:	c1 f0       	breq	.+48     	; 0x97c <uart_get_editedline+0x84>
     94c:	89 30       	cpi	r24, 0x09	; 9
     94e:	09 f0       	breq	.+2      	; 0x952 <uart_get_editedline+0x5a>
     950:	4a c0       	rjmp	.+148    	; 0x9e6 <uart_get_editedline+0xee>
     952:	0c c0       	rjmp	.+24     	; 0x96c <uart_get_editedline+0x74>
     954:	8a 31       	cpi	r24, 0x1A	; 26
     956:	91 f1       	breq	.+100    	; 0x9bc <uart_get_editedline+0xc4>
     958:	8f 37       	cpi	r24, 0x7F	; 127
     95a:	81 f0       	breq	.+32     	; 0x97c <uart_get_editedline+0x84>
     95c:	8d 30       	cpi	r24, 0x0D	; 13
     95e:	09 f0       	breq	.+2      	; 0x962 <uart_get_editedline+0x6a>
     960:	42 c0       	rjmp	.+132    	; 0x9e6 <uart_get_editedline+0xee>
        {
        case '\n':      // New line
        case '\r':      // Carriage return
            xx = data_string[index++] = 0;   // Force END_OF_DATA
     962:	e0 0e       	add	r14, r16
     964:	f1 1c       	adc	r15, r1
     966:	f7 01       	movw	r30, r14
     968:	10 82       	st	Z, r1
     96a:	48 c0       	rjmp	.+144    	; 0x9fc <uart_get_editedline+0x104>
            break;  // case '\n' & '\r'

        case '\t':      // Tabulation
            uart_putchar(' ');
     96c:	80 e2       	ldi	r24, 0x20	; 32
     96e:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
            data_string[index] = ' ';
     972:	ce 0d       	add	r28, r14
     974:	df 1d       	adc	r29, r15
     976:	80 e2       	ldi	r24, 0x20	; 32
     978:	88 83       	st	Y, r24
     97a:	3c c0       	rjmp	.+120    	; 0x9f4 <uart_get_editedline+0xfc>
            index++;
            break;  // case '\t'
            
        case '\b':      // Back-space
        case '\x7f':    // Delete
            if (index == 0)
     97c:	00 23       	and	r16, r16
     97e:	01 f1       	breq	.+64     	; 0x9c0 <uart_get_editedline+0xc8>
            {
                uart_putchar('\a');   // Bell
                break;
            }
            uart_putchar('\r');
     980:	8d e0       	ldi	r24, 0x0D	; 13
     982:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     986:	10 e0       	ldi	r17, 0x00	; 0
            for (i=0; i<index; i++) uart_putchar(' ');
     988:	80 e2       	ldi	r24, 0x20	; 32
     98a:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     98e:	1f 5f       	subi	r17, 0xFF	; 255
     990:	10 17       	cp	r17, r16
     992:	d1 f7       	brne	.-12     	; 0x988 <uart_get_editedline+0x90>
            uart_putchar('\r');
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
            index--;
     99a:	d0 2e       	mov	r13, r16
     99c:	da 94       	dec	r13
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <uart_get_editedline+0xb8>
            for (i=0; i<index; i++) uart_putchar(data_string[i]);
     9a2:	f7 01       	movw	r30, r14
     9a4:	e8 0f       	add	r30, r24
     9a6:	f1 1d       	adc	r31, r1
     9a8:	80 81       	ld	r24, Z
     9aa:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     9ae:	81 2f       	mov	r24, r17
     9b0:	18 2f       	mov	r17, r24
     9b2:	1f 5f       	subi	r17, 0xFF	; 255
     9b4:	10 17       	cp	r17, r16
     9b6:	a9 f7       	brne	.-22     	; 0x9a2 <uart_get_editedline+0xaa>
     9b8:	0d 2d       	mov	r16, r13
     9ba:	1d c0       	rjmp	.+58     	; 0x9f6 <uart_get_editedline+0xfe>
            break;  // case '\b' & '\x7F'
            
        case '\x1A':    // Control-z or control-Z
            if (index == 0)
     9bc:	00 23       	and	r16, r16
     9be:	21 f4       	brne	.+8      	; 0x9c8 <uart_get_editedline+0xd0>
            {
                uart_putchar('\a');   // Bell
     9c0:	87 e0       	ldi	r24, 0x07	; 7
     9c2:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     9c6:	17 c0       	rjmp	.+46     	; 0x9f6 <uart_get_editedline+0xfe>
                break;
            }
            uart_putchar('\r');
     9c8:	8d e0       	ldi	r24, 0x0D	; 13
     9ca:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
            for (i=0; i<index; i++) uart_putchar(' ');
     9d0:	80 e2       	ldi	r24, 0x20	; 32
     9d2:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     9d6:	1f 5f       	subi	r17, 0xFF	; 255
     9d8:	10 17       	cp	r17, r16
     9da:	d1 f7       	brne	.-12     	; 0x9d0 <uart_get_editedline+0xd8>
            uart_putchar('\r');
     9dc:	8d e0       	ldi	r24, 0x0D	; 13
     9de:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     9e2:	00 e0       	ldi	r16, 0x00	; 0
     9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <uart_get_editedline+0xfe>
            index = 0;
            break;  // case '\x1A'
            
        default:
            uart_putchar(u8_temp);
     9e6:	81 2f       	mov	r24, r17
     9e8:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
            data_string[index] = u8_temp;
     9ec:	f7 01       	movw	r30, r14
     9ee:	e0 0f       	add	r30, r16
     9f0:	f1 1d       	adc	r31, r1
     9f2:	10 83       	st	Z, r17
            index++;
     9f4:	0f 5f       	subi	r16, 0xFF	; 255
     9f6:	cc 20       	and	r12, r12
     9f8:	09 f0       	breq	.+2      	; 0x9fc <uart_get_editedline+0x104>
     9fa:	93 cf       	rjmp	.-218    	; 0x922 <uart_get_editedline+0x2a>
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	08 95       	ret

00000a10 <uart_mini_printf>:
     a10:	3f 92       	push	r3
     a12:	4f 92       	push	r4
     a14:	5f 92       	push	r5
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	2e 97       	sbiw	r28, 0x0e	; 14
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	fe 01       	movw	r30, r28
     a44:	b2 96       	adiw	r30, 0x22	; 34
     a46:	81 91       	ld	r24, Z+
     a48:	91 91       	ld	r25, Z+
     a4a:	fa 83       	std	Y+2, r31	; 0x02
     a4c:	e9 83       	std	Y+1, r30	; 0x01
     a4e:	4c 01       	movw	r8, r24
     a50:	fb e0       	ldi	r31, 0x0B	; 11
     a52:	3f 2e       	mov	r3, r31
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	fa c1       	rjmp	.+1012   	; 0xe4e <uart_mini_printf+0x43e>
     a5a:	85 32       	cpi	r24, 0x25	; 37
     a5c:	11 f0       	breq	.+4      	; 0xa62 <uart_mini_printf+0x52>
     a5e:	91 30       	cpi	r25, 0x01	; 1
     a60:	11 f5       	brne	.+68     	; 0xaa6 <uart_mini_printf+0x96>
     a62:	08 94       	sec
     a64:	81 1c       	adc	r8, r1
     a66:	91 1c       	adc	r9, r1
     a68:	f4 01       	movw	r30, r8
     a6a:	80 81       	ld	r24, Z
     a6c:	84 36       	cpi	r24, 0x64	; 100
     a6e:	09 f4       	brne	.+2      	; 0xa72 <uart_mini_printf+0x62>
     a70:	52 c0       	rjmp	.+164    	; 0xb16 <uart_mini_printf+0x106>
     a72:	85 36       	cpi	r24, 0x65	; 101
     a74:	48 f4       	brcc	.+18     	; 0xa88 <uart_mini_printf+0x78>
     a76:	88 35       	cpi	r24, 0x58	; 88
     a78:	09 f4       	brne	.+2      	; 0xa7c <uart_mini_printf+0x6c>
     a7a:	2a c1       	rjmp	.+596    	; 0xcd0 <uart_mini_printf+0x2c0>
     a7c:	83 36       	cpi	r24, 0x63	; 99
     a7e:	b1 f0       	breq	.+44     	; 0xaac <uart_mini_printf+0x9c>
     a80:	80 33       	cpi	r24, 0x30	; 48
     a82:	09 f0       	breq	.+2      	; 0xa86 <uart_mini_printf+0x76>
     a84:	d4 c1       	rjmp	.+936    	; 0xe2e <uart_mini_printf+0x41e>
     a86:	98 c1       	rjmp	.+816    	; 0xdb8 <uart_mini_printf+0x3a8>
     a88:	83 37       	cpi	r24, 0x73	; 115
     a8a:	f1 f0       	breq	.+60     	; 0xac8 <uart_mini_printf+0xb8>
     a8c:	84 37       	cpi	r24, 0x74	; 116
     a8e:	20 f4       	brcc	.+8      	; 0xa98 <uart_mini_printf+0x88>
     a90:	8c 36       	cpi	r24, 0x6C	; 108
     a92:	09 f0       	breq	.+2      	; 0xa96 <uart_mini_printf+0x86>
     a94:	cc c1       	rjmp	.+920    	; 0xe2e <uart_mini_printf+0x41e>
     a96:	31 c0       	rjmp	.+98     	; 0xafa <uart_mini_printf+0xea>
     a98:	85 37       	cpi	r24, 0x75	; 117
     a9a:	09 f4       	brne	.+2      	; 0xa9e <uart_mini_printf+0x8e>
     a9c:	b6 c0       	rjmp	.+364    	; 0xc0a <uart_mini_printf+0x1fa>
     a9e:	88 37       	cpi	r24, 0x78	; 120
     aa0:	09 f0       	breq	.+2      	; 0xaa4 <uart_mini_printf+0x94>
     aa2:	c5 c1       	rjmp	.+906    	; 0xe2e <uart_mini_printf+0x41e>
     aa4:	15 c1       	rjmp	.+554    	; 0xcd0 <uart_mini_printf+0x2c0>
     aa6:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     aaa:	cc c1       	rjmp	.+920    	; 0xe44 <uart_mini_printf+0x434>
     aac:	31 30       	cpi	r19, 0x01	; 1
     aae:	29 f4       	brne	.+10     	; 0xaba <uart_mini_printf+0xaa>
     ab0:	8c e6       	ldi	r24, 0x6C	; 108
     ab2:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     ab6:	83 e6       	ldi	r24, 0x63	; 99
     ab8:	c1 c1       	rjmp	.+898    	; 0xe3c <uart_mini_printf+0x42c>
     aba:	e9 81       	ldd	r30, Y+1	; 0x01
     abc:	fa 81       	ldd	r31, Y+2	; 0x02
     abe:	32 96       	adiw	r30, 0x02	; 2
     ac0:	fa 83       	std	Y+2, r31	; 0x02
     ac2:	e9 83       	std	Y+1, r30	; 0x01
     ac4:	32 97       	sbiw	r30, 0x02	; 2
     ac6:	b9 c1       	rjmp	.+882    	; 0xe3a <uart_mini_printf+0x42a>
     ac8:	31 30       	cpi	r19, 0x01	; 1
     aca:	29 f4       	brne	.+10     	; 0xad6 <uart_mini_printf+0xc6>
     acc:	8c e6       	ldi	r24, 0x6C	; 108
     ace:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     ad2:	83 e7       	ldi	r24, 0x73	; 115
     ad4:	b3 c1       	rjmp	.+870    	; 0xe3c <uart_mini_printf+0x42c>
     ad6:	e9 81       	ldd	r30, Y+1	; 0x01
     ad8:	fa 81       	ldd	r31, Y+2	; 0x02
     ada:	32 96       	adiw	r30, 0x02	; 2
     adc:	fa 83       	std	Y+2, r31	; 0x02
     ade:	e9 83       	std	Y+1, r30	; 0x01
     ae0:	f2 90       	ld	r15, -Z
     ae2:	e2 90       	ld	r14, -Z
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <uart_mini_printf+0xe0>
     ae6:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     aea:	08 94       	sec
     aec:	e1 1c       	adc	r14, r1
     aee:	f1 1c       	adc	r15, r1
     af0:	f7 01       	movw	r30, r14
     af2:	80 81       	ld	r24, Z
     af4:	88 23       	and	r24, r24
     af6:	b9 f7       	brne	.-18     	; 0xae6 <uart_mini_printf+0xd6>
     af8:	a3 c1       	rjmp	.+838    	; 0xe40 <uart_mini_printf+0x430>
     afa:	31 30       	cpi	r19, 0x01	; 1
     afc:	19 f0       	breq	.+6      	; 0xb04 <uart_mini_printf+0xf4>
     afe:	31 e0       	ldi	r19, 0x01	; 1
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <uart_mini_printf+0xfe>
     b04:	8c e6       	ldi	r24, 0x6C	; 108
     b06:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	08 94       	sec
     b10:	81 08       	sbc	r8, r1
     b12:	91 08       	sbc	r9, r1
     b14:	99 c1       	rjmp	.+818    	; 0xe48 <uart_mini_printf+0x438>
     b16:	fe 01       	movw	r30, r28
     b18:	33 96       	adiw	r30, 0x03	; 3
     b1a:	20 e3       	ldi	r18, 0x30	; 48
     b1c:	ce 01       	movw	r24, r28
     b1e:	0e 96       	adiw	r24, 0x0e	; 14
     b20:	21 93       	st	Z+, r18
     b22:	e8 17       	cp	r30, r24
     b24:	f9 07       	cpc	r31, r25
     b26:	e1 f7       	brne	.-8      	; 0xb20 <uart_mini_printf+0x110>
     b28:	1e 86       	std	Y+14, r1	; 0x0e
     b2a:	a9 80       	ldd	r10, Y+1	; 0x01
     b2c:	ba 80       	ldd	r11, Y+2	; 0x02
     b2e:	33 23       	and	r19, r19
     b30:	d9 f1       	breq	.+118    	; 0xba8 <uart_mini_printf+0x198>
     b32:	f5 01       	movw	r30, r10
     b34:	c0 80       	ld	r12, Z
     b36:	d1 80       	ldd	r13, Z+1	; 0x01
     b38:	e2 80       	ldd	r14, Z+2	; 0x02
     b3a:	f3 80       	ldd	r15, Z+3	; 0x03
     b3c:	f7 fc       	sbrc	r15, 7
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <uart_mini_printf+0x134>
     b40:	66 24       	eor	r6, r6
     b42:	0a c0       	rjmp	.+20     	; 0xb58 <uart_mini_printf+0x148>
     b44:	f0 94       	com	r15
     b46:	e0 94       	com	r14
     b48:	d0 94       	com	r13
     b4a:	c0 94       	com	r12
     b4c:	c1 1c       	adc	r12, r1
     b4e:	d1 1c       	adc	r13, r1
     b50:	e1 1c       	adc	r14, r1
     b52:	f1 1c       	adc	r15, r1
     b54:	e1 e0       	ldi	r30, 0x01	; 1
     b56:	6e 2e       	mov	r6, r30
     b58:	7a e0       	ldi	r23, 0x0A	; 10
     b5a:	77 2e       	mov	r7, r23
     b5c:	63 e0       	ldi	r22, 0x03	; 3
     b5e:	46 2e       	mov	r4, r22
     b60:	51 2c       	mov	r5, r1
     b62:	4c 0e       	add	r4, r28
     b64:	5d 1e       	adc	r5, r29
     b66:	82 01       	movw	r16, r4
     b68:	07 0d       	add	r16, r7
     b6a:	11 1d       	adc	r17, r1
     b6c:	c7 01       	movw	r24, r14
     b6e:	b6 01       	movw	r22, r12
     b70:	2a e0       	ldi	r18, 0x0A	; 10
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodsi4>
     b7c:	60 5d       	subi	r22, 0xD0	; 208
     b7e:	f8 01       	movw	r30, r16
     b80:	60 83       	st	Z, r22
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	2a e0       	ldi	r18, 0x0A	; 10
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodsi4>
     b92:	69 01       	movw	r12, r18
     b94:	7a 01       	movw	r14, r20
     b96:	7a 94       	dec	r7
     b98:	21 15       	cp	r18, r1
     b9a:	31 05       	cpc	r19, r1
     b9c:	41 05       	cpc	r20, r1
     b9e:	51 05       	cpc	r21, r1
     ba0:	11 f7       	brne	.-60     	; 0xb66 <uart_mini_printf+0x156>
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	26 c0       	rjmp	.+76     	; 0xbf4 <uart_mini_printf+0x1e4>
     ba8:	f5 01       	movw	r30, r10
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	37 fd       	sbrc	r19, 7
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <uart_mini_printf+0x1a6>
     bb2:	66 24       	eor	r6, r6
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <uart_mini_printf+0x1b0>
     bb6:	30 95       	com	r19
     bb8:	21 95       	neg	r18
     bba:	3f 4f       	sbci	r19, 0xFF	; 255
     bbc:	51 e0       	ldi	r21, 0x01	; 1
     bbe:	65 2e       	mov	r6, r21
     bc0:	4a e0       	ldi	r20, 0x0A	; 10
     bc2:	74 2e       	mov	r7, r20
     bc4:	8e 01       	movw	r16, r28
     bc6:	0d 5f       	subi	r16, 0xFD	; 253
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	f8 01       	movw	r30, r16
     bcc:	e7 0d       	add	r30, r7
     bce:	f1 1d       	adc	r31, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	6a e0       	ldi	r22, 0x0A	; 10
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     bda:	80 5d       	subi	r24, 0xD0	; 208
     bdc:	80 83       	st	Z, r24
     bde:	c9 01       	movw	r24, r18
     be0:	6a e0       	ldi	r22, 0x0A	; 10
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     be8:	9b 01       	movw	r18, r22
     bea:	7a 94       	dec	r7
     bec:	67 2b       	or	r22, r23
     bee:	69 f7       	brne	.-38     	; 0xbca <uart_mini_printf+0x1ba>
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a8 0e       	add	r10, r24
     bf6:	b9 1e       	adc	r11, r25
     bf8:	ba 82       	std	Y+2, r11	; 0x02
     bfa:	a9 82       	std	Y+1, r10	; 0x01
     bfc:	66 20       	and	r6, r6
     bfe:	09 f4       	brne	.+2      	; 0xc02 <uart_mini_printf+0x1f2>
     c00:	60 c0       	rjmp	.+192    	; 0xcc2 <uart_mini_printf+0x2b2>
     c02:	8d e2       	ldi	r24, 0x2D	; 45
     c04:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     c08:	5c c0       	rjmp	.+184    	; 0xcc2 <uart_mini_printf+0x2b2>
     c0a:	fe 01       	movw	r30, r28
     c0c:	33 96       	adiw	r30, 0x03	; 3
     c0e:	20 e3       	ldi	r18, 0x30	; 48
     c10:	ce 01       	movw	r24, r28
     c12:	0e 96       	adiw	r24, 0x0e	; 14
     c14:	21 93       	st	Z+, r18
     c16:	e8 17       	cp	r30, r24
     c18:	f9 07       	cpc	r31, r25
     c1a:	e1 f7       	brne	.-8      	; 0xc14 <uart_mini_printf+0x204>
     c1c:	1e 86       	std	Y+14, r1	; 0x0e
     c1e:	a9 80       	ldd	r10, Y+1	; 0x01
     c20:	ba 80       	ldd	r11, Y+2	; 0x02
     c22:	33 23       	and	r19, r19
     c24:	69 f1       	breq	.+90     	; 0xc80 <uart_mini_printf+0x270>
     c26:	f5 01       	movw	r30, r10
     c28:	c0 80       	ld	r12, Z
     c2a:	d1 80       	ldd	r13, Z+1	; 0x01
     c2c:	e2 80       	ldd	r14, Z+2	; 0x02
     c2e:	f3 80       	ldd	r15, Z+3	; 0x03
     c30:	9a e0       	ldi	r25, 0x0A	; 10
     c32:	79 2e       	mov	r7, r25
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	48 2e       	mov	r4, r24
     c38:	51 2c       	mov	r5, r1
     c3a:	4c 0e       	add	r4, r28
     c3c:	5d 1e       	adc	r5, r29
     c3e:	82 01       	movw	r16, r4
     c40:	07 0d       	add	r16, r7
     c42:	11 1d       	adc	r17, r1
     c44:	c7 01       	movw	r24, r14
     c46:	b6 01       	movw	r22, r12
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	0e 94 82 10 	call	0x2104	; 0x2104 <__udivmodsi4>
     c54:	60 5d       	subi	r22, 0xD0	; 208
     c56:	f8 01       	movw	r30, r16
     c58:	60 83       	st	Z, r22
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	2a e0       	ldi	r18, 0x0A	; 10
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	0e 94 82 10 	call	0x2104	; 0x2104 <__udivmodsi4>
     c6a:	69 01       	movw	r12, r18
     c6c:	7a 01       	movw	r14, r20
     c6e:	7a 94       	dec	r7
     c70:	21 15       	cp	r18, r1
     c72:	31 05       	cpc	r19, r1
     c74:	41 05       	cpc	r20, r1
     c76:	51 05       	cpc	r21, r1
     c78:	11 f7       	brne	.-60     	; 0xc3e <uart_mini_printf+0x22e>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	1d c0       	rjmp	.+58     	; 0xcba <uart_mini_printf+0x2aa>
     c80:	f5 01       	movw	r30, r10
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	0a e0       	ldi	r16, 0x0A	; 10
     c88:	70 2e       	mov	r7, r16
     c8a:	8e 01       	movw	r16, r28
     c8c:	0d 5f       	subi	r16, 0xFD	; 253
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	f8 01       	movw	r30, r16
     c92:	e7 0d       	add	r30, r7
     c94:	f1 1d       	adc	r31, r1
     c96:	c9 01       	movw	r24, r18
     c98:	6a e0       	ldi	r22, 0x0A	; 10
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__udivmodhi4>
     ca0:	80 5d       	subi	r24, 0xD0	; 208
     ca2:	80 83       	st	Z, r24
     ca4:	7a 94       	dec	r7
     ca6:	c9 01       	movw	r24, r18
     ca8:	6a e0       	ldi	r22, 0x0A	; 10
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__udivmodhi4>
     cb0:	9b 01       	movw	r18, r22
     cb2:	67 2b       	or	r22, r23
     cb4:	69 f7       	brne	.-38     	; 0xc90 <uart_mini_printf+0x280>
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 0e       	add	r10, r24
     cbc:	b9 1e       	adc	r11, r25
     cbe:	ba 82       	std	Y+2, r11	; 0x02
     cc0:	a9 82       	std	Y+1, r10	; 0x01
     cc2:	87 2d       	mov	r24, r7
     cc4:	8f 5f       	subi	r24, 0xFF	; 255
     cc6:	23 2d       	mov	r18, r3
     cc8:	83 15       	cp	r24, r3
     cca:	08 f0       	brcs	.+2      	; 0xcce <uart_mini_printf+0x2be>
     ccc:	6e c0       	rjmp	.+220    	; 0xdaa <uart_mini_printf+0x39a>
     cce:	6c c0       	rjmp	.+216    	; 0xda8 <uart_mini_printf+0x398>
     cd0:	fe 01       	movw	r30, r28
     cd2:	33 96       	adiw	r30, 0x03	; 3
     cd4:	20 e3       	ldi	r18, 0x30	; 48
     cd6:	ce 01       	movw	r24, r28
     cd8:	0e 96       	adiw	r24, 0x0e	; 14
     cda:	21 93       	st	Z+, r18
     cdc:	e8 17       	cp	r30, r24
     cde:	f9 07       	cpc	r31, r25
     ce0:	e1 f7       	brne	.-8      	; 0xcda <uart_mini_printf+0x2ca>
     ce2:	1e 86       	std	Y+14, r1	; 0x0e
     ce4:	a9 80       	ldd	r10, Y+1	; 0x01
     ce6:	ba 80       	ldd	r11, Y+2	; 0x02
     ce8:	33 23       	and	r19, r19
     cea:	89 f1       	breq	.+98     	; 0xd4e <uart_mini_printf+0x33e>
     cec:	e4 e0       	ldi	r30, 0x04	; 4
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	ae 0e       	add	r10, r30
     cf2:	bf 1e       	adc	r11, r31
     cf4:	ba 82       	std	Y+2, r11	; 0x02
     cf6:	a9 82       	std	Y+1, r10	; 0x01
     cf8:	f5 01       	movw	r30, r10
     cfa:	52 91       	ld	r21, -Z
     cfc:	42 91       	ld	r20, -Z
     cfe:	32 91       	ld	r19, -Z
     d00:	22 91       	ld	r18, -Z
     d02:	6a e0       	ldi	r22, 0x0A	; 10
     d04:	de 01       	movw	r26, r28
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	1c c0       	rjmp	.+56     	; 0xd42 <uart_mini_printf+0x332>
     d0a:	92 2f       	mov	r25, r18
     d0c:	9f 70       	andi	r25, 0x0F	; 15
     d0e:	9a 30       	cpi	r25, 0x0A	; 10
     d10:	18 f4       	brcc	.+6      	; 0xd18 <uart_mini_printf+0x308>
     d12:	89 2f       	mov	r24, r25
     d14:	80 5d       	subi	r24, 0xD0	; 208
     d16:	09 c0       	rjmp	.+18     	; 0xd2a <uart_mini_printf+0x31a>
     d18:	f4 01       	movw	r30, r8
     d1a:	80 81       	ld	r24, Z
     d1c:	88 37       	cpi	r24, 0x78	; 120
     d1e:	11 f4       	brne	.+4      	; 0xd24 <uart_mini_printf+0x314>
     d20:	81 e6       	ldi	r24, 0x61	; 97
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <uart_mini_printf+0x316>
     d24:	81 e4       	ldi	r24, 0x41	; 65
     d26:	89 0f       	add	r24, r25
     d28:	8a 50       	subi	r24, 0x0A	; 10
     d2a:	fd 01       	movw	r30, r26
     d2c:	e6 0f       	add	r30, r22
     d2e:	f1 1d       	adc	r31, r1
     d30:	80 83       	st	Z, r24
     d32:	14 e0       	ldi	r17, 0x04	; 4
     d34:	56 95       	lsr	r21
     d36:	47 95       	ror	r20
     d38:	37 95       	ror	r19
     d3a:	27 95       	ror	r18
     d3c:	1a 95       	dec	r17
     d3e:	d1 f7       	brne	.-12     	; 0xd34 <uart_mini_printf+0x324>
     d40:	61 50       	subi	r22, 0x01	; 1
     d42:	21 15       	cp	r18, r1
     d44:	31 05       	cpc	r19, r1
     d46:	41 05       	cpc	r20, r1
     d48:	51 05       	cpc	r21, r1
     d4a:	f9 f6       	brne	.-66     	; 0xd0a <uart_mini_printf+0x2fa>
     d4c:	2b c0       	rjmp	.+86     	; 0xda4 <uart_mini_printf+0x394>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a8 0e       	add	r10, r24
     d54:	b9 1e       	adc	r11, r25
     d56:	ba 82       	std	Y+2, r11	; 0x02
     d58:	a9 82       	std	Y+1, r10	; 0x01
     d5a:	f5 01       	movw	r30, r10
     d5c:	32 91       	ld	r19, -Z
     d5e:	22 91       	ld	r18, -Z
     d60:	6a e0       	ldi	r22, 0x0A	; 10
     d62:	ae 01       	movw	r20, r28
     d64:	4d 5f       	subi	r20, 0xFD	; 253
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	1a c0       	rjmp	.+52     	; 0xd9e <uart_mini_printf+0x38e>
     d6a:	92 2f       	mov	r25, r18
     d6c:	9f 70       	andi	r25, 0x0F	; 15
     d6e:	9a 30       	cpi	r25, 0x0A	; 10
     d70:	18 f4       	brcc	.+6      	; 0xd78 <uart_mini_printf+0x368>
     d72:	89 2f       	mov	r24, r25
     d74:	80 5d       	subi	r24, 0xD0	; 208
     d76:	09 c0       	rjmp	.+18     	; 0xd8a <uart_mini_printf+0x37a>
     d78:	f4 01       	movw	r30, r8
     d7a:	80 81       	ld	r24, Z
     d7c:	88 37       	cpi	r24, 0x78	; 120
     d7e:	11 f4       	brne	.+4      	; 0xd84 <uart_mini_printf+0x374>
     d80:	81 e6       	ldi	r24, 0x61	; 97
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <uart_mini_printf+0x376>
     d84:	81 e4       	ldi	r24, 0x41	; 65
     d86:	89 0f       	add	r24, r25
     d88:	8a 50       	subi	r24, 0x0A	; 10
     d8a:	fa 01       	movw	r30, r20
     d8c:	e6 0f       	add	r30, r22
     d8e:	f1 1d       	adc	r31, r1
     d90:	80 83       	st	Z, r24
     d92:	b4 e0       	ldi	r27, 0x04	; 4
     d94:	36 95       	lsr	r19
     d96:	27 95       	ror	r18
     d98:	ba 95       	dec	r27
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <uart_mini_printf+0x384>
     d9c:	61 50       	subi	r22, 0x01	; 1
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	19 f7       	brne	.-58     	; 0xd6a <uart_mini_printf+0x35a>
     da4:	86 2f       	mov	r24, r22
     da6:	8e cf       	rjmp	.-228    	; 0xcc4 <uart_mini_printf+0x2b4>
     da8:	28 2f       	mov	r18, r24
     daa:	ce 01       	movw	r24, r28
     dac:	03 96       	adiw	r24, 0x03	; 3
     dae:	82 0f       	add	r24, r18
     db0:	91 1d       	adc	r25, r1
     db2:	0e 94 6f 04 	call	0x8de	; 0x8de <uart_put_string>
     db6:	44 c0       	rjmp	.+136    	; 0xe40 <uart_mini_printf+0x430>
     db8:	31 30       	cpi	r19, 0x01	; 1
     dba:	29 f4       	brne	.+10     	; 0xdc6 <uart_mini_printf+0x3b6>
     dbc:	8c e6       	ldi	r24, 0x6C	; 108
     dbe:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     dc2:	80 e3       	ldi	r24, 0x30	; 48
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <uart_mini_printf+0x42c>
     dc6:	08 94       	sec
     dc8:	81 1c       	adc	r8, r1
     dca:	91 1c       	adc	r9, r1
     dcc:	f4 01       	movw	r30, r8
     dce:	90 81       	ld	r25, Z
     dd0:	89 2f       	mov	r24, r25
     dd2:	80 53       	subi	r24, 0x30	; 48
     dd4:	8a 30       	cpi	r24, 0x0A	; 10
     dd6:	48 f5       	brcc	.+82     	; 0xe2a <uart_mini_printf+0x41a>
     dd8:	39 2f       	mov	r19, r25
     dda:	3f 70       	andi	r19, 0x0F	; 15
     ddc:	a4 01       	movw	r20, r8
     dde:	4f 5f       	subi	r20, 0xFF	; 255
     de0:	5f 4f       	sbci	r21, 0xFF	; 255
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	89 2f       	mov	r24, r25
     de6:	80 53       	subi	r24, 0x30	; 48
     de8:	8a 30       	cpi	r24, 0x0A	; 10
     dea:	30 f4       	brcc	.+12     	; 0xdf8 <uart_mini_printf+0x3e8>
     dec:	32 95       	swap	r19
     dee:	30 7f       	andi	r19, 0xF0	; 240
     df0:	9f 70       	andi	r25, 0x0F	; 15
     df2:	39 2b       	or	r19, r25
     df4:	4f 5f       	subi	r20, 0xFF	; 255
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	83 2f       	mov	r24, r19
     dfa:	82 95       	swap	r24
     dfc:	8f 70       	andi	r24, 0x0F	; 15
     dfe:	2a e0       	ldi	r18, 0x0A	; 10
     e00:	82 9f       	mul	r24, r18
     e02:	c0 01       	movw	r24, r0
     e04:	11 24       	eor	r1, r1
     e06:	23 2f       	mov	r18, r19
     e08:	2f 70       	andi	r18, 0x0F	; 15
     e0a:	28 0f       	add	r18, r24
     e0c:	2c 30       	cpi	r18, 0x0C	; 12
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <uart_mini_printf+0x402>
     e10:	2b e0       	ldi	r18, 0x0B	; 11
     e12:	ab e0       	ldi	r26, 0x0B	; 11
     e14:	3a 2e       	mov	r3, r26
     e16:	32 1a       	sub	r3, r18
     e18:	fe ef       	ldi	r31, 0xFE	; 254
     e1a:	8f 2e       	mov	r8, r31
     e1c:	ff ef       	ldi	r31, 0xFF	; 255
     e1e:	9f 2e       	mov	r9, r31
     e20:	84 0e       	add	r8, r20
     e22:	95 1e       	adc	r9, r21
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	0f c0       	rjmp	.+30     	; 0xe48 <uart_mini_printf+0x438>
     e2a:	80 e3       	ldi	r24, 0x30	; 48
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <uart_mini_printf+0x424>
     e2e:	31 30       	cpi	r19, 0x01	; 1
     e30:	19 f4       	brne	.+6      	; 0xe38 <uart_mini_printf+0x428>
     e32:	8c e6       	ldi	r24, 0x6C	; 108
     e34:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     e38:	f4 01       	movw	r30, r8
     e3a:	80 81       	ld	r24, Z
     e3c:	0e 94 33 04 	call	0x866	; 0x866 <uart_putchar>
     e40:	eb e0       	ldi	r30, 0x0B	; 11
     e42:	3e 2e       	mov	r3, r30
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	08 94       	sec
     e4a:	81 1c       	adc	r8, r1
     e4c:	91 1c       	adc	r9, r1
     e4e:	f4 01       	movw	r30, r8
     e50:	80 81       	ld	r24, Z
     e52:	88 23       	and	r24, r24
     e54:	09 f0       	breq	.+2      	; 0xe58 <uart_mini_printf+0x448>
     e56:	01 ce       	rjmp	.-1022   	; 0xa5a <uart_mini_printf+0x4a>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2e 96       	adiw	r28, 0x0e	; 14
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	bf 90       	pop	r11
     e7a:	af 90       	pop	r10
     e7c:	9f 90       	pop	r9
     e7e:	8f 90       	pop	r8
     e80:	7f 90       	pop	r7
     e82:	6f 90       	pop	r6
     e84:	5f 90       	pop	r5
     e86:	4f 90       	pop	r4
     e88:	3f 90       	pop	r3
     e8a:	08 95       	ret

00000e8c <can_clear_all_mob>:
//!
//! @return none
//------------------------------------------------------------------------------
void can_clear_all_mob(void)
{
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
U8  mob_number;
/*
    U8  data_index;
*/

    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        CANPAGE = (mob_number << 4);    //! Page index
     e90:	82 2f       	mov	r24, r18
     e92:	82 95       	swap	r24
     e94:	80 7f       	andi	r24, 0xF0	; 240
     e96:	80 93 ed 00 	sts	0x00ED, r24
     e9a:	ee ee       	ldi	r30, 0xEE	; 238
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();                //! All MOb Registers=0
     e9e:	11 92       	st	Z+, r1
     ea0:	e8 3f       	cpi	r30, 0xF8	; 248
     ea2:	f1 05       	cpc	r31, r1
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <can_clear_all_mob+0x12>
     ea6:	2f 5f       	subi	r18, 0xFF	; 255
     ea8:	3f 4f       	sbci	r19, 0xFF	; 255
     eaa:	2f 30       	cpi	r18, 0x0F	; 15
     eac:	31 05       	cpc	r19, r1
     eae:	81 f7       	brne	.-32     	; 0xe90 <can_clear_all_mob+0x4>
     eb0:	08 95       	ret

00000eb2 <can_get_mob_free>:
/*
        for (data_index = 0; data_index < NB_DATA_MAX; data_index++)
        {
            CANMSG = 0;                 //! MOb data FIFO
        }
*/
    }
}

//------------------------------------------------------------------------------
//  @fn can_get_mob_free
//!
//! This function returns the number of the first MOb available or 0xFF if
//! no MOb is available.
//!
//! @warning none.
//!
//! @param  none.
//!
//! @return Handle of MOb.
//!          - MOb[0] upto MOb[LAST_MOB_NB]
//!          - 0xFF if no MOb
//------------------------------------------------------------------------------
U8 can_get_mob_free(void)
{
     eb2:	40 91 ed 00 	lds	r20, 0x00ED
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
    U8 mob_number, page_saved;

    page_saved = CANPAGE;
    for (mob_number = 0; mob_number < NB_MOB; mob_number++)
    {
        Can_set_mob(mob_number);
     eba:	82 2f       	mov	r24, r18
     ebc:	82 95       	swap	r24
     ebe:	80 7f       	andi	r24, 0xF0	; 240
     ec0:	80 93 ed 00 	sts	0x00ED, r24
        if ((CANCDMOB & 0xC0) == 0x00) //! Disable configuration
     ec4:	80 91 ef 00 	lds	r24, 0x00EF
     ec8:	80 7c       	andi	r24, 0xC0	; 192
     eca:	29 f4       	brne	.+10     	; 0xed6 <can_get_mob_free+0x24>
        {
            CANPAGE = page_saved;
     ecc:	40 93 ed 00 	sts	0x00ED, r20
            return (mob_number);
     ed0:	82 2f       	mov	r24, r18
     ed2:	99 27       	eor	r25, r25
     ed4:	08 95       	ret
     ed6:	2f 5f       	subi	r18, 0xFF	; 255
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	2f 30       	cpi	r18, 0x0F	; 15
     edc:	31 05       	cpc	r19, r1
     ede:	69 f7       	brne	.-38     	; 0xeba <can_get_mob_free+0x8>
        }
    }
    CANPAGE = page_saved;
     ee0:	40 93 ed 00 	sts	0x00ED, r20
     ee4:	8f ef       	ldi	r24, 0xFF	; 255
     ee6:	90 e0       	ldi	r25, 0x00	; 0
    return (NO_MOB);
}
     ee8:	08 95       	ret

00000eea <can_get_mob_status>:

//------------------------------------------------------------------------------
//  @fn can_get_mob_status
//!
//! This function returns information "MOB completed its job"
//! if one of the RXOK or TXOK Flag is set or "MOB not completed its job
//! if no RXOK and TXOK flags are set.
//! Previously, this function checks if the MOb is configured or not and in
//!  case of the MOB not configured, the function returns "MOB_DISABLE".
//!
//! @warning none.
//!
//! @param none.
//!
//! @return MOb Status.
//!          -  MOB_NOT_COMPLETED
//!          -  MOB_TX_COMPLETED
//!          -  MOB_RX_COMPLETED
//!          -  MOB_RX_DLC_WARNING
//!          -  MOB_DISABLE
//!          or should be a combination of the following errors
//!          -  MOB_ACK_ERROR
//!          -  MOB_FORM_ERROR
//!          -  MOB_CRC_ERROR
//!          -  MOB_STUFF_ERROR
//!          -  MOB_BIT_ERROR
//------------------------------------------------------------------------------
U8 can_get_mob_status(void)
{
     eea:	80 91 ef 00 	lds	r24, 0x00EF
     eee:	80 7c       	andi	r24, 0xC0	; 192
     ef0:	19 f4       	brne	.+6      	; 0xef8 <can_get_mob_status+0xe>
    U8 mob_status, canstmob_copy;

    // Test if MOb ENABLE or DISABLE
    if ((CANCDMOB & 0xC0) == 0x00) {return(MOB_DISABLE);}
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	08 95       	ret

    canstmob_copy = CANSTMOB; // Copy for test integrity
     ef8:	90 91 ee 00 	lds	r25, 0x00EE

    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
     efc:	89 2f       	mov	r24, r25
     efe:	80 7e       	andi	r24, 0xE0	; 224
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     f00:	80 32       	cpi	r24, 0x20	; 32
     f02:	21 f0       	breq	.+8      	; 0xf0c <can_get_mob_status+0x22>
     f04:	80 34       	cpi	r24, 0x40	; 64
     f06:	11 f0       	breq	.+4      	; 0xf0c <can_get_mob_status+0x22>
     f08:	80 3a       	cpi	r24, 0xA0	; 160
     f0a:	11 f4       	brne	.+4      	; 0xf10 <can_get_mob_status+0x26>
     f0c:	99 27       	eor	r25, r25
     f0e:	08 95       	ret
         (mob_status==MOB_TX_COMPLETED) ||   \
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }

    // If MOb is ENABLE & NOT_COMPLETED, test if MOb is in ERROR
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     f10:	89 2f       	mov	r24, r25
     f12:	8f 71       	andi	r24, 0x1F	; 31
    if (mob_status != 0) { return(mob_status); }
     f14:	19 f4       	brne	.+6      	; 0xf1c <can_get_mob_status+0x32>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	08 95       	ret
     f1c:	99 27       	eor	r25, r25

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
}
     f1e:	08 95       	ret

00000f20 <can_get_data>:

//------------------------------------------------------------------------------
//  @fn can_get_data
//!
//! This function copy the data from the selected MOb to the address
//! passed as parameter.
//!
//! @warning none.
//!
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(U8* p_can_message_data)
{
     f20:	bc 01       	movw	r22, r24
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <can_get_data+0x12>
    U8 data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
    {
        *(p_can_message_data + data_index) = CANMSG;
     f28:	e6 0f       	add	r30, r22
     f2a:	f7 1f       	adc	r31, r23
     f2c:	80 91 fa 00 	lds	r24, 0x00FA
     f30:	80 83       	st	Z, r24
     f32:	24 2f       	mov	r18, r20
     f34:	80 91 ef 00 	lds	r24, 0x00EF
     f38:	4f 5f       	subi	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	e2 2f       	mov	r30, r18
     f3e:	ff 27       	eor	r31, r31
     f40:	99 27       	eor	r25, r25
     f42:	8f 70       	andi	r24, 0x0F	; 15
     f44:	90 70       	andi	r25, 0x00	; 0
     f46:	e8 17       	cp	r30, r24
     f48:	f9 07       	cpc	r31, r25
     f4a:	74 f3       	brlt	.-36     	; 0xf28 <can_get_data+0x8>
     f4c:	08 95       	ret

00000f4e <can_auto_baudrate>:
    }
}

//------------------------------------------------------------------------------
//  @fn can_auto_baudrate
//!
//! This function programs itself the CANBTx registers if there is some
//! communication (activity) on the CAN bus.
//!
//! @warning complex function not yet implemented
//!
//! @param  Evaluation needed
//!         ==0: start the evaluation from faster baudrate
//!         ==1: (re)start an evaluation with CANBTx registers contents
//!
//! @return Baudrate Status
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed
//------------------------------------------------------------------------------
U8 can_auto_baudrate (U8 mode)
{
     f4e:	af 92       	push	r10
     f50:	bf 92       	push	r11
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	21 97       	sbiw	r28, 0x01	; 1
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
    U8  u8_temp0;                               //! Temporary variable
    U8  brp, prs, ntq, phs1, phs2;              //! Bit timing segment variables
    U8  phs1_inc;                               //! Computing needed
    U8  bt_not_found, wait_for_rx, evaluate;    //! Keys for "while()" loops
    U8  try_conf;                               //! Key for configurate CAN
    U8  ovrtim_flag=0;                          //! Timer overflow count
    U16 conf_index;                             //! Count of bit timing configuration tried
    U8  bt_performed;                           //! Return flag

    //! --- Default setting
    phs1_inc = evaluate = 0;
    bt_performed = 0;
    conf_index = 0;
    bt_not_found = 1;

    //! --- Init segment variables with MIN values if mode=0
    //!     or init segment variables with CANBTx if mode=1
    if (mode==0)
     f72:	88 23       	and	r24, r24
     f74:	59 f4       	brne	.+22     	; 0xf8c <can_auto_baudrate+0x3e>
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	e7 2e       	mov	r14, r23
     f7a:	63 e0       	ldi	r22, 0x03	; 3
     f7c:	18 e0       	ldi	r17, 0x08	; 8
     f7e:	a2 e0       	ldi	r26, 0x02	; 2
     f80:	b2 e0       	ldi	r27, 0x02	; 2
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	51 e0       	ldi	r21, 0x01	; 1
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	01 e0       	ldi	r16, 0x01	; 1
     f8a:	56 c0       	rjmp	.+172    	; 0x1038 <can_auto_baudrate+0xea>
    {
        brp  = BRP_MIN;
        ntq  = NTQ_MIN;
        phs1 = PHS1_MIN;
        phs2 = PHS2_MIN;
        prs  = ntq - ( phs1 + phs2 + 1 );
        try_conf = 1;       //! Try this configuration
        wait_for_rx = 1;    //! Enable "while (wait_for_rx ..." loop
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
     f8c:	80 91 e2 00 	lds	r24, 0x00E2
     f90:	8e 77       	andi	r24, 0x7E	; 126
     f92:	19 f4       	brne	.+6      	; 0xf9a <can_auto_baudrate+0x4c>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	e6 2e       	mov	r14, r22
     f98:	09 c0       	rjmp	.+18     	; 0xfac <can_auto_baudrate+0x5e>
     f9a:	80 91 e2 00 	lds	r24, 0x00E2
     f9e:	99 27       	eor	r25, r25
     fa0:	8e 77       	andi	r24, 0x7E	; 126
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	e8 2e       	mov	r14, r24
     faa:	e3 94       	inc	r14
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
     fac:	80 91 e3 00 	lds	r24, 0x00E3
     fb0:	8e 70       	andi	r24, 0x0E	; 14
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <can_auto_baudrate+0x6a>
     fb4:	61 e0       	ldi	r22, 0x01	; 1
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <can_auto_baudrate+0x7c>
     fb8:	80 91 e3 00 	lds	r24, 0x00E3
     fbc:	99 27       	eor	r25, r25
     fbe:	8e 70       	andi	r24, 0x0E	; 14
     fc0:	90 70       	andi	r25, 0x00	; 0
     fc2:	95 95       	asr	r25
     fc4:	87 95       	ror	r24
     fc6:	68 2f       	mov	r22, r24
     fc8:	6f 5f       	subi	r22, 0xFF	; 255
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
     fca:	80 91 e4 00 	lds	r24, 0x00E4
     fce:	8e 70       	andi	r24, 0x0E	; 14
     fd0:	83 30       	cpi	r24, 0x03	; 3
     fd2:	10 f4       	brcc	.+4      	; 0xfd8 <can_auto_baudrate+0x8a>
     fd4:	a2 e0       	ldi	r26, 0x02	; 2
     fd6:	09 c0       	rjmp	.+18     	; 0xfea <can_auto_baudrate+0x9c>
     fd8:	80 91 e4 00 	lds	r24, 0x00E4
     fdc:	99 27       	eor	r25, r25
     fde:	8e 70       	andi	r24, 0x0E	; 14
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	95 95       	asr	r25
     fe4:	87 95       	ror	r24
     fe6:	a8 2f       	mov	r26, r24
     fe8:	af 5f       	subi	r26, 0xFF	; 255
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
     fea:	80 91 e4 00 	lds	r24, 0x00E4
     fee:	80 77       	andi	r24, 0x70	; 112
     ff0:	81 31       	cpi	r24, 0x11	; 17
     ff2:	10 f4       	brcc	.+4      	; 0xff8 <can_auto_baudrate+0xaa>
     ff4:	b2 e0       	ldi	r27, 0x02	; 2
     ff6:	0c c0       	rjmp	.+24     	; 0x1010 <can_auto_baudrate+0xc2>
     ff8:	80 91 e4 00 	lds	r24, 0x00E4
     ffc:	99 27       	eor	r25, r25
     ffe:	80 77       	andi	r24, 0x70	; 112
    1000:	90 70       	andi	r25, 0x00	; 0
    1002:	24 e0       	ldi	r18, 0x04	; 4
    1004:	95 95       	asr	r25
    1006:	87 95       	ror	r24
    1008:	2a 95       	dec	r18
    100a:	e1 f7       	brne	.-8      	; 0x1004 <can_auto_baudrate+0xb6>
    100c:	b8 2f       	mov	r27, r24
    100e:	bf 5f       	subi	r27, 0xFF	; 255
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
    1010:	2b 2f       	mov	r18, r27
    1012:	2a 0f       	add	r18, r26
    1014:	31 2d       	mov	r19, r1
    1016:	31 1d       	adc	r19, r1
    1018:	c9 01       	movw	r24, r18
    101a:	86 0f       	add	r24, r22
    101c:	91 1d       	adc	r25, r1
    101e:	08 97       	sbiw	r24, 0x08	; 8
    1020:	14 f4       	brge	.+4      	; 0x1026 <can_auto_baudrate+0xd8>
    1022:	18 e0       	ldi	r17, 0x08	; 8
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <can_auto_baudrate+0xe2>
    1026:	1b 2f       	mov	r17, r27
    1028:	1a 0f       	add	r17, r26
    102a:	6f 5f       	subi	r22, 0xFF	; 255
    102c:	16 0f       	add	r17, r22
    102e:	61 50       	subi	r22, 0x01	; 1
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	41 e0       	ldi	r20, 0x01	; 1
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
    {
        Can_set_mob(u8_temp0);  //! Page index
    103c:	82 2f       	mov	r24, r18
    103e:	82 95       	swap	r24
    1040:	80 7f       	andi	r24, 0xF0	; 240
    1042:	80 93 ed 00 	sts	0x00ED, r24
    1046:	ee ee       	ldi	r30, 0xEE	; 238
    1048:	f0 e0       	ldi	r31, 0x00	; 0
        Can_clear_mob();        //! All MOb Registers = 0x00
    104a:	11 92       	st	Z+, r1
    104c:	e8 3f       	cpi	r30, 0xF8	; 248
    104e:	f1 05       	cpc	r31, r1
    1050:	e1 f7       	brne	.-8      	; 0x104a <can_auto_baudrate+0xfc>
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	2f 30       	cpi	r18, 0x0F	; 15
    1058:	31 05       	cpc	r19, r1
    105a:	81 f7       	brne	.-32     	; 0x103c <can_auto_baudrate+0xee>
    105c:	ff 24       	eor	r15, r15
    105e:	aa 24       	eor	r10, r10
    1060:	bb 24       	eor	r11, r11
    1062:	dd 24       	eor	r13, r13
    1064:	ce 2c       	mov	r12, r14
    1066:	cc 0c       	add	r12, r12
    1068:	3e ef       	ldi	r19, 0xFE	; 254
    106a:	c3 0e       	add	r12, r19
    }

    while (bt_not_found == 1)
    {
        if (try_conf == 1)
    106c:	01 30       	cpi	r16, 0x01	; 1
    106e:	19 f0       	breq	.+6      	; 0x1076 <can_auto_baudrate+0x128>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	81 c0       	rjmp	.+258    	; 0x1178 <__stack+0x79>
        {
            Can_reset();
    1076:	00 93 d8 00 	sts	0x00D8, r16
            conf_index++;
    107a:	08 94       	sec
    107c:	a1 1c       	adc	r10, r1
    107e:	b1 1c       	adc	r11, r1
            ovrtim_flag=0;

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
    1080:	c0 92 e2 00 	sts	0x00E2, r12
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
    1084:	2b 2f       	mov	r18, r27
    1086:	26 95       	lsr	r18
    1088:	33 27       	eor	r19, r19
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	22 0f       	add	r18, r18
    1092:	33 1f       	adc	r19, r19
    1094:	8a 95       	dec	r24
    1096:	e1 f7       	brne	.-8      	; 0x1090 <can_auto_baudrate+0x142>
    1098:	86 2f       	mov	r24, r22
    109a:	99 27       	eor	r25, r25
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	28 2b       	or	r18, r24
    10a4:	20 93 e3 00 	sts	0x00E3, r18
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
    10a8:	2a 2f       	mov	r18, r26
    10aa:	33 27       	eor	r19, r19
    10ac:	21 50       	subi	r18, 0x01	; 1
    10ae:	30 40       	sbci	r19, 0x00	; 0
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	8b 2f       	mov	r24, r27
    10b6:	99 27       	eor	r25, r25
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	34 e0       	ldi	r19, 0x04	; 4
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	3a 95       	dec	r19
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <can_auto_baudrate+0x16e>
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	82 2b       	or	r24, r18
    10c8:	80 93 e4 00 	sts	0x00E4, r24

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (U8)(conf_index >> 3);
    10cc:	c5 01       	movw	r24, r10
    10ce:	23 e0       	ldi	r18, 0x03	; 3
    10d0:	96 95       	lsr	r25
    10d2:	87 95       	ror	r24
    10d4:	2a 95       	dec	r18
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <can_auto_baudrate+0x182>
    10d8:	80 93 e5 00 	sts	0x00E5, r24

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
    10dc:	10 92 ed 00 	sts	0x00ED, r1
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
    10e0:	10 92 ee 00 	sts	0x00EE, r1
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
    10e4:	80 e8       	ldi	r24, 0x80	; 128
    10e6:	80 93 ef 00 	sts	0x00EF, r24

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
    10ea:	8a e0       	ldi	r24, 0x0A	; 10
    10ec:	80 93 d8 00 	sts	0x00D8, r24
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
    10f0:	80 91 d9 00 	lds	r24, 0x00D9
    10f4:	82 ff       	sbrs	r24, 2
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <can_auto_baudrate+0x1a2>
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 93 da 00 	sts	0x00DA, r24
    10fe:	ff 24       	eor	r15, r15
    1100:	b7 cf       	rjmp	.-146    	; 0x1070 <can_auto_baudrate+0x122>
        }

        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
        {
            u8_temp0 = CANSTMOB;
    1102:	80 91 ee 00 	lds	r24, 0x00EE
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
    1106:	99 27       	eor	r25, r25
    1108:	85 ff       	sbrs	r24, 5
    110a:	11 c0       	rjmp	.+34     	; 0x112e <__stack+0x2f>
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                bt_performed = 1;   //! Return flag = TRUE
                DISABLE_MOB;        //! Disable MOb-0
    110c:	80 91 ef 00 	lds	r24, 0x00EF
    1110:	8f 73       	andi	r24, 0x3F	; 63
    1112:	80 93 ef 00 	sts	0x00EF, r24
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    1116:	10 92 d8 00 	sts	0x00D8, r1
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    111a:	80 91 d9 00 	lds	r24, 0x00D9
    111e:	82 fd       	sbrc	r24, 2
    1120:	fc cf       	rjmp	.-8      	; 0x111a <__stack+0x1b>
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	d8 2e       	mov	r13, r24
    112c:	7e c0       	rjmp	.+252    	; 0x122a <__stack+0x12b>
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
    112e:	8f 71       	andi	r24, 0x1F	; 31
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	89 2b       	or	r24, r25
    1134:	11 f0       	breq	.+4      	; 0x113a <__stack+0x3b>
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	41 e0       	ldi	r20, 0x01	; 1
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                }

                u8_temp0 = CANGIT;
    113a:	80 91 da 00 	lds	r24, 0x00DA

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
    113e:	28 2f       	mov	r18, r24
    1140:	33 27       	eor	r19, r19
    1142:	25 ff       	sbrs	r18, 5
    1144:	11 c0       	rjmp	.+34     	; 0x1168 <__stack+0x69>
                {
                    if (ovrtim_flag==0)
    1146:	ff 20       	and	r15, r15
    1148:	41 f4       	brne	.+16     	; 0x115a <__stack+0x5b>
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    114a:	80 91 da 00 	lds	r24, 0x00DA
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	80 93 da 00 	sts	0x00DA, r24
    1154:	f1 e0       	ldi	r31, 0x01	; 1
    1156:	ff 2e       	mov	r15, r31
    1158:	07 c0       	rjmp	.+14     	; 0x1168 <__stack+0x69>
                        ovrtim_flag++;
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
    115a:	80 91 da 00 	lds	r24, 0x00DA
    115e:	80 62       	ori	r24, 0x20	; 32
    1160:	80 93 da 00 	sts	0x00DA, r24
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	41 e0       	ldi	r20, 0x01	; 1
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
    1168:	2f 70       	andi	r18, 0x0F	; 15
    116a:	30 70       	andi	r19, 0x00	; 0
    116c:	23 2b       	or	r18, r19
    116e:	21 f0       	breq	.+8      	; 0x1178 <__stack+0x79>
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	01 e0       	ldi	r16, 0x01	; 1
    1176:	59 c0       	rjmp	.+178    	; 0x122a <__stack+0x12b>
    1178:	51 30       	cpi	r21, 0x01	; 1
    117a:	19 f2       	breq	.-122    	; 0x1102 <__stack+0x3>
    117c:	56 c0       	rjmp	.+172    	; 0x122a <__stack+0x12b>
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
                    try_conf = 1;       //! Try this configuration
                }
            }
        } // while (wait_for_rx ...

        //! --- EVALUATE LOOP:
        //!     =============
        //!     Compute a new bit timing configuration. First, Phase 1 is increased,
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
    117e:	71 11       	cpse	r23, r1
    1180:	af 5f       	subi	r26, 0xFF	; 255
            phs1_inc = 1;

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
    1182:	a9 30       	cpi	r26, 0x09	; 9
    1184:	f0 f0       	brcs	.+60     	; 0x11c2 <__stack+0xc3>
    1186:	b8 30       	cpi	r27, 0x08	; 8
    1188:	f0 f0       	brcs	.+60     	; 0x11c6 <__stack+0xc7>
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
    118a:	19 31       	cpi	r17, 0x19	; 25
    118c:	11 f0       	breq	.+4      	; 0x1192 <__stack+0x93>
    118e:	1f 5f       	subi	r17, 0xFF	; 255
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <__stack+0xa1>
                else
                {
                    ntq = NTQ_MIN;
                    if (brp != BRP_MAX) brp++;
    1192:	e0 e4       	ldi	r30, 0x40	; 64
    1194:	ee 16       	cp	r14, r30
    1196:	41 f0       	breq	.+16     	; 0x11a8 <__stack+0xa9>
    1198:	e3 94       	inc	r14
    119a:	f2 e0       	ldi	r31, 0x02	; 2
    119c:	cf 0e       	add	r12, r31
    119e:	18 e0       	ldi	r17, 0x08	; 8
    11a0:	a2 e0       	ldi	r26, 0x02	; 2
    11a2:	b2 e0       	ldi	r27, 0x02	; 2
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	eb cf       	rjmp	.-42     	; 0x117e <__stack+0x7f>
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
                        bt_performed = 0;   //! Return flag = FALSE
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
                        DISABLE_MOB;        //! Disable MOb-0
    11a8:	80 91 ef 00 	lds	r24, 0x00EF
    11ac:	8f 73       	andi	r24, 0x3F	; 63
    11ae:	80 93 ef 00 	sts	0x00EF, r24
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
    11b2:	10 92 d8 00 	sts	0x00D8, r1
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
    11b6:	80 91 d9 00 	lds	r24, 0x00D9
    11ba:	82 fd       	sbrc	r24, 2
    11bc:	fc cf       	rjmp	.-8      	; 0x11b6 <__stack+0xb7>
    11be:	dd 24       	eor	r13, r13
    11c0:	3b c0       	rjmp	.+118    	; 0x1238 <__stack+0x139>
                    }
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
    11c2:	a6 30       	cpi	r26, 0x06	; 6
    11c4:	50 f0       	brcs	.+20     	; 0x11da <__stack+0xdb>
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
    11c6:	2a 2f       	mov	r18, r26
    11c8:	33 27       	eor	r19, r19
    11ca:	8b 2f       	mov	r24, r27
    11cc:	99 27       	eor	r25, r25
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	82 17       	cp	r24, r18
    11d2:	93 07       	cpc	r25, r19
    11d4:	1c f4       	brge	.+6      	; 0x11dc <__stack+0xdd>
    11d6:	ab 2f       	mov	r26, r27
    11d8:	af 5f       	subi	r26, 0xFF	; 255
    11da:	ba 2f       	mov	r27, r26
                }
                else
                {
                phs2=phs1;
                }
                prs = ntq - ( phs1 + phs2 + 1 );
    11dc:	8a 2f       	mov	r24, r26
    11de:	8b 0f       	add	r24, r27
    11e0:	61 2f       	mov	r22, r17
    11e2:	68 1b       	sub	r22, r24
    11e4:	61 50       	subi	r22, 0x01	; 1

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
    11e6:	86 2f       	mov	r24, r22
    11e8:	81 50       	subi	r24, 0x01	; 1
    11ea:	88 30       	cpi	r24, 0x08	; 8
    11ec:	e0 f4       	brcc	.+56     	; 0x1226 <__stack+0x127>
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
    11ee:	4b 2f       	mov	r20, r27
    11f0:	55 27       	eor	r21, r21
    11f2:	2a 2f       	mov	r18, r26
    11f4:	33 27       	eor	r19, r19
    11f6:	2f 5f       	subi	r18, 0xFF	; 255
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	26 0f       	add	r18, r22
    11fc:	31 1d       	adc	r19, r1
    11fe:	ca 01       	movw	r24, r20
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	82 17       	cp	r24, r18
    120a:	93 07       	cpc	r25, r19
    120c:	64 f0       	brlt	.+24     	; 0x1226 <__stack+0x127>
    120e:	ca 01       	movw	r24, r20
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	48 0f       	add	r20, r24
    1216:	59 1f       	adc	r21, r25
    1218:	24 17       	cp	r18, r20
    121a:	35 07       	cpc	r19, r21
    121c:	24 f0       	brlt	.+8      	; 0x1226 <__stack+0x127>
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	51 e0       	ldi	r21, 0x01	; 1
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <__stack+0x131>
    1226:	71 e0       	ldi	r23, 0x01	; 1
    1228:	aa cf       	rjmp	.-172    	; 0x117e <__stack+0x7f>
    122a:	41 30       	cpi	r20, 0x01	; 1
    122c:	09 f4       	brne	.+2      	; 0x1230 <__stack+0x131>
    122e:	a7 cf       	rjmp	.-178    	; 0x117e <__stack+0x7f>
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	21 30       	cpi	r18, 0x01	; 1
    1234:	09 f4       	brne	.+2      	; 0x1238 <__stack+0x139>
    1236:	1a cf       	rjmp	.-460    	; 0x106c <can_auto_baudrate+0x11e>
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
                    }
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
    1238:	8d 2d       	mov	r24, r13
    123a:	99 27       	eor	r25, r25
    123c:	21 96       	adiw	r28, 0x01	; 1
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	df 90       	pop	r13
    1256:	cf 90       	pop	r12
    1258:	bf 90       	pop	r11
    125a:	af 90       	pop	r10
    125c:	08 95       	ret

0000125e <can_fixed_baudrate>:

//------------------------------------------------------------------------------
//  @fn can_fixed_baudrate
//!
//! This function programs the CANBTx registers with the predefined values
//! CONF_CANBT1, CONF_CANBT2, CONF_CANBT3.
//!
//! @warning
//!
//! @param (unused!)
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
U8 can_fixed_baudrate(U8 mode)
{
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	80 93 d8 00 	sts	0x00D8, r24
    Can_reset();
    Can_conf_bt();
    1264:	10 92 e2 00 	sts	0x00E2, r1
    1268:	10 92 e3 00 	sts	0x00E3, r1
    126c:	10 92 e4 00 	sts	0x00E4, r1
    return 1;
}
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	08 95       	ret

00001276 <can_get_status>:
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
U8 can_get_status (st_cmd_t* cmd)
{
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	ec 01       	movw	r28, r24
    U8 a_status, rtn_val;
     
    a_status = cmd->status;
    127e:	8a 85       	ldd	r24, Y+10	; 0x0a
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1280:	88 23       	and	r24, r24
    1282:	09 f4       	brne	.+2      	; 0x1286 <can_get_status+0x10>
    1284:	87 c0       	rjmp	.+270    	; 0x1394 <can_get_status+0x11e>
    1286:	8f 31       	cpi	r24, 0x1F	; 31
    1288:	09 f4       	brne	.+2      	; 0x128c <can_get_status+0x16>
    128a:	84 c0       	rjmp	.+264    	; 0x1394 <can_get_status+0x11e>
    128c:	8f 3f       	cpi	r24, 0xFF	; 255
    128e:	09 f4       	brne	.+2      	; 0x1292 <can_get_status+0x1c>
    1290:	81 c0       	rjmp	.+258    	; 0x1394 <can_get_status+0x11e>
    {
        return CAN_STATUS_ERROR;
    }

    Can_set_mob(cmd->handle);
    1292:	88 81       	ld	r24, Y
    1294:	82 95       	swap	r24
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	80 93 ed 00 	sts	0x00ED, r24
    a_status = can_get_mob_status();
    129c:	0e 94 75 07 	call	0xeea	; 0xeea <can_get_mob_status>
    12a0:	18 2f       	mov	r17, r24
    
    switch (a_status)
    12a2:	80 32       	cpi	r24, 0x20	; 32
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <can_get_status+0x4c>
    12a6:	81 32       	cpi	r24, 0x21	; 33
    12a8:	18 f4       	brcc	.+6      	; 0x12b0 <can_get_status+0x3a>
    12aa:	88 23       	and	r24, r24
    12ac:	41 f0       	breq	.+16     	; 0x12be <can_get_status+0x48>
    12ae:	67 c0       	rjmp	.+206    	; 0x137e <can_get_status+0x108>
    12b0:	80 34       	cpi	r24, 0x40	; 64
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <can_get_status+0x40>
    12b4:	5a c0       	rjmp	.+180    	; 0x136a <can_get_status+0xf4>
    12b6:	80 3a       	cpi	r24, 0xA0	; 160
    12b8:	09 f0       	breq	.+2      	; 0x12bc <can_get_status+0x46>
    12ba:	61 c0       	rjmp	.+194    	; 0x137e <can_get_status+0x108>
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <can_get_status+0x4c>
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	67 c0       	rjmp	.+206    	; 0x1390 <can_get_status+0x11a>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
            break;
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    12c2:	80 91 ef 00 	lds	r24, 0x00EF
    12c6:	8f 70       	andi	r24, 0x0F	; 15
    12c8:	8f 83       	std	Y+7, r24	; 0x07
            can_get_data(cmd->pt_data);
    12ca:	88 85       	ldd	r24, Y+8	; 0x08
    12cc:	99 85       	ldd	r25, Y+9	; 0x09
    12ce:	0e 94 90 07 	call	0xf20	; 0xf20 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    12d2:	80 91 f0 00 	lds	r24, 0x00F0
    12d6:	99 27       	eor	r25, r25
    12d8:	84 70       	andi	r24, 0x04	; 4
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	95 95       	asr	r25
    12de:	87 95       	ror	r24
    12e0:	95 95       	asr	r25
    12e2:	87 95       	ror	r24
    12e4:	8b 87       	std	Y+11, r24	; 0x0b
            if (Can_get_ide()) // if extended frame
    12e6:	80 91 ef 00 	lds	r24, 0x00EF
    12ea:	84 ff       	sbrs	r24, 4
    12ec:	2b c0       	rjmp	.+86     	; 0x1344 <can_get_status+0xce>
            {
                cmd->ctrl.ide = 1; // extended frame
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	8c 87       	std	Y+12, r24	; 0x0c
                Can_get_ext_id(cmd->id.ext);
    12f2:	80 91 f3 00 	lds	r24, 0x00F3
    12f6:	86 95       	lsr	r24
    12f8:	86 95       	lsr	r24
    12fa:	86 95       	lsr	r24
    12fc:	8e 83       	std	Y+6, r24	; 0x06
    12fe:	90 91 f2 00 	lds	r25, 0x00F2
    1302:	80 91 f3 00 	lds	r24, 0x00F3
    1306:	96 95       	lsr	r25
    1308:	96 95       	lsr	r25
    130a:	96 95       	lsr	r25
    130c:	82 95       	swap	r24
    130e:	88 0f       	add	r24, r24
    1310:	80 7e       	andi	r24, 0xE0	; 224
    1312:	98 0f       	add	r25, r24
    1314:	9d 83       	std	Y+5, r25	; 0x05
    1316:	90 91 f1 00 	lds	r25, 0x00F1
    131a:	80 91 f2 00 	lds	r24, 0x00F2
    131e:	96 95       	lsr	r25
    1320:	96 95       	lsr	r25
    1322:	96 95       	lsr	r25
    1324:	82 95       	swap	r24
    1326:	88 0f       	add	r24, r24
    1328:	80 7e       	andi	r24, 0xE0	; 224
    132a:	98 0f       	add	r25, r24
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	90 91 f0 00 	lds	r25, 0x00F0
    1332:	80 91 f1 00 	lds	r24, 0x00F1
    1336:	96 95       	lsr	r25
    1338:	96 95       	lsr	r25
    133a:	96 95       	lsr	r25
    133c:	82 95       	swap	r24
    133e:	88 0f       	add	r24, r24
    1340:	80 7e       	andi	r24, 0xE0	; 224
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <can_get_status+0xf0>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1344:	1c 86       	std	Y+12, r1	; 0x0c
                    Can_get_std_id(cmd->id.std);
    1346:	80 91 f3 00 	lds	r24, 0x00F3
    134a:	82 95       	swap	r24
    134c:	86 95       	lsr	r24
    134e:	87 70       	andi	r24, 0x07	; 7
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	90 91 f2 00 	lds	r25, 0x00F2
    1356:	80 91 f3 00 	lds	r24, 0x00F3
    135a:	92 95       	swap	r25
    135c:	96 95       	lsr	r25
    135e:	97 70       	andi	r25, 0x07	; 7
    1360:	88 0f       	add	r24, r24
    1362:	88 0f       	add	r24, r24
    1364:	88 0f       	add	r24, r24
    1366:	98 0f       	add	r25, r24
    1368:	9b 83       	std	Y+3, r25	; 0x03
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
            Can_mob_abort();        // Freed the MOB
            Can_clear_status_mob(); //   and reset MOb status
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    136a:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    136c:	80 91 ef 00 	lds	r24, 0x00EF
    1370:	8f 73       	andi	r24, 0x3F	; 63
    1372:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    1376:	10 92 ee 00 	sts	0x00EE, r1
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <can_get_status+0x11a>
            rtn_val = CAN_STATUS_COMPLETED;
            break;
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    137e:	1a 87       	std	Y+10, r17	; 0x0a
            Can_mob_abort();        // Freed the MOB
    1380:	80 91 ef 00 	lds	r24, 0x00EF
    1384:	8f 73       	andi	r24, 0x3F	; 63
    1386:	80 93 ef 00 	sts	0x00EF, r24
            Can_clear_status_mob(); //   and reset MOb status
    138a:	10 92 ee 00 	sts	0x00EE, r1
    138e:	82 e0       	ldi	r24, 0x02	; 2
            rtn_val = CAN_STATUS_ERROR;
            break;
             
    } // switch (a_status...
 
    return (rtn_val);
    1390:	99 27       	eor	r25, r25
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <can_get_status+0x122>
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	08 95       	ret

000013a0 <can_cmd>:
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	24 97       	sbiw	r28, 0x04	; 4
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	8c 01       	movw	r16, r24
    13ba:	fc 01       	movw	r30, r24
    13bc:	81 81       	ldd	r24, Z+1	; 0x01
    13be:	92 81       	ldd	r25, Z+2	; 0x02
    13c0:	0c 97       	sbiw	r24, 0x0c	; 12
    13c2:	91 f4       	brne	.+36     	; 0x13e8 <can_cmd+0x48>
    13c4:	82 85       	ldd	r24, Z+10	; 0x0a
    13c6:	80 36       	cpi	r24, 0x60	; 96
    13c8:	09 f0       	breq	.+2      	; 0x13cc <can_cmd+0x2c>
    13ca:	cc c4       	rjmp	.+2456   	; 0x1d64 <can_cmd+0x9c4>
    13cc:	80 81       	ld	r24, Z
    13ce:	82 95       	swap	r24
    13d0:	80 7f       	andi	r24, 0xF0	; 240
    13d2:	80 93 ed 00 	sts	0x00ED, r24
    13d6:	80 91 ef 00 	lds	r24, 0x00EF
    13da:	8f 73       	andi	r24, 0x3F	; 63
    13dc:	80 93 ef 00 	sts	0x00EF, r24
    13e0:	10 92 ee 00 	sts	0x00EE, r1
    13e4:	10 82       	st	Z, r1
    13e6:	be c4       	rjmp	.+2428   	; 0x1d64 <can_cmd+0x9c4>
    13e8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <can_get_mob_free>
    13ec:	98 2f       	mov	r25, r24
    13ee:	8f 3f       	cpi	r24, 0xFF	; 255
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <can_cmd+0x54>
    13f2:	bb c4       	rjmp	.+2422   	; 0x1d6a <can_cmd+0x9ca>
    13f4:	80 e6       	ldi	r24, 0x60	; 96
    13f6:	f8 01       	movw	r30, r16
    13f8:	82 87       	std	Z+10, r24	; 0x0a
    13fa:	90 83       	st	Z, r25
    13fc:	92 95       	swap	r25
    13fe:	90 7f       	andi	r25, 0xF0	; 240
    1400:	90 93 ed 00 	sts	0x00ED, r25
    1404:	ee ee       	ldi	r30, 0xEE	; 238
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	11 92       	st	Z+, r1
    140a:	e8 3f       	cpi	r30, 0xF8	; 248
    140c:	f1 05       	cpc	r31, r1
    140e:	e1 f7       	brne	.-8      	; 0x1408 <can_cmd+0x68>
    1410:	f8 01       	movw	r30, r16
    1412:	81 81       	ldd	r24, Z+1	; 0x01
    1414:	92 81       	ldd	r25, Z+2	; 0x02
    1416:	86 30       	cpi	r24, 0x06	; 6
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <can_cmd+0x7e>
    141c:	d7 c1       	rjmp	.+942    	; 0x17cc <can_cmd+0x42c>
    141e:	87 30       	cpi	r24, 0x07	; 7
    1420:	91 05       	cpc	r25, r1
    1422:	b0 f4       	brcc	.+44     	; 0x1450 <can_cmd+0xb0>
    1424:	83 30       	cpi	r24, 0x03	; 3
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <can_cmd+0x8c>
    142a:	fc c0       	rjmp	.+504    	; 0x1624 <can_cmd+0x284>
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	91 05       	cpc	r25, r1
    1430:	38 f4       	brcc	.+14     	; 0x1440 <can_cmd+0xa0>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	29 f1       	breq	.+74     	; 0x1482 <can_cmd+0xe2>
    1438:	02 97       	sbiw	r24, 0x02	; 2
    143a:	09 f0       	breq	.+2      	; 0x143e <can_cmd+0x9e>
    143c:	93 c4       	rjmp	.+2342   	; 0x1d64 <can_cmd+0x9c4>
    143e:	97 c0       	rjmp	.+302    	; 0x156e <can_cmd+0x1ce>
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <can_cmd+0xa8>
    1446:	3f c1       	rjmp	.+638    	; 0x16c6 <can_cmd+0x326>
    1448:	05 97       	sbiw	r24, 0x05	; 5
    144a:	09 f0       	breq	.+2      	; 0x144e <can_cmd+0xae>
    144c:	8b c4       	rjmp	.+2326   	; 0x1d64 <can_cmd+0x9c4>
    144e:	73 c1       	rjmp	.+742    	; 0x1736 <can_cmd+0x396>
    1450:	89 30       	cpi	r24, 0x09	; 9
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <can_cmd+0xb8>
    1456:	06 c3       	rjmp	.+1548   	; 0x1a64 <can_cmd+0x6c4>
    1458:	8a 30       	cpi	r24, 0x0A	; 10
    145a:	91 05       	cpc	r25, r1
    145c:	40 f4       	brcc	.+16     	; 0x146e <can_cmd+0xce>
    145e:	87 30       	cpi	r24, 0x07	; 7
    1460:	91 05       	cpc	r25, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <can_cmd+0xc6>
    1464:	f5 c1       	rjmp	.+1002   	; 0x1850 <can_cmd+0x4b0>
    1466:	08 97       	sbiw	r24, 0x08	; 8
    1468:	09 f0       	breq	.+2      	; 0x146c <can_cmd+0xcc>
    146a:	7c c4       	rjmp	.+2296   	; 0x1d64 <can_cmd+0x9c4>
    146c:	73 c2       	rjmp	.+1254   	; 0x1954 <can_cmd+0x5b4>
    146e:	8a 30       	cpi	r24, 0x0A	; 10
    1470:	91 05       	cpc	r25, r1
    1472:	21 f0       	breq	.+8      	; 0x147c <can_cmd+0xdc>
    1474:	0b 97       	sbiw	r24, 0x0b	; 11
    1476:	09 f0       	breq	.+2      	; 0x147a <can_cmd+0xda>
    1478:	75 c4       	rjmp	.+2282   	; 0x1d64 <can_cmd+0x9c4>
    147a:	d7 c3       	rjmp	.+1966   	; 0x1c2a <can_cmd+0x88a>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8a c3       	rjmp	.+1812   	; 0x1b96 <can_cmd+0x7f6>
    1482:	f8 01       	movw	r30, r16
    1484:	84 85       	ldd	r24, Z+12	; 0x0c
    1486:	88 23       	and	r24, r24
    1488:	81 f1       	breq	.+96     	; 0x14ea <can_cmd+0x14a>
    148a:	96 81       	ldd	r25, Z+6	; 0x06
    148c:	85 81       	ldd	r24, Z+5	; 0x05
    148e:	99 0f       	add	r25, r25
    1490:	99 0f       	add	r25, r25
    1492:	99 0f       	add	r25, r25
    1494:	82 95       	swap	r24
    1496:	86 95       	lsr	r24
    1498:	87 70       	andi	r24, 0x07	; 7
    149a:	98 0f       	add	r25, r24
    149c:	90 93 f3 00 	sts	0x00F3, r25
    14a0:	95 81       	ldd	r25, Z+5	; 0x05
    14a2:	84 81       	ldd	r24, Z+4	; 0x04
    14a4:	99 0f       	add	r25, r25
    14a6:	99 0f       	add	r25, r25
    14a8:	99 0f       	add	r25, r25
    14aa:	82 95       	swap	r24
    14ac:	86 95       	lsr	r24
    14ae:	87 70       	andi	r24, 0x07	; 7
    14b0:	98 0f       	add	r25, r24
    14b2:	90 93 f2 00 	sts	0x00F2, r25
    14b6:	94 81       	ldd	r25, Z+4	; 0x04
    14b8:	83 81       	ldd	r24, Z+3	; 0x03
    14ba:	99 0f       	add	r25, r25
    14bc:	99 0f       	add	r25, r25
    14be:	99 0f       	add	r25, r25
    14c0:	82 95       	swap	r24
    14c2:	86 95       	lsr	r24
    14c4:	87 70       	andi	r24, 0x07	; 7
    14c6:	98 0f       	add	r25, r24
    14c8:	90 93 f1 00 	sts	0x00F1, r25
    14cc:	83 81       	ldd	r24, Z+3	; 0x03
    14ce:	88 0f       	add	r24, r24
    14d0:	88 0f       	add	r24, r24
    14d2:	88 0f       	add	r24, r24
    14d4:	80 93 f0 00 	sts	0x00F0, r24
    14d8:	80 91 ef 00 	lds	r24, 0x00EF
    14dc:	80 61       	ori	r24, 0x10	; 16
    14de:	80 93 ef 00 	sts	0x00EF, r24
    14e2:	f8 01       	movw	r30, r16
    14e4:	27 81       	ldd	r18, Z+7	; 0x07
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	1f c0       	rjmp	.+62     	; 0x1528 <can_cmd+0x188>
    14ea:	f8 01       	movw	r30, r16
    14ec:	94 81       	ldd	r25, Z+4	; 0x04
    14ee:	83 81       	ldd	r24, Z+3	; 0x03
    14f0:	92 95       	swap	r25
    14f2:	99 0f       	add	r25, r25
    14f4:	90 7e       	andi	r25, 0xE0	; 224
    14f6:	86 95       	lsr	r24
    14f8:	86 95       	lsr	r24
    14fa:	86 95       	lsr	r24
    14fc:	98 0f       	add	r25, r24
    14fe:	90 93 f3 00 	sts	0x00F3, r25
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	82 95       	swap	r24
    1506:	88 0f       	add	r24, r24
    1508:	80 7e       	andi	r24, 0xE0	; 224
    150a:	80 93 f2 00 	sts	0x00F2, r24
    150e:	80 91 ef 00 	lds	r24, 0x00EF
    1512:	8f 7e       	andi	r24, 0xEF	; 239
    1514:	e4 cf       	rjmp	.-56     	; 0x14de <can_cmd+0x13e>
    1516:	f8 01       	movw	r30, r16
    1518:	a0 85       	ldd	r26, Z+8	; 0x08
    151a:	b1 85       	ldd	r27, Z+9	; 0x09
    151c:	a9 0f       	add	r26, r25
    151e:	b1 1d       	adc	r27, r1
    1520:	8c 91       	ld	r24, X
    1522:	80 93 fa 00 	sts	0x00FA, r24
    1526:	9f 5f       	subi	r25, 0xFF	; 255
    1528:	92 17       	cp	r25, r18
    152a:	a9 f7       	brne	.-22     	; 0x1516 <can_cmd+0x176>
    152c:	f8 01       	movw	r30, r16
    152e:	83 85       	ldd	r24, Z+11	; 0x0b
    1530:	88 23       	and	r24, r24
    1532:	21 f0       	breq	.+8      	; 0x153c <can_cmd+0x19c>
    1534:	80 91 f0 00 	lds	r24, 0x00F0
    1538:	84 60       	ori	r24, 0x04	; 4
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <can_cmd+0x1a2>
    153c:	80 91 f0 00 	lds	r24, 0x00F0
    1540:	8b 7f       	andi	r24, 0xFB	; 251
    1542:	80 93 f0 00 	sts	0x00F0, r24
    1546:	80 91 ef 00 	lds	r24, 0x00EF
    154a:	f8 01       	movw	r30, r16
    154c:	97 81       	ldd	r25, Z+7	; 0x07
    154e:	89 2b       	or	r24, r25
    1550:	80 93 ef 00 	sts	0x00EF, r24
    1554:	80 91 ef 00 	lds	r24, 0x00EF
    1558:	8f 73       	andi	r24, 0x3F	; 63
    155a:	80 93 ef 00 	sts	0x00EF, r24
    155e:	80 91 ef 00 	lds	r24, 0x00EF
    1562:	80 64       	ori	r24, 0x40	; 64
    1564:	80 93 ef 00 	sts	0x00EF, r24
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	03 c4       	rjmp	.+2054   	; 0x1d74 <can_cmd+0x9d4>
    156e:	f8 01       	movw	r30, r16
    1570:	84 85       	ldd	r24, Z+12	; 0x0c
    1572:	88 23       	and	r24, r24
    1574:	81 f1       	breq	.+96     	; 0x15d6 <can_cmd+0x236>
    1576:	96 81       	ldd	r25, Z+6	; 0x06
    1578:	85 81       	ldd	r24, Z+5	; 0x05
    157a:	99 0f       	add	r25, r25
    157c:	99 0f       	add	r25, r25
    157e:	99 0f       	add	r25, r25
    1580:	82 95       	swap	r24
    1582:	86 95       	lsr	r24
    1584:	87 70       	andi	r24, 0x07	; 7
    1586:	98 0f       	add	r25, r24
    1588:	90 93 f3 00 	sts	0x00F3, r25
    158c:	95 81       	ldd	r25, Z+5	; 0x05
    158e:	84 81       	ldd	r24, Z+4	; 0x04
    1590:	99 0f       	add	r25, r25
    1592:	99 0f       	add	r25, r25
    1594:	99 0f       	add	r25, r25
    1596:	82 95       	swap	r24
    1598:	86 95       	lsr	r24
    159a:	87 70       	andi	r24, 0x07	; 7
    159c:	98 0f       	add	r25, r24
    159e:	90 93 f2 00 	sts	0x00F2, r25
    15a2:	94 81       	ldd	r25, Z+4	; 0x04
    15a4:	83 81       	ldd	r24, Z+3	; 0x03
    15a6:	99 0f       	add	r25, r25
    15a8:	99 0f       	add	r25, r25
    15aa:	99 0f       	add	r25, r25
    15ac:	82 95       	swap	r24
    15ae:	86 95       	lsr	r24
    15b0:	87 70       	andi	r24, 0x07	; 7
    15b2:	98 0f       	add	r25, r24
    15b4:	90 93 f1 00 	sts	0x00F1, r25
    15b8:	83 81       	ldd	r24, Z+3	; 0x03
    15ba:	88 0f       	add	r24, r24
    15bc:	88 0f       	add	r24, r24
    15be:	88 0f       	add	r24, r24
    15c0:	80 93 f0 00 	sts	0x00F0, r24
    15c4:	80 91 ef 00 	lds	r24, 0x00EF
    15c8:	80 61       	ori	r24, 0x10	; 16
    15ca:	80 93 ef 00 	sts	0x00EF, r24
    15ce:	f8 01       	movw	r30, r16
    15d0:	27 81       	ldd	r18, Z+7	; 0x07
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	1f c0       	rjmp	.+62     	; 0x1614 <can_cmd+0x274>
    15d6:	f8 01       	movw	r30, r16
    15d8:	94 81       	ldd	r25, Z+4	; 0x04
    15da:	83 81       	ldd	r24, Z+3	; 0x03
    15dc:	92 95       	swap	r25
    15de:	99 0f       	add	r25, r25
    15e0:	90 7e       	andi	r25, 0xE0	; 224
    15e2:	86 95       	lsr	r24
    15e4:	86 95       	lsr	r24
    15e6:	86 95       	lsr	r24
    15e8:	98 0f       	add	r25, r24
    15ea:	90 93 f3 00 	sts	0x00F3, r25
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	82 95       	swap	r24
    15f2:	88 0f       	add	r24, r24
    15f4:	80 7e       	andi	r24, 0xE0	; 224
    15f6:	80 93 f2 00 	sts	0x00F2, r24
    15fa:	80 91 ef 00 	lds	r24, 0x00EF
    15fe:	8f 7e       	andi	r24, 0xEF	; 239
    1600:	e4 cf       	rjmp	.-56     	; 0x15ca <can_cmd+0x22a>
    1602:	f8 01       	movw	r30, r16
    1604:	a0 85       	ldd	r26, Z+8	; 0x08
    1606:	b1 85       	ldd	r27, Z+9	; 0x09
    1608:	a9 0f       	add	r26, r25
    160a:	b1 1d       	adc	r27, r1
    160c:	8c 91       	ld	r24, X
    160e:	80 93 fa 00 	sts	0x00FA, r24
    1612:	9f 5f       	subi	r25, 0xFF	; 255
    1614:	92 17       	cp	r25, r18
    1616:	a9 f7       	brne	.-22     	; 0x1602 <can_cmd+0x262>
    1618:	f8 01       	movw	r30, r16
    161a:	13 86       	std	Z+11, r1	; 0x0b
    161c:	80 91 f0 00 	lds	r24, 0x00F0
    1620:	8b 7f       	andi	r24, 0xFB	; 251
    1622:	4c c0       	rjmp	.+152    	; 0x16bc <can_cmd+0x31c>
    1624:	f8 01       	movw	r30, r16
    1626:	84 85       	ldd	r24, Z+12	; 0x0c
    1628:	88 23       	and	r24, r24
    162a:	59 f1       	breq	.+86     	; 0x1682 <can_cmd+0x2e2>
    162c:	96 81       	ldd	r25, Z+6	; 0x06
    162e:	85 81       	ldd	r24, Z+5	; 0x05
    1630:	99 0f       	add	r25, r25
    1632:	99 0f       	add	r25, r25
    1634:	99 0f       	add	r25, r25
    1636:	82 95       	swap	r24
    1638:	86 95       	lsr	r24
    163a:	87 70       	andi	r24, 0x07	; 7
    163c:	98 0f       	add	r25, r24
    163e:	90 93 f3 00 	sts	0x00F3, r25
    1642:	95 81       	ldd	r25, Z+5	; 0x05
    1644:	84 81       	ldd	r24, Z+4	; 0x04
    1646:	99 0f       	add	r25, r25
    1648:	99 0f       	add	r25, r25
    164a:	99 0f       	add	r25, r25
    164c:	82 95       	swap	r24
    164e:	86 95       	lsr	r24
    1650:	87 70       	andi	r24, 0x07	; 7
    1652:	98 0f       	add	r25, r24
    1654:	90 93 f2 00 	sts	0x00F2, r25
    1658:	94 81       	ldd	r25, Z+4	; 0x04
    165a:	83 81       	ldd	r24, Z+3	; 0x03
    165c:	99 0f       	add	r25, r25
    165e:	99 0f       	add	r25, r25
    1660:	99 0f       	add	r25, r25
    1662:	82 95       	swap	r24
    1664:	86 95       	lsr	r24
    1666:	87 70       	andi	r24, 0x07	; 7
    1668:	98 0f       	add	r25, r24
    166a:	90 93 f1 00 	sts	0x00F1, r25
    166e:	83 81       	ldd	r24, Z+3	; 0x03
    1670:	88 0f       	add	r24, r24
    1672:	88 0f       	add	r24, r24
    1674:	88 0f       	add	r24, r24
    1676:	80 93 f0 00 	sts	0x00F0, r24
    167a:	80 91 ef 00 	lds	r24, 0x00EF
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <can_cmd+0x30c>
    1682:	f8 01       	movw	r30, r16
    1684:	94 81       	ldd	r25, Z+4	; 0x04
    1686:	83 81       	ldd	r24, Z+3	; 0x03
    1688:	92 95       	swap	r25
    168a:	99 0f       	add	r25, r25
    168c:	90 7e       	andi	r25, 0xE0	; 224
    168e:	86 95       	lsr	r24
    1690:	86 95       	lsr	r24
    1692:	86 95       	lsr	r24
    1694:	98 0f       	add	r25, r24
    1696:	90 93 f3 00 	sts	0x00F3, r25
    169a:	83 81       	ldd	r24, Z+3	; 0x03
    169c:	82 95       	swap	r24
    169e:	88 0f       	add	r24, r24
    16a0:	80 7e       	andi	r24, 0xE0	; 224
    16a2:	80 93 f2 00 	sts	0x00F2, r24
    16a6:	80 91 ef 00 	lds	r24, 0x00EF
    16aa:	8f 7e       	andi	r24, 0xEF	; 239
    16ac:	80 93 ef 00 	sts	0x00EF, r24
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	f8 01       	movw	r30, r16
    16b4:	83 87       	std	Z+11, r24	; 0x0b
    16b6:	80 91 f0 00 	lds	r24, 0x00F0
    16ba:	84 60       	ori	r24, 0x04	; 4
    16bc:	80 93 f0 00 	sts	0x00F0, r24
    16c0:	80 91 ef 00 	lds	r24, 0x00EF
    16c4:	43 cf       	rjmp	.-378    	; 0x154c <can_cmd+0x1ac>
    16c6:	19 82       	std	Y+1, r1	; 0x01
    16c8:	1a 82       	std	Y+2, r1	; 0x02
    16ca:	1b 82       	std	Y+3, r1	; 0x03
    16cc:	1c 82       	std	Y+4, r1	; 0x04
    16ce:	3b 81       	ldd	r19, Y+3	; 0x03
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	88 0f       	add	r24, r24
    16d4:	88 0f       	add	r24, r24
    16d6:	88 0f       	add	r24, r24
    16d8:	93 2f       	mov	r25, r19
    16da:	92 95       	swap	r25
    16dc:	96 95       	lsr	r25
    16de:	97 70       	andi	r25, 0x07	; 7
    16e0:	89 0f       	add	r24, r25
    16e2:	80 93 f7 00 	sts	0x00F7, r24
    16e6:	2a 81       	ldd	r18, Y+2	; 0x02
    16e8:	33 0f       	add	r19, r19
    16ea:	33 0f       	add	r19, r19
    16ec:	33 0f       	add	r19, r19
    16ee:	82 2f       	mov	r24, r18
    16f0:	82 95       	swap	r24
    16f2:	86 95       	lsr	r24
    16f4:	87 70       	andi	r24, 0x07	; 7
    16f6:	38 0f       	add	r19, r24
    16f8:	30 93 f6 00 	sts	0x00F6, r19
    16fc:	99 81       	ldd	r25, Y+1	; 0x01
    16fe:	22 0f       	add	r18, r18
    1700:	22 0f       	add	r18, r18
    1702:	22 0f       	add	r18, r18
    1704:	89 2f       	mov	r24, r25
    1706:	82 95       	swap	r24
    1708:	86 95       	lsr	r24
    170a:	87 70       	andi	r24, 0x07	; 7
    170c:	28 0f       	add	r18, r24
    170e:	20 93 f5 00 	sts	0x00F5, r18
    1712:	99 0f       	add	r25, r25
    1714:	99 0f       	add	r25, r25
    1716:	99 0f       	add	r25, r25
    1718:	90 93 f4 00 	sts	0x00F4, r25
    171c:	80 91 ef 00 	lds	r24, 0x00EF
    1720:	f8 01       	movw	r30, r16
    1722:	97 81       	ldd	r25, Z+7	; 0x07
    1724:	89 2b       	or	r24, r25
    1726:	80 93 ef 00 	sts	0x00EF, r24
    172a:	80 91 f4 00 	lds	r24, 0x00F4
    172e:	8b 7f       	andi	r24, 0xFB	; 251
    1730:	80 93 f4 00 	sts	0x00F4, r24
    1734:	3d c0       	rjmp	.+122    	; 0x17b0 <can_cmd+0x410>
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	1a 82       	std	Y+2, r1	; 0x02
    173a:	1b 82       	std	Y+3, r1	; 0x03
    173c:	1c 82       	std	Y+4, r1	; 0x04
    173e:	3b 81       	ldd	r19, Y+3	; 0x03
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	88 0f       	add	r24, r24
    1744:	88 0f       	add	r24, r24
    1746:	88 0f       	add	r24, r24
    1748:	93 2f       	mov	r25, r19
    174a:	92 95       	swap	r25
    174c:	96 95       	lsr	r25
    174e:	97 70       	andi	r25, 0x07	; 7
    1750:	89 0f       	add	r24, r25
    1752:	80 93 f7 00 	sts	0x00F7, r24
    1756:	2a 81       	ldd	r18, Y+2	; 0x02
    1758:	33 0f       	add	r19, r19
    175a:	33 0f       	add	r19, r19
    175c:	33 0f       	add	r19, r19
    175e:	82 2f       	mov	r24, r18
    1760:	82 95       	swap	r24
    1762:	86 95       	lsr	r24
    1764:	87 70       	andi	r24, 0x07	; 7
    1766:	38 0f       	add	r19, r24
    1768:	30 93 f6 00 	sts	0x00F6, r19
    176c:	99 81       	ldd	r25, Y+1	; 0x01
    176e:	22 0f       	add	r18, r18
    1770:	22 0f       	add	r18, r18
    1772:	22 0f       	add	r18, r18
    1774:	89 2f       	mov	r24, r25
    1776:	82 95       	swap	r24
    1778:	86 95       	lsr	r24
    177a:	87 70       	andi	r24, 0x07	; 7
    177c:	28 0f       	add	r18, r24
    177e:	20 93 f5 00 	sts	0x00F5, r18
    1782:	99 0f       	add	r25, r25
    1784:	99 0f       	add	r25, r25
    1786:	99 0f       	add	r25, r25
    1788:	90 93 f4 00 	sts	0x00F4, r25
    178c:	80 91 ef 00 	lds	r24, 0x00EF
    1790:	f8 01       	movw	r30, r16
    1792:	97 81       	ldd	r25, Z+7	; 0x07
    1794:	89 2b       	or	r24, r25
    1796:	80 93 ef 00 	sts	0x00EF, r24
    179a:	13 86       	std	Z+11, r1	; 0x0b
    179c:	80 91 f4 00 	lds	r24, 0x00F4
    17a0:	84 60       	ori	r24, 0x04	; 4
    17a2:	80 93 f4 00 	sts	0x00F4, r24
    17a6:	80 91 f0 00 	lds	r24, 0x00F0
    17aa:	8b 7f       	andi	r24, 0xFB	; 251
    17ac:	80 93 f0 00 	sts	0x00F0, r24
    17b0:	80 91 f4 00 	lds	r24, 0x00F4
    17b4:	8e 7f       	andi	r24, 0xFE	; 254
    17b6:	80 93 f4 00 	sts	0x00F4, r24
    17ba:	80 91 ef 00 	lds	r24, 0x00EF
    17be:	8f 73       	andi	r24, 0x3F	; 63
    17c0:	80 93 ef 00 	sts	0x00EF, r24
    17c4:	80 91 ef 00 	lds	r24, 0x00EF
    17c8:	80 68       	ori	r24, 0x80	; 128
    17ca:	cc ce       	rjmp	.-616    	; 0x1564 <can_cmd+0x1c4>
    17cc:	19 82       	std	Y+1, r1	; 0x01
    17ce:	1a 82       	std	Y+2, r1	; 0x02
    17d0:	1b 82       	std	Y+3, r1	; 0x03
    17d2:	1c 82       	std	Y+4, r1	; 0x04
    17d4:	3b 81       	ldd	r19, Y+3	; 0x03
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	88 0f       	add	r24, r24
    17da:	88 0f       	add	r24, r24
    17dc:	88 0f       	add	r24, r24
    17de:	93 2f       	mov	r25, r19
    17e0:	92 95       	swap	r25
    17e2:	96 95       	lsr	r25
    17e4:	97 70       	andi	r25, 0x07	; 7
    17e6:	89 0f       	add	r24, r25
    17e8:	80 93 f7 00 	sts	0x00F7, r24
    17ec:	2a 81       	ldd	r18, Y+2	; 0x02
    17ee:	33 0f       	add	r19, r19
    17f0:	33 0f       	add	r19, r19
    17f2:	33 0f       	add	r19, r19
    17f4:	82 2f       	mov	r24, r18
    17f6:	82 95       	swap	r24
    17f8:	86 95       	lsr	r24
    17fa:	87 70       	andi	r24, 0x07	; 7
    17fc:	38 0f       	add	r19, r24
    17fe:	30 93 f6 00 	sts	0x00F6, r19
    1802:	99 81       	ldd	r25, Y+1	; 0x01
    1804:	22 0f       	add	r18, r18
    1806:	22 0f       	add	r18, r18
    1808:	22 0f       	add	r18, r18
    180a:	89 2f       	mov	r24, r25
    180c:	82 95       	swap	r24
    180e:	86 95       	lsr	r24
    1810:	87 70       	andi	r24, 0x07	; 7
    1812:	28 0f       	add	r18, r24
    1814:	20 93 f5 00 	sts	0x00F5, r18
    1818:	99 0f       	add	r25, r25
    181a:	99 0f       	add	r25, r25
    181c:	99 0f       	add	r25, r25
    181e:	90 93 f4 00 	sts	0x00F4, r25
    1822:	80 91 ef 00 	lds	r24, 0x00EF
    1826:	f8 01       	movw	r30, r16
    1828:	97 81       	ldd	r25, Z+7	; 0x07
    182a:	89 2b       	or	r24, r25
    182c:	80 93 ef 00 	sts	0x00EF, r24
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	83 87       	std	Z+11, r24	; 0x0b
    1834:	80 91 f4 00 	lds	r24, 0x00F4
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	80 93 f4 00 	sts	0x00F4, r24
    183e:	80 91 f0 00 	lds	r24, 0x00F0
    1842:	84 60       	ori	r24, 0x04	; 4
    1844:	80 93 f0 00 	sts	0x00F0, r24
    1848:	80 91 ef 00 	lds	r24, 0x00EF
    184c:	8f 7d       	andi	r24, 0xDF	; 223
    184e:	ea c1       	rjmp	.+980    	; 0x1c24 <can_cmd+0x884>
    1850:	f8 01       	movw	r30, r16
    1852:	84 85       	ldd	r24, Z+12	; 0x0c
    1854:	88 23       	and	r24, r24
    1856:	59 f1       	breq	.+86     	; 0x18ae <can_cmd+0x50e>
    1858:	96 81       	ldd	r25, Z+6	; 0x06
    185a:	85 81       	ldd	r24, Z+5	; 0x05
    185c:	99 0f       	add	r25, r25
    185e:	99 0f       	add	r25, r25
    1860:	99 0f       	add	r25, r25
    1862:	82 95       	swap	r24
    1864:	86 95       	lsr	r24
    1866:	87 70       	andi	r24, 0x07	; 7
    1868:	98 0f       	add	r25, r24
    186a:	90 93 f3 00 	sts	0x00F3, r25
    186e:	95 81       	ldd	r25, Z+5	; 0x05
    1870:	84 81       	ldd	r24, Z+4	; 0x04
    1872:	99 0f       	add	r25, r25
    1874:	99 0f       	add	r25, r25
    1876:	99 0f       	add	r25, r25
    1878:	82 95       	swap	r24
    187a:	86 95       	lsr	r24
    187c:	87 70       	andi	r24, 0x07	; 7
    187e:	98 0f       	add	r25, r24
    1880:	90 93 f2 00 	sts	0x00F2, r25
    1884:	94 81       	ldd	r25, Z+4	; 0x04
    1886:	83 81       	ldd	r24, Z+3	; 0x03
    1888:	99 0f       	add	r25, r25
    188a:	99 0f       	add	r25, r25
    188c:	99 0f       	add	r25, r25
    188e:	82 95       	swap	r24
    1890:	86 95       	lsr	r24
    1892:	87 70       	andi	r24, 0x07	; 7
    1894:	98 0f       	add	r25, r24
    1896:	90 93 f1 00 	sts	0x00F1, r25
    189a:	83 81       	ldd	r24, Z+3	; 0x03
    189c:	88 0f       	add	r24, r24
    189e:	88 0f       	add	r24, r24
    18a0:	88 0f       	add	r24, r24
    18a2:	80 93 f0 00 	sts	0x00F0, r24
    18a6:	80 91 ef 00 	lds	r24, 0x00EF
    18aa:	80 61       	ori	r24, 0x10	; 16
    18ac:	15 c0       	rjmp	.+42     	; 0x18d8 <can_cmd+0x538>
    18ae:	f8 01       	movw	r30, r16
    18b0:	94 81       	ldd	r25, Z+4	; 0x04
    18b2:	83 81       	ldd	r24, Z+3	; 0x03
    18b4:	92 95       	swap	r25
    18b6:	99 0f       	add	r25, r25
    18b8:	90 7e       	andi	r25, 0xE0	; 224
    18ba:	86 95       	lsr	r24
    18bc:	86 95       	lsr	r24
    18be:	86 95       	lsr	r24
    18c0:	98 0f       	add	r25, r24
    18c2:	90 93 f3 00 	sts	0x00F3, r25
    18c6:	83 81       	ldd	r24, Z+3	; 0x03
    18c8:	82 95       	swap	r24
    18ca:	88 0f       	add	r24, r24
    18cc:	80 7e       	andi	r24, 0xE0	; 224
    18ce:	80 93 f2 00 	sts	0x00F2, r24
    18d2:	80 91 ef 00 	lds	r24, 0x00EF
    18d6:	8f 7e       	andi	r24, 0xEF	; 239
    18d8:	80 93 ef 00 	sts	0x00EF, r24
    18dc:	8f ef       	ldi	r24, 0xFF	; 255
    18de:	9f ef       	ldi	r25, 0xFF	; 255
    18e0:	af ef       	ldi	r26, 0xFF	; 255
    18e2:	bf ef       	ldi	r27, 0xFF	; 255
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	ab 83       	std	Y+3, r26	; 0x03
    18ea:	bc 83       	std	Y+4, r27	; 0x04
    18ec:	3b 81       	ldd	r19, Y+3	; 0x03
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	88 0f       	add	r24, r24
    18f2:	88 0f       	add	r24, r24
    18f4:	88 0f       	add	r24, r24
    18f6:	93 2f       	mov	r25, r19
    18f8:	92 95       	swap	r25
    18fa:	96 95       	lsr	r25
    18fc:	97 70       	andi	r25, 0x07	; 7
    18fe:	89 0f       	add	r24, r25
    1900:	80 93 f7 00 	sts	0x00F7, r24
    1904:	2a 81       	ldd	r18, Y+2	; 0x02
    1906:	33 0f       	add	r19, r19
    1908:	33 0f       	add	r19, r19
    190a:	33 0f       	add	r19, r19
    190c:	82 2f       	mov	r24, r18
    190e:	82 95       	swap	r24
    1910:	86 95       	lsr	r24
    1912:	87 70       	andi	r24, 0x07	; 7
    1914:	38 0f       	add	r19, r24
    1916:	30 93 f6 00 	sts	0x00F6, r19
    191a:	99 81       	ldd	r25, Y+1	; 0x01
    191c:	22 0f       	add	r18, r18
    191e:	22 0f       	add	r18, r18
    1920:	22 0f       	add	r18, r18
    1922:	89 2f       	mov	r24, r25
    1924:	82 95       	swap	r24
    1926:	86 95       	lsr	r24
    1928:	87 70       	andi	r24, 0x07	; 7
    192a:	28 0f       	add	r18, r24
    192c:	20 93 f5 00 	sts	0x00F5, r18
    1930:	99 0f       	add	r25, r25
    1932:	99 0f       	add	r25, r25
    1934:	99 0f       	add	r25, r25
    1936:	90 93 f4 00 	sts	0x00F4, r25
    193a:	80 91 ef 00 	lds	r24, 0x00EF
    193e:	f8 01       	movw	r30, r16
    1940:	97 81       	ldd	r25, Z+7	; 0x07
    1942:	89 2b       	or	r24, r25
    1944:	80 93 ef 00 	sts	0x00EF, r24
    1948:	80 91 f4 00 	lds	r24, 0x00F4
    194c:	8b 7f       	andi	r24, 0xFB	; 251
    194e:	80 93 f4 00 	sts	0x00F4, r24
    1952:	15 c1       	rjmp	.+554    	; 0x1b7e <can_cmd+0x7de>
    1954:	f8 01       	movw	r30, r16
    1956:	84 85       	ldd	r24, Z+12	; 0x0c
    1958:	88 23       	and	r24, r24
    195a:	59 f1       	breq	.+86     	; 0x19b2 <can_cmd+0x612>
    195c:	96 81       	ldd	r25, Z+6	; 0x06
    195e:	85 81       	ldd	r24, Z+5	; 0x05
    1960:	99 0f       	add	r25, r25
    1962:	99 0f       	add	r25, r25
    1964:	99 0f       	add	r25, r25
    1966:	82 95       	swap	r24
    1968:	86 95       	lsr	r24
    196a:	87 70       	andi	r24, 0x07	; 7
    196c:	98 0f       	add	r25, r24
    196e:	90 93 f3 00 	sts	0x00F3, r25
    1972:	95 81       	ldd	r25, Z+5	; 0x05
    1974:	84 81       	ldd	r24, Z+4	; 0x04
    1976:	99 0f       	add	r25, r25
    1978:	99 0f       	add	r25, r25
    197a:	99 0f       	add	r25, r25
    197c:	82 95       	swap	r24
    197e:	86 95       	lsr	r24
    1980:	87 70       	andi	r24, 0x07	; 7
    1982:	98 0f       	add	r25, r24
    1984:	90 93 f2 00 	sts	0x00F2, r25
    1988:	94 81       	ldd	r25, Z+4	; 0x04
    198a:	83 81       	ldd	r24, Z+3	; 0x03
    198c:	99 0f       	add	r25, r25
    198e:	99 0f       	add	r25, r25
    1990:	99 0f       	add	r25, r25
    1992:	82 95       	swap	r24
    1994:	86 95       	lsr	r24
    1996:	87 70       	andi	r24, 0x07	; 7
    1998:	98 0f       	add	r25, r24
    199a:	90 93 f1 00 	sts	0x00F1, r25
    199e:	83 81       	ldd	r24, Z+3	; 0x03
    19a0:	88 0f       	add	r24, r24
    19a2:	88 0f       	add	r24, r24
    19a4:	88 0f       	add	r24, r24
    19a6:	80 93 f0 00 	sts	0x00F0, r24
    19aa:	80 91 ef 00 	lds	r24, 0x00EF
    19ae:	80 61       	ori	r24, 0x10	; 16
    19b0:	15 c0       	rjmp	.+42     	; 0x19dc <can_cmd+0x63c>
    19b2:	f8 01       	movw	r30, r16
    19b4:	94 81       	ldd	r25, Z+4	; 0x04
    19b6:	83 81       	ldd	r24, Z+3	; 0x03
    19b8:	92 95       	swap	r25
    19ba:	99 0f       	add	r25, r25
    19bc:	90 7e       	andi	r25, 0xE0	; 224
    19be:	86 95       	lsr	r24
    19c0:	86 95       	lsr	r24
    19c2:	86 95       	lsr	r24
    19c4:	98 0f       	add	r25, r24
    19c6:	90 93 f3 00 	sts	0x00F3, r25
    19ca:	83 81       	ldd	r24, Z+3	; 0x03
    19cc:	82 95       	swap	r24
    19ce:	88 0f       	add	r24, r24
    19d0:	80 7e       	andi	r24, 0xE0	; 224
    19d2:	80 93 f2 00 	sts	0x00F2, r24
    19d6:	80 91 ef 00 	lds	r24, 0x00EF
    19da:	8f 7e       	andi	r24, 0xEF	; 239
    19dc:	80 93 ef 00 	sts	0x00EF, r24
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	9f ef       	ldi	r25, 0xFF	; 255
    19e4:	af ef       	ldi	r26, 0xFF	; 255
    19e6:	bf ef       	ldi	r27, 0xFF	; 255
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	ab 83       	std	Y+3, r26	; 0x03
    19ee:	bc 83       	std	Y+4, r27	; 0x04
    19f0:	3b 81       	ldd	r19, Y+3	; 0x03
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	88 0f       	add	r24, r24
    19f6:	88 0f       	add	r24, r24
    19f8:	88 0f       	add	r24, r24
    19fa:	93 2f       	mov	r25, r19
    19fc:	92 95       	swap	r25
    19fe:	96 95       	lsr	r25
    1a00:	97 70       	andi	r25, 0x07	; 7
    1a02:	89 0f       	add	r24, r25
    1a04:	80 93 f7 00 	sts	0x00F7, r24
    1a08:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0a:	33 0f       	add	r19, r19
    1a0c:	33 0f       	add	r19, r19
    1a0e:	33 0f       	add	r19, r19
    1a10:	82 2f       	mov	r24, r18
    1a12:	82 95       	swap	r24
    1a14:	86 95       	lsr	r24
    1a16:	87 70       	andi	r24, 0x07	; 7
    1a18:	38 0f       	add	r19, r24
    1a1a:	30 93 f6 00 	sts	0x00F6, r19
    1a1e:	99 81       	ldd	r25, Y+1	; 0x01
    1a20:	22 0f       	add	r18, r18
    1a22:	22 0f       	add	r18, r18
    1a24:	22 0f       	add	r18, r18
    1a26:	89 2f       	mov	r24, r25
    1a28:	82 95       	swap	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	87 70       	andi	r24, 0x07	; 7
    1a2e:	28 0f       	add	r18, r24
    1a30:	20 93 f5 00 	sts	0x00F5, r18
    1a34:	99 0f       	add	r25, r25
    1a36:	99 0f       	add	r25, r25
    1a38:	99 0f       	add	r25, r25
    1a3a:	90 93 f4 00 	sts	0x00F4, r25
    1a3e:	80 91 ef 00 	lds	r24, 0x00EF
    1a42:	f8 01       	movw	r30, r16
    1a44:	97 81       	ldd	r25, Z+7	; 0x07
    1a46:	89 2b       	or	r24, r25
    1a48:	80 93 ef 00 	sts	0x00EF, r24
    1a4c:	13 86       	std	Z+11, r1	; 0x0b
    1a4e:	80 91 f4 00 	lds	r24, 0x00F4
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	80 93 f4 00 	sts	0x00F4, r24
    1a58:	80 91 f0 00 	lds	r24, 0x00F0
    1a5c:	8b 7f       	andi	r24, 0xFB	; 251
    1a5e:	80 93 f0 00 	sts	0x00F0, r24
    1a62:	8d c0       	rjmp	.+282    	; 0x1b7e <can_cmd+0x7de>
    1a64:	f8 01       	movw	r30, r16
    1a66:	84 85       	ldd	r24, Z+12	; 0x0c
    1a68:	88 23       	and	r24, r24
    1a6a:	59 f1       	breq	.+86     	; 0x1ac2 <can_cmd+0x722>
    1a6c:	96 81       	ldd	r25, Z+6	; 0x06
    1a6e:	85 81       	ldd	r24, Z+5	; 0x05
    1a70:	99 0f       	add	r25, r25
    1a72:	99 0f       	add	r25, r25
    1a74:	99 0f       	add	r25, r25
    1a76:	82 95       	swap	r24
    1a78:	86 95       	lsr	r24
    1a7a:	87 70       	andi	r24, 0x07	; 7
    1a7c:	98 0f       	add	r25, r24
    1a7e:	90 93 f3 00 	sts	0x00F3, r25
    1a82:	95 81       	ldd	r25, Z+5	; 0x05
    1a84:	84 81       	ldd	r24, Z+4	; 0x04
    1a86:	99 0f       	add	r25, r25
    1a88:	99 0f       	add	r25, r25
    1a8a:	99 0f       	add	r25, r25
    1a8c:	82 95       	swap	r24
    1a8e:	86 95       	lsr	r24
    1a90:	87 70       	andi	r24, 0x07	; 7
    1a92:	98 0f       	add	r25, r24
    1a94:	90 93 f2 00 	sts	0x00F2, r25
    1a98:	94 81       	ldd	r25, Z+4	; 0x04
    1a9a:	83 81       	ldd	r24, Z+3	; 0x03
    1a9c:	99 0f       	add	r25, r25
    1a9e:	99 0f       	add	r25, r25
    1aa0:	99 0f       	add	r25, r25
    1aa2:	82 95       	swap	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	87 70       	andi	r24, 0x07	; 7
    1aa8:	98 0f       	add	r25, r24
    1aaa:	90 93 f1 00 	sts	0x00F1, r25
    1aae:	83 81       	ldd	r24, Z+3	; 0x03
    1ab0:	88 0f       	add	r24, r24
    1ab2:	88 0f       	add	r24, r24
    1ab4:	88 0f       	add	r24, r24
    1ab6:	80 93 f0 00 	sts	0x00F0, r24
    1aba:	80 91 ef 00 	lds	r24, 0x00EF
    1abe:	80 61       	ori	r24, 0x10	; 16
    1ac0:	15 c0       	rjmp	.+42     	; 0x1aec <can_cmd+0x74c>
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	94 81       	ldd	r25, Z+4	; 0x04
    1ac6:	83 81       	ldd	r24, Z+3	; 0x03
    1ac8:	92 95       	swap	r25
    1aca:	99 0f       	add	r25, r25
    1acc:	90 7e       	andi	r25, 0xE0	; 224
    1ace:	86 95       	lsr	r24
    1ad0:	86 95       	lsr	r24
    1ad2:	86 95       	lsr	r24
    1ad4:	98 0f       	add	r25, r24
    1ad6:	90 93 f3 00 	sts	0x00F3, r25
    1ada:	83 81       	ldd	r24, Z+3	; 0x03
    1adc:	82 95       	swap	r24
    1ade:	88 0f       	add	r24, r24
    1ae0:	80 7e       	andi	r24, 0xE0	; 224
    1ae2:	80 93 f2 00 	sts	0x00F2, r24
    1ae6:	80 91 ef 00 	lds	r24, 0x00EF
    1aea:	8f 7e       	andi	r24, 0xEF	; 239
    1aec:	80 93 ef 00 	sts	0x00EF, r24
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	af ef       	ldi	r26, 0xFF	; 255
    1af6:	bf ef       	ldi	r27, 0xFF	; 255
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	ab 83       	std	Y+3, r26	; 0x03
    1afe:	bc 83       	std	Y+4, r27	; 0x04
    1b00:	3b 81       	ldd	r19, Y+3	; 0x03
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	88 0f       	add	r24, r24
    1b06:	88 0f       	add	r24, r24
    1b08:	88 0f       	add	r24, r24
    1b0a:	93 2f       	mov	r25, r19
    1b0c:	92 95       	swap	r25
    1b0e:	96 95       	lsr	r25
    1b10:	97 70       	andi	r25, 0x07	; 7
    1b12:	89 0f       	add	r24, r25
    1b14:	80 93 f7 00 	sts	0x00F7, r24
    1b18:	2a 81       	ldd	r18, Y+2	; 0x02
    1b1a:	33 0f       	add	r19, r19
    1b1c:	33 0f       	add	r19, r19
    1b1e:	33 0f       	add	r19, r19
    1b20:	82 2f       	mov	r24, r18
    1b22:	82 95       	swap	r24
    1b24:	86 95       	lsr	r24
    1b26:	87 70       	andi	r24, 0x07	; 7
    1b28:	38 0f       	add	r19, r24
    1b2a:	30 93 f6 00 	sts	0x00F6, r19
    1b2e:	99 81       	ldd	r25, Y+1	; 0x01
    1b30:	22 0f       	add	r18, r18
    1b32:	22 0f       	add	r18, r18
    1b34:	22 0f       	add	r18, r18
    1b36:	89 2f       	mov	r24, r25
    1b38:	82 95       	swap	r24
    1b3a:	86 95       	lsr	r24
    1b3c:	87 70       	andi	r24, 0x07	; 7
    1b3e:	28 0f       	add	r18, r24
    1b40:	20 93 f5 00 	sts	0x00F5, r18
    1b44:	99 0f       	add	r25, r25
    1b46:	99 0f       	add	r25, r25
    1b48:	99 0f       	add	r25, r25
    1b4a:	90 93 f4 00 	sts	0x00F4, r25
    1b4e:	80 91 ef 00 	lds	r24, 0x00EF
    1b52:	f8 01       	movw	r30, r16
    1b54:	97 81       	ldd	r25, Z+7	; 0x07
    1b56:	89 2b       	or	r24, r25
    1b58:	80 93 ef 00 	sts	0x00EF, r24
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	83 87       	std	Z+11, r24	; 0x0b
    1b60:	80 91 f4 00 	lds	r24, 0x00F4
    1b64:	84 60       	ori	r24, 0x04	; 4
    1b66:	80 93 f4 00 	sts	0x00F4, r24
    1b6a:	80 91 f0 00 	lds	r24, 0x00F0
    1b6e:	84 60       	ori	r24, 0x04	; 4
    1b70:	80 93 f0 00 	sts	0x00F0, r24
    1b74:	80 91 ef 00 	lds	r24, 0x00EF
    1b78:	8f 7d       	andi	r24, 0xDF	; 223
    1b7a:	80 93 ef 00 	sts	0x00EF, r24
    1b7e:	80 91 f4 00 	lds	r24, 0x00F4
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	18 ce       	rjmp	.-976    	; 0x17b6 <can_cmd+0x416>
    1b86:	f8 01       	movw	r30, r16
    1b88:	a0 85       	ldd	r26, Z+8	; 0x08
    1b8a:	b1 85       	ldd	r27, Z+9	; 0x09
    1b8c:	a9 0f       	add	r26, r25
    1b8e:	b1 1d       	adc	r27, r1
    1b90:	8c 91       	ld	r24, X
    1b92:	80 93 fa 00 	sts	0x00FA, r24
    1b96:	92 2f       	mov	r25, r18
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	87 81       	ldd	r24, Z+7	; 0x07
    1ba0:	98 17       	cp	r25, r24
    1ba2:	88 f3       	brcs	.-30     	; 0x1b86 <can_cmd+0x7e6>
    1ba4:	19 82       	std	Y+1, r1	; 0x01
    1ba6:	1a 82       	std	Y+2, r1	; 0x02
    1ba8:	1b 82       	std	Y+3, r1	; 0x03
    1baa:	1c 82       	std	Y+4, r1	; 0x04
    1bac:	3b 81       	ldd	r19, Y+3	; 0x03
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	88 0f       	add	r24, r24
    1bb2:	88 0f       	add	r24, r24
    1bb4:	88 0f       	add	r24, r24
    1bb6:	93 2f       	mov	r25, r19
    1bb8:	92 95       	swap	r25
    1bba:	96 95       	lsr	r25
    1bbc:	97 70       	andi	r25, 0x07	; 7
    1bbe:	89 0f       	add	r24, r25
    1bc0:	80 93 f7 00 	sts	0x00F7, r24
    1bc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1bc6:	33 0f       	add	r19, r19
    1bc8:	33 0f       	add	r19, r19
    1bca:	33 0f       	add	r19, r19
    1bcc:	82 2f       	mov	r24, r18
    1bce:	82 95       	swap	r24
    1bd0:	86 95       	lsr	r24
    1bd2:	87 70       	andi	r24, 0x07	; 7
    1bd4:	38 0f       	add	r19, r24
    1bd6:	30 93 f6 00 	sts	0x00F6, r19
    1bda:	99 81       	ldd	r25, Y+1	; 0x01
    1bdc:	22 0f       	add	r18, r18
    1bde:	22 0f       	add	r18, r18
    1be0:	22 0f       	add	r18, r18
    1be2:	89 2f       	mov	r24, r25
    1be4:	82 95       	swap	r24
    1be6:	86 95       	lsr	r24
    1be8:	87 70       	andi	r24, 0x07	; 7
    1bea:	28 0f       	add	r18, r24
    1bec:	20 93 f5 00 	sts	0x00F5, r18
    1bf0:	99 0f       	add	r25, r25
    1bf2:	99 0f       	add	r25, r25
    1bf4:	99 0f       	add	r25, r25
    1bf6:	90 93 f4 00 	sts	0x00F4, r25
    1bfa:	80 91 ef 00 	lds	r24, 0x00EF
    1bfe:	97 81       	ldd	r25, Z+7	; 0x07
    1c00:	89 2b       	or	r24, r25
    1c02:	80 93 ef 00 	sts	0x00EF, r24
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	83 87       	std	Z+11, r24	; 0x0b
    1c0a:	80 91 f4 00 	lds	r24, 0x00F4
    1c0e:	84 60       	ori	r24, 0x04	; 4
    1c10:	80 93 f4 00 	sts	0x00F4, r24
    1c14:	80 91 f0 00 	lds	r24, 0x00F0
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	80 93 f0 00 	sts	0x00F0, r24
    1c1e:	80 91 ef 00 	lds	r24, 0x00EF
    1c22:	80 62       	ori	r24, 0x20	; 32
    1c24:	80 93 ef 00 	sts	0x00EF, r24
    1c28:	c3 cd       	rjmp	.-1146   	; 0x17b0 <can_cmd+0x410>
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	84 85       	ldd	r24, Z+12	; 0x0c
    1c2e:	88 23       	and	r24, r24
    1c30:	59 f1       	breq	.+86     	; 0x1c88 <can_cmd+0x8e8>
    1c32:	96 81       	ldd	r25, Z+6	; 0x06
    1c34:	85 81       	ldd	r24, Z+5	; 0x05
    1c36:	99 0f       	add	r25, r25
    1c38:	99 0f       	add	r25, r25
    1c3a:	99 0f       	add	r25, r25
    1c3c:	82 95       	swap	r24
    1c3e:	86 95       	lsr	r24
    1c40:	87 70       	andi	r24, 0x07	; 7
    1c42:	98 0f       	add	r25, r24
    1c44:	90 93 f3 00 	sts	0x00F3, r25
    1c48:	95 81       	ldd	r25, Z+5	; 0x05
    1c4a:	84 81       	ldd	r24, Z+4	; 0x04
    1c4c:	99 0f       	add	r25, r25
    1c4e:	99 0f       	add	r25, r25
    1c50:	99 0f       	add	r25, r25
    1c52:	82 95       	swap	r24
    1c54:	86 95       	lsr	r24
    1c56:	87 70       	andi	r24, 0x07	; 7
    1c58:	98 0f       	add	r25, r24
    1c5a:	90 93 f2 00 	sts	0x00F2, r25
    1c5e:	94 81       	ldd	r25, Z+4	; 0x04
    1c60:	83 81       	ldd	r24, Z+3	; 0x03
    1c62:	99 0f       	add	r25, r25
    1c64:	99 0f       	add	r25, r25
    1c66:	99 0f       	add	r25, r25
    1c68:	82 95       	swap	r24
    1c6a:	86 95       	lsr	r24
    1c6c:	87 70       	andi	r24, 0x07	; 7
    1c6e:	98 0f       	add	r25, r24
    1c70:	90 93 f1 00 	sts	0x00F1, r25
    1c74:	83 81       	ldd	r24, Z+3	; 0x03
    1c76:	88 0f       	add	r24, r24
    1c78:	88 0f       	add	r24, r24
    1c7a:	88 0f       	add	r24, r24
    1c7c:	80 93 f0 00 	sts	0x00F0, r24
    1c80:	80 91 ef 00 	lds	r24, 0x00EF
    1c84:	80 61       	ori	r24, 0x10	; 16
    1c86:	15 c0       	rjmp	.+42     	; 0x1cb2 <can_cmd+0x912>
    1c88:	f8 01       	movw	r30, r16
    1c8a:	94 81       	ldd	r25, Z+4	; 0x04
    1c8c:	83 81       	ldd	r24, Z+3	; 0x03
    1c8e:	92 95       	swap	r25
    1c90:	99 0f       	add	r25, r25
    1c92:	90 7e       	andi	r25, 0xE0	; 224
    1c94:	86 95       	lsr	r24
    1c96:	86 95       	lsr	r24
    1c98:	86 95       	lsr	r24
    1c9a:	98 0f       	add	r25, r24
    1c9c:	90 93 f3 00 	sts	0x00F3, r25
    1ca0:	83 81       	ldd	r24, Z+3	; 0x03
    1ca2:	82 95       	swap	r24
    1ca4:	88 0f       	add	r24, r24
    1ca6:	80 7e       	andi	r24, 0xE0	; 224
    1ca8:	80 93 f2 00 	sts	0x00F2, r24
    1cac:	80 91 ef 00 	lds	r24, 0x00EF
    1cb0:	8f 7e       	andi	r24, 0xEF	; 239
    1cb2:	80 93 ef 00 	sts	0x00EF, r24
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	08 c0       	rjmp	.+16     	; 0x1ccc <can_cmd+0x92c>
    1cbc:	f8 01       	movw	r30, r16
    1cbe:	a0 85       	ldd	r26, Z+8	; 0x08
    1cc0:	b1 85       	ldd	r27, Z+9	; 0x09
    1cc2:	a9 0f       	add	r26, r25
    1cc4:	b1 1d       	adc	r27, r1
    1cc6:	8c 91       	ld	r24, X
    1cc8:	80 93 fa 00 	sts	0x00FA, r24
    1ccc:	92 2f       	mov	r25, r18
    1cce:	2f 5f       	subi	r18, 0xFF	; 255
    1cd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	87 81       	ldd	r24, Z+7	; 0x07
    1cd6:	98 17       	cp	r25, r24
    1cd8:	88 f3       	brcs	.-30     	; 0x1cbc <can_cmd+0x91c>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	af ef       	ldi	r26, 0xFF	; 255
    1ce0:	bf ef       	ldi	r27, 0xFF	; 255
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	ab 83       	std	Y+3, r26	; 0x03
    1ce8:	bc 83       	std	Y+4, r27	; 0x04
    1cea:	3b 81       	ldd	r19, Y+3	; 0x03
    1cec:	8c 81       	ldd	r24, Y+4	; 0x04
    1cee:	88 0f       	add	r24, r24
    1cf0:	88 0f       	add	r24, r24
    1cf2:	88 0f       	add	r24, r24
    1cf4:	93 2f       	mov	r25, r19
    1cf6:	92 95       	swap	r25
    1cf8:	96 95       	lsr	r25
    1cfa:	97 70       	andi	r25, 0x07	; 7
    1cfc:	89 0f       	add	r24, r25
    1cfe:	80 93 f7 00 	sts	0x00F7, r24
    1d02:	2a 81       	ldd	r18, Y+2	; 0x02
    1d04:	33 0f       	add	r19, r19
    1d06:	33 0f       	add	r19, r19
    1d08:	33 0f       	add	r19, r19
    1d0a:	82 2f       	mov	r24, r18
    1d0c:	82 95       	swap	r24
    1d0e:	86 95       	lsr	r24
    1d10:	87 70       	andi	r24, 0x07	; 7
    1d12:	38 0f       	add	r19, r24
    1d14:	30 93 f6 00 	sts	0x00F6, r19
    1d18:	99 81       	ldd	r25, Y+1	; 0x01
    1d1a:	22 0f       	add	r18, r18
    1d1c:	22 0f       	add	r18, r18
    1d1e:	22 0f       	add	r18, r18
    1d20:	89 2f       	mov	r24, r25
    1d22:	82 95       	swap	r24
    1d24:	86 95       	lsr	r24
    1d26:	87 70       	andi	r24, 0x07	; 7
    1d28:	28 0f       	add	r18, r24
    1d2a:	20 93 f5 00 	sts	0x00F5, r18
    1d2e:	99 0f       	add	r25, r25
    1d30:	99 0f       	add	r25, r25
    1d32:	99 0f       	add	r25, r25
    1d34:	90 93 f4 00 	sts	0x00F4, r25
    1d38:	80 91 ef 00 	lds	r24, 0x00EF
    1d3c:	97 81       	ldd	r25, Z+7	; 0x07
    1d3e:	89 2b       	or	r24, r25
    1d40:	80 93 ef 00 	sts	0x00EF, r24
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	83 87       	std	Z+11, r24	; 0x0b
    1d48:	80 91 f4 00 	lds	r24, 0x00F4
    1d4c:	84 60       	ori	r24, 0x04	; 4
    1d4e:	80 93 f4 00 	sts	0x00F4, r24
    1d52:	80 91 f0 00 	lds	r24, 0x00F0
    1d56:	84 60       	ori	r24, 0x04	; 4
    1d58:	80 93 f0 00 	sts	0x00F0, r24
    1d5c:	80 91 ef 00 	lds	r24, 0x00EF
    1d60:	80 62       	ori	r24, 0x20	; 32
    1d62:	0b cf       	rjmp	.-490    	; 0x1b7a <can_cmd+0x7da>
    1d64:	f8 01       	movw	r30, r16
    1d66:	12 86       	std	Z+10, r1	; 0x0a
    1d68:	ff cb       	rjmp	.-2050   	; 0x1568 <can_cmd+0x1c8>
    1d6a:	8f e1       	ldi	r24, 0x1F	; 31
    1d6c:	f8 01       	movw	r30, r16
    1d6e:	82 87       	std	Z+10, r24	; 0x0a
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	24 96       	adiw	r28, 0x04	; 4
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <can_init>:
    1d8a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <can_auto_baudrate>
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f4       	brne	.+6      	; 0x1d98 <can_init+0xe>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	08 95       	ret
    1d98:	0e 94 46 07 	call	0xe8c	; 0xe8c <can_clear_all_mob>
    1d9c:	80 91 d8 00 	lds	r24, 0x00D8
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	80 93 d8 00 	sts	0x00D8, r24
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	08 95       	ret

00001dac <wait_for>:
//! @return  none 
//!
//------------------------------------------------------------------------------
void wait_for(U16 ms_count)
{
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	bc 01       	movw	r22, r24
U32 temp;
U16 i;
U8  j, k;

    if (rtc_running == ON)
    1db6:	80 91 84 05 	lds	r24, 0x0584
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	71 f5       	brne	.+92     	; 0x1e1a <wait_for+0x6e>
    {
        Disable_interrupt(); temp = rtc_tics; Enable_interrupt();    //-- Get atomic U32 value
    1dbe:	f8 94       	cli
    1dc0:	20 91 8a 05 	lds	r18, 0x058A
    1dc4:	30 91 8b 05 	lds	r19, 0x058B
    1dc8:	40 91 8c 05 	lds	r20, 0x058C
    1dcc:	50 91 8d 05 	lds	r21, 0x058D
    1dd0:	78 94       	sei
        temp += ((U32)(ms_count));
    1dd2:	7b 01       	movw	r14, r22
    1dd4:	00 27       	eor	r16, r16
    1dd6:	11 27       	eor	r17, r17
    1dd8:	2e 0d       	add	r18, r14
    1dda:	3f 1d       	adc	r19, r15
    1ddc:	40 1f       	adc	r20, r16
    1dde:	51 1f       	adc	r21, r17
        while (1)
        {
            Disable_interrupt();    //-- Get atomic U32 values
    1de0:	f8 94       	cli
            if (rtc_tics == temp) break;                //-- Standart EXIT
    1de2:	80 91 8a 05 	lds	r24, 0x058A
    1de6:	90 91 8b 05 	lds	r25, 0x058B
    1dea:	a0 91 8c 05 	lds	r26, 0x058C
    1dee:	b0 91 8d 05 	lds	r27, 0x058D
    1df2:	82 17       	cp	r24, r18
    1df4:	93 07       	cpc	r25, r19
    1df6:	a4 07       	cpc	r26, r20
    1df8:	b5 07       	cpc	r27, r21
    1dfa:	79 f0       	breq	.+30     	; 0x1e1a <wait_for+0x6e>
            if (rtc_tics == ((U32)(ms_count)) ) break;  //-- EXIT if overflow (not right)
    1dfc:	80 91 8a 05 	lds	r24, 0x058A
    1e00:	90 91 8b 05 	lds	r25, 0x058B
    1e04:	a0 91 8c 05 	lds	r26, 0x058C
    1e08:	b0 91 8d 05 	lds	r27, 0x058D
    1e0c:	8e 15       	cp	r24, r14
    1e0e:	9f 05       	cpc	r25, r15
    1e10:	a0 07       	cpc	r26, r16
    1e12:	b1 07       	cpc	r27, r17
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <wait_for+0x6e>
            Enable_interrupt();
    1e16:	78 94       	sei
    1e18:	e3 cf       	rjmp	.-58     	; 0x1de0 <wait_for+0x34>
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	08 95       	ret

00001e24 <rtc_int_init>:
        }
    }
    else    //-- No RTC, enabling something almost equivalent but not right.
    {
        for (i=0;i<ms_count;i++)
        {
            for (j=0;j<(U8)(FOSC/1000);j++)
            {
                for (k=0; k<90;k++);
            }
        }
    }
}

//------------------------------------------------------------------------------
//  @fn rtc_int_init
//!
//! Timer2 initialization to have 1 ms tic interval managed under interrupt.
//!
//! @warning  RTC_TIMER & RTC_CLOCK must be define in "dvk90can1_board.h" and 
//!           FOSC in"config.h".
//!
//! @param  none
//!
//! @return  none
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

void rtc_int_init(void)
{
    1e24:	f8 94       	cli
U16 i;
    
    Disable_interrupt();

    Timer8_clear();                 //-- Timer 2 cleared & initialized "OFF"
    1e26:	10 92 b0 00 	sts	0x00B0, r1
    1e2a:	10 92 b2 00 	sts	0x00B2, r1
    1e2e:	10 92 b3 00 	sts	0x00B3, r1
    for (i=0;i<0xFFFF;i++);         //-- Waiting to let the Xtal stabilize after a power-on
    Timer8_overflow_it_disable();   //-- Disable OCIE2A interrupt
    1e32:	80 91 70 00 	lds	r24, 0x0070
    1e36:	8e 7f       	andi	r24, 0xFE	; 254
    1e38:	80 93 70 00 	sts	0x0070, r24
    Timer8_compare_a_it_disable();  //-- Disable TOIE2 interrupt
    1e3c:	80 91 70 00 	lds	r24, 0x0070
    1e40:	8d 7f       	andi	r24, 0xFD	; 253
    1e42:	80 93 70 00 	sts	0x0070, r24
    //-- Config: - CTC mode (mode 2, top=OCR2A)
    //--         - No output
    //--        (- Timer "OFF")
    Timer8_set_mode_output_a(TIMER8_COMP_MODE_NORMAL);
    1e46:	80 91 b0 00 	lds	r24, 0x00B0
    1e4a:	8f 7c       	andi	r24, 0xCF	; 207
    1e4c:	80 93 b0 00 	sts	0x00B0, r24
    Timer8_set_waveform_mode(TIMER8_WGM_CTC_OCR);
    1e50:	80 91 b0 00 	lds	r24, 0x00B0
    1e54:	87 7b       	andi	r24, 0xB7	; 183
    1e56:	88 60       	ori	r24, 0x08	; 8
    1e58:	80 93 b0 00 	sts	0x00B0, r24

#   if (RTC_CLOCK == 32)
   
    //--- Asynchronous external clock 32,768 KHZ
        Timer8_2_external_osc();            //-- Init RTC clock
    1e5c:	80 91 b6 00 	lds	r24, 0x00B6
    1e60:	8f 7e       	andi	r24, 0xEF	; 239
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	80 93 b6 00 	sts	0x00B6, r24
        Timer8_set_compare_a(33-1);         //-- MAGIC_NUMBER !
    1e68:	80 e2       	ldi	r24, 0x20	; 32
    1e6a:	80 93 b3 00 	sts	0x00B3, r24
        //-- No prescaler & timer "ON"
        //-- Tic interval: ((1/32768)*MAGIC_NUMBER) sec = 1.00708008 msec
        Timer8_set_clock(TIMER8_CLKIO_BY_1);
    1e6e:	80 91 b0 00 	lds	r24, 0x00B0
    1e72:	88 7f       	andi	r24, 0xF8	; 248
    1e74:	81 60       	ori	r24, 0x01	; 1
    1e76:	80 93 b0 00 	sts	0x00B0, r24
      
#   elif (RTC_CLOCK == 0) //-- Suppose synchronous clock = system clock

        Timer8_2_system_clk();              //-- Init System clock as clock for Timer2

    
#       if (FOSC == 16000)
            //--- Synchronous internal clock 16000 KHZ
            Timer8_set_compare_a(125-1);    //-- MAGIC_NUMBER !
            //-- Prescaler=128 & timer "ON"
            //-- Tic interval: ((1/16000000)*128*MAGIC_NUMBER) sec = 1.00000000 msec
            Timer8_set_clock(TIMER8_2_CLKIO_BY_128);
            
#       elif (FOSC == 12000)
            //--- Synchronous internal clock 12000 KHZ
            Timer8_set_compare_a(94-1);     //-- MAGIC_NUMBER !
            //-- Prescaler=128 & timer "ON"
            //-- Tic interval: ((1/12000000)*128*MAGIC_NUMBER) sec = 1.00266667 msec
            Timer8_set_clock(TIMER8_2_CLKIO_BY_128);
            
#       elif (FOSC == 8000)
            //--- Synchronous internal clock 8000 KHZ
            Timer8_set_compare_a(125-1);    //-- MAGIC_NUMBER !
            //-- Prescaler=64 & timer "ON"
            //-- Tic interval: ((1/8000000)*64*MAGIC_NUMBER) sec = 1.00000000 msec
            Timer8_set_clock(TIMER8_2_CLKIO_BY_64);
            
#       elif (FOSC == 6000)
            //--- Synchronous internal clock 6000 KHZ
            Timer8_set_compare_a(94-1);     //-- MAGIC_NUMBER !
            //-- Prescaler=64 & timer "ON"
            //-- Tic interval: ((1/6000000)*64*MAGIC_NUMBER) sec = 1.00000000 msec
            Timer8_set_clock(TIMER8_2_CLKIO_BY_64);
            
#       elif (FOSC == 4000)
            //--- Synchronous internal clock 4000 KHZ
            Timer8_set_compare_a(125-1);    //-- MAGIC_NUMBER !
            //-- Prescaler=64 & timer "ON"
            //-- Tic interval: ((1/4000000)*32*MAGIC_NUMBER) sec = 1.00000000 msec
            Timer8_set_clock(TIMER8_2_CLKIO_BY_32);
#       else
#       error This FOSC value is not available input for "rtc_drv.c" file
#       endif   // (FOSC ...
            
#   else
#       error This RTC_CLOCK value is not available input for "rtc_drv.c" file

#   endif // (RTC_CLOCK ...
    
    while(Timer8_2_update_busy());    //-- Wait for TCN2UB, OCR2UB and TCR2UB to be cleared
    1e7a:	80 91 b6 00 	lds	r24, 0x00B6
    1e7e:	99 27       	eor	r25, r25
    1e80:	87 70       	andi	r24, 0x07	; 7
    1e82:	90 70       	andi	r25, 0x00	; 0
    1e84:	89 2b       	or	r24, r25
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <rtc_int_init+0x56>

    Timer8_clear_compare_a_it();      //-- Clear Output_Compare Interrupt-flags
    1e88:	b9 9a       	sbi	0x17, 1	; 23
    Timer8_compare_a_it_enable();     //-- Enable Timer2 Output_Compare Interrupt
    1e8a:	80 91 70 00 	lds	r24, 0x0070
    1e8e:	82 60       	ori	r24, 0x02	; 2
    1e90:	80 93 70 00 	sts	0x0070, r24

    //-- Time setting
    rtc_tics         = 0;
    1e94:	10 92 8a 05 	sts	0x058A, r1
    1e98:	10 92 8b 05 	sts	0x058B, r1
    1e9c:	10 92 8c 05 	sts	0x058C, r1
    1ea0:	10 92 8d 05 	sts	0x058D, r1
    rtc_milliseconds = 0;
    1ea4:	10 92 89 05 	sts	0x0589, r1
    1ea8:	10 92 88 05 	sts	0x0588, r1
    rtc_seconds      = 0;
    1eac:	10 92 8f 05 	sts	0x058F, r1
    rtc_minutes      = 0;
    1eb0:	10 92 86 05 	sts	0x0586, r1
    rtc_hours        = 0;
    1eb4:	10 92 8e 05 	sts	0x058E, r1
    rtc_days         = 0;
    1eb8:	10 92 87 05 	sts	0x0587, r1

    rtc_running = ON;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	80 93 84 05 	sts	0x0584, r24
    Enable_interrupt();
    1ec2:	78 94       	sei
    1ec4:	08 95       	ret

00001ec6 <__vector_9>:
}
#endif // (RTC_TIMER ...

//------------------------------------------------------------------------------
//  @fn ISR(TIMER2_COMP_vect)
//!
//! Timer2 Output_Compare INTerrupt routine. Increment tics & the real-time
//! clock, the interrupt occurs once a milli second (or close).
//!
//! @warning RTC_TIMER & RTC_CLOCK must be define in "dvk90can1_board.h".
//!
//! @param  none
//!
//! @return  none
//!
//------------------------------------------------------------------------------
#if (RTC_TIMER == 2)

ISR(TIMER2_COMP_vect)
{
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25
    1ed6:	af 93       	push	r26
    1ed8:	bf 93       	push	r27
    rtc_tics++;                     //-- Increments tics
    1eda:	80 91 8a 05 	lds	r24, 0x058A
    1ede:	90 91 8b 05 	lds	r25, 0x058B
    1ee2:	a0 91 8c 05 	lds	r26, 0x058C
    1ee6:	b0 91 8d 05 	lds	r27, 0x058D
    1eea:	01 96       	adiw	r24, 0x01	; 1
    1eec:	a1 1d       	adc	r26, r1
    1eee:	b1 1d       	adc	r27, r1
    1ef0:	80 93 8a 05 	sts	0x058A, r24
    1ef4:	90 93 8b 05 	sts	0x058B, r25
    1ef8:	a0 93 8c 05 	sts	0x058C, r26
    1efc:	b0 93 8d 05 	sts	0x058D, r27
    rtc_milliseconds++;             //-- Increments milli seconds
    1f00:	80 91 88 05 	lds	r24, 0x0588
    1f04:	90 91 89 05 	lds	r25, 0x0589
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	90 93 89 05 	sts	0x0589, r25
    1f0e:	80 93 88 05 	sts	0x0588, r24
    
    if (rtc_milliseconds == 1000)
    1f12:	80 91 88 05 	lds	r24, 0x0588
    1f16:	90 91 89 05 	lds	r25, 0x0589
    1f1a:	88 5e       	subi	r24, 0xE8	; 232
    1f1c:	93 40       	sbci	r25, 0x03	; 3
    1f1e:	51 f5       	brne	.+84     	; 0x1f74 <__vector_9+0xae>
    {
        rtc_milliseconds = 0;
    1f20:	10 92 89 05 	sts	0x0589, r1
    1f24:	10 92 88 05 	sts	0x0588, r1
        rtc_seconds++;              //-- Increments seconds
    1f28:	80 91 8f 05 	lds	r24, 0x058F
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	80 93 8f 05 	sts	0x058F, r24

        if (rtc_seconds == 60)
    1f32:	80 91 8f 05 	lds	r24, 0x058F
    1f36:	8c 33       	cpi	r24, 0x3C	; 60
    1f38:	e9 f4       	brne	.+58     	; 0x1f74 <__vector_9+0xae>
        {
            rtc_seconds = 0;
    1f3a:	10 92 8f 05 	sts	0x058F, r1
            rtc_minutes++;          //-- Increments minutes
    1f3e:	80 91 86 05 	lds	r24, 0x0586
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	80 93 86 05 	sts	0x0586, r24
            
            if (rtc_minutes == 60)
    1f48:	80 91 86 05 	lds	r24, 0x0586
    1f4c:	8c 33       	cpi	r24, 0x3C	; 60
    1f4e:	91 f4       	brne	.+36     	; 0x1f74 <__vector_9+0xae>
            {
                rtc_minutes = 0;
    1f50:	10 92 86 05 	sts	0x0586, r1
                rtc_hours++;        //-- Increments hours
    1f54:	80 91 8e 05 	lds	r24, 0x058E
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	80 93 8e 05 	sts	0x058E, r24
                        
                if (rtc_hours == 24)
    1f5e:	80 91 8e 05 	lds	r24, 0x058E
    1f62:	88 31       	cpi	r24, 0x18	; 24
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <__vector_9+0xae>
                {
                    rtc_hours = 0;
    1f66:	10 92 8e 05 	sts	0x058E, r1
                    rtc_days++;     //-- Increments days
    1f6a:	80 91 87 05 	lds	r24, 0x0587
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	80 93 87 05 	sts	0x0587, r24
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	2f 91       	pop	r18
    1f7e:	0f 90       	pop	r0
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	0f 90       	pop	r0
    1f84:	1f 90       	pop	r1
    1f86:	18 95       	reti

00001f88 <led_init>:
//! @return  none
//!
//------------------------------------------------------------------------------
void led_init(void)
{
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	81 b9       	out	0x01, r24	; 1
    //-- Set direction
    LED_PORT_DIR = 0xFF;
    //-- Clear LEDs.
    LED_PORT_OUT = 0x00;    
    1f8c:	12 b8       	out	0x02, r1	; 2
    1f8e:	08 95       	ret

00001f90 <write_led>:
}

//------------------------------------------------------------------------------
//  @fn write_led
//!
//! On-board LEDs writing byte. Write hexa value on LEDs display.
//!
//! @warning  none
//!
//! @param  led_display = Hexa display value
//!
//! @return (none)
//!
//------------------------------------------------------------------------------
void write_led(U8 led_display)
{
    1f90:	82 b9       	out	0x02, r24	; 2
    1f92:	08 95       	ret

00001f94 <swap_nibble_led>:
    LED_PORT_OUT = led_display;
}

//------------------------------------------------------------------------------
//  @fn swap_nibble_led
//!
//! Swap nibbles of on-board LEDs. Exchange ls-nibble and ms-nibble.
//!
//! @warning  none
//!
//! @param  none
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void swap_nibble_led(void)
{
    1f94:	90 b1       	in	r25, 0x00	; 0
    1f96:	80 b1       	in	r24, 0x00	; 0
    1f98:	92 95       	swap	r25
    1f9a:	90 7f       	andi	r25, 0xF0	; 240
    1f9c:	82 95       	swap	r24
    1f9e:	8f 70       	andi	r24, 0x0F	; 15
    1fa0:	98 2b       	or	r25, r24
    1fa2:	92 b9       	out	0x02, r25	; 2
    1fa4:	08 95       	ret

00001fa6 <toggle_led>:
    LED_PORT_OUT = (LED_PORT_IN << 4) | (LED_PORT_IN >> 4);
}

//------------------------------------------------------------------------------
//  @fn toggle_led
//!
//! On-board LEDs toggle. Toggle value of each LED.
//!
//! @warning  none
//!
//! @param  none
//!
//! @return  none
//!
//------------------------------------------------------------------------------
void toggle_led(void)
{
    1fa6:	8f ef       	ldi	r24, 0xFF	; 255
    1fa8:	80 b9       	out	0x00, r24	; 0
    1faa:	08 95       	ret

00001fac <write_led_number>:
    LED_PORT_IN = 0xFF;
}

//------------------------------------------------------------------------------
//  @fn write_led_number
//!
//! Set or clear one LED of the on-board LEDs. See "Set_led(U8 led_number)"
//! and "Set_led(U8 led_number)" macros.
//!
//! @warning 0 <= "LED number" param <= 7, led_level >=2.
//!
//! @param  led_number = Position of the LED.
//! @param  led_level  = Bool: 1=set, 0=clear.
//!
//! @return  range error..
//!             FALSE: led_number >= 8 or led_level >=2,
//!             TRUE:  In range
//!
//------------------------------------------------------------------------------
U8 write_led_number(U8 led_number,Bool led_level)
{
    1fac:	38 2f       	mov	r19, r24
U8 range_error;
    
    range_error = FALSE;
    if (led_number < 8)
    1fae:	88 30       	cpi	r24, 0x08	; 8
    1fb0:	d8 f4       	brcc	.+54     	; 0x1fe8 <write_led_number+0x3c>
    {
        if (led_level==0)
    1fb2:	66 23       	and	r22, r22
    1fb4:	59 f4       	brne	.+22     	; 0x1fcc <write_led_number+0x20>
        {
            range_error = TRUE;
            LED_PORT_OUT &= ~(1<<led_number);
    1fb6:	22 b1       	in	r18, 0x02	; 2
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <write_led_number+0x16>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	3a 95       	dec	r19
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <write_led_number+0x12>
    1fc6:	80 95       	com	r24
    1fc8:	28 23       	and	r18, r24
    1fca:	0b c0       	rjmp	.+22     	; 0x1fe2 <write_led_number+0x36>
        }
        if (led_level==1)
    1fcc:	61 30       	cpi	r22, 0x01	; 1
    1fce:	61 f4       	brne	.+24     	; 0x1fe8 <write_led_number+0x3c>
        {
            range_error = TRUE;
            LED_PORT_OUT |= (1<<led_number);
    1fd0:	22 b1       	in	r18, 0x02	; 2
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <write_led_number+0x30>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	3a 95       	dec	r19
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <write_led_number+0x2c>
    1fe0:	28 2b       	or	r18, r24
    1fe2:	22 b9       	out	0x02, r18	; 2
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	01 c0       	rjmp	.+2      	; 0x1fea <write_led_number+0x3e>
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return range_error;
}
    1fea:	99 27       	eor	r25, r25
    1fec:	08 95       	ret

00001fee <key_init>:
//! @return  none
//!
//------------------------------------------------------------------------------
void key_init(void)
{
    1fee:	6c 98       	cbi	0x0d, 4	; 13
    //-- Init port pins
    KEY_PORT_DIR &= ~(1<<KEY_NORTH);
    KEY_PORT_DIR &= ~(1<<KEY_SOUTH);
    1ff0:	6f 98       	cbi	0x0d, 7	; 13
    KEY_PORT_DIR &= ~(1<<KEY_WEST);
    1ff2:	6e 98       	cbi	0x0d, 6	; 13
    KEY_PORT_DIR &= ~(1<<KEY_EAST);
    1ff4:	6d 98       	cbi	0x0d, 5	; 13
#ifdef KEY_CENTER_PORT_DIR
    KEY_CENTER_PORT_DIR &= ~(1<<KEY_CENTER_IN);
#else   
    KEY_PORT_DIR &= ~(1<<KEY_CENTER);
    1ff6:	6a 98       	cbi	0x0d, 2	; 13
#endif
    //-- Pull_up on pins
    KEY_PORT_OUT |= (1<<KEY_NORTH);
    1ff8:	74 9a       	sbi	0x0e, 4	; 14
    KEY_PORT_OUT |= (1<<KEY_SOUTH);
    1ffa:	77 9a       	sbi	0x0e, 7	; 14
    KEY_PORT_OUT |= (1<<KEY_WEST);
    1ffc:	76 9a       	sbi	0x0e, 6	; 14
    KEY_PORT_OUT |= (1<<KEY_EAST);
    1ffe:	75 9a       	sbi	0x0e, 5	; 14
#ifdef KEY_CENTER_PORT_OUT
    KEY_CENTER_PORT_OUT |= (1<<KEY_CENTER_IN);
#else   
    KEY_PORT_OUT |= (1<<KEY_CENTER);
    2000:	72 9a       	sbi	0x0e, 2	; 14
    2002:	08 95       	ret

00002004 <get_key>:
#endif
}

//------------------------------------------------------------------------------
//  @fn get_key
//!
//! Get on-board keyboard value. Refer to key_drv.h and board.h.
//!
//! @warning Set correct definition for KEY_CENTER.
//!
//! @param  none
//!
//! @return  keyboard value
//!
//------------------------------------------------------------------------------
U8 get_key(void)
{
    2004:	8c b1       	in	r24, 0x0c	; 12
    2006:	9c b1       	in	r25, 0x0c	; 12
    2008:	2c b1       	in	r18, 0x0c	; 12
    200a:	89 2b       	or	r24, r25
    200c:	82 2b       	or	r24, r18
    200e:	80 95       	com	r24
    2010:	84 7f       	andi	r24, 0xF4	; 244
    //-- See "board.h" for keys (push-buttons) definition:
    U8 key_0;
    U8 key_1;
    
    //-- Read 3 times to remove overshoots
    key_0 = KEY_MASK & ((~KEY_PORT_IN) & (~KEY_PORT_IN) & (~KEY_PORT_IN));
    key_1 = 0;

#if (KEY_CENTER_PORT_IN && KEY_CENTER_IN)
    //-- Remove KEY_CENTER bit
    key_0 &= ~(1<<KEY_CENTER);
    //-- Read 3 times to remove overshoots and mask
    key_1 = KEY_CENTER_IN & ((~KEY_CENTER_PORT_IN) & (~KEY_CENTER_PORT_IN) & (~KEY_CENTER_PORT_IN));
    Key_1 = ((key_1>>KEY_CENTER_IN)<<KEY_CENTER);
#endif
    key_0 |= key_1;
    return key_0;
}
    2012:	99 27       	eor	r25, r25
    2014:	08 95       	ret

00002016 <get_key_code>:

//------------------------------------------------------------------------------
//  @fn get_key_code
//!
//! Return a (compressed) coding of keys. Refer to key_drv.h and board.h.
//!
//! @warning Set correct definition for KEY_CENTER.
//!
//! @param  keyboard value
//!
//! @return  keyboard compressed value
//!
//------------------------------------------------------------------------------
U8 get_key_code(void)
{
    2016:	2c b1       	in	r18, 0x0c	; 12
    2018:	8c b1       	in	r24, 0x0c	; 12
    201a:	9c b1       	in	r25, 0x0c	; 12
    201c:	28 2b       	or	r18, r24
    201e:	29 2b       	or	r18, r25
    2020:	20 95       	com	r18
    2022:	24 7f       	andi	r18, 0xF4	; 244
    //-- See "board.h" for keys (push-buttons) definition:
    U8 key_0;
    U8 key_1;
    
    //-- Read 3 times to remove overshoots
    key_0 = KEY_MASK & ((~KEY_PORT_IN) & (~KEY_PORT_IN) & (~KEY_PORT_IN));
    key_1 = 0;

#if (KEY_CENTER_PORT_IN && KEY_CENTER_IN)
    //-- Remove KEY_CENTER bit
    key_0 &= ~(1<<KEY_CENTER);
    //-- Read 3 times to remove overshoots and mask
    key_1 = KEY_CENTER_IN & ((~KEY_CENTER_PORT_IN) & (~KEY_CENTER_PORT_IN) & (~KEY_CENTER_PORT_IN));
    Key_1 = ((key_1>>KEY_CENTER_IN)<<KEY_CENTER);
#endif
    switch (key_0 |= key_1)
    2024:	24 34       	cpi	r18, 0x44	; 68
    2026:	09 f4       	brne	.+2      	; 0x202a <get_key_code+0x14>
    2028:	42 c0       	rjmp	.+132    	; 0x20ae <get_key_code+0x98>
    202a:	25 34       	cpi	r18, 0x45	; 69
    202c:	90 f4       	brcc	.+36     	; 0x2052 <get_key_code+0x3c>
    202e:	20 32       	cpi	r18, 0x20	; 32
    2030:	51 f1       	breq	.+84     	; 0x2086 <get_key_code+0x70>
    2032:	21 32       	cpi	r18, 0x21	; 33
    2034:	38 f4       	brcc	.+14     	; 0x2044 <get_key_code+0x2e>
    2036:	20 31       	cpi	r18, 0x10	; 16
    2038:	01 f1       	breq	.+64     	; 0x207a <get_key_code+0x64>
    203a:	24 31       	cpi	r18, 0x14	; 20
    203c:	a1 f1       	breq	.+104    	; 0x20a6 <get_key_code+0x90>
    203e:	24 30       	cpi	r18, 0x04	; 4
    2040:	b9 f5       	brne	.+110    	; 0x20b0 <get_key_code+0x9a>
    2042:	23 c0       	rjmp	.+70     	; 0x208a <get_key_code+0x74>
    2044:	20 33       	cpi	r18, 0x30	; 48
    2046:	39 f1       	breq	.+78     	; 0x2096 <get_key_code+0x80>
    2048:	20 34       	cpi	r18, 0x40	; 64
    204a:	d9 f0       	breq	.+54     	; 0x2082 <get_key_code+0x6c>
    204c:	24 32       	cpi	r18, 0x24	; 36
    204e:	81 f5       	brne	.+96     	; 0x20b0 <get_key_code+0x9a>
    2050:	12 c0       	rjmp	.+36     	; 0x2076 <get_key_code+0x60>
    2052:	24 38       	cpi	r18, 0x84	; 132
    2054:	51 f1       	breq	.+84     	; 0x20aa <get_key_code+0x94>
    2056:	25 38       	cpi	r18, 0x85	; 133
    2058:	38 f4       	brcc	.+14     	; 0x2068 <get_key_code+0x52>
    205a:	20 36       	cpi	r18, 0x60	; 96
    205c:	11 f1       	breq	.+68     	; 0x20a2 <get_key_code+0x8c>
    205e:	20 38       	cpi	r18, 0x80	; 128
    2060:	71 f0       	breq	.+28     	; 0x207e <get_key_code+0x68>
    2062:	20 35       	cpi	r18, 0x50	; 80
    2064:	29 f5       	brne	.+74     	; 0x20b0 <get_key_code+0x9a>
    2066:	13 c0       	rjmp	.+38     	; 0x208e <get_key_code+0x78>
    2068:	20 3a       	cpi	r18, 0xA0	; 160
    206a:	b9 f0       	breq	.+46     	; 0x209a <get_key_code+0x84>
    206c:	20 3c       	cpi	r18, 0xC0	; 192
    206e:	89 f0       	breq	.+34     	; 0x2092 <get_key_code+0x7c>
    2070:	20 39       	cpi	r18, 0x90	; 144
    2072:	f1 f4       	brne	.+60     	; 0x20b0 <get_key_code+0x9a>
    2074:	14 c0       	rjmp	.+40     	; 0x209e <get_key_code+0x88>
    2076:	2f e0       	ldi	r18, 0x0F	; 15
    2078:	1b c0       	rjmp	.+54     	; 0x20b0 <get_key_code+0x9a>
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	19 c0       	rjmp	.+50     	; 0x20b0 <get_key_code+0x9a>
    {
      case BUTTON_N:           //-- BUTTON_N_CODE: 0x01
        key_0=BUTTON_N_CODE;
        break;
    207e:	22 e0       	ldi	r18, 0x02	; 2
    2080:	17 c0       	rjmp	.+46     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_S:           //-- BUTTON_S_CODE: 0x02
        key_0=BUTTON_S_CODE;
        break;
    2082:	23 e0       	ldi	r18, 0x03	; 3
    2084:	15 c0       	rjmp	.+42     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_W:           //-- BUTTON_W_CODE: 0x03
        key_0=BUTTON_W_CODE;
        break;
    2086:	24 e0       	ldi	r18, 0x04	; 4
    2088:	13 c0       	rjmp	.+38     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_E:           //-- BUTTON_E_CODE: 0x04
        key_0=BUTTON_E_CODE;
        break;
    208a:	25 e0       	ldi	r18, 0x05	; 5
    208c:	11 c0       	rjmp	.+34     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_C:           //-- BUTTON_C_CODE: 0x05
        key_0=BUTTON_C_CODE;
        break;
    208e:	26 e0       	ldi	r18, 0x06	; 6
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <get_key_code+0x9a>

      case BUTTON_NW:          //-- BUTTON_NW_CODE: 0x06
        key_0=BUTTON_NW_CODE;
        break;
    2092:	27 e0       	ldi	r18, 0x07	; 7
    2094:	0d c0       	rjmp	.+26     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_SW:          //-- BUTTON_SW_CODE: 0x07
        key_0=BUTTON_SW_CODE;
        break;
    2096:	28 e0       	ldi	r18, 0x08	; 8
    2098:	0b c0       	rjmp	.+22     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_NE:          //-- BUTTON_NE_CODE: 0x08
        key_0=BUTTON_NE_CODE;
        break;
    209a:	29 e0       	ldi	r18, 0x09	; 9
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_SE:          //-- BUTTON_SE_CODE: 0x09
        key_0=BUTTON_SE_CODE;
        break;
    209e:	2a e0       	ldi	r18, 0x0A	; 10
    20a0:	07 c0       	rjmp	.+14     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_NS:          //-- BUTTON_NS_CODE: 0x0A
        key_0=BUTTON_NS_CODE;
        break;
    20a2:	2b e0       	ldi	r18, 0x0B	; 11
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_WE:          //-- BUTTON_WE_CODE: 0x0B
        key_0=BUTTON_WE_CODE;
        break;
    20a6:	2c e0       	ldi	r18, 0x0C	; 12
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <get_key_code+0x9a>
     case BUTTON_NC:           //-- BUTTON_NC_CODE: 0x0C
        key_0=BUTTON_NC_CODE;
        break;
    20aa:	2d e0       	ldi	r18, 0x0D	; 13
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <get_key_code+0x9a>
      case BUTTON_SC:          //-- BUTTON_SC_CODE: 0x0D
        key_0=BUTTON_SC_CODE;
        break;
    20ae:	2e e0       	ldi	r18, 0x0E	; 14
      case BUTTON_WC:          //-- BUTTON_WC_CODE: 0x0E
        key_0=BUTTON_WC_CODE;
        break;
      case BUTTON_EC:          //-- BUTTON_EC_CODE: 0x0F
        key_0=BUTTON_EC_CODE;
        break;
    }
    return key_0;
}
    20b0:	82 2f       	mov	r24, r18
    20b2:	99 27       	eor	r25, r25
    20b4:	08 95       	ret

000020b6 <__udivmodhi4>:
    20b6:	aa 1b       	sub	r26, r26
    20b8:	bb 1b       	sub	r27, r27
    20ba:	51 e1       	ldi	r21, 0x11	; 17
    20bc:	07 c0       	rjmp	.+14     	; 0x20cc <__udivmodhi4_ep>

000020be <__udivmodhi4_loop>:
    20be:	aa 1f       	adc	r26, r26
    20c0:	bb 1f       	adc	r27, r27
    20c2:	a6 17       	cp	r26, r22
    20c4:	b7 07       	cpc	r27, r23
    20c6:	10 f0       	brcs	.+4      	; 0x20cc <__udivmodhi4_ep>
    20c8:	a6 1b       	sub	r26, r22
    20ca:	b7 0b       	sbc	r27, r23

000020cc <__udivmodhi4_ep>:
    20cc:	88 1f       	adc	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	5a 95       	dec	r21
    20d2:	a9 f7       	brne	.-22     	; 0x20be <__udivmodhi4_loop>
    20d4:	80 95       	com	r24
    20d6:	90 95       	com	r25
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	08 95       	ret

000020de <__divmodhi4>:
    20de:	97 fb       	bst	r25, 7
    20e0:	09 2e       	mov	r0, r25
    20e2:	07 26       	eor	r0, r23
    20e4:	0a d0       	rcall	.+20     	; 0x20fa <__divmodhi4_neg1>
    20e6:	77 fd       	sbrc	r23, 7
    20e8:	04 d0       	rcall	.+8      	; 0x20f2 <__divmodhi4_neg2>
    20ea:	e5 df       	rcall	.-54     	; 0x20b6 <__udivmodhi4>
    20ec:	06 d0       	rcall	.+12     	; 0x20fa <__divmodhi4_neg1>
    20ee:	00 20       	and	r0, r0
    20f0:	1a f4       	brpl	.+6      	; 0x20f8 <__divmodhi4_exit>

000020f2 <__divmodhi4_neg2>:
    20f2:	70 95       	com	r23
    20f4:	61 95       	neg	r22
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255

000020f8 <__divmodhi4_exit>:
    20f8:	08 95       	ret

000020fa <__divmodhi4_neg1>:
    20fa:	f6 f7       	brtc	.-4      	; 0x20f8 <__divmodhi4_exit>
    20fc:	90 95       	com	r25
    20fe:	81 95       	neg	r24
    2100:	9f 4f       	sbci	r25, 0xFF	; 255
    2102:	08 95       	ret

00002104 <__udivmodsi4>:
    2104:	a1 e2       	ldi	r26, 0x21	; 33
    2106:	1a 2e       	mov	r1, r26
    2108:	aa 1b       	sub	r26, r26
    210a:	bb 1b       	sub	r27, r27
    210c:	fd 01       	movw	r30, r26
    210e:	0d c0       	rjmp	.+26     	; 0x212a <__udivmodsi4_ep>

00002110 <__udivmodsi4_loop>:
    2110:	aa 1f       	adc	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	ee 1f       	adc	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	a2 17       	cp	r26, r18
    211a:	b3 07       	cpc	r27, r19
    211c:	e4 07       	cpc	r30, r20
    211e:	f5 07       	cpc	r31, r21
    2120:	20 f0       	brcs	.+8      	; 0x212a <__udivmodsi4_ep>
    2122:	a2 1b       	sub	r26, r18
    2124:	b3 0b       	sbc	r27, r19
    2126:	e4 0b       	sbc	r30, r20
    2128:	f5 0b       	sbc	r31, r21

0000212a <__udivmodsi4_ep>:
    212a:	66 1f       	adc	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	1a 94       	dec	r1
    2134:	69 f7       	brne	.-38     	; 0x2110 <__udivmodsi4_loop>
    2136:	60 95       	com	r22
    2138:	70 95       	com	r23
    213a:	80 95       	com	r24
    213c:	90 95       	com	r25
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	bd 01       	movw	r22, r26
    2144:	cf 01       	movw	r24, r30
    2146:	08 95       	ret

00002148 <__divmodsi4>:
    2148:	97 fb       	bst	r25, 7
    214a:	09 2e       	mov	r0, r25
    214c:	05 26       	eor	r0, r21
    214e:	0e d0       	rcall	.+28     	; 0x216c <__divmodsi4_neg1>
    2150:	57 fd       	sbrc	r21, 7
    2152:	04 d0       	rcall	.+8      	; 0x215c <__divmodsi4_neg2>
    2154:	d7 df       	rcall	.-82     	; 0x2104 <__udivmodsi4>
    2156:	0a d0       	rcall	.+20     	; 0x216c <__divmodsi4_neg1>
    2158:	00 1c       	adc	r0, r0
    215a:	38 f4       	brcc	.+14     	; 0x216a <__divmodsi4_exit>

0000215c <__divmodsi4_neg2>:
    215c:	50 95       	com	r21
    215e:	40 95       	com	r20
    2160:	30 95       	com	r19
    2162:	21 95       	neg	r18
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	4f 4f       	sbci	r20, 0xFF	; 255
    2168:	5f 4f       	sbci	r21, 0xFF	; 255

0000216a <__divmodsi4_exit>:
    216a:	08 95       	ret

0000216c <__divmodsi4_neg1>:
    216c:	f6 f7       	brtc	.-4      	; 0x216a <__divmodsi4_exit>
    216e:	90 95       	com	r25
    2170:	80 95       	com	r24
    2172:	70 95       	com	r23
    2174:	61 95       	neg	r22
    2176:	7f 4f       	sbci	r23, 0xFF	; 255
    2178:	8f 4f       	sbci	r24, 0xFF	; 255
    217a:	9f 4f       	sbci	r25, 0xFF	; 255
    217c:	08 95       	ret

0000217e <_exit>:
    217e:	ff cf       	rjmp	.-2      	; 0x217e <_exit>
