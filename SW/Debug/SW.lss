
SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000278e  00002822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000278e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025b  00800148  00800148  0000286a  2**0
                  ALLOC
  3 .stab         00003fcc  00000000  00000000  0000286c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000035ae  00000000  00000000  00006838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <__vector_9>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_12>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_18>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      80:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      84:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      88:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      8c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      90:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      94:	ae 04       	cpc	r10, r14
      96:	c1 04       	cpc	r12, r1
      98:	e6 04       	cpc	r14, r6
      9a:	0b 05       	cpc	r16, r11
      9c:	30 05       	cpc	r19, r0
      9e:	4f 05       	cpc	r20, r15
      a0:	6b 05       	cpc	r22, r11
      a2:	87 05       	cpc	r24, r7
      a4:	ac 05       	cpc	r26, r12
      a6:	b2 05       	cpc	r27, r2
      a8:	db 05       	cpc	r29, r11
      aa:	00 06       	cpc	r0, r16
      ac:	25 06       	cpc	r2, r21
      ae:	4a 06       	cpc	r4, r26
      b0:	5a 06       	cpc	r5, r26
      b2:	b3 06       	cpc	r11, r19
      b4:	ec 06       	cpc	r14, r28
      b6:	02 07       	cpc	r16, r18
      b8:	02 07       	cpc	r16, r18
      ba:	09 07       	cpc	r16, r25
      bc:	09 07       	cpc	r16, r25
      be:	09 07       	cpc	r16, r25
      c0:	09 07       	cpc	r16, r25
      c2:	09 07       	cpc	r16, r25
      c4:	09 07       	cpc	r16, r25
      c6:	09 07       	cpc	r16, r25
      c8:	09 07       	cpc	r16, r25
      ca:	09 07       	cpc	r16, r25
      cc:	09 07       	cpc	r16, r25
      ce:	09 07       	cpc	r16, r25
      d0:	09 07       	cpc	r16, r25
      d2:	09 07       	cpc	r16, r25
      d4:	b6 03       	fmuls	r19, r22
      d6:	eb 03       	fmulsu	r22, r19
      d8:	07 04       	cpc	r0, r7
      da:	2c 04       	cpc	r2, r12
      dc:	51 04       	cpc	r5, r1
      de:	76 04       	cpc	r7, r6
      e0:	92 04       	cpc	r9, r2

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e1       	ldi	r29, 0x10	; 16
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	ee e8       	ldi	r30, 0x8E	; 142
      f6:	f7 e2       	ldi	r31, 0x27	; 39
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a8 34       	cpi	r26, 0x48	; 72
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a8 e4       	ldi	r26, 0x48	; 72
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a3 3a       	cpi	r26, 0xA3	; 163
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
     11c:	0c 94 c5 13 	jmp	0x278a	; 0x278a <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <handle_10ms_tick>:
	{
		// Send 1Hz Data
		//led_ctrl(LED7,LED_ON,LED_NO_TMR);
	}
	*/
}
     124:	08 95       	ret

00000126 <Calc_RPM_Disp>:
#define ch2dblword(b3,b2,b1,b0)	((((uint32_t)(b3) & 0x000000FF) << 24) + (((uint32_t)(b2) & 0x000000FF) << 16) + (((uint32_t)(b1) & 0x000000FF) << 8) + b0)

volatile uint8_t data_chg = 0;

uint32_t Calc_RPM_Disp(uint32_t rpm)
{
     126:	9b 01       	movw	r18, r22
     128:	ac 01       	movw	r20, r24
	uint32_t mult;

	if(rpm < 4000)
     12a:	20 3a       	cpi	r18, 0xA0	; 160
     12c:	8f e0       	ldi	r24, 0x0F	; 15
     12e:	38 07       	cpc	r19, r24
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	48 07       	cpc	r20, r24
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	58 07       	cpc	r21, r24
     138:	b8 f1       	brcs	.+110    	; 0x1a8 <Calc_RPM_Disp+0x82>
	{
		return rpm;
	}
	else if(rpm < 5000)
     13a:	28 38       	cpi	r18, 0x88	; 136
     13c:	83 e1       	ldi	r24, 0x13	; 19
     13e:	38 07       	cpc	r19, r24
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	48 07       	cpc	r20, r24
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	58 07       	cpc	r21, r24
     148:	f8 f0       	brcs	.+62     	; 0x188 <Calc_RPM_Disp+0x62>
	{
		mult = 1110;
	}
	else if(rpm < 6000)
     14a:	20 37       	cpi	r18, 0x70	; 112
     14c:	87 e1       	ldi	r24, 0x17	; 23
     14e:	38 07       	cpc	r19, r24
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	48 07       	cpc	r20, r24
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	58 07       	cpc	r21, r24
     158:	28 f4       	brcc	.+10     	; 0x164 <Calc_RPM_Disp+0x3e>
     15a:	64 ec       	ldi	r22, 0xC4	; 196
     15c:	74 e0       	ldi	r23, 0x04	; 4
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	16 c0       	rjmp	.+44     	; 0x190 <Calc_RPM_Disp+0x6a>
	{
		mult = 1220;
	}
	else if(rpm < 8000)
     164:	20 34       	cpi	r18, 0x40	; 64
     166:	8f e1       	ldi	r24, 0x1F	; 31
     168:	38 07       	cpc	r19, r24
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	48 07       	cpc	r20, r24
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	58 07       	cpc	r21, r24
     172:	28 f4       	brcc	.+10     	; 0x17e <Calc_RPM_Disp+0x58>
     174:	6f e5       	ldi	r22, 0x5F	; 95
     176:	75 e0       	ldi	r23, 0x05	; 5
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	09 c0       	rjmp	.+18     	; 0x190 <Calc_RPM_Disp+0x6a>
	{
		mult = 1375;
	}
	else
	{
		return rpm+3000;
     17e:	28 54       	subi	r18, 0x48	; 72
     180:	34 4f       	sbci	r19, 0xF4	; 244
     182:	4f 4f       	sbci	r20, 0xFF	; 255
     184:	5f 4f       	sbci	r21, 0xFF	; 255
     186:	10 c0       	rjmp	.+32     	; 0x1a8 <Calc_RPM_Disp+0x82>
     188:	66 e5       	ldi	r22, 0x56	; 86
     18a:	74 e0       	ldi	r23, 0x04	; 4
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
	}

	return (rpm*mult)/1000;
     190:	0e 94 49 10 	call	0x2092	; 0x2092 <__mulsi3>
     194:	28 ee       	ldi	r18, 0xE8	; 232
     196:	33 e0       	ldi	r19, 0x03	; 3
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	0e 94 8f 10 	call	0x211e	; 0x211e <__udivmodsi4>
     1a0:	c9 01       	movw	r24, r18
     1a2:	da 01       	movw	r26, r20
     1a4:	9c 01       	movw	r18, r24
     1a6:	ad 01       	movw	r20, r26
}
     1a8:	b9 01       	movw	r22, r18
     1aa:	ca 01       	movw	r24, r20
     1ac:	08 95       	ret

000001ae <main>:
	}
	return(0);
}

int main(void)
{
     1ae:	2f 92       	push	r2
     1b0:	3f 92       	push	r3
     1b2:	4f 92       	push	r4
     1b4:	5f 92       	push	r5
     1b6:	6f 92       	push	r6
     1b8:	7f 92       	push	r7
     1ba:	8f 92       	push	r8
     1bc:	9f 92       	push	r9
     1be:	af 92       	push	r10
     1c0:	bf 92       	push	r11
     1c2:	cf 92       	push	r12
     1c4:	df 92       	push	r13
     1c6:	ef 92       	push	r14
     1c8:	ff 92       	push	r15
     1ca:	0f 93       	push	r16
     1cc:	1f 93       	push	r17
     1ce:	df 93       	push	r29
     1d0:	cf 93       	push	r28
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	ad 97       	sbiw	r28, 0x2d	; 45
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
	DDRC |= _BV(LED5);
     1e2:	3c 9a       	sbi	0x07, 4	; 7
	PORTC &= ~_BV(LED5);
     1e4:	44 98       	cbi	0x08, 4	; 8

	DDRD |= _BV(PD7)|_BV(PD4);
     1e6:	8a b1       	in	r24, 0x0a	; 10
     1e8:	80 69       	ori	r24, 0x90	; 144
     1ea:	8a b9       	out	0x0a, r24	; 10
	PORTE |= _BV(PE5);
     1ec:	75 9a       	sbi	0x0e, 5	; 14
	uint16_t i;

	ui_init();
     1ee:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <ui_init>
	can_init();
     1f2:	0e 94 3d 09 	call	0x127a	; 0x127a <can_init>

	tach_out(0);
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	0e 94 df 0b 	call	0x17be	; 0x17be <tach_out>
	tach_off();
     1fc:	2d 9a       	sbi	0x05, 5	; 5

	uint8_t frozen = 0;
	data[0].rpm_mode == RPM_ON;
     1fe:	80 91 df 02 	lds	r24, 0x02DF

	prepare_rx(0,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	ee 24       	eor	r14, r14
     216:	e3 94       	inc	r14
     218:	cc 24       	eor	r12, r12
     21a:	c3 94       	inc	r12
     21c:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(1,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	40 e0       	ldi	r20, 0x00	; 0
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	00 e0       	ldi	r16, 0x00	; 0
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(2,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	00 e0       	ldi	r16, 0x00	; 0
     242:	10 e0       	ldi	r17, 0x00	; 0
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(3,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(4,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     262:	84 e0       	ldi	r24, 0x04	; 4
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(5,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	00 e0       	ldi	r16, 0x00	; 0
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(6,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     28e:	86 e0       	ldi	r24, 0x06	; 6
     290:	40 e0       	ldi	r20, 0x00	; 0
     292:	50 e0       	ldi	r21, 0x00	; 0
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	10 e0       	ldi	r17, 0x00	; 0
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>
	prepare_rx(7,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     2a4:	87 e0       	ldi	r24, 0x07	; 7
     2a6:	40 e0       	ldi	r20, 0x00	; 0
     2a8:	50 e0       	ldi	r21, 0x00	; 0
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	0e 94 ae 08 	call	0x115c	; 0x115c <prepare_rx>

	sei();
     2ba:	78 94       	sei

	data_chg = 0;
     2bc:	10 92 48 01 	sts	0x0148, r1
     2c0:	88 ee       	ldi	r24, 0xE8	; 232
     2c2:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c4:	20 e9       	ldi	r18, 0x90	; 144
     2c6:	31 e0       	ldi	r19, 0x01	; 1
     2c8:	f9 01       	movw	r30, r18
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x11c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <main+0x11a>
	int16_t last_wtr_temp = 0;
	int16_t last_air_temp = 0;
	int16_t new_val = 0;
	uint8_t b;

	int16_t last_temps[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
     2d2:	8e 01       	movw	r16, r28
     2d4:	00 5f       	subi	r16, 0xF0	; 240
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	88 e1       	ldi	r24, 0x18	; 24
     2da:	d8 01       	movw	r26, r16
     2dc:	1d 92       	st	X+, r1
     2de:	8a 95       	dec	r24
     2e0:	e9 f7       	brne	.-6      	; 0x2dc <main+0x12e>

	frozen = 0;

	CAN_packet dlg_pkt;

	tach_out(15);
     2e2:	8f e0       	ldi	r24, 0x0F	; 15
     2e4:	0e 94 df 0b 	call	0x17be	; 0x17be <tach_out>

	dlg_pkt.id = CAN_DATA_DLGR_TGL;
	dlg_pkt.id = dlg_pkt.id << 8;
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	93 ee       	ldi	r25, 0xE3	; 227
     2ec:	af ef       	ldi	r26, 0xFF	; 255
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	89 83       	std	Y+1, r24	; 0x01
     2f2:	9a 83       	std	Y+2, r25	; 0x02
     2f4:	ab 83       	std	Y+3, r26	; 0x03
     2f6:	bc 83       	std	Y+4, r27	; 0x04
	dlg_pkt.id_type = CAN_EXT_MSG;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	8d 83       	std	Y+5, r24	; 0x05
	dlg_pkt.msg_type = CAN_TX_MSG;
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	8e 83       	std	Y+6, r24	; 0x06
	dlg_pkt.length = 2;
     300:	8f 83       	std	Y+7, r24	; 0x07
	dlg_pkt.data[0] = CAN_ADDR_STW;
     302:	88 87       	std	Y+8, r24	; 0x08

	tach_off();
     304:	2d 9a       	sbi	0x05, 5	; 5

	data[0].rpm_mode = RPM_OFF;
     306:	10 92 df 02 	sts	0x02DF, r1
     30a:	cc 24       	eor	r12, r12
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	ba a7       	std	Y+42, r27	; 0x2a
     310:	b9 a7       	std	Y+41, r27	; 0x29
     312:	18 a6       	std	Y+40, r1	; 0x28
     314:	aa 24       	eor	r10, r10
     316:	bb 24       	eor	r11, r11
     318:	88 24       	eor	r8, r8
     31a:	99 24       	eor	r9, r9
				glcd_set(10,0);
				glcd_set(11,0);
				glcd_set(12,0);
				glcd_set(13,0);
				glcd_set(14,0);
				glcd_set(15,0);
     31c:	0b a7       	std	Y+43, r16	; 0x2b
     31e:	d1 2e       	mov	r13, r17
				for(i = 0;i<12;i++)
     320:	fe 01       	movw	r30, r28
     322:	b8 96       	adiw	r30, 0x28	; 40
     324:	fd a7       	std	Y+45, r31	; 0x2d
     326:	ec a7       	std	Y+44, r30	; 0x2c
			}
			else if((b==BTN_3_PSHD))
			{
				dlg_pkt.id = CAN_DATA_LC_TGL;
				dlg_pkt.id = dlg_pkt.id <<8 | 0x10000000;
				can_tx(get_open_mob(),&dlg_pkt);
     328:	3e 01       	movw	r6, r28
     32a:	08 94       	sec
     32c:	61 1c       	adc	r6, r1
     32e:	71 1c       	adc	r7, r1
				can_tx(get_open_mob(),&dlg_pkt);
			}
			else if((b == BTN_2_PSHD))
			{
				dlg_pkt.id = CAN_DATA_TC_TGL;
				dlg_pkt.id = dlg_pkt.id <<8 | 0x10000000;
     330:	21 2c       	mov	r2, r1
     332:	84 ee       	ldi	r24, 0xE4	; 228
     334:	38 2e       	mov	r3, r24
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	48 2e       	mov	r4, r24
     33a:	80 e1       	ldi	r24, 0x10	; 16
     33c:	58 2e       	mov	r5, r24

	while(1)
	{

		//page = 5;
		switch(page)
     33e:	fa a5       	ldd	r31, Y+42	; 0x2a
     340:	f1 30       	cpi	r31, 0x01	; 1
     342:	21 f0       	breq	.+8      	; 0x34c <main+0x19e>
     344:	f2 30       	cpi	r31, 0x02	; 2
     346:	09 f0       	breq	.+2      	; 0x34a <main+0x19c>
     348:	79 c1       	rjmp	.+754    	; 0x63c <main+0x48e>
     34a:	4d c0       	rjmp	.+154    	; 0x3e6 <main+0x238>
		{
		case 5:
			break;
		case 1:
			if(page_update == 1)
     34c:	89 a5       	ldd	r24, Y+41	; 0x29
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	f9 f4       	brne	.+62     	; 0x390 <main+0x1e2>
			{
				glcd_set(0,1);
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(4,0);
     35c:	84 e0       	ldi	r24, 0x04	; 4
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(5,0);
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(6,0);
     370:	86 e0       	ldi	r24, 0x06	; 6
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(7,0);
     37a:	87 e0       	ldi	r24, 0x07	; 7
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	98 a7       	std	Y+40, r25	; 0x28
     388:	aa 24       	eor	r10, r10
     38a:	bb 24       	eor	r11, r11
     38c:	88 24       	eor	r8, r8
     38e:	99 24       	eor	r9, r9
				updated = 1;
				page_update = 0;
			}

			// Water Temp
			new_val = data[0].wtr_temp/10;
     390:	80 91 53 02 	lds	r24, 0x0253
     394:	90 91 54 02 	lds	r25, 0x0254
     398:	6a e0       	ldi	r22, 0x0A	; 10
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodhi4>
     3a0:	7b 01       	movw	r14, r22
			if(new_val != last_wtr_temp)
     3a2:	6a 15       	cp	r22, r10
     3a4:	7b 05       	cpc	r23, r11
     3a6:	29 f0       	breq	.+10     	; 0x3b2 <main+0x204>
			{
				glcd_set(4,new_val);
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
     3ae:	a1 e0       	ldi	r26, 0x01	; 1
     3b0:	a8 a7       	std	Y+40, r26	; 0x28
				last_wtr_temp = new_val;
				updated = 1;
			}

			new_val = data[0].air_temp/10;
     3b2:	80 91 51 02 	lds	r24, 0x0251
     3b6:	90 91 52 02 	lds	r25, 0x0252
     3ba:	6a e0       	ldi	r22, 0x0A	; 10
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodhi4>
     3c2:	8b 01       	movw	r16, r22
			if(new_val != last_air_temp)
     3c4:	68 15       	cp	r22, r8
     3c6:	79 05       	cpc	r23, r9
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <main+0x224>
			{
				glcd_set(5,new_val);
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
     3d0:	05 c0       	rjmp	.+10     	; 0x3dc <main+0x22e>
				last_air_temp = new_val;
				updated = 1;
			}

			if(updated == 1)
     3d2:	b8 a5       	ldd	r27, Y+40	; 0x28
     3d4:	b1 30       	cpi	r27, 0x01	; 1
     3d6:	11 f0       	breq	.+4      	; 0x3dc <main+0x22e>
     3d8:	57 01       	movw	r10, r14
     3da:	2a c1       	rjmp	.+596    	; 0x630 <main+0x482>
			{
				glcd_update();
     3dc:	0e 94 35 0a 	call	0x146a	; 0x146a <glcd_update>
     3e0:	57 01       	movw	r10, r14
     3e2:	48 01       	movw	r8, r16
     3e4:	29 c1       	rjmp	.+594    	; 0x638 <main+0x48a>
			}

			break;

		case 2:
			if(page_update == 1)
     3e6:	e9 a5       	ldd	r30, Y+41	; 0x29
     3e8:	e1 30       	cpi	r30, 0x01	; 1
     3ea:	09 f0       	breq	.+2      	; 0x3ee <main+0x240>
     3ec:	4e c0       	rjmp	.+156    	; 0x48a <main+0x2dc>
			{
				glcd_set(0,2);
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(4,0);
     3f8:	84 e0       	ldi	r24, 0x04	; 4
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(5,0);
     402:	85 e0       	ldi	r24, 0x05	; 5
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(6,0);
     40c:	86 e0       	ldi	r24, 0x06	; 6
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(7,0);
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(8,0);
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(9,0);
     42a:	89 e0       	ldi	r24, 0x09	; 9
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(10,0);
     434:	8a e0       	ldi	r24, 0x0A	; 10
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(11,0);
     43e:	8b e0       	ldi	r24, 0x0B	; 11
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(12,0);
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(13,0);
     452:	8d e0       	ldi	r24, 0x0D	; 13
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(14,0);
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
				glcd_set(15,0);
     466:	8f e0       	ldi	r24, 0x0F	; 15
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
     470:	8b a5       	ldd	r24, Y+43	; 0x2b
     472:	9d 2d       	mov	r25, r13
     474:	fc 01       	movw	r30, r24
				for(i = 0;i<12;i++)
				{
					last_temps[i]=0;
     476:	11 92       	st	Z+, r1
     478:	11 92       	st	Z+, r1
				glcd_set(11,0);
				glcd_set(12,0);
				glcd_set(13,0);
				glcd_set(14,0);
				glcd_set(15,0);
				for(i = 0;i<12;i++)
     47a:	8c a5       	ldd	r24, Y+44	; 0x2c
     47c:	9d a5       	ldd	r25, Y+45	; 0x2d
     47e:	e8 17       	cp	r30, r24
     480:	f9 07       	cpc	r31, r25
     482:	c9 f7       	brne	.-14     	; 0x476 <main+0x2c8>
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	98 a7       	std	Y+40, r25	; 0x28
     488:	03 c0       	rjmp	.+6      	; 0x490 <main+0x2e2>
				updated = 1;
				page_update = 0;
				frozen = 0;
			}

			if(!frozen)
     48a:	cc 20       	and	r12, r12
     48c:	09 f0       	breq	.+2      	; 0x490 <main+0x2e2>
     48e:	cd c0       	rjmp	.+410    	; 0x62a <main+0x47c>
			{
				new_val = data[0].ttemp_otr_fl;
     490:	00 91 9e 02 	lds	r16, 0x029E
     494:	10 91 9f 02 	lds	r17, 0x029F
				if(new_val != last_temps[0])
     498:	88 89       	ldd	r24, Y+16	; 0x10
     49a:	99 89       	ldd	r25, Y+17	; 0x11
     49c:	08 17       	cp	r16, r24
     49e:	19 07       	cpc	r17, r25
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <main+0x304>
				{
					glcd_set(4,new_val);
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	b8 01       	movw	r22, r16
     4a6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[0] = new_val;
     4aa:	19 8b       	std	Y+17, r17	; 0x11
     4ac:	08 8b       	std	Y+16, r16	; 0x10
     4ae:	a1 e0       	ldi	r26, 0x01	; 1
     4b0:	a8 a7       	std	Y+40, r26	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fl;
     4b2:	00 91 9c 02 	lds	r16, 0x029C
     4b6:	10 91 9d 02 	lds	r17, 0x029D
				if(new_val != last_temps[1])
     4ba:	8a 89       	ldd	r24, Y+18	; 0x12
     4bc:	9b 89       	ldd	r25, Y+19	; 0x13
     4be:	08 17       	cp	r16, r24
     4c0:	19 07       	cpc	r17, r25
     4c2:	41 f0       	breq	.+16     	; 0x4d4 <main+0x326>
				{
					glcd_set(5,new_val);
     4c4:	85 e0       	ldi	r24, 0x05	; 5
     4c6:	b8 01       	movw	r22, r16
     4c8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[1] = new_val;
     4cc:	1b 8b       	std	Y+19, r17	; 0x13
     4ce:	0a 8b       	std	Y+18, r16	; 0x12
     4d0:	b1 e0       	ldi	r27, 0x01	; 1
     4d2:	b8 a7       	std	Y+40, r27	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fl;
     4d4:	00 91 9a 02 	lds	r16, 0x029A
     4d8:	10 91 9b 02 	lds	r17, 0x029B
				if(new_val != last_temps[2])
     4dc:	8c 89       	ldd	r24, Y+20	; 0x14
     4de:	9d 89       	ldd	r25, Y+21	; 0x15
     4e0:	08 17       	cp	r16, r24
     4e2:	19 07       	cpc	r17, r25
     4e4:	41 f0       	breq	.+16     	; 0x4f6 <main+0x348>
				{
					glcd_set(6,new_val);
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	b8 01       	movw	r22, r16
     4ea:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[2] = new_val;
     4ee:	1d 8b       	std	Y+21, r17	; 0x15
     4f0:	0c 8b       	std	Y+20, r16	; 0x14
     4f2:	e1 e0       	ldi	r30, 0x01	; 1
     4f4:	e8 a7       	std	Y+40, r30	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_otr_fr;
     4f6:	00 91 a4 02 	lds	r16, 0x02A4
     4fa:	10 91 a5 02 	lds	r17, 0x02A5
				if(new_val != last_temps[3])
     4fe:	8e 89       	ldd	r24, Y+22	; 0x16
     500:	9f 89       	ldd	r25, Y+23	; 0x17
     502:	08 17       	cp	r16, r24
     504:	19 07       	cpc	r17, r25
     506:	41 f0       	breq	.+16     	; 0x518 <main+0x36a>
				{
					glcd_set(7,new_val);
     508:	87 e0       	ldi	r24, 0x07	; 7
     50a:	b8 01       	movw	r22, r16
     50c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[3] = new_val;
     510:	1f 8b       	std	Y+23, r17	; 0x17
     512:	0e 8b       	std	Y+22, r16	; 0x16
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	f8 a7       	std	Y+40, r31	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fr;
     518:	00 91 a2 02 	lds	r16, 0x02A2
     51c:	10 91 a3 02 	lds	r17, 0x02A3
				if(new_val != last_temps[4])
     520:	88 8d       	ldd	r24, Y+24	; 0x18
     522:	99 8d       	ldd	r25, Y+25	; 0x19
     524:	08 17       	cp	r16, r24
     526:	19 07       	cpc	r17, r25
     528:	41 f0       	breq	.+16     	; 0x53a <main+0x38c>
				{
					glcd_set(8,new_val);
     52a:	88 e0       	ldi	r24, 0x08	; 8
     52c:	b8 01       	movw	r22, r16
     52e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[4] = new_val;
     532:	19 8f       	std	Y+25, r17	; 0x19
     534:	08 8f       	std	Y+24, r16	; 0x18
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	88 a7       	std	Y+40, r24	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fr;
     53a:	00 91 a0 02 	lds	r16, 0x02A0
     53e:	10 91 a1 02 	lds	r17, 0x02A1
				if(new_val != last_temps[5])
     542:	8a 8d       	ldd	r24, Y+26	; 0x1a
     544:	9b 8d       	ldd	r25, Y+27	; 0x1b
     546:	08 17       	cp	r16, r24
     548:	19 07       	cpc	r17, r25
     54a:	41 f0       	breq	.+16     	; 0x55c <main+0x3ae>
				{
					glcd_set(9,new_val);
     54c:	89 e0       	ldi	r24, 0x09	; 9
     54e:	b8 01       	movw	r22, r16
     550:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[5] = new_val;
     554:	1b 8f       	std	Y+27, r17	; 0x1b
     556:	0a 8f       	std	Y+26, r16	; 0x1a
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	98 a7       	std	Y+40, r25	; 0x28
					updated = 1;
				}
				//-------------
				new_val = data[0].ttemp_otr_rl;
     55c:	00 91 aa 02 	lds	r16, 0x02AA
     560:	10 91 ab 02 	lds	r17, 0x02AB
				if(new_val != last_temps[6])
     564:	8c 8d       	ldd	r24, Y+28	; 0x1c
     566:	9d 8d       	ldd	r25, Y+29	; 0x1d
     568:	08 17       	cp	r16, r24
     56a:	19 07       	cpc	r17, r25
     56c:	41 f0       	breq	.+16     	; 0x57e <main+0x3d0>
				{
					glcd_set(10,new_val);
     56e:	8a e0       	ldi	r24, 0x0A	; 10
     570:	b8 01       	movw	r22, r16
     572:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[6] = new_val;
     576:	1d 8f       	std	Y+29, r17	; 0x1d
     578:	0c 8f       	std	Y+28, r16	; 0x1c
     57a:	a1 e0       	ldi	r26, 0x01	; 1
     57c:	a8 a7       	std	Y+40, r26	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rl;
     57e:	00 91 a8 02 	lds	r16, 0x02A8
     582:	10 91 a9 02 	lds	r17, 0x02A9
				if(new_val != last_temps[7])
     586:	8e 8d       	ldd	r24, Y+30	; 0x1e
     588:	9f 8d       	ldd	r25, Y+31	; 0x1f
     58a:	08 17       	cp	r16, r24
     58c:	19 07       	cpc	r17, r25
     58e:	41 f0       	breq	.+16     	; 0x5a0 <main+0x3f2>
				{
					glcd_set(11,new_val);
     590:	8b e0       	ldi	r24, 0x0B	; 11
     592:	b8 01       	movw	r22, r16
     594:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[7] = new_val;
     598:	1f 8f       	std	Y+31, r17	; 0x1f
     59a:	0e 8f       	std	Y+30, r16	; 0x1e
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	b8 a7       	std	Y+40, r27	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rl;
     5a0:	00 91 a6 02 	lds	r16, 0x02A6
     5a4:	10 91 a7 02 	lds	r17, 0x02A7
				if(new_val != last_temps[8])
     5a8:	88 a1       	ldd	r24, Y+32	; 0x20
     5aa:	99 a1       	ldd	r25, Y+33	; 0x21
     5ac:	08 17       	cp	r16, r24
     5ae:	19 07       	cpc	r17, r25
     5b0:	41 f0       	breq	.+16     	; 0x5c2 <main+0x414>
				{
					glcd_set(12,new_val);
     5b2:	8c e0       	ldi	r24, 0x0C	; 12
     5b4:	b8 01       	movw	r22, r16
     5b6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[8] = new_val;
     5ba:	19 a3       	std	Y+33, r17	; 0x21
     5bc:	08 a3       	std	Y+32, r16	; 0x20
     5be:	e1 e0       	ldi	r30, 0x01	; 1
     5c0:	e8 a7       	std	Y+40, r30	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_otr_rr;
     5c2:	00 91 b0 02 	lds	r16, 0x02B0
     5c6:	10 91 b1 02 	lds	r17, 0x02B1
				if(new_val != last_temps[9])
     5ca:	8a a1       	ldd	r24, Y+34	; 0x22
     5cc:	9b a1       	ldd	r25, Y+35	; 0x23
     5ce:	08 17       	cp	r16, r24
     5d0:	19 07       	cpc	r17, r25
     5d2:	41 f0       	breq	.+16     	; 0x5e4 <main+0x436>
				{
					glcd_set(13,new_val);
     5d4:	8d e0       	ldi	r24, 0x0D	; 13
     5d6:	b8 01       	movw	r22, r16
     5d8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[9] = new_val;
     5dc:	1b a3       	std	Y+35, r17	; 0x23
     5de:	0a a3       	std	Y+34, r16	; 0x22
     5e0:	f1 e0       	ldi	r31, 0x01	; 1
     5e2:	f8 a7       	std	Y+40, r31	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rr;
     5e4:	00 91 ae 02 	lds	r16, 0x02AE
     5e8:	10 91 af 02 	lds	r17, 0x02AF
				if(new_val != last_temps[10])
     5ec:	8c a1       	ldd	r24, Y+36	; 0x24
     5ee:	9d a1       	ldd	r25, Y+37	; 0x25
     5f0:	08 17       	cp	r16, r24
     5f2:	19 07       	cpc	r17, r25
     5f4:	41 f0       	breq	.+16     	; 0x606 <main+0x458>
				{
					glcd_set(14,new_val);
     5f6:	8e e0       	ldi	r24, 0x0E	; 14
     5f8:	b8 01       	movw	r22, r16
     5fa:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[10] = new_val;
     5fe:	1d a3       	std	Y+37, r17	; 0x25
     600:	0c a3       	std	Y+36, r16	; 0x24
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	88 a7       	std	Y+40, r24	; 0x28
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rr;
     606:	00 91 ac 02 	lds	r16, 0x02AC
     60a:	10 91 ad 02 	lds	r17, 0x02AD
				if(new_val != last_temps[11])
     60e:	8e a1       	ldd	r24, Y+38	; 0x26
     610:	9f a1       	ldd	r25, Y+39	; 0x27
     612:	08 17       	cp	r16, r24
     614:	19 07       	cpc	r17, r25
     616:	41 f0       	breq	.+16     	; 0x628 <main+0x47a>
				{
					glcd_set(15,new_val);
     618:	8f e0       	ldi	r24, 0x0F	; 15
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <glcd_set>
					last_temps[11] = new_val;
     620:	1f a3       	std	Y+39, r17	; 0x27
     622:	0e a3       	std	Y+38, r16	; 0x26
     624:	cc 24       	eor	r12, r12
     626:	06 c0       	rjmp	.+12     	; 0x634 <main+0x486>
     628:	cc 24       	eor	r12, r12
					updated = 1;
				}
			}

			if(updated == 1)
     62a:	98 a5       	ldd	r25, Y+40	; 0x28
     62c:	91 30       	cpi	r25, 0x01	; 1
     62e:	11 f0       	breq	.+4      	; 0x634 <main+0x486>
     630:	19 a6       	std	Y+41, r1	; 0x29
     632:	04 c0       	rjmp	.+8      	; 0x63c <main+0x48e>
			{
				glcd_update();
     634:	0e 94 35 0a 	call	0x146a	; 0x146a <glcd_update>
     638:	19 a6       	std	Y+41, r1	; 0x29
     63a:	18 a6       	std	Y+40, r1	; 0x28
			break;
		default:
			break;
		}

		if(last_btn != 0)
     63c:	80 91 b2 01 	lds	r24, 0x01B2
     640:	88 23       	and	r24, r24
     642:	09 f4       	brne	.+2      	; 0x646 <main+0x498>
     644:	7c ce       	rjmp	.-776    	; 0x33e <main+0x190>
		{
			b = last_btn;
     646:	80 91 b2 01 	lds	r24, 0x01B2
			last_btn = 0;
     64a:	10 92 b2 01 	sts	0x01B2, r1

			if(b == BTN_R_PSHD)
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	39 f4       	brne	.+14     	; 0x660 <main+0x4b2>
			{
				if(page != 2)
     652:	aa a5       	ldd	r26, Y+42	; 0x2a
     654:	a2 30       	cpi	r26, 0x02	; 2
     656:	09 f4       	brne	.+2      	; 0x65a <main+0x4ac>
     658:	72 ce       	rjmp	.-796    	; 0x33e <main+0x190>
     65a:	b2 e0       	ldi	r27, 0x02	; 2
     65c:	ba a7       	std	Y+42, r27	; 0x2a
     65e:	c7 ce       	rjmp	.-626    	; 0x3ee <main+0x240>
					page = 2;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_L_PSHD)
     660:	87 30       	cpi	r24, 0x07	; 7
     662:	39 f4       	brne	.+14     	; 0x672 <main+0x4c4>
			{
				if(page != 1)
     664:	ea a5       	ldd	r30, Y+42	; 0x2a
     666:	e1 30       	cpi	r30, 0x01	; 1
     668:	09 f4       	brne	.+2      	; 0x66c <main+0x4be>
     66a:	69 ce       	rjmp	.-814    	; 0x33e <main+0x190>
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	fa a7       	std	Y+42, r31	; 0x2a
     670:	70 ce       	rjmp	.-800    	; 0x352 <main+0x1a4>
					page = 1;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_1_PSHD)
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	29 f4       	brne	.+10     	; 0x680 <main+0x4d2>
			{
				dlg_pkt.id = CAN_DATA_DLGR_TGL;
				dlg_pkt.id = dlg_pkt.id <<8 | 0x10000000;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	93 ee       	ldi	r25, 0xE3	; 227
     67a:	af ef       	ldi	r26, 0xFF	; 255
     67c:	b0 e1       	ldi	r27, 0x10	; 16
     67e:	12 c0       	rjmp	.+36     	; 0x6a4 <main+0x4f6>
				can_tx(get_open_mob(),&dlg_pkt);
			}
			else if((b == BTN_2_PSHD))
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	51 f4       	brne	.+20     	; 0x698 <main+0x4ea>
			{
				dlg_pkt.id = CAN_DATA_TC_TGL;
				dlg_pkt.id = dlg_pkt.id <<8 | 0x10000000;
     684:	29 82       	std	Y+1, r2	; 0x01
     686:	3a 82       	std	Y+2, r3	; 0x02
     688:	4b 82       	std	Y+3, r4	; 0x03
     68a:	5c 82       	std	Y+4, r5	; 0x04
				can_tx(get_open_mob(),&dlg_pkt);
     68c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <get_open_mob>
     690:	b3 01       	movw	r22, r6
     692:	0e 94 07 08 	call	0x100e	; 0x100e <can_tx>
     696:	53 ce       	rjmp	.-858    	; 0x33e <main+0x190>
			}
			else if((b==BTN_3_PSHD))
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	49 f4       	brne	.+18     	; 0x6ae <main+0x500>
			{
				dlg_pkt.id = CAN_DATA_LC_TGL;
				dlg_pkt.id = dlg_pkt.id <<8 | 0x10000000;
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	95 ee       	ldi	r25, 0xE5	; 229
     6a0:	af ef       	ldi	r26, 0xFF	; 255
     6a2:	b0 e1       	ldi	r27, 0x10	; 16
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	9a 83       	std	Y+2, r25	; 0x02
     6a8:	ab 83       	std	Y+3, r26	; 0x03
     6aa:	bc 83       	std	Y+4, r27	; 0x04
     6ac:	ef cf       	rjmp	.-34     	; 0x68c <main+0x4de>
				can_tx(get_open_mob(),&dlg_pkt);
			}
			else if((b==BTN_4_PSHD))
     6ae:	84 30       	cpi	r24, 0x04	; 4
     6b0:	59 f4       	brne	.+22     	; 0x6c8 <main+0x51a>
			{
				 if(frozen == 1) frozen = 0;
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	c9 16       	cp	r12, r25
     6b6:	11 f4       	brne	.+4      	; 0x6bc <main+0x50e>
     6b8:	cc 24       	eor	r12, r12
     6ba:	41 ce       	rjmp	.-894    	; 0x33e <main+0x190>
				 else if(frozen == 0) frozen = 1;
     6bc:	cc 20       	and	r12, r12
     6be:	09 f0       	breq	.+2      	; 0x6c2 <main+0x514>
     6c0:	3e ce       	rjmp	.-900    	; 0x33e <main+0x190>
     6c2:	cc 24       	eor	r12, r12
     6c4:	c3 94       	inc	r12
     6c6:	3b ce       	rjmp	.-906    	; 0x33e <main+0x190>
			}
			else if((b==BTN_C_PSHD))
     6c8:	89 30       	cpi	r24, 0x09	; 9
     6ca:	09 f0       	breq	.+2      	; 0x6ce <main+0x520>
     6cc:	38 ce       	rjmp	.-912    	; 0x33e <main+0x190>
			{
				if(data[0].rpm_mode == RPM_ON)
     6ce:	80 91 df 02 	lds	r24, 0x02DF
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	19 f4       	brne	.+6      	; 0x6dc <main+0x52e>
				{
					data[0].rpm_mode = RPM_OFF;
     6d6:	10 92 df 02 	sts	0x02DF, r1
     6da:	31 ce       	rjmp	.-926    	; 0x33e <main+0x190>
				}
				else
				{
					data[0].rpm_mode = RPM_ON;
     6dc:	a1 e0       	ldi	r26, 0x01	; 1
     6de:	a0 93 df 02 	sts	0x02DF, r26
     6e2:	2d ce       	rjmp	.-934    	; 0x33e <main+0x190>

000006e4 <ProcessCanMsg>:

	return (rpm*mult)/1000;
}

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	uint8_t msg_type;

	unsigned char i;

	// Get the Message Type
	msg_type = pkt->msg_type;
     6f4:	dd 80       	ldd	r13, Y+5	; 0x05
	// Clear the message type in the lookup table

	uint16_t id = (uint16_t)((uint32_t)(pkt->id)>>8);
     6f6:	e8 80       	ld	r14, Y
     6f8:	f9 80       	ldd	r15, Y+1	; 0x01
     6fa:	0a 81       	ldd	r16, Y+2	; 0x02
     6fc:	1b 81       	ldd	r17, Y+3	; 0x03

	printf("CAN ID: %04X%04X\n",(uint16_t)(pkt->id >> 16),(uint16_t)pkt->id);
     6fe:	00 d0       	rcall	.+0      	; 0x700 <ProcessCanMsg+0x1c>
     700:	00 d0       	rcall	.+0      	; 0x702 <ProcessCanMsg+0x1e>
     702:	00 d0       	rcall	.+0      	; 0x704 <ProcessCanMsg+0x20>
     704:	ed b7       	in	r30, 0x3d	; 61
     706:	fe b7       	in	r31, 0x3e	; 62
     708:	31 96       	adiw	r30, 0x01	; 1
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	ad b7       	in	r26, 0x3d	; 61
     710:	be b7       	in	r27, 0x3e	; 62
     712:	12 96       	adiw	r26, 0x02	; 2
     714:	9c 93       	st	X, r25
     716:	8e 93       	st	-X, r24
     718:	11 97       	sbiw	r26, 0x01	; 1
     71a:	c8 01       	movw	r24, r16
     71c:	aa 27       	eor	r26, r26
     71e:	bb 27       	eor	r27, r27
     720:	93 83       	std	Z+3, r25	; 0x03
     722:	82 83       	std	Z+2, r24	; 0x02
     724:	f5 82       	std	Z+5, r15	; 0x05
     726:	e4 82       	std	Z+4, r14	; 0x04
     728:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <printf>

	switch(msg_type)
     72c:	8d b7       	in	r24, 0x3d	; 61
     72e:	9e b7       	in	r25, 0x3e	; 62
     730:	06 96       	adiw	r24, 0x06	; 6
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	9e bf       	out	0x3e, r25	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	8d bf       	out	0x3d, r24	; 61
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	d9 16       	cp	r13, r25
     740:	09 f0       	breq	.+2      	; 0x744 <ProcessCanMsg+0x60>
     742:	67 c3       	rjmp	.+1742   	; 0xe12 <ProcessCanMsg+0x72e>
	{
		case CAN_MSGTYPE_NONE:
			return(0);
		case CAN_DATABRDCST:
			data_chg = 1;
     744:	d0 92 48 01 	sts	0x0148, r13

			switch(id)
     748:	bb 27       	eor	r27, r27
     74a:	a1 2f       	mov	r26, r17
     74c:	90 2f       	mov	r25, r16
     74e:	8f 2d       	mov	r24, r15
     750:	fc 01       	movw	r30, r24
     752:	f0 96       	adiw	r30, 0x30	; 48
     754:	e7 32       	cpi	r30, 0x27	; 39
     756:	f1 05       	cpc	r31, r1
     758:	08 f0       	brcs	.+2      	; 0x75c <ProcessCanMsg+0x78>
     75a:	5b c3       	rjmp	.+1718   	; 0xe12 <ProcessCanMsg+0x72e>
     75c:	e6 5b       	subi	r30, 0xB6	; 182
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	ee 0f       	add	r30, r30
     762:	ff 1f       	adc	r31, r31
     764:	05 90       	lpm	r0, Z+
     766:	f4 91       	lpm	r31, Z+
     768:	e0 2d       	mov	r30, r0
     76a:	09 94       	ijmp
			{
				case CAN_DATA_PE1:
					//led_ctrl(LED1,LED_ON,LED_NO_TMR);
					data[0].rpm = ch2word(pkt->data[1],pkt->data[0]);
     76c:	98 85       	ldd	r25, Y+8	; 0x08
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	2f 81       	ldd	r18, Y+7	; 0x07
     772:	82 0f       	add	r24, r18
     774:	91 1d       	adc	r25, r1
     776:	90 93 2a 02 	sts	0x022A, r25
     77a:	80 93 29 02 	sts	0x0229, r24
					data[0].tps = ch2word(pkt->data[3],pkt->data[2]);
     77e:	9a 85       	ldd	r25, Y+10	; 0x0a
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	29 85       	ldd	r18, Y+9	; 0x09
     784:	82 0f       	add	r24, r18
     786:	91 1d       	adc	r25, r1
     788:	90 93 2c 02 	sts	0x022C, r25
     78c:	80 93 2b 02 	sts	0x022B, r24
					data[0].fuel_open_time = ch2word(pkt->data[5],pkt->data[4]);
     790:	9c 85       	ldd	r25, Y+12	; 0x0c
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	2b 85       	ldd	r18, Y+11	; 0x0b
     796:	82 0f       	add	r24, r18
     798:	91 1d       	adc	r25, r1
     79a:	90 93 2e 02 	sts	0x022E, r25
     79e:	80 93 2d 02 	sts	0x022D, r24
					data[0].ign_angle = ch2word(pkt->data[7],pkt->data[6]);
     7a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	2d 85       	ldd	r18, Y+13	; 0x0d
     7a8:	82 0f       	add	r24, r18
     7aa:	91 1d       	adc	r25, r1
     7ac:	90 93 30 02 	sts	0x0230, r25
     7b0:	80 93 2f 02 	sts	0x022F, r24
					data[0].rpm_disp = Calc_RPM_Disp(data[0].rpm);
     7b4:	60 91 29 02 	lds	r22, 0x0229
     7b8:	70 91 2a 02 	lds	r23, 0x022A
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 93 00 	call	0x126	; 0x126 <Calc_RPM_Disp>
     7c4:	60 93 d7 02 	sts	0x02D7, r22
     7c8:	70 93 d8 02 	sts	0x02D8, r23
     7cc:	80 93 d9 02 	sts	0x02D9, r24
     7d0:	90 93 da 02 	sts	0x02DA, r25
     7d4:	1f c3       	rjmp	.+1598   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE2:
					data[0].barometer = ch2word(pkt->data[1],pkt->data[0]);
     7d6:	98 85       	ldd	r25, Y+8	; 0x08
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	82 0f       	add	r24, r18
     7de:	91 1d       	adc	r25, r1
     7e0:	90 93 32 02 	sts	0x0232, r25
     7e4:	80 93 31 02 	sts	0x0231, r24
					data[0].map = ch2word(pkt->data[3],pkt->data[2]);
     7e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	29 85       	ldd	r18, Y+9	; 0x09
     7ee:	82 0f       	add	r24, r18
     7f0:	91 1d       	adc	r25, r1
     7f2:	90 93 34 02 	sts	0x0234, r25
     7f6:	80 93 33 02 	sts	0x0233, r24
					data[0].lambda = ch2word(pkt->data[5],pkt->data[4]);
     7fa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     800:	82 0f       	add	r24, r18
     802:	91 1d       	adc	r25, r1
     804:	90 93 36 02 	sts	0x0236, r25
     808:	80 93 35 02 	sts	0x0235, r24
     80c:	03 c3       	rjmp	.+1542   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE3:
					data[0].pe3_a1 = ch2word(pkt->data[1],pkt->data[0]);
     80e:	98 85       	ldd	r25, Y+8	; 0x08
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	2f 81       	ldd	r18, Y+7	; 0x07
     814:	82 0f       	add	r24, r18
     816:	91 1d       	adc	r25, r1
     818:	90 93 38 02 	sts	0x0238, r25
     81c:	80 93 37 02 	sts	0x0237, r24
					data[0].pe3_a2 = ch2word(pkt->data[3],pkt->data[2]);
     820:	9a 85       	ldd	r25, Y+10	; 0x0a
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	29 85       	ldd	r18, Y+9	; 0x09
     826:	82 0f       	add	r24, r18
     828:	91 1d       	adc	r25, r1
     82a:	90 93 3a 02 	sts	0x023A, r25
     82e:	80 93 39 02 	sts	0x0239, r24
					data[0].pe3_a3 = ch2word(pkt->data[5],pkt->data[4]);
     832:	9c 85       	ldd	r25, Y+12	; 0x0c
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	2b 85       	ldd	r18, Y+11	; 0x0b
     838:	82 0f       	add	r24, r18
     83a:	91 1d       	adc	r25, r1
     83c:	90 93 3c 02 	sts	0x023C, r25
     840:	80 93 3b 02 	sts	0x023B, r24
					data[0].pe3_a4 = ch2word(pkt->data[7],pkt->data[6]);
     844:	9e 85       	ldd	r25, Y+14	; 0x0e
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	2d 85       	ldd	r18, Y+13	; 0x0d
     84a:	82 0f       	add	r24, r18
     84c:	91 1d       	adc	r25, r1
     84e:	90 93 3e 02 	sts	0x023E, r25
     852:	80 93 3d 02 	sts	0x023D, r24
     856:	de c2       	rjmp	.+1468   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE4:
					data[0].pe3_a5 = ch2word(pkt->data[1],pkt->data[0]);
     858:	98 85       	ldd	r25, Y+8	; 0x08
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	2f 81       	ldd	r18, Y+7	; 0x07
     85e:	82 0f       	add	r24, r18
     860:	91 1d       	adc	r25, r1
     862:	90 93 40 02 	sts	0x0240, r25
     866:	80 93 3f 02 	sts	0x023F, r24
					data[0].pe3_a6 = ch2word(pkt->data[3],pkt->data[2]);
     86a:	9a 85       	ldd	r25, Y+10	; 0x0a
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	29 85       	ldd	r18, Y+9	; 0x09
     870:	82 0f       	add	r24, r18
     872:	91 1d       	adc	r25, r1
     874:	90 93 42 02 	sts	0x0242, r25
     878:	80 93 41 02 	sts	0x0241, r24
					data[0].pe3_a7 = ch2word(pkt->data[5],pkt->data[4]);
     87c:	9c 85       	ldd	r25, Y+12	; 0x0c
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	2b 85       	ldd	r18, Y+11	; 0x0b
     882:	82 0f       	add	r24, r18
     884:	91 1d       	adc	r25, r1
     886:	90 93 44 02 	sts	0x0244, r25
     88a:	80 93 43 02 	sts	0x0243, r24
					data[0].pe3_a8 = ch2word(pkt->data[7],pkt->data[6]);
     88e:	9e 85       	ldd	r25, Y+14	; 0x0e
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	2d 85       	ldd	r18, Y+13	; 0x0d
     894:	82 0f       	add	r24, r18
     896:	91 1d       	adc	r25, r1
     898:	90 93 46 02 	sts	0x0246, r25
     89c:	80 93 45 02 	sts	0x0245, r24
     8a0:	b9 c2       	rjmp	.+1394   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE5:
					data[0].freq1 = ch2word(pkt->data[1],pkt->data[0]);
     8a2:	98 85       	ldd	r25, Y+8	; 0x08
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	82 0f       	add	r24, r18
     8aa:	91 1d       	adc	r25, r1
     8ac:	90 93 48 02 	sts	0x0248, r25
     8b0:	80 93 47 02 	sts	0x0247, r24
					data[0].freq2 = ch2word(pkt->data[3],pkt->data[2]);
     8b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	29 85       	ldd	r18, Y+9	; 0x09
     8ba:	82 0f       	add	r24, r18
     8bc:	91 1d       	adc	r25, r1
     8be:	90 93 4a 02 	sts	0x024A, r25
     8c2:	80 93 49 02 	sts	0x0249, r24
					data[0].freq3 = ch2word(pkt->data[5],pkt->data[4]);
     8c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     8cc:	82 0f       	add	r24, r18
     8ce:	91 1d       	adc	r25, r1
     8d0:	90 93 4c 02 	sts	0x024C, r25
     8d4:	80 93 4b 02 	sts	0x024B, r24
					data[0].freq4 = ch2word(pkt->data[7],pkt->data[6]);
     8d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	2d 85       	ldd	r18, Y+13	; 0x0d
     8de:	82 0f       	add	r24, r18
     8e0:	91 1d       	adc	r25, r1
     8e2:	90 93 4e 02 	sts	0x024E, r25
     8e6:	80 93 4d 02 	sts	0x024D, r24
     8ea:	94 c2       	rjmp	.+1320   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE6:
					data[0].batt_volt = ch2word(pkt->data[1],pkt->data[0]);
     8ec:	98 85       	ldd	r25, Y+8	; 0x08
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	2f 81       	ldd	r18, Y+7	; 0x07
     8f2:	82 0f       	add	r24, r18
     8f4:	91 1d       	adc	r25, r1
     8f6:	90 93 50 02 	sts	0x0250, r25
     8fa:	80 93 4f 02 	sts	0x024F, r24
					data[0].air_temp = ch2word(pkt->data[3],pkt->data[2]);
     8fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	29 85       	ldd	r18, Y+9	; 0x09
     904:	82 0f       	add	r24, r18
     906:	91 1d       	adc	r25, r1
     908:	90 93 52 02 	sts	0x0252, r25
     90c:	80 93 51 02 	sts	0x0251, r24
					data[0].wtr_temp = ch2word(pkt->data[5],pkt->data[4]);
     910:	9c 85       	ldd	r25, Y+12	; 0x0c
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	2b 85       	ldd	r18, Y+11	; 0x0b
     916:	82 0f       	add	r24, r18
     918:	91 1d       	adc	r25, r1
     91a:	90 93 54 02 	sts	0x0254, r25
     91e:	80 93 53 02 	sts	0x0253, r24
     922:	78 c2       	rjmp	.+1264   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_PE7:
					data[0].therm5 = ch2word(pkt->data[1],pkt->data[0]);
     924:	98 85       	ldd	r25, Y+8	; 0x08
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	2f 81       	ldd	r18, Y+7	; 0x07
     92a:	82 0f       	add	r24, r18
     92c:	91 1d       	adc	r25, r1
     92e:	90 93 56 02 	sts	0x0256, r25
     932:	80 93 55 02 	sts	0x0255, r24
					data[0].therm6 = ch2word(pkt->data[3],pkt->data[2]);
     936:	9a 85       	ldd	r25, Y+10	; 0x0a
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	29 85       	ldd	r18, Y+9	; 0x09
     93c:	82 0f       	add	r24, r18
     93e:	91 1d       	adc	r25, r1
     940:	90 93 58 02 	sts	0x0258, r25
     944:	80 93 57 02 	sts	0x0257, r24
					data[0].ver_mjr = pkt->data[4];
     948:	8b 85       	ldd	r24, Y+11	; 0x0b
     94a:	80 93 59 02 	sts	0x0259, r24
					data[0].ver_min = pkt->data[5];
     94e:	8c 85       	ldd	r24, Y+12	; 0x0c
     950:	80 93 5a 02 	sts	0x025A, r24
					data[0].ver_bld = pkt->data[6];
     954:	8d 85       	ldd	r24, Y+13	; 0x0d
     956:	80 93 5b 02 	sts	0x025B, r24
     95a:	5c c2       	rjmp	.+1208   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_TCS1:
					data[0].TCS_status = pkt->data[0];
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	80 93 5c 02 	sts	0x025C, r24
					data[0].trac_status = pkt->data[1];
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	80 93 5d 02 	sts	0x025D, r24
					data[0].lnc_status = pkt->data[2];
     968:	89 85       	ldd	r24, Y+9	; 0x09
     96a:	80 93 5e 02 	sts	0x025E, r24
					data[0].lnc_dsb_spd = ch2word(pkt->data[3],pkt->data[4]);
     96e:	9a 85       	ldd	r25, Y+10	; 0x0a
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	2b 85       	ldd	r18, Y+11	; 0x0b
     974:	82 0f       	add	r24, r18
     976:	91 1d       	adc	r25, r1
     978:	90 93 60 02 	sts	0x0260, r25
     97c:	80 93 5f 02 	sts	0x025F, r24
     980:	49 c2       	rjmp	.+1170   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_TCS2:
					data[0].fuel_slip_err = ch2word(pkt->data[0],pkt->data[1]);
     982:	9f 81       	ldd	r25, Y+7	; 0x07
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	28 85       	ldd	r18, Y+8	; 0x08
     988:	82 0f       	add	r24, r18
     98a:	91 1d       	adc	r25, r1
     98c:	90 93 62 02 	sts	0x0262, r25
     990:	80 93 61 02 	sts	0x0261, r24
					data[0].fuel_comp = ch2word(pkt->data[2],pkt->data[3]);
     994:	99 85       	ldd	r25, Y+9	; 0x09
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	2a 85       	ldd	r18, Y+10	; 0x0a
     99a:	82 0f       	add	r24, r18
     99c:	91 1d       	adc	r25, r1
     99e:	90 93 64 02 	sts	0x0264, r25
     9a2:	80 93 63 02 	sts	0x0263, r24
					data[0].timing_err = ch2word(pkt->data[4],pkt->data[5]);
     9a6:	9b 85       	ldd	r25, Y+11	; 0x0b
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	2c 85       	ldd	r18, Y+12	; 0x0c
     9ac:	82 0f       	add	r24, r18
     9ae:	91 1d       	adc	r25, r1
     9b0:	90 93 66 02 	sts	0x0266, r25
     9b4:	80 93 65 02 	sts	0x0265, r24
					data[0].timing_comp = ch2word(pkt->data[6],pkt->data[7]);
     9b8:	9d 85       	ldd	r25, Y+13	; 0x0d
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	2e 85       	ldd	r18, Y+14	; 0x0e
     9be:	82 0f       	add	r24, r18
     9c0:	91 1d       	adc	r25, r1
     9c2:	90 93 68 02 	sts	0x0268, r25
     9c6:	80 93 67 02 	sts	0x0267, r24
     9ca:	24 c2       	rjmp	.+1096   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_TCS3:
					data[0].tcs_a0 = ch2word(pkt->data[0],pkt->data[1]);
     9cc:	9f 81       	ldd	r25, Y+7	; 0x07
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	28 85       	ldd	r18, Y+8	; 0x08
     9d2:	82 0f       	add	r24, r18
     9d4:	91 1d       	adc	r25, r1
     9d6:	90 93 6a 02 	sts	0x026A, r25
     9da:	80 93 69 02 	sts	0x0269, r24
					data[0].tcs_a1 = ch2word(pkt->data[2],pkt->data[3]);
     9de:	99 85       	ldd	r25, Y+9	; 0x09
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	2a 85       	ldd	r18, Y+10	; 0x0a
     9e4:	82 0f       	add	r24, r18
     9e6:	91 1d       	adc	r25, r1
     9e8:	90 93 6c 02 	sts	0x026C, r25
     9ec:	80 93 6b 02 	sts	0x026B, r24
					data[0].tcs_a2 = ch2word(pkt->data[4],pkt->data[5]);
     9f0:	9b 85       	ldd	r25, Y+11	; 0x0b
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	2c 85       	ldd	r18, Y+12	; 0x0c
     9f6:	82 0f       	add	r24, r18
     9f8:	91 1d       	adc	r25, r1
     9fa:	90 93 6e 02 	sts	0x026E, r25
     9fe:	80 93 6d 02 	sts	0x026D, r24
					data[0].tcs_a3 = ch2word(pkt->data[6],pkt->data[7]);
     a02:	9d 85       	ldd	r25, Y+13	; 0x0d
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	2e 85       	ldd	r18, Y+14	; 0x0e
     a08:	82 0f       	add	r24, r18
     a0a:	91 1d       	adc	r25, r1
     a0c:	90 93 70 02 	sts	0x0270, r25
     a10:	80 93 6f 02 	sts	0x026F, r24
     a14:	ff c1       	rjmp	.+1022   	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_TCS4:
					data[0].fuel_kp = pkt->data[0];
     a16:	8f 81       	ldd	r24, Y+7	; 0x07
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	90 93 72 02 	sts	0x0272, r25
     a1e:	80 93 71 02 	sts	0x0271, r24
					data[0].fuel_kd = pkt->data[1];
     a22:	88 85       	ldd	r24, Y+8	; 0x08
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	90 93 74 02 	sts	0x0274, r25
     a2a:	80 93 73 02 	sts	0x0273, r24
					data[0].fuel_ki = pkt->data[2];
     a2e:	89 85       	ldd	r24, Y+9	; 0x09
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	90 93 76 02 	sts	0x0276, r25
     a36:	80 93 75 02 	sts	0x0275, r24
					data[0].timing_kp = pkt->data[3];
     a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	90 93 78 02 	sts	0x0278, r25
     a42:	80 93 77 02 	sts	0x0277, r24
					data[0].timing_kd = pkt->data[4];
     a46:	8b 85       	ldd	r24, Y+11	; 0x0b
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	90 93 7a 02 	sts	0x027A, r25
     a4e:	80 93 79 02 	sts	0x0279, r24
					data[0].timing_ki = pkt->data[5];
     a52:	8c 85       	ldd	r24, Y+12	; 0x0c
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 7c 02 	sts	0x027C, r25
     a5a:	80 93 7b 02 	sts	0x027B, r24
     a5e:	da c1       	rjmp	.+948    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_IMU1:
					data[0].IMU_status = pkt->data[0];
     a60:	8f 81       	ldd	r24, Y+7	; 0x07
     a62:	80 93 7d 02 	sts	0x027D, r24
					data[0].x_comp = ch2word(pkt->data[1],pkt->data[2]);
     a66:	98 85       	ldd	r25, Y+8	; 0x08
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	29 85       	ldd	r18, Y+9	; 0x09
     a6c:	82 0f       	add	r24, r18
     a6e:	91 1d       	adc	r25, r1
     a70:	90 93 7f 02 	sts	0x027F, r25
     a74:	80 93 7e 02 	sts	0x027E, r24
					data[0].y_comp = ch2word(pkt->data[3],pkt->data[4]);
     a78:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	2b 85       	ldd	r18, Y+11	; 0x0b
     a7e:	82 0f       	add	r24, r18
     a80:	91 1d       	adc	r25, r1
     a82:	90 93 81 02 	sts	0x0281, r25
     a86:	80 93 80 02 	sts	0x0280, r24
					data[0].z_comp = ch2word(pkt->data[5],pkt->data[6]);
     a8a:	9c 85       	ldd	r25, Y+12	; 0x0c
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     a90:	82 0f       	add	r24, r18
     a92:	91 1d       	adc	r25, r1
     a94:	90 93 83 02 	sts	0x0283, r25
     a98:	80 93 82 02 	sts	0x0282, r24
     a9c:	bb c1       	rjmp	.+886    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_IMU2:
					data[0].acl_x = ch2word(pkt->data[0],pkt->data[1]);
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	28 85       	ldd	r18, Y+8	; 0x08
     aa4:	82 0f       	add	r24, r18
     aa6:	91 1d       	adc	r25, r1
     aa8:	90 93 85 02 	sts	0x0285, r25
     aac:	80 93 84 02 	sts	0x0284, r24
					data[0].acl_y = ch2word(pkt->data[2],pkt->data[3]);
     ab0:	99 85       	ldd	r25, Y+9	; 0x09
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	2a 85       	ldd	r18, Y+10	; 0x0a
     ab6:	82 0f       	add	r24, r18
     ab8:	91 1d       	adc	r25, r1
     aba:	90 93 87 02 	sts	0x0287, r25
     abe:	80 93 86 02 	sts	0x0286, r24
					data[0].acl_z = ch2word(pkt->data[4],pkt->data[5]);
     ac2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ac8:	82 0f       	add	r24, r18
     aca:	91 1d       	adc	r25, r1
     acc:	90 93 89 02 	sts	0x0289, r25
     ad0:	80 93 88 02 	sts	0x0288, r24
     ad4:	9f c1       	rjmp	.+830    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_IMU3:
					data[0].gyro_x = ch2word(pkt->data[0],pkt->data[1]);
     ad6:	9f 81       	ldd	r25, Y+7	; 0x07
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	28 85       	ldd	r18, Y+8	; 0x08
     adc:	82 0f       	add	r24, r18
     ade:	91 1d       	adc	r25, r1
     ae0:	90 93 8b 02 	sts	0x028B, r25
     ae4:	80 93 8a 02 	sts	0x028A, r24
					data[0].gyro_y = ch2word(pkt->data[2],pkt->data[3]);
     ae8:	99 85       	ldd	r25, Y+9	; 0x09
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	2a 85       	ldd	r18, Y+10	; 0x0a
     aee:	82 0f       	add	r24, r18
     af0:	91 1d       	adc	r25, r1
     af2:	90 93 8d 02 	sts	0x028D, r25
     af6:	80 93 8c 02 	sts	0x028C, r24
					data[0].gyro_z = ch2word(pkt->data[4],pkt->data[5]);
     afa:	9b 85       	ldd	r25, Y+11	; 0x0b
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	2c 85       	ldd	r18, Y+12	; 0x0c
     b00:	82 0f       	add	r24, r18
     b02:	91 1d       	adc	r25, r1
     b04:	90 93 8f 02 	sts	0x028F, r25
     b08:	80 93 8e 02 	sts	0x028E, r24
     b0c:	83 c1       	rjmp	.+774    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_IMU4:
					data[0].mag_x = ch2word(pkt->data[0],pkt->data[1]);
     b0e:	9f 81       	ldd	r25, Y+7	; 0x07
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	28 85       	ldd	r18, Y+8	; 0x08
     b14:	82 0f       	add	r24, r18
     b16:	91 1d       	adc	r25, r1
     b18:	90 93 91 02 	sts	0x0291, r25
     b1c:	80 93 90 02 	sts	0x0290, r24
					data[0].mag_y = ch2word(pkt->data[2],pkt->data[3]);
     b20:	99 85       	ldd	r25, Y+9	; 0x09
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	2a 85       	ldd	r18, Y+10	; 0x0a
     b26:	82 0f       	add	r24, r18
     b28:	91 1d       	adc	r25, r1
     b2a:	90 93 93 02 	sts	0x0293, r25
     b2e:	80 93 92 02 	sts	0x0292, r24
					data[0].mag_z = ch2word(pkt->data[4],pkt->data[5]);
     b32:	9b 85       	ldd	r25, Y+11	; 0x0b
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	2c 85       	ldd	r18, Y+12	; 0x0c
     b38:	82 0f       	add	r24, r18
     b3a:	91 1d       	adc	r25, r1
     b3c:	90 93 95 02 	sts	0x0295, r25
     b40:	80 93 94 02 	sts	0x0294, r24
					data[0].mag_heading = ch2word(pkt->data[6],pkt->data[7]);
     b44:	9d 85       	ldd	r25, Y+13	; 0x0d
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	2e 85       	ldd	r18, Y+14	; 0x0e
     b4a:	82 0f       	add	r24, r18
     b4c:	91 1d       	adc	r25, r1
     b4e:	90 93 97 02 	sts	0x0297, r25
     b52:	80 93 96 02 	sts	0x0296, r24
     b56:	5e c1       	rjmp	.+700    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_STS1:
					data[0].STS_status = ch2word(pkt->data[0],pkt->data[1]);
     b58:	9f 81       	ldd	r25, Y+7	; 0x07
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	28 85       	ldd	r18, Y+8	; 0x08
     b5e:	82 0f       	add	r24, r18
     b60:	91 1d       	adc	r25, r1
     b62:	52 c1       	rjmp	.+676    	; 0xe08 <ProcessCanMsg+0x724>
					return(msg_type);
				case CAN_DATA_STS2:
					data[0].susp_trvl_fl = 0x03FF & ch2word(pkt->data[0],pkt->data[1]);
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	28 85       	ldd	r18, Y+8	; 0x08
     b6a:	82 0f       	add	r24, r18
     b6c:	91 1d       	adc	r25, r1
     b6e:	93 70       	andi	r25, 0x03	; 3
     b70:	90 93 b3 02 	sts	0x02B3, r25
     b74:	80 93 b2 02 	sts	0x02B2, r24
					data[0].susp_trvl_fr = 0x03FF & ch2word(pkt->data[2],pkt->data[3]);
     b78:	99 85       	ldd	r25, Y+9	; 0x09
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	2a 85       	ldd	r18, Y+10	; 0x0a
     b7e:	82 0f       	add	r24, r18
     b80:	91 1d       	adc	r25, r1
     b82:	93 70       	andi	r25, 0x03	; 3
     b84:	90 93 b5 02 	sts	0x02B5, r25
     b88:	80 93 b4 02 	sts	0x02B4, r24
					data[0].susp_trvl_rl = 0x03FF & ch2word(pkt->data[4],pkt->data[5]);
     b8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	2c 85       	ldd	r18, Y+12	; 0x0c
     b92:	82 0f       	add	r24, r18
     b94:	91 1d       	adc	r25, r1
     b96:	93 70       	andi	r25, 0x03	; 3
     b98:	90 93 b7 02 	sts	0x02B7, r25
     b9c:	80 93 b6 02 	sts	0x02B6, r24
					data[0].susp_trvl_rr = 0x03FF & ch2word(pkt->data[6],pkt->data[7]);
     ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	2e 85       	ldd	r18, Y+14	; 0x0e
     ba6:	82 0f       	add	r24, r18
     ba8:	91 1d       	adc	r25, r1
     baa:	93 70       	andi	r25, 0x03	; 3
     bac:	90 93 b9 02 	sts	0x02B9, r25
     bb0:	80 93 b8 02 	sts	0x02B8, r24
     bb4:	2f c1       	rjmp	.+606    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_STS3:
					data[0].ttemp_inr_fl = ch2word(pkt->data[0],pkt->data[1]);
     bb6:	9f 81       	ldd	r25, Y+7	; 0x07
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	28 85       	ldd	r18, Y+8	; 0x08
     bbc:	82 0f       	add	r24, r18
     bbe:	91 1d       	adc	r25, r1
     bc0:	90 93 9b 02 	sts	0x029B, r25
     bc4:	80 93 9a 02 	sts	0x029A, r24
					data[0].ttemp_inr_fr = ch2word(pkt->data[2],pkt->data[3]);
     bc8:	99 85       	ldd	r25, Y+9	; 0x09
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	2a 85       	ldd	r18, Y+10	; 0x0a
     bce:	82 0f       	add	r24, r18
     bd0:	91 1d       	adc	r25, r1
     bd2:	90 93 a1 02 	sts	0x02A1, r25
     bd6:	80 93 a0 02 	sts	0x02A0, r24
					data[0].ttemp_inr_rl = ch2word(pkt->data[4],pkt->data[5]);
     bda:	9b 85       	ldd	r25, Y+11	; 0x0b
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	2c 85       	ldd	r18, Y+12	; 0x0c
     be0:	82 0f       	add	r24, r18
     be2:	91 1d       	adc	r25, r1
     be4:	90 93 a7 02 	sts	0x02A7, r25
     be8:	80 93 a6 02 	sts	0x02A6, r24
					data[0].ttemp_inr_rr = ch2word(pkt->data[6],pkt->data[7]);
     bec:	9d 85       	ldd	r25, Y+13	; 0x0d
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	2e 85       	ldd	r18, Y+14	; 0x0e
     bf2:	82 0f       	add	r24, r18
     bf4:	91 1d       	adc	r25, r1
     bf6:	90 93 ad 02 	sts	0x02AD, r25
     bfa:	80 93 ac 02 	sts	0x02AC, r24
     bfe:	0a c1       	rjmp	.+532    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_STS4:
					data[0].ttemp_mdl_fl = ch2word(pkt->data[0],pkt->data[1]);
     c00:	9f 81       	ldd	r25, Y+7	; 0x07
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	28 85       	ldd	r18, Y+8	; 0x08
     c06:	82 0f       	add	r24, r18
     c08:	91 1d       	adc	r25, r1
     c0a:	90 93 9d 02 	sts	0x029D, r25
     c0e:	80 93 9c 02 	sts	0x029C, r24
					data[0].ttemp_mdl_fr = ch2word(pkt->data[2],pkt->data[3]);
     c12:	99 85       	ldd	r25, Y+9	; 0x09
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	2a 85       	ldd	r18, Y+10	; 0x0a
     c18:	82 0f       	add	r24, r18
     c1a:	91 1d       	adc	r25, r1
     c1c:	90 93 a3 02 	sts	0x02A3, r25
     c20:	80 93 a2 02 	sts	0x02A2, r24
					data[0].ttemp_mdl_rl = ch2word(pkt->data[4],pkt->data[5]);
     c24:	9b 85       	ldd	r25, Y+11	; 0x0b
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	2c 85       	ldd	r18, Y+12	; 0x0c
     c2a:	82 0f       	add	r24, r18
     c2c:	91 1d       	adc	r25, r1
     c2e:	90 93 a9 02 	sts	0x02A9, r25
     c32:	80 93 a8 02 	sts	0x02A8, r24
					data[0].ttemp_mdl_rr = ch2word(pkt->data[6],pkt->data[7]);
     c36:	9d 85       	ldd	r25, Y+13	; 0x0d
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	2e 85       	ldd	r18, Y+14	; 0x0e
     c3c:	82 0f       	add	r24, r18
     c3e:	91 1d       	adc	r25, r1
     c40:	90 93 af 02 	sts	0x02AF, r25
     c44:	80 93 ae 02 	sts	0x02AE, r24
     c48:	e5 c0       	rjmp	.+458    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_STS5:
					data[0].ttemp_otr_fl = ch2word(pkt->data[0],pkt->data[1]);
     c4a:	9f 81       	ldd	r25, Y+7	; 0x07
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	28 85       	ldd	r18, Y+8	; 0x08
     c50:	82 0f       	add	r24, r18
     c52:	91 1d       	adc	r25, r1
     c54:	90 93 9f 02 	sts	0x029F, r25
     c58:	80 93 9e 02 	sts	0x029E, r24
					data[0].ttemp_otr_fr = ch2word(pkt->data[2],pkt->data[3]);
     c5c:	99 85       	ldd	r25, Y+9	; 0x09
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	2a 85       	ldd	r18, Y+10	; 0x0a
     c62:	82 0f       	add	r24, r18
     c64:	91 1d       	adc	r25, r1
     c66:	90 93 a5 02 	sts	0x02A5, r25
     c6a:	80 93 a4 02 	sts	0x02A4, r24
					data[0].ttemp_otr_rl = ch2word(pkt->data[4],pkt->data[5]);
     c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	2c 85       	ldd	r18, Y+12	; 0x0c
     c74:	82 0f       	add	r24, r18
     c76:	91 1d       	adc	r25, r1
     c78:	90 93 ab 02 	sts	0x02AB, r25
     c7c:	80 93 aa 02 	sts	0x02AA, r24
					data[0].ttemp_otr_rr = ch2word(pkt->data[6],pkt->data[7]);
     c80:	9d 85       	ldd	r25, Y+13	; 0x0d
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	2e 85       	ldd	r18, Y+14	; 0x0e
     c86:	82 0f       	add	r24, r18
     c88:	91 1d       	adc	r25, r1
     c8a:	90 93 b1 02 	sts	0x02B1, r25
     c8e:	80 93 b0 02 	sts	0x02B0, r24
     c92:	c0 c0       	rjmp	.+384    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_DLG1:
					data[0].DLG_status = pkt->data[0];
     c94:	8f 81       	ldd	r24, Y+7	; 0x07
     c96:	80 93 ba 02 	sts	0x02BA, r24
					data[0].hmsphr = pkt->data[1];
     c9a:	88 85       	ldd	r24, Y+8	; 0x08
     c9c:	80 93 bb 02 	sts	0x02BB, r24
					data[0].pos_dil = pkt->data[2];
     ca0:	89 85       	ldd	r24, Y+9	; 0x09
     ca2:	80 93 bc 02 	sts	0x02BC, r24
					data[0].time_dil = pkt->data[3];
     ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ca8:	80 93 bd 02 	sts	0x02BD, r24
					data[0].date = ch2word(pkt->data[4],pkt->data[5]);
     cac:	8c 85       	ldd	r24, Y+12	; 0x0c
     cae:	80 93 be 02 	sts	0x02BE, r24
     cb2:	b0 c0       	rjmp	.+352    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_DLG2:
					data[0].lat = ch2dblword(pkt->data[0],pkt->data[1],pkt->data[2],pkt->data[3]);
     cb4:	2f 81       	ldd	r18, Y+7	; 0x07
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	52 2f       	mov	r21, r18
     cbe:	44 27       	eor	r20, r20
     cc0:	33 27       	eor	r19, r19
     cc2:	22 27       	eor	r18, r18
     cc4:	88 85       	ldd	r24, Y+8	; 0x08
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	dc 01       	movw	r26, r24
     cce:	99 27       	eor	r25, r25
     cd0:	88 27       	eor	r24, r24
     cd2:	28 0f       	add	r18, r24
     cd4:	39 1f       	adc	r19, r25
     cd6:	4a 1f       	adc	r20, r26
     cd8:	5b 1f       	adc	r21, r27
     cda:	8a 85       	ldd	r24, Y+10	; 0x0a
     cdc:	28 0f       	add	r18, r24
     cde:	31 1d       	adc	r19, r1
     ce0:	41 1d       	adc	r20, r1
     ce2:	51 1d       	adc	r21, r1
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e0       	ldi	r26, 0x00	; 0
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	ba 2f       	mov	r27, r26
     cee:	a9 2f       	mov	r26, r25
     cf0:	98 2f       	mov	r25, r24
     cf2:	88 27       	eor	r24, r24
     cf4:	28 0f       	add	r18, r24
     cf6:	39 1f       	adc	r19, r25
     cf8:	4a 1f       	adc	r20, r26
     cfa:	5b 1f       	adc	r21, r27
     cfc:	20 93 bf 02 	sts	0x02BF, r18
     d00:	30 93 c0 02 	sts	0x02C0, r19
     d04:	40 93 c1 02 	sts	0x02C1, r20
     d08:	50 93 c2 02 	sts	0x02C2, r21
					data[0].lng = ch2dblword(pkt->data[4],pkt->data[5],pkt->data[6],pkt->data[7]);
     d0c:	2b 85       	ldd	r18, Y+11	; 0x0b
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	52 2f       	mov	r21, r18
     d16:	44 27       	eor	r20, r20
     d18:	33 27       	eor	r19, r19
     d1a:	22 27       	eor	r18, r18
     d1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	dc 01       	movw	r26, r24
     d26:	99 27       	eor	r25, r25
     d28:	88 27       	eor	r24, r24
     d2a:	28 0f       	add	r18, r24
     d2c:	39 1f       	adc	r19, r25
     d2e:	4a 1f       	adc	r20, r26
     d30:	5b 1f       	adc	r21, r27
     d32:	8e 85       	ldd	r24, Y+14	; 0x0e
     d34:	28 0f       	add	r18, r24
     d36:	31 1d       	adc	r19, r1
     d38:	41 1d       	adc	r20, r1
     d3a:	51 1d       	adc	r21, r1
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ba 2f       	mov	r27, r26
     d46:	a9 2f       	mov	r26, r25
     d48:	98 2f       	mov	r25, r24
     d4a:	88 27       	eor	r24, r24
     d4c:	28 0f       	add	r18, r24
     d4e:	39 1f       	adc	r19, r25
     d50:	4a 1f       	adc	r20, r26
     d52:	5b 1f       	adc	r21, r27
     d54:	20 93 c3 02 	sts	0x02C3, r18
     d58:	30 93 c4 02 	sts	0x02C4, r19
     d5c:	40 93 c5 02 	sts	0x02C5, r20
     d60:	50 93 c6 02 	sts	0x02C6, r21
     d64:	57 c0       	rjmp	.+174    	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_DLG3:
					data[0].heading = ch2word(pkt->data[0],pkt->data[1]);
     d66:	9f 81       	ldd	r25, Y+7	; 0x07
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	28 85       	ldd	r18, Y+8	; 0x08
     d6c:	82 0f       	add	r24, r18
     d6e:	91 1d       	adc	r25, r1
     d70:	90 93 c8 02 	sts	0x02C8, r25
     d74:	80 93 c7 02 	sts	0x02C7, r24
					data[0].speed = pkt->data[2];
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	80 93 c9 02 	sts	0x02C9, r24
					data[0].time = ch2dblword(pkt->data[3],pkt->data[4],pkt->data[5],pkt->data[6]);
     d7e:	2a 85       	ldd	r18, Y+10	; 0x0a
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	52 2f       	mov	r21, r18
     d88:	44 27       	eor	r20, r20
     d8a:	33 27       	eor	r19, r19
     d8c:	22 27       	eor	r18, r18
     d8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	dc 01       	movw	r26, r24
     d98:	99 27       	eor	r25, r25
     d9a:	88 27       	eor	r24, r24
     d9c:	28 0f       	add	r18, r24
     d9e:	39 1f       	adc	r19, r25
     da0:	4a 1f       	adc	r20, r26
     da2:	5b 1f       	adc	r21, r27
     da4:	8d 85       	ldd	r24, Y+13	; 0x0d
     da6:	28 0f       	add	r18, r24
     da8:	31 1d       	adc	r19, r1
     daa:	41 1d       	adc	r20, r1
     dac:	51 1d       	adc	r21, r1
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ba 2f       	mov	r27, r26
     db8:	a9 2f       	mov	r26, r25
     dba:	98 2f       	mov	r25, r24
     dbc:	88 27       	eor	r24, r24
     dbe:	28 0f       	add	r18, r24
     dc0:	39 1f       	adc	r19, r25
     dc2:	4a 1f       	adc	r20, r26
     dc4:	5b 1f       	adc	r21, r27
     dc6:	20 93 ca 02 	sts	0x02CA, r18
     dca:	30 93 cb 02 	sts	0x02CB, r19
     dce:	40 93 cc 02 	sts	0x02CC, r20
     dd2:	50 93 cd 02 	sts	0x02CD, r21
     dd6:	1e c0       	rjmp	.+60     	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_DLG4:
					data[0].log_status = pkt->data[0];
     dd8:	8f 81       	ldd	r24, Y+7	; 0x07
     dda:	80 93 ce 02 	sts	0x02CE, r24
     dde:	de 01       	movw	r26, r28
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
					for(i = 0;i<7;i++)
					{
						data[0].log_name[i] = pkt->data[i+1];
     de4:	18 96       	adiw	r26, 0x08	; 8
     de6:	8c 91       	ld	r24, X
     de8:	18 97       	sbiw	r26, 0x08	; 8
     dea:	f9 01       	movw	r30, r18
     dec:	e1 53       	subi	r30, 0x31	; 49
     dee:	fd 4f       	sbci	r31, 0xFD	; 253
     df0:	80 83       	st	Z, r24
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	11 96       	adiw	r26, 0x01	; 1
					data[0].speed = pkt->data[2];
					data[0].time = ch2dblword(pkt->data[3],pkt->data[4],pkt->data[5],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_DLG4:
					data[0].log_status = pkt->data[0];
					for(i = 0;i<7;i++)
     df8:	27 30       	cpi	r18, 0x07	; 7
     dfa:	31 05       	cpc	r19, r1
     dfc:	99 f7       	brne	.-26     	; 0xde4 <ProcessCanMsg+0x700>
					{
						data[0].log_name[i] = pkt->data[i+1];
					}
					data[0].log_name[7] = 0;
     dfe:	10 92 d6 02 	sts	0x02D6, r1
     e02:	08 c0       	rjmp	.+16     	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
				case CAN_DATA_STW1:
					data[0].STS_status = pkt->data[0];
					return(msg_type);
				case CAN_DATA_WRL1:
					data[0].STS_status = pkt->data[0];
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	90 93 99 02 	sts	0x0299, r25
     e0c:	80 93 98 02 	sts	0x0298, r24
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <ProcessCanMsg+0x730>
					return(msg_type);
     e12:	dd 24       	eor	r13, r13
			break;
		default:
			return(0);
	}
	return(0);
}
     e14:	8d 2d       	mov	r24, r13
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
     e22:	df 90       	pop	r13
     e24:	08 95       	ret

00000e26 <__vector_18>:
	*/
}

//! CAN interrupt service routine
ISR( CANIT_vect)
{
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	0b b6       	in	r0, 0x3b	; 59
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	9f 92       	push	r9
     e36:	af 92       	push	r10
     e38:	bf 92       	push	r11
     e3a:	cf 92       	push	r12
     e3c:	df 92       	push	r13
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	4f 93       	push	r20
     e4c:	5f 93       	push	r21
     e4e:	6f 93       	push	r22
     e50:	7f 93       	push	r23
     e52:	8f 93       	push	r24
     e54:	9f 93       	push	r25
     e56:	af 93       	push	r26
     e58:	bf 93       	push	r27
     e5a:	ef 93       	push	r30
     e5c:	ff 93       	push	r31
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	2f 97       	sbiw	r28, 0x0f	; 15
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	cd bf       	out	0x3d, r28	; 61
	unsigned char save_canpage;
	unsigned char mob;
	unsigned char length;

	/*-------------Device Specific-----------------*/
	led_ctrl(LED8,LED_ON,1);
     e6c:	87 e0       	ldi	r24, 0x07	; 7
     e6e:	61 e0       	ldi	r22, 0x01	; 1
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <led_ctrl>
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob
     e78:	90 90 ec 00 	lds	r9, 0x00EC

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
     e7c:	89 2d       	mov	r24, r9
     e7e:	80 7f       	andi	r24, 0xF0	; 240
     e80:	80 93 ed 00 	sts	0x00ED, r24
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];
     e84:	89 2d       	mov	r24, r9
     e86:	82 95       	swap	r24
     e88:	8f 70       	andi	r24, 0x0F	; 15
     e8a:	a8 2f       	mov	r26, r24
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	fd 01       	movw	r30, r26
     e90:	e3 54       	subi	r30, 0x43	; 67
     e92:	fe 4f       	sbci	r31, 0xFE	; 254
     e94:	80 81       	ld	r24, Z
     e96:	8e 83       	std	Y+6, r24	; 0x06

	if(packet.msg_type == CAN_TX_MSG)
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	b1 f4       	brne	.+44     	; 0xec8 <__vector_18+0xa2>
	{
		CANSTMOB = 0;
     e9c:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0;
     ea0:	10 92 ef 00 	sts	0x00EF, r1

		CANIDT1 = 0;
     ea4:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;
     ea8:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;
     eac:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
     eb0:	10 92 f0 00 	sts	0x00F0, r1
     eb4:	80 e0       	ldi	r24, 0x00	; 0

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
     eb6:	10 92 fa 00 	sts	0x00FA, r1
		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	88 30       	cpi	r24, 0x08	; 8
     ebe:	d9 f7       	brne	.-10     	; 0xeb6 <__vector_18+0x90>
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
     ec0:	a3 54       	subi	r26, 0x43	; 67
     ec2:	be 4f       	sbci	r27, 0xFE	; 254
     ec4:	1c 92       	st	X, r1
     ec6:	78 c0       	rjmp	.+240    	; 0xfb8 <__vector_18+0x192>
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
     ec8:	80 91 ef 00 	lds	r24, 0x00EF
     ecc:	84 ff       	sbrs	r24, 4
     ece:	3b c0       	rjmp	.+118    	; 0xf46 <__vector_18+0x120>
		{
			packet.id_type = CAN_EXT_MSG;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	8d 83       	std	Y+5, r24	; 0x05
			packet.id = 	(((uint32_t)CANIDT1) << 21)
     ed4:	20 91 f3 00 	lds	r18, 0x00F3
     ed8:	80 91 f2 00 	lds	r24, 0x00F2
     edc:	e0 90 f1 00 	lds	r14, 0x00F1
     ee0:	a0 90 f0 00 	lds	r10, 0x00F0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	7d e0       	ldi	r23, 0x0D	; 13
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	aa 1f       	adc	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	7a 95       	dec	r23
     ef6:	d1 f7       	brne	.-12     	; 0xeec <__vector_18+0xc6>
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	65 e1       	ldi	r22, 0x15	; 21
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	44 1f       	adc	r20, r20
     f06:	55 1f       	adc	r21, r21
     f08:	6a 95       	dec	r22
     f0a:	d1 f7       	brne	.-12     	; 0xf00 <__vector_18+0xda>
     f0c:	82 2b       	or	r24, r18
     f0e:	93 2b       	or	r25, r19
     f10:	a4 2b       	or	r26, r20
     f12:	b5 2b       	or	r27, r21
     f14:	ff 24       	eor	r15, r15
     f16:	00 e0       	ldi	r16, 0x00	; 0
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	25 e0       	ldi	r18, 0x05	; 5
     f1c:	ee 0c       	add	r14, r14
     f1e:	ff 1c       	adc	r15, r15
     f20:	00 1f       	adc	r16, r16
     f22:	11 1f       	adc	r17, r17
     f24:	2a 95       	dec	r18
     f26:	d1 f7       	brne	.-12     	; 0xf1c <__vector_18+0xf6>
     f28:	8e 29       	or	r24, r14
     f2a:	9f 29       	or	r25, r15
     f2c:	a0 2b       	or	r26, r16
     f2e:	b1 2b       	or	r27, r17
     f30:	a6 94       	lsr	r10
     f32:	a6 94       	lsr	r10
     f34:	a6 94       	lsr	r10
     f36:	bb 24       	eor	r11, r11
     f38:	cc 24       	eor	r12, r12
     f3a:	dd 24       	eor	r13, r13
     f3c:	8a 29       	or	r24, r10
     f3e:	9b 29       	or	r25, r11
     f40:	ac 29       	or	r26, r12
     f42:	bd 29       	or	r27, r13
     f44:	15 c0       	rjmp	.+42     	; 0xf70 <__vector_18+0x14a>
						| (((uint32_t)CANIDT4) >> 3);
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
     f46:	1d 82       	std	Y+5, r1	; 0x05
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
     f48:	20 91 f2 00 	lds	r18, 0x00F2
     f4c:	80 91 f3 00 	lds	r24, 0x00F3
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	b3 e0       	ldi	r27, 0x03	; 3
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	ba 95       	dec	r27
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <__vector_18+0x12e>
     f5c:	22 95       	swap	r18
     f5e:	26 95       	lsr	r18
     f60:	27 70       	andi	r18, 0x07	; 7
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	82 2b       	or	r24, r18
     f66:	93 2b       	or	r25, r19
     f68:	aa 27       	eor	r26, r26
     f6a:	97 fd       	sbrc	r25, 7
     f6c:	a0 95       	com	r26
     f6e:	ba 2f       	mov	r27, r26
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	ab 83       	std	Y+3, r26	; 0x03
     f76:	bc 83       	std	Y+4, r27	; 0x04
		}

		length=CANCDMOB & 0x0f;
     f78:	40 91 ef 00 	lds	r20, 0x00EF
     f7c:	4f 70       	andi	r20, 0x0F	; 15
     f7e:	fe 01       	movw	r30, r28
     f80:	38 96       	adiw	r30, 0x08	; 8
		packet.length=length;

		for (i = 0; i <length; ++i)
     f82:	24 2f       	mov	r18, r20
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	29 5f       	subi	r18, 0xF9	; 249
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
     f8a:	be 01       	movw	r22, r28
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	26 0f       	add	r18, r22
     f92:	37 1f       	adc	r19, r23
     f94:	03 c0       	rjmp	.+6      	; 0xf9c <__vector_18+0x176>
		{
			packet.data[i] = CANMSG;
     f96:	80 91 fa 00 	lds	r24, 0x00FA
     f9a:	81 93       	st	Z+, r24
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
     f9c:	e2 17       	cp	r30, r18
     f9e:	f3 07       	cpc	r31, r19
     fa0:	d1 f7       	brne	.-12     	; 0xf96 <__vector_18+0x170>
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;
     fa2:	4f 83       	std	Y+7, r20	; 0x07
		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);
     fa4:	cb 01       	movw	r24, r22
     fa6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <ProcessCanMsg>

		CANSTMOB=0;		// reset INT reason
     faa:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
     fae:	80 91 ef 00 	lds	r24, 0x00EF
     fb2:	80 79       	andi	r24, 0x90	; 144
     fb4:	80 93 ef 00 	sts	0x00EF, r24
	led_ctrl(LED8,LED_ON,1);
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;
     fb8:	80 ef       	ldi	r24, 0xF0	; 240
     fba:	98 2a       	or	r9, r24

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE
     fbc:	90 92 ed 00 	sts	0x00ED, r9

	/*-------------Device Specific-----------------*/

	led_ctrl(LED8,LED_OFF,1);
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <led_ctrl>

	/*---------------------------------------------*/
}
     fcc:	2f 96       	adiw	r28, 0x0f	; 15
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	bf 91       	pop	r27
     fdc:	af 91       	pop	r26
     fde:	9f 91       	pop	r25
     fe0:	8f 91       	pop	r24
     fe2:	7f 91       	pop	r23
     fe4:	6f 91       	pop	r22
     fe6:	5f 91       	pop	r21
     fe8:	4f 91       	pop	r20
     fea:	3f 91       	pop	r19
     fec:	2f 91       	pop	r18
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	9f 90       	pop	r9
    1000:	0f 90       	pop	r0
    1002:	0b be       	out	0x3b, r0	; 59
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <can_tx>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	e8 2f       	mov	r30, r24
    1014:	eb 01       	movw	r28, r22
    1016:	82 95       	swap	r24
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	80 93 ed 00 	sts	0x00ED, r24
    101e:	80 91 ef 00 	lds	r24, 0x00EF
    1022:	80 7c       	andi	r24, 0xC0	; 192
    1024:	21 f0       	breq	.+8      	; 0x102e <can_tx+0x20>
    1026:	80 91 ee 00 	lds	r24, 0x00EE
    102a:	86 ff       	sbrs	r24, 6
    102c:	93 c0       	rjmp	.+294    	; 0x1154 <__stack+0x55>
    102e:	4e 2f       	mov	r20, r30
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	fa 01       	movw	r30, r20
    1034:	e3 54       	subi	r30, 0x43	; 67
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	80 81       	ld	r24, Z
    103a:	88 23       	and	r24, r24
    103c:	09 f0       	breq	.+2      	; 0x1040 <can_tx+0x32>
    103e:	8a c0       	rjmp	.+276    	; 0x1154 <__stack+0x55>
    1040:	10 92 ee 00 	sts	0x00EE, r1
    1044:	10 92 ef 00 	sts	0x00EF, r1
    1048:	8c 81       	ldd	r24, Y+4	; 0x04
    104a:	88 23       	and	r24, r24
    104c:	d9 f4       	brne	.+54     	; 0x1084 <can_tx+0x76>
    104e:	88 81       	ld	r24, Y
    1050:	99 81       	ldd	r25, Y+1	; 0x01
    1052:	aa 81       	ldd	r26, Y+2	; 0x02
    1054:	bb 81       	ldd	r27, Y+3	; 0x03
    1056:	73 e0       	ldi	r23, 0x03	; 3
    1058:	b6 95       	lsr	r27
    105a:	a7 95       	ror	r26
    105c:	97 95       	ror	r25
    105e:	87 95       	ror	r24
    1060:	7a 95       	dec	r23
    1062:	d1 f7       	brne	.-12     	; 0x1058 <can_tx+0x4a>
    1064:	80 93 f3 00 	sts	0x00F3, r24
    1068:	88 81       	ld	r24, Y
    106a:	99 81       	ldd	r25, Y+1	; 0x01
    106c:	aa 81       	ldd	r26, Y+2	; 0x02
    106e:	bb 81       	ldd	r27, Y+3	; 0x03
    1070:	82 95       	swap	r24
    1072:	88 0f       	add	r24, r24
    1074:	80 7e       	andi	r24, 0xE0	; 224
    1076:	80 93 f2 00 	sts	0x00F2, r24
    107a:	10 92 f1 00 	sts	0x00F1, r1
    107e:	10 92 f0 00 	sts	0x00F0, r1
    1082:	35 c0       	rjmp	.+106    	; 0x10ee <can_tx+0xe0>
    1084:	88 81       	ld	r24, Y
    1086:	99 81       	ldd	r25, Y+1	; 0x01
    1088:	aa 81       	ldd	r26, Y+2	; 0x02
    108a:	bb 81       	ldd	r27, Y+3	; 0x03
    108c:	65 e1       	ldi	r22, 0x15	; 21
    108e:	b6 95       	lsr	r27
    1090:	a7 95       	ror	r26
    1092:	97 95       	ror	r25
    1094:	87 95       	ror	r24
    1096:	6a 95       	dec	r22
    1098:	d1 f7       	brne	.-12     	; 0x108e <can_tx+0x80>
    109a:	80 93 f3 00 	sts	0x00F3, r24
    109e:	88 81       	ld	r24, Y
    10a0:	99 81       	ldd	r25, Y+1	; 0x01
    10a2:	aa 81       	ldd	r26, Y+2	; 0x02
    10a4:	bb 81       	ldd	r27, Y+3	; 0x03
    10a6:	3d e0       	ldi	r19, 0x0D	; 13
    10a8:	b6 95       	lsr	r27
    10aa:	a7 95       	ror	r26
    10ac:	97 95       	ror	r25
    10ae:	87 95       	ror	r24
    10b0:	3a 95       	dec	r19
    10b2:	d1 f7       	brne	.-12     	; 0x10a8 <can_tx+0x9a>
    10b4:	80 93 f2 00 	sts	0x00F2, r24
    10b8:	88 81       	ld	r24, Y
    10ba:	99 81       	ldd	r25, Y+1	; 0x01
    10bc:	aa 81       	ldd	r26, Y+2	; 0x02
    10be:	bb 81       	ldd	r27, Y+3	; 0x03
    10c0:	25 e0       	ldi	r18, 0x05	; 5
    10c2:	b6 95       	lsr	r27
    10c4:	a7 95       	ror	r26
    10c6:	97 95       	ror	r25
    10c8:	87 95       	ror	r24
    10ca:	2a 95       	dec	r18
    10cc:	d1 f7       	brne	.-12     	; 0x10c2 <can_tx+0xb4>
    10ce:	80 93 f1 00 	sts	0x00F1, r24
    10d2:	88 81       	ld	r24, Y
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	aa 81       	ldd	r26, Y+2	; 0x02
    10d8:	bb 81       	ldd	r27, Y+3	; 0x03
    10da:	88 0f       	add	r24, r24
    10dc:	88 0f       	add	r24, r24
    10de:	88 0f       	add	r24, r24
    10e0:	80 93 f0 00 	sts	0x00F0, r24
    10e4:	80 91 ef 00 	lds	r24, 0x00EF
    10e8:	80 61       	ori	r24, 0x10	; 16
    10ea:	80 93 ef 00 	sts	0x00EF, r24
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <__stack+0x5>
    10f4:	fe 01       	movw	r30, r28
    10f6:	e2 0f       	add	r30, r18
    10f8:	f3 1f       	adc	r31, r19
    10fa:	87 81       	ldd	r24, Z+7	; 0x07
    10fc:	80 93 fa 00 	sts	0x00FA, r24
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	8e 81       	ldd	r24, Y+6	; 0x06
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	28 17       	cp	r18, r24
    110a:	39 07       	cpc	r19, r25
    110c:	98 f3       	brcs	.-26     	; 0x10f4 <can_tx+0xe6>
    110e:	90 91 ef 00 	lds	r25, 0x00EF
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	89 2b       	or	r24, r25
    1116:	80 93 ef 00 	sts	0x00EF, r24
    111a:	fa 01       	movw	r30, r20
    111c:	e3 54       	subi	r30, 0x43	; 67
    111e:	fe 4f       	sbci	r31, 0xFE	; 254
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	80 83       	st	Z, r24
    1124:	21 e0       	ldi	r18, 0x01	; 1
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <__stack+0x2f>
    112a:	22 0f       	add	r18, r18
    112c:	33 1f       	adc	r19, r19
    112e:	4a 95       	dec	r20
    1130:	e2 f7       	brpl	.-8      	; 0x112a <__stack+0x2b>
    1132:	80 91 de 00 	lds	r24, 0x00DE
    1136:	82 2b       	or	r24, r18
    1138:	80 93 de 00 	sts	0x00DE, r24
    113c:	80 91 df 00 	lds	r24, 0x00DF
    1140:	83 2b       	or	r24, r19
    1142:	80 93 df 00 	sts	0x00DF, r24
    1146:	80 91 ef 00 	lds	r24, 0x00EF
    114a:	80 64       	ori	r24, 0x40	; 64
    114c:	80 93 ef 00 	sts	0x00EF, r24
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <__stack+0x57>
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <prepare_rx>:
    115c:	cf 92       	push	r12
    115e:	ef 92       	push	r14
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	e8 2f       	mov	r30, r24
    116a:	9e 2d       	mov	r25, r14
    116c:	8f 30       	cpi	r24, 0x0F	; 15
    116e:	08 f0       	brcs	.+2      	; 0x1172 <prepare_rx+0x16>
    1170:	7c c0       	rjmp	.+248    	; 0x126a <prepare_rx+0x10e>
    1172:	82 95       	swap	r24
    1174:	80 7f       	andi	r24, 0xF0	; 240
    1176:	80 93 ed 00 	sts	0x00ED, r24
    117a:	80 91 ef 00 	lds	r24, 0x00EF
    117e:	80 7c       	andi	r24, 0xC0	; 192
    1180:	09 f0       	breq	.+2      	; 0x1184 <prepare_rx+0x28>
    1182:	73 c0       	rjmp	.+230    	; 0x126a <prepare_rx+0x10e>
    1184:	ce 2f       	mov	r28, r30
    1186:	d0 e0       	ldi	r29, 0x00	; 0
    1188:	fe 01       	movw	r30, r28
    118a:	e3 54       	subi	r30, 0x43	; 67
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	c0 82       	st	Z, r12
    1190:	10 92 ee 00 	sts	0x00EE, r1
    1194:	10 92 ef 00 	sts	0x00EF, r1
    1198:	10 92 ec 00 	sts	0x00EC, r1
    119c:	91 30       	cpi	r25, 0x01	; 1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <prepare_rx+0x46>
    11a0:	51 c0       	rjmp	.+162    	; 0x1244 <prepare_rx+0xe8>
    11a2:	db 01       	movw	r26, r22
    11a4:	ca 01       	movw	r24, r20
    11a6:	f5 e1       	ldi	r31, 0x15	; 21
    11a8:	b6 95       	lsr	r27
    11aa:	a7 95       	ror	r26
    11ac:	97 95       	ror	r25
    11ae:	87 95       	ror	r24
    11b0:	fa 95       	dec	r31
    11b2:	d1 f7       	brne	.-12     	; 0x11a8 <prepare_rx+0x4c>
    11b4:	80 93 f3 00 	sts	0x00F3, r24
    11b8:	db 01       	movw	r26, r22
    11ba:	ca 01       	movw	r24, r20
    11bc:	ed e0       	ldi	r30, 0x0D	; 13
    11be:	b6 95       	lsr	r27
    11c0:	a7 95       	ror	r26
    11c2:	97 95       	ror	r25
    11c4:	87 95       	ror	r24
    11c6:	ea 95       	dec	r30
    11c8:	d1 f7       	brne	.-12     	; 0x11be <prepare_rx+0x62>
    11ca:	80 93 f2 00 	sts	0x00F2, r24
    11ce:	db 01       	movw	r26, r22
    11d0:	ca 01       	movw	r24, r20
    11d2:	55 e0       	ldi	r21, 0x05	; 5
    11d4:	b6 95       	lsr	r27
    11d6:	a7 95       	ror	r26
    11d8:	97 95       	ror	r25
    11da:	87 95       	ror	r24
    11dc:	5a 95       	dec	r21
    11de:	d1 f7       	brne	.-12     	; 0x11d4 <prepare_rx+0x78>
    11e0:	80 93 f1 00 	sts	0x00F1, r24
    11e4:	84 2f       	mov	r24, r20
    11e6:	88 0f       	add	r24, r24
    11e8:	88 0f       	add	r24, r24
    11ea:	88 0f       	add	r24, r24
    11ec:	80 93 f0 00 	sts	0x00F0, r24
    11f0:	d9 01       	movw	r26, r18
    11f2:	c8 01       	movw	r24, r16
    11f4:	45 e1       	ldi	r20, 0x15	; 21
    11f6:	b6 95       	lsr	r27
    11f8:	a7 95       	ror	r26
    11fa:	97 95       	ror	r25
    11fc:	87 95       	ror	r24
    11fe:	4a 95       	dec	r20
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <prepare_rx+0x9a>
    1202:	80 93 f7 00 	sts	0x00F7, r24
    1206:	d9 01       	movw	r26, r18
    1208:	c8 01       	movw	r24, r16
    120a:	fd e0       	ldi	r31, 0x0D	; 13
    120c:	b6 95       	lsr	r27
    120e:	a7 95       	ror	r26
    1210:	97 95       	ror	r25
    1212:	87 95       	ror	r24
    1214:	fa 95       	dec	r31
    1216:	d1 f7       	brne	.-12     	; 0x120c <prepare_rx+0xb0>
    1218:	80 93 f6 00 	sts	0x00F6, r24
    121c:	d9 01       	movw	r26, r18
    121e:	c8 01       	movw	r24, r16
    1220:	e5 e0       	ldi	r30, 0x05	; 5
    1222:	b6 95       	lsr	r27
    1224:	a7 95       	ror	r26
    1226:	97 95       	ror	r25
    1228:	87 95       	ror	r24
    122a:	ea 95       	dec	r30
    122c:	d1 f7       	brne	.-12     	; 0x1222 <prepare_rx+0xc6>
    122e:	80 93 f5 00 	sts	0x00F5, r24
    1232:	80 2f       	mov	r24, r16
    1234:	88 0f       	add	r24, r24
    1236:	88 0f       	add	r24, r24
    1238:	88 0f       	add	r24, r24
    123a:	80 93 f4 00 	sts	0x00F4, r24
    123e:	80 e9       	ldi	r24, 0x90	; 144
    1240:	80 93 ef 00 	sts	0x00EF, r24
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <prepare_rx+0xf2>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	ca 95       	dec	r28
    1250:	e2 f7       	brpl	.-8      	; 0x124a <prepare_rx+0xee>
    1252:	20 91 de 00 	lds	r18, 0x00DE
    1256:	28 2b       	or	r18, r24
    1258:	20 93 de 00 	sts	0x00DE, r18
    125c:	20 91 df 00 	lds	r18, 0x00DF
    1260:	29 2b       	or	r18, r25
    1262:	20 93 df 00 	sts	0x00DF, r18
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	01 c0       	rjmp	.+2      	; 0x126c <prepare_rx+0x110>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ef 90       	pop	r14
    1276:	cf 90       	pop	r12
    1278:	08 95       	ret

0000127a <can_init>:
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	80 93 e2 00 	sts	0x00E2, r24
    1280:	8c e0       	ldi	r24, 0x0C	; 12
    1282:	80 93 e3 00 	sts	0x00E3, r24
    1286:	87 e3       	ldi	r24, 0x37	; 55
    1288:	80 93 e4 00 	sts	0x00E4, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	89 2f       	mov	r24, r25
    1290:	82 95       	swap	r24
    1292:	80 7f       	andi	r24, 0xF0	; 240
    1294:	80 93 ed 00 	sts	0x00ED, r24
    1298:	10 92 ee 00 	sts	0x00EE, r1
    129c:	10 92 ef 00 	sts	0x00EF, r1
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	9f 30       	cpi	r25, 0x0F	; 15
    12a4:	a1 f7       	brne	.-24     	; 0x128e <can_init+0x14>
    12a6:	80 91 d8 00 	lds	r24, 0x00D8
    12aa:	82 60       	ori	r24, 0x02	; 2
    12ac:	80 93 d8 00 	sts	0x00D8, r24
    12b0:	80 eb       	ldi	r24, 0xB0	; 176
    12b2:	80 93 db 00 	sts	0x00DB, r24
    12b6:	80 91 d9 00 	lds	r24, 0x00D9
    12ba:	82 ff       	sbrs	r24, 2
    12bc:	fc cf       	rjmp	.-8      	; 0x12b6 <can_init+0x3c>
    12be:	08 95       	ret

000012c0 <get_open_mob>:
    12c0:	ed eb       	ldi	r30, 0xBD	; 189
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 23       	and	r24, r24
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <get_open_mob+0x16>
    12cc:	9f 5f       	subi	r25, 0xFF	; 255
    12ce:	31 96       	adiw	r30, 0x01	; 1
    12d0:	9f 30       	cpi	r25, 0x0F	; 15
    12d2:	c9 f7       	brne	.-14     	; 0x12c6 <get_open_mob+0x6>
    12d4:	9f ef       	ldi	r25, 0xFF	; 255
    12d6:	89 2f       	mov	r24, r25
    12d8:	08 95       	ret

000012da <uart0_init>:
		i++;
	}
}

void uart0_init(uint32_t baud)
{
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
	PORTE |= _BV(PE1)|_BV(PE0);
    12de:	8e b1       	in	r24, 0x0e	; 14
    12e0:	83 60       	ori	r24, 0x03	; 3
    12e2:	8e b9       	out	0x0e, r24	; 14
	DDRE |= _BV(PE1);
    12e4:	69 9a       	sbi	0x0d, 1	; 13
	UCSR0A=_BV(U2X1);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B=0x18;
    12ec:	88 e1       	ldi	r24, 0x18	; 24
    12ee:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=0x06;
    12f2:	86 e0       	ldi	r24, 0x06	; 6
    12f4:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = (F_CPU / (8UL * baud)) - 1;
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	44 1f       	adc	r20, r20
    1300:	55 1f       	adc	r21, r21
    1302:	8a 95       	dec	r24
    1304:	d1 f7       	brne	.-12     	; 0x12fa <uart0_init+0x20>
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	74 e2       	ldi	r23, 0x24	; 36
    130a:	84 ef       	ldi	r24, 0xF4	; 244
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 8f 10 	call	0x211e	; 0x211e <__udivmodsi4>
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	30 40       	sbci	r19, 0x00	; 0
    1316:	30 93 c5 00 	sts	0x00C5, r19
    131a:	20 93 c4 00 	sts	0x00C4, r18
}
    131e:	08 95       	ret

00001320 <uart0_tx>:

void uart0_tx( unsigned char data )
{
    1320:	98 2f       	mov	r25, r24
	PORTD |= _BV(PD4);
    1322:	5c 9a       	sbi	0x0b, 4	; 11
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) ;
    1324:	80 91 c0 00 	lds	r24, 0x00C0
    1328:	85 ff       	sbrs	r24, 5
    132a:	fc cf       	rjmp	.-8      	; 0x1324 <uart0_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    132c:	90 93 c6 00 	sts	0x00C6, r25
	PORTD &= ~_BV(PD4);
    1330:	5c 98       	cbi	0x0b, 4	; 11
}
    1332:	08 95       	ret

00001334 <glcd_puts0>:

#define GLCD_BAUD	115200UL
#define GLCD_INIT_TIME 3000 //ms

void glcd_puts0(const char *s)
{
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	10 e0       	ldi	r17, 0x00	; 0
    133e:	03 c0       	rjmp	.+6      	; 0x1346 <glcd_puts0+0x12>
	uint8_t i = 0;
	while(s[i]!=0)
	{
		uart0_tx(s[i]);
    1340:	0e 94 90 09 	call	0x1320	; 0x1320 <uart0_tx>
		i++;
    1344:	1f 5f       	subi	r17, 0xFF	; 255
#define GLCD_INIT_TIME 3000 //ms

void glcd_puts0(const char *s)
{
	uint8_t i = 0;
	while(s[i]!=0)
    1346:	fe 01       	movw	r30, r28
    1348:	e1 0f       	add	r30, r17
    134a:	f1 1d       	adc	r31, r1
    134c:	80 81       	ld	r24, Z
    134e:	88 23       	and	r24, r24
    1350:	b9 f7       	brne	.-18     	; 0x1340 <glcd_puts0+0xc>
	{
		uart0_tx(s[i]);
		i++;
	}
}
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	08 95       	ret

0000135a <uart0_rx>:
	UDR0 = data;
	PORTD &= ~_BV(PD4);
}

uint8_t uart0_rx(char *c)
{
    135a:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	if (UCSR0A & (1<<RXC0))
    135c:	80 91 c0 00 	lds	r24, 0x00C0
    1360:	87 ff       	sbrs	r24, 7
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <uart0_rx+0x16>
	{
		PORTD |=_BV(PD7);
    1364:	5f 9a       	sbi	0x0b, 7	; 11
		*c = UDR0;
    1366:	80 91 c6 00 	lds	r24, 0x00C6
    136a:	80 83       	st	Z, r24
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	08 95       	ret
		return 1;
	}
	else
	{
		PORTD &=~_BV(PD7);
    1370:	5f 98       	cbi	0x0b, 7	; 11
    1372:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
}
    1374:	08 95       	ret

00001376 <clear_rx_buf>:

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    1376:	e6 ec       	ldi	r30, 0xC6	; 198
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    137c:	90 81       	ld	r25, Z
    137e:	38 2f       	mov	r19, r24
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	29 0f       	add	r18, r25
    1384:	31 1d       	adc	r19, r1
}
    1386:	c9 01       	movw	r24, r18
    1388:	08 95       	ret

0000138a <glcd_reset>:

void glcd_reset(void)
{
	GLCD_RST_PORT &= ~_BV(GLCD_RST);
    138a:	72 98       	cbi	0x0e, 2	; 14
	GLCD_RST_DDR |= _BV(GLCD_RST);
    138c:	6a 9a       	sbi	0x0d, 2	; 13
    138e:	80 e9       	ldi	r24, 0x90	; 144
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	fc 01       	movw	r30, r24
    1394:	31 97       	sbiw	r30, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <glcd_reset+0xa>
	_delay_us(100);
	GLCD_RST_DDR &= ~_BV(GLCD_RST);
    1398:	6a 98       	cbi	0x0d, 2	; 13
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <glcd_reset+0x10>
	_delay_us(100);
}
    139e:	08 95       	ret

000013a0 <glcd_init>:

void glcd_init(void)
{
	glcd_reset();
    13a0:	0e 94 c5 09 	call	0x138a	; 0x138a <glcd_reset>
    13a4:	80 e3       	ldi	r24, 0x30	; 48
    13a6:	95 e7       	ldi	r25, 0x75	; 117
    13a8:	20 e9       	ldi	r18, 0x90	; 144
    13aa:	31 e0       	ldi	r19, 0x01	; 1
    13ac:	f9 01       	movw	r30, r18
    13ae:	31 97       	sbiw	r30, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <glcd_init+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <glcd_init+0xc>
	_delay_ms(GLCD_INIT_TIME);
	uart0_init(GLCD_BAUD);
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	72 ec       	ldi	r23, 0xC2	; 194
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 6d 09 	call	0x12da	; 0x12da <uart0_init>
}
    13c2:	08 95       	ret

000013c4 <glcd_resp>:
		return 0;
	}
}

uint8_t glcd_resp(uint32_t timeout,char *s)
{
    13c4:	8f 92       	push	r8
    13c6:	9f 92       	push	r9
    13c8:	af 92       	push	r10
    13ca:	bf 92       	push	r11
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	7b 01       	movw	r14, r22
    13e4:	8c 01       	movw	r16, r24
    13e6:	6a 01       	movw	r12, r20
	uint8_t resp;
	char c = 0;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	s[0]=0;
    13ea:	fa 01       	movw	r30, r20
    13ec:	10 82       	st	Z, r1
    13ee:	bb 24       	eor	r11, r11
	uint8_t idx = 0;

	for(;timeout >0;timeout--)
	{
		resp = uart0_rx(&c);
    13f0:	4e 01       	movw	r8, r28
    13f2:	08 94       	sec
    13f4:	81 1c       	adc	r8, r1
    13f6:	91 1c       	adc	r9, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13f8:	95 e0       	ldi	r25, 0x05	; 5
    13fa:	a9 2e       	mov	r10, r25
    13fc:	21 c0       	rjmp	.+66     	; 0x1440 <glcd_resp+0x7c>
    13fe:	c4 01       	movw	r24, r8
    1400:	0e 94 ad 09 	call	0x135a	; 0x135a <uart0_rx>
		if(resp)
    1404:	88 23       	and	r24, r24
    1406:	a1 f0       	breq	.+40     	; 0x1430 <glcd_resp+0x6c>
		{
			s[idx] = c;
    1408:	ab 2d       	mov	r26, r11
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	f6 01       	movw	r30, r12
    140e:	ea 0f       	add	r30, r26
    1410:	fb 1f       	adc	r31, r27
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	80 83       	st	Z, r24
			if((c == '\n') || (c == '\r'))
    1416:	8a 30       	cpi	r24, 0x0A	; 10
    1418:	11 f0       	breq	.+4      	; 0x141e <glcd_resp+0x5a>
    141a:	8d 30       	cpi	r24, 0x0D	; 13
    141c:	41 f4       	brne	.+16     	; 0x142e <glcd_resp+0x6a>
			{
				s[idx+1] = 0;
    141e:	ac 0d       	add	r26, r12
    1420:	bd 1d       	adc	r27, r13
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	1c 92       	st	X, r1
				PORTD &=~_BV(PD7);
    1426:	5f 98       	cbi	0x0b, 7	; 11
				return s[0];
    1428:	f6 01       	movw	r30, r12
    142a:	80 81       	ld	r24, Z
    142c:	10 c0       	rjmp	.+32     	; 0x144e <glcd_resp+0x8a>
			}
			else
			{
				idx++;
    142e:	b3 94       	inc	r11
    1430:	8a 2d       	mov	r24, r10
    1432:	8a 95       	dec	r24
    1434:	f1 f7       	brne	.-4      	; 0x1432 <glcd_resp+0x6e>
	uint8_t resp;
	char c = 0;
	s[0]=0;
	uint8_t idx = 0;

	for(;timeout >0;timeout--)
    1436:	08 94       	sec
    1438:	e1 08       	sbc	r14, r1
    143a:	f1 08       	sbc	r15, r1
    143c:	01 09       	sbc	r16, r1
    143e:	11 09       	sbc	r17, r1
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	01 05       	cpc	r16, r1
    1446:	11 05       	cpc	r17, r1
    1448:	d1 f6       	brne	.-76     	; 0x13fe <glcd_resp+0x3a>
			}
		}
		_delay_us(1);
	}

	PORTD &=~_BV(PD7);
    144a:	5f 98       	cbi	0x0b, 7	; 11
    144c:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
    144e:	0f 90       	pop	r0
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	ff 90       	pop	r15
    145a:	ef 90       	pop	r14
    145c:	df 90       	pop	r13
    145e:	cf 90       	pop	r12
    1460:	bf 90       	pop	r11
    1462:	af 90       	pop	r10
    1464:	9f 90       	pop	r9
    1466:	8f 90       	pop	r8
    1468:	08 95       	ret

0000146a <glcd_update>:

int8_t glcd_update(void)
{
    146a:	0f 93       	push	r16
    146c:	1f 93       	push	r17
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <glcd_update+0xa>
    1474:	00 d0       	rcall	.+0      	; 0x1476 <glcd_update+0xc>
    1476:	0f 92       	push	r0
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
	char s[5] = "/U\n";
    147c:	8f e2       	ldi	r24, 0x2F	; 47
    147e:	95 e5       	ldi	r25, 0x55	; 85
    1480:	aa e0       	ldi	r26, 0x0A	; 10
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	ab 83       	std	Y+3, r26	; 0x03
    148a:	bc 83       	std	Y+4, r27	; 0x04
    148c:	1d 82       	std	Y+5, r1	; 0x05
	}
}

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    148e:	80 91 c6 00 	lds	r24, 0x00C6

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    1492:	80 91 c6 00 	lds	r24, 0x00C6
	char s[5] = "/U\n";
	uint8_t resp;

	clear_rx_buf();

	glcd_puts0(s);
    1496:	8e 01       	movw	r16, r28
    1498:	0f 5f       	subi	r16, 0xFF	; 255
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	c8 01       	movw	r24, r16
    149e:	0e 94 9a 09 	call	0x1334	; 0x1334 <glcd_puts0>

	resp = glcd_resp(650000,s);
    14a2:	60 e1       	ldi	r22, 0x10	; 16
    14a4:	7b ee       	ldi	r23, 0xEB	; 235
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a8 01       	movw	r20, r16
    14ac:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_resp>

	if(resp)
    14b0:	88 23       	and	r24, r24
    14b2:	b9 f0       	breq	.+46     	; 0x14e2 <glcd_update+0x78>
	{
		if(resp == 'Y')
    14b4:	89 35       	cpi	r24, 0x59	; 89
    14b6:	59 f4       	brne	.+22     	; 0x14ce <glcd_update+0x64>
    14b8:	88 ee       	ldi	r24, 0xE8	; 232
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14bc:	20 e9       	ldi	r18, 0x90	; 144
    14be:	31 e0       	ldi	r19, 0x01	; 1
    14c0:	f9 01       	movw	r30, r18
    14c2:	31 97       	sbiw	r30, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <glcd_update+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c8:	d9 f7       	brne	.-10     	; 0x14c0 <glcd_update+0x56>
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0a c0       	rjmp	.+20     	; 0x14e2 <glcd_update+0x78>
    14ce:	88 ee       	ldi	r24, 0xE8	; 232
    14d0:	93 e0       	ldi	r25, 0x03	; 3
    14d2:	20 e9       	ldi	r18, 0x90	; 144
    14d4:	31 e0       	ldi	r19, 0x01	; 1
    14d6:	f9 01       	movw	r30, r18
    14d8:	31 97       	sbiw	r30, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <glcd_update+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14de:	d9 f7       	brne	.-10     	; 0x14d6 <glcd_update+0x6c>
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
	{
		return 0;
	}


}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	08 95       	ret

000014f6 <glcd_set>:
	_delay_ms(GLCD_INIT_TIME);
	uart0_init(GLCD_BAUD);
}

int8_t glcd_set(uint8_t reg,int16_t val)
{
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	6e 97       	sbiw	r28, 0x1e	; 30
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
	}
}

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    150e:	90 91 c6 00 	lds	r25, 0x00C6

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    1512:	90 91 c6 00 	lds	r25, 0x00C6
	uint8_t resp;
	char s[30];

	clear_rx_buf();

	sprintf(s,"/S%02u0%i\n",reg,val);
    1516:	2d b7       	in	r18, 0x3d	; 61
    1518:	3e b7       	in	r19, 0x3e	; 62
    151a:	28 50       	subi	r18, 0x08	; 8
    151c:	30 40       	sbci	r19, 0x00	; 0
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	3e bf       	out	0x3e, r19	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	2d bf       	out	0x3d, r18	; 61
    1528:	ed b7       	in	r30, 0x3d	; 61
    152a:	fe b7       	in	r31, 0x3e	; 62
    152c:	31 96       	adiw	r30, 0x01	; 1
    152e:	8e 01       	movw	r16, r28
    1530:	0f 5f       	subi	r16, 0xFF	; 255
    1532:	1f 4f       	sbci	r17, 0xFF	; 255
    1534:	ad b7       	in	r26, 0x3d	; 61
    1536:	be b7       	in	r27, 0x3e	; 62
    1538:	12 96       	adiw	r26, 0x02	; 2
    153a:	1c 93       	st	X, r17
    153c:	0e 93       	st	-X, r16
    153e:	11 97       	sbiw	r26, 0x01	; 1
    1540:	22 e1       	ldi	r18, 0x12	; 18
    1542:	31 e0       	ldi	r19, 0x01	; 1
    1544:	33 83       	std	Z+3, r19	; 0x03
    1546:	22 83       	std	Z+2, r18	; 0x02
    1548:	84 83       	std	Z+4, r24	; 0x04
    154a:	15 82       	std	Z+5, r1	; 0x05
    154c:	77 83       	std	Z+7, r23	; 0x07
    154e:	66 83       	std	Z+6, r22	; 0x06
    1550:	0e 94 ee 10 	call	0x21dc	; 0x21dc <sprintf>
	glcd_puts0(s);
    1554:	2d b7       	in	r18, 0x3d	; 61
    1556:	3e b7       	in	r19, 0x3e	; 62
    1558:	28 5f       	subi	r18, 0xF8	; 248
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	3e bf       	out	0x3e, r19	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	2d bf       	out	0x3d, r18	; 61
    1566:	c8 01       	movw	r24, r16
    1568:	0e 94 9a 09 	call	0x1334	; 0x1334 <glcd_puts0>

	resp = glcd_resp(650000,s);
    156c:	60 e1       	ldi	r22, 0x10	; 16
    156e:	7b ee       	ldi	r23, 0xEB	; 235
    1570:	89 e0       	ldi	r24, 0x09	; 9
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	a8 01       	movw	r20, r16
    1576:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <glcd_resp>

	if(resp)
    157a:	88 23       	and	r24, r24
    157c:	29 f0       	breq	.+10     	; 0x1588 <glcd_set+0x92>
	{
		if(resp == 'Y')
    157e:	89 35       	cpi	r24, 0x59	; 89
    1580:	11 f0       	breq	.+4      	; 0x1586 <glcd_set+0x90>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <glcd_set+0x92>
    1586:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
    1588:	6e 96       	adiw	r28, 0x1e	; 30
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <svn_seg_spi>:

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    159e:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & _BV(SPIF)));
    15a0:	0d b4       	in	r0, 0x2d	; 45
    15a2:	07 fe       	sbrs	r0, 7
    15a4:	fd cf       	rjmp	.-6      	; 0x15a0 <svn_seg_spi+0x2>

	return(SPDR);
    15a6:	8e b5       	in	r24, 0x2e	; 46
}
    15a8:	08 95       	ret

000015aa <svn_seg_write>:

void svn_seg_write(unsigned char addr,unsigned char data)
{
	svn_seg_select();
    15aa:	28 98       	cbi	0x05, 0	; 5

	svn_seg_spi(addr & 0x0F);
    15ac:	8f 70       	andi	r24, 0x0F	; 15

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    15ae:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & _BV(SPIF)));
    15b0:	0d b4       	in	r0, 0x2d	; 45
    15b2:	07 fe       	sbrs	r0, 7
    15b4:	fd cf       	rjmp	.-6      	; 0x15b0 <svn_seg_write+0x6>

	return(SPDR);
    15b6:	8e b5       	in	r24, 0x2e	; 46

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    15b8:	6e bd       	out	0x2e, r22	; 46

	while(!(SPSR & _BV(SPIF)));
    15ba:	0d b4       	in	r0, 0x2d	; 45
    15bc:	07 fe       	sbrs	r0, 7
    15be:	fd cf       	rjmp	.-6      	; 0x15ba <svn_seg_write+0x10>

	return(SPDR);
    15c0:	8e b5       	in	r24, 0x2e	; 46
	svn_seg_select();

	svn_seg_spi(addr & 0x0F);
	svn_seg_spi(data);

	svn_seg_deselect();
    15c2:	28 9a       	sbi	0x05, 0	; 5
}
    15c4:	08 95       	ret

000015c6 <svn_seg_put_val>:

void svn_seg_put_val(unsigned int val)
{
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	ec 01       	movw	r28, r24
    15ce:	16 e0       	ldi	r17, 0x06	; 6
	unsigned char dig = 0;
	for(int i = 6;i > 0;i--)
	{
		dig = val % 10;
    15d0:	ce 01       	movw	r24, r28
    15d2:	6a e0       	ldi	r22, 0x0A	; 10
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__udivmodhi4>
    15da:	48 2f       	mov	r20, r24
		val = val / 10;
    15dc:	ce 01       	movw	r24, r28
    15de:	6a e0       	ldi	r22, 0x0A	; 10
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	0e 94 68 10 	call	0x20d0	; 0x20d0 <__udivmodhi4>
    15e6:	eb 01       	movw	r28, r22

		if(dig == 0 && val == 0)
    15e8:	44 23       	and	r20, r20
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <svn_seg_put_val+0x32>
    15ec:	61 15       	cp	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <svn_seg_put_val+0x32>
		{
			svn_seg_write(i,0xF);
    15f2:	81 2f       	mov	r24, r17
    15f4:	6f e0       	ldi	r22, 0x0F	; 15
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <svn_seg_put_val+0x36>
		}
		else
		{
			svn_seg_write(i,dig);
    15f8:	81 2f       	mov	r24, r17
    15fa:	64 2f       	mov	r22, r20
    15fc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
    1600:	11 50       	subi	r17, 0x01	; 1
}

void svn_seg_put_val(unsigned int val)
{
	unsigned char dig = 0;
	for(int i = 6;i > 0;i--)
    1602:	31 f7       	brne	.-52     	; 0x15d0 <svn_seg_put_val+0xa>
		else
		{
			svn_seg_write(i,dig);
		}
	}
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	08 95       	ret

0000160c <svn_seg_clr>:

}

void svn_seg_clr(void)
{
	svn_seg_write(SEG_ADDR_D0,SEG_SPC);
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	6f e0       	ldi	r22, 0x0F	; 15
    1610:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D1,SEG_SPC);
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	6f e0       	ldi	r22, 0x0F	; 15
    1618:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D2,SEG_SPC);
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	6f e0       	ldi	r22, 0x0F	; 15
    1620:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D3,SEG_SPC);
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	6f e0       	ldi	r22, 0x0F	; 15
    1628:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D4,SEG_SPC);
    162c:	85 e0       	ldi	r24, 0x05	; 5
    162e:	6f e0       	ldi	r22, 0x0F	; 15
    1630:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D5,SEG_SPC);
    1634:	86 e0       	ldi	r24, 0x06	; 6
    1636:	6f e0       	ldi	r22, 0x0F	; 15
    1638:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D6,0);
    163c:	87 e0       	ldi	r24, 0x07	; 7
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_D7,0);
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
}
    164c:	08 95       	ret

0000164e <svn_seg_init>:
}

void svn_seg_init(void)
{
	// Init IO Pins
	SVN_SEG_PORT |= _BV(SVN_SEG_CS);
    164e:	28 9a       	sbi	0x05, 0	; 5
	SVN_SEG_DDR |= _BV(SVN_SEG_CS);
    1650:	20 9a       	sbi	0x04, 0	; 4
	SPI_DDR |= _BV(SPI_MOSI)|_BV(SPI_SCK);
    1652:	84 b1       	in	r24, 0x04	; 4
    1654:	86 60       	ori	r24, 0x06	; 6
    1656:	84 b9       	out	0x04, r24	; 4

	// Init SPI
	SPCR = _BV(SPE)|_BV(MSTR);
    1658:	80 e5       	ldi	r24, 0x50	; 80
    165a:	8c bd       	out	0x2c, r24	; 44

	// Normal Operation
	svn_seg_write(SEG_ADDR_TST,SEG_TST_OFF);
    165c:	8f e0       	ldi	r24, 0x0F	; 15
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
	svn_seg_write(SEG_ADDR_SHTDWN,SEG_NORMAL);
    1664:	8c e0       	ldi	r24, 0x0C	; 12
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>

	// Set first 6 to decode
	svn_seg_write(SEG_ADDR_DCMD,0x3F);
    166c:	89 e0       	ldi	r24, 0x09	; 9
    166e:	6f e3       	ldi	r22, 0x3F	; 63
    1670:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>

	// Set for 6 Digits
	svn_seg_write(SEG_ADDR_SCNLMT,0x07);
    1674:	8b e0       	ldi	r24, 0x0B	; 11
    1676:	67 e0       	ldi	r22, 0x07	; 7
    1678:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>

	// Set Highest Intensity
	svn_seg_write(SEG_ADDR_INT,0x0F);
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	6f e0       	ldi	r22, 0x0F	; 15
    1680:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>

	svn_seg_clr();
    1684:	0e 94 06 0b 	call	0x160c	; 0x160c <svn_seg_clr>

}
    1688:	08 95       	ret

0000168a <svn_seg_pnum>:
	svn_seg_write(SEG_ADDR_D7,0);
}

void svn_seg_pnum(uint8_t dig,uint8_t val,uint8_t dp)
{
	svn_seg_write(SEG_ADDR_D0 + dig,val | dp);
    168a:	46 2b       	or	r20, r22
    168c:	8f 5f       	subi	r24, 0xFF	; 255
    168e:	64 2f       	mov	r22, r20
    1690:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <svn_seg_write>
}
    1694:	08 95       	ret

00001696 <__vector_12>:
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	0b b6       	in	r0, 0x3b	; 59
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	2f 93       	push	r18
    16a6:	3f 93       	push	r19
    16a8:	4f 93       	push	r20
    16aa:	5f 93       	push	r21
    16ac:	6f 93       	push	r22
    16ae:	7f 93       	push	r23
    16b0:	8f 93       	push	r24
    16b2:	9f 93       	push	r25
    16b4:	af 93       	push	r26
    16b6:	bf 93       	push	r27
    16b8:	ef 93       	push	r30
    16ba:	ff 93       	push	r31
    16bc:	84 ec       	ldi	r24, 0xC4	; 196
    16be:	99 e0       	ldi	r25, 0x09	; 9
    16c0:	90 93 89 00 	sts	0x0089, r25
    16c4:	80 93 88 00 	sts	0x0088, r24
    16c8:	80 91 49 01 	lds	r24, 0x0149
    16cc:	90 91 4a 01 	lds	r25, 0x014A
    16d0:	a0 91 4b 01 	lds	r26, 0x014B
    16d4:	b0 91 4c 01 	lds	r27, 0x014C
    16d8:	0a 96       	adiw	r24, 0x0a	; 10
    16da:	a1 1d       	adc	r26, r1
    16dc:	b1 1d       	adc	r27, r1
    16de:	80 93 49 01 	sts	0x0149, r24
    16e2:	90 93 4a 01 	sts	0x014A, r25
    16e6:	a0 93 4b 01 	sts	0x014B, r26
    16ea:	b0 93 4c 01 	sts	0x014C, r27
    16ee:	0e 94 92 00 	call	0x124	; 0x124 <handle_10ms_tick>
    16f2:	ff 91       	pop	r31
    16f4:	ef 91       	pop	r30
    16f6:	bf 91       	pop	r27
    16f8:	af 91       	pop	r26
    16fa:	9f 91       	pop	r25
    16fc:	8f 91       	pop	r24
    16fe:	7f 91       	pop	r23
    1700:	6f 91       	pop	r22
    1702:	5f 91       	pop	r21
    1704:	4f 91       	pop	r20
    1706:	3f 91       	pop	r19
    1708:	2f 91       	pop	r18
    170a:	0f 90       	pop	r0
    170c:	0b be       	out	0x3b, r0	; 59
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <systimer_10ms_restart>:
    1718:	28 2f       	mov	r18, r24
    171a:	10 92 85 00 	sts	0x0085, r1
    171e:	10 92 84 00 	sts	0x0084, r1
    1722:	88 23       	and	r24, r24
    1724:	29 f0       	breq	.+10     	; 0x1730 <systimer_10ms_restart+0x18>
    1726:	8a ef       	ldi	r24, 0xFA	; 250
    1728:	28 9f       	mul	r18, r24
    172a:	c0 01       	movw	r24, r0
    172c:	11 24       	eor	r1, r1
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <systimer_10ms_restart+0x1c>
    1730:	84 ec       	ldi	r24, 0xC4	; 196
    1732:	99 e0       	ldi	r25, 0x09	; 9
    1734:	90 93 89 00 	sts	0x0089, r25
    1738:	80 93 88 00 	sts	0x0088, r24
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	80 93 6f 00 	sts	0x006F, r24
    1742:	8b e0       	ldi	r24, 0x0B	; 11
    1744:	80 93 81 00 	sts	0x0081, r24
    1748:	22 23       	and	r18, r18
    174a:	a9 f4       	brne	.+42     	; 0x1776 <systimer_10ms_restart+0x5e>
    174c:	80 91 49 01 	lds	r24, 0x0149
    1750:	90 91 4a 01 	lds	r25, 0x014A
    1754:	a0 91 4b 01 	lds	r26, 0x014B
    1758:	b0 91 4c 01 	lds	r27, 0x014C
    175c:	0a 96       	adiw	r24, 0x0a	; 10
    175e:	a1 1d       	adc	r26, r1
    1760:	b1 1d       	adc	r27, r1
    1762:	80 93 49 01 	sts	0x0149, r24
    1766:	90 93 4a 01 	sts	0x014A, r25
    176a:	a0 93 4b 01 	sts	0x014B, r26
    176e:	b0 93 4c 01 	sts	0x014C, r27
    1772:	0e 94 92 00 	call	0x124	; 0x124 <handle_10ms_tick>
    1776:	08 95       	ret

00001778 <tach_leds>:
#include "tach.h"

volatile uint8_t tach_flag;

void tach_leds(uint16_t leds)
{
    1778:	ac 01       	movw	r20, r24
	uint8_t i = 0;
	uint8_t tach_hld = 0;

	tach_flag = 0;
    177a:	10 92 9c 03 	sts	0x039C, r1

	if(tach_sts()) 	tach_hld = 1;
    177e:	65 b1       	in	r22, 0x05	; 5
	else			tach_hld = 0;

	COM_PORT &= ~(_BV(TACH_CLK)|_BV(TACH_DATA));
    1780:	81 b3       	in	r24, 0x11	; 17
    1782:	8a 7f       	andi	r24, 0xFA	; 250
    1784:	81 bb       	out	0x11, r24	; 17

	tach_off();
    1786:	2d 9a       	sbi	0x05, 5	; 5
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0

	for(i = 0;i<16;i++)
	{
		if((leds >> i) & 0x0001)
    178c:	ca 01       	movw	r24, r20
    178e:	02 2e       	mov	r0, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <tach_leds+0x1e>
    1792:	96 95       	lsr	r25
    1794:	87 95       	ror	r24
    1796:	0a 94       	dec	r0
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <tach_leds+0x1a>
    179a:	80 fd       	sbrc	r24, 0
		{
			COM_PORT |= _BV(TACH_DATA);
    179c:	8a 9a       	sbi	0x11, 2	; 17
		}
		COM_PORT |= _BV(TACH_CLK);	// Clock High
    179e:	88 9a       	sbi	0x11, 0	; 17
		COM_PORT &= ~_BV(TACH_DATA);	// Data low
    17a0:	8a 98       	cbi	0x11, 2	; 17
		COM_PORT &= ~_BV(TACH_CLK);
    17a2:	88 98       	cbi	0x11, 0	; 17
		TACH_PORT |= _BV(TACH_LAT);
    17a4:	2c 9a       	sbi	0x05, 4	; 5
		TACH_PORT &= ~_BV(TACH_LAT);
    17a6:	2c 98       	cbi	0x05, 4	; 5
    17a8:	2f 5f       	subi	r18, 0xFF	; 255
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255

	COM_PORT &= ~(_BV(TACH_CLK)|_BV(TACH_DATA));

	tach_off();

	for(i = 0;i<16;i++)
    17ac:	20 31       	cpi	r18, 0x10	; 16
    17ae:	31 05       	cpc	r19, r1
    17b0:	69 f7       	brne	.-38     	; 0x178c <tach_leds+0x14>
		COM_PORT &= ~_BV(TACH_CLK);
		TACH_PORT |= _BV(TACH_LAT);
		TACH_PORT &= ~_BV(TACH_LAT);
	}

	if(tach_hld == 1)	tach_on();
    17b2:	65 ff       	sbrs	r22, 5
    17b4:	2d 98       	cbi	0x05, 5	; 5

	tach_flag = 1;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	80 93 9c 03 	sts	0x039C, r24
}
    17bc:	08 95       	ret

000017be <tach_out>:

void tach_out(uint8_t val)
{
    17be:	38 2f       	mov	r19, r24
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	04 c0       	rjmp	.+8      	; 0x17d0 <tach_out+0x12>
	uint16_t led_vals = 0;
	uint8_t i = 0;

	for(i = 0;i<val;i++)
	{
		led_vals = (led_vals >> 1);
    17c8:	96 95       	lsr	r25
    17ca:	87 95       	ror	r24
		led_vals |= 0x8000;
    17cc:	90 68       	ori	r25, 0x80	; 128
void tach_out(uint8_t val)
{
	uint16_t led_vals = 0;
	uint8_t i = 0;

	for(i = 0;i<val;i++)
    17ce:	2f 5f       	subi	r18, 0xFF	; 255
    17d0:	23 17       	cp	r18, r19
    17d2:	d0 f3       	brcs	.-12     	; 0x17c8 <tach_out+0xa>
	{
		led_vals = (led_vals >> 1);
		led_vals |= 0x8000;
	}

	tach_leds(led_vals);
    17d4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <tach_leds>
}
    17d8:	08 95       	ret

000017da <tach_init>:

void tach_init(void)
{
	TACH_DDR |= _BV(TACH_LAT)|_BV(TACH_EN);
    17da:	84 b1       	in	r24, 0x04	; 4
    17dc:	80 63       	ori	r24, 0x30	; 48
    17de:	84 b9       	out	0x04, r24	; 4
	COM_DDR |= _BV(TACH_CLK)|_BV(TACH_DATA);
    17e0:	80 b3       	in	r24, 0x10	; 16
    17e2:	85 60       	ori	r24, 0x05	; 5
    17e4:	80 bb       	out	0x10, r24	; 16

	tach_flag = 1;
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 9c 03 	sts	0x039C, r24
}
    17ec:	08 95       	ret

000017ee <uart_init>:
 */
void uart_init(void)
{
	//initialize USART1
	//initialize UART1
	stdout = stdin = &uart_str;
    17ee:	85 e2       	ldi	r24, 0x25	; 37
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	90 93 9e 03 	sts	0x039E, r25
    17f6:	80 93 9d 03 	sts	0x039D, r24
    17fa:	90 93 a0 03 	sts	0x03A0, r25
    17fe:	80 93 9f 03 	sts	0x039F, r24
	UCSR1A=_BV(U2X1);
    1802:	82 e0       	ldi	r24, 0x02	; 2
    1804:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B=0x98;
    1808:	88 e9       	ldi	r24, 0x98	; 152
    180a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C=0x06;
    180e:	86 e0       	ldi	r24, 0x06	; 6
    1810:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = (F_CPU / (8UL * UART_BAUD1)) - 1;
    1814:	80 e1       	ldi	r24, 0x10	; 16
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	90 93 cd 00 	sts	0x00CD, r25
    181c:	80 93 cc 00 	sts	0x00CC, r24
}
    1820:	08 95       	ret

00001822 <uart_Transmit>:

void uart_Transmit( unsigned char data )
{
    1822:	98 2f       	mov	r25, r24
/* Wait for empty transmit buffer */
while ( !( UCSR1A & (1<<UDRE1)) ) ;
    1824:	80 91 c8 00 	lds	r24, 0x00C8
    1828:	85 ff       	sbrs	r24, 5
    182a:	fc cf       	rjmp	.-8      	; 0x1824 <uart_Transmit+0x2>
/* Put data into buffer, sends the data */
UDR1 = data;
    182c:	90 93 ce 00 	sts	0x00CE, r25
}
    1830:	08 95       	ret

00001832 <uart_Receive>:


uint8_t uart_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSR1A & (1<<RXC1)) );
    1832:	80 91 c8 00 	lds	r24, 0x00C8
    1836:	87 ff       	sbrs	r24, 7
    1838:	fc cf       	rjmp	.-8      	; 0x1832 <uart_Receive>
/* Get and return received data from buffer */
return UDR1;
    183a:	80 91 ce 00 	lds	r24, 0x00CE
}
    183e:	08 95       	ret

00001840 <uart_putchar>:
/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream)
{
    1840:	1f 93       	push	r17
    1842:	18 2f       	mov	r17, r24

  if (c == '\a')
    1844:	87 30       	cpi	r24, 0x07	; 7
    1846:	49 f4       	brne	.+18     	; 0x185a <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    1848:	60 91 a1 03 	lds	r22, 0x03A1
    184c:	70 91 a2 03 	lds	r23, 0x03A2
    1850:	8d e1       	ldi	r24, 0x1D	; 29
    1852:	91 e0       	ldi	r25, 0x01	; 1
    1854:	0e 94 b1 10 	call	0x2162	; 0x2162 <fputs>
    1858:	0b c0       	rjmp	.+22     	; 0x1870 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    185a:	8a 30       	cpi	r24, 0x0A	; 10
    185c:	19 f4       	brne	.+6      	; 0x1864 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    185e:	8d e0       	ldi	r24, 0x0D	; 13
    1860:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
  loop_until_bit_is_set(UCSR1A, UDRE1);
    1864:	80 91 c8 00 	lds	r24, 0x00C8
    1868:	85 ff       	sbrs	r24, 5
    186a:	fc cf       	rjmp	.-8      	; 0x1864 <uart_putchar+0x24>
  UDR1 = c;
    186c:	10 93 ce 00 	sts	0x00CE, r17

  return 0;
}
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	1f 91       	pop	r17
    1876:	08 95       	ret

00001878 <uart_getchar>:
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream)
{
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    1886:	80 91 4d 01 	lds	r24, 0x014D
    188a:	90 91 4e 01 	lds	r25, 0x014E
    188e:	89 2b       	or	r24, r25
    1890:	09 f0       	breq	.+2      	; 0x1894 <uart_getchar+0x1c>
    1892:	9f c0       	rjmp	.+318    	; 0x19d2 <uart_getchar+0x15a>
    1894:	0f e4       	ldi	r16, 0x4F	; 79
    1896:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR1A, RXC1);
    1898:	80 91 c8 00 	lds	r24, 0x00C8
    189c:	87 ff       	sbrs	r24, 7
    189e:	fc cf       	rjmp	.-8      	; 0x1898 <uart_getchar+0x20>
	if (UCSR1A & _BV(FE1))
    18a0:	80 91 c8 00 	lds	r24, 0x00C8
    18a4:	84 ff       	sbrs	r24, 4
    18a6:	03 c0       	rjmp	.+6      	; 0x18ae <uart_getchar+0x36>
    18a8:	2e ef       	ldi	r18, 0xFE	; 254
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	a6 c0       	rjmp	.+332    	; 0x19fa <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
    18ae:	80 91 c8 00 	lds	r24, 0x00C8
    18b2:	83 fd       	sbrc	r24, 3
    18b4:	a0 c0       	rjmp	.+320    	; 0x19f6 <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR1;
    18b6:	90 91 ce 00 	lds	r25, 0x00CE
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    18ba:	9d 30       	cpi	r25, 0x0D	; 13
    18bc:	11 f0       	breq	.+4      	; 0x18c2 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    18be:	9a 30       	cpi	r25, 0x0A	; 10
    18c0:	69 f4       	brne	.+26     	; 0x18dc <uart_getchar+0x64>
	  {
	    *cp = c;
    18c2:	8a e0       	ldi	r24, 0x0A	; 10
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    18c8:	b7 01       	movw	r22, r14
    18ca:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
	    rxp = b;
    18ce:	8f e4       	ldi	r24, 0x4F	; 79
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	90 93 4e 01 	sts	0x014E, r25
    18d6:	80 93 4d 01 	sts	0x014D, r24
    18da:	7b c0       	rjmp	.+246    	; 0x19d2 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    18dc:	99 30       	cpi	r25, 0x09	; 9
    18de:	09 f4       	brne	.+2      	; 0x18e2 <uart_getchar+0x6a>
    18e0:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0')
    18e2:	89 2f       	mov	r24, r25
    18e4:	80 52       	subi	r24, 0x20	; 32
    18e6:	8f 35       	cpi	r24, 0x5F	; 95
    18e8:	10 f0       	brcs	.+4      	; 0x18ee <uart_getchar+0x76>
    18ea:	90 3a       	cpi	r25, 0xA0	; 160
    18ec:	70 f0       	brcs	.+28     	; 0x190a <uart_getchar+0x92>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    18ee:	f1 e0       	ldi	r31, 0x01	; 1
    18f0:	0e 39       	cpi	r16, 0x9E	; 158
    18f2:	1f 07       	cpc	r17, r31
    18f4:	11 f4       	brne	.+4      	; 0x18fa <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    18f6:	87 e0       	ldi	r24, 0x07	; 7
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    18fa:	f8 01       	movw	r30, r16
    18fc:	91 93       	st	Z+, r25
    18fe:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    1900:	89 2f       	mov	r24, r25
    1902:	b7 01       	movw	r22, r14
    1904:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
    1908:	c7 cf       	rjmp	.-114    	; 0x1898 <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    190a:	92 31       	cpi	r25, 0x12	; 18
    190c:	39 f1       	breq	.+78     	; 0x195c <uart_getchar+0xe4>
    190e:	93 31       	cpi	r25, 0x13	; 19
    1910:	38 f4       	brcc	.+14     	; 0x1920 <uart_getchar+0xa8>
    1912:	93 30       	cpi	r25, 0x03	; 3
    1914:	09 f4       	brne	.+2      	; 0x1918 <uart_getchar+0xa0>
    1916:	6f c0       	rjmp	.+222    	; 0x19f6 <uart_getchar+0x17e>
    1918:	98 30       	cpi	r25, 0x08	; 8
    191a:	09 f0       	breq	.+2      	; 0x191e <uart_getchar+0xa6>
    191c:	bd cf       	rjmp	.-134    	; 0x1898 <uart_getchar+0x20>
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <uart_getchar+0xba>
    1920:	97 31       	cpi	r25, 0x17	; 23
    1922:	09 f4       	brne	.+2      	; 0x1926 <uart_getchar+0xae>
    1924:	4b c0       	rjmp	.+150    	; 0x19bc <uart_getchar+0x144>
    1926:	9f 37       	cpi	r25, 0x7F	; 127
    1928:	21 f0       	breq	.+8      	; 0x1932 <uart_getchar+0xba>
    192a:	95 31       	cpi	r25, 0x15	; 21
    192c:	09 f0       	breq	.+2      	; 0x1930 <uart_getchar+0xb8>
    192e:	b4 cf       	rjmp	.-152    	; 0x1898 <uart_getchar+0x20>
    1930:	32 c0       	rjmp	.+100    	; 0x1996 <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    1932:	f1 e0       	ldi	r31, 0x01	; 1
    1934:	0f 34       	cpi	r16, 0x4F	; 79
    1936:	1f 07       	cpc	r17, r31
    1938:	09 f0       	breq	.+2      	; 0x193c <uart_getchar+0xc4>
    193a:	08 f4       	brcc	.+2      	; 0x193e <uart_getchar+0xc6>
    193c:	ad cf       	rjmp	.-166    	; 0x1898 <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	b7 01       	movw	r22, r14
    1942:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar(' ', stream);
    1946:	80 e2       	ldi	r24, 0x20	; 32
    1948:	b7 01       	movw	r22, r14
    194a:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar('\b', stream);
    194e:	88 e0       	ldi	r24, 0x08	; 8
    1950:	b7 01       	movw	r22, r14
    1952:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		cp--;
    1956:	01 50       	subi	r16, 0x01	; 1
    1958:	10 40       	sbci	r17, 0x00	; 0
    195a:	9e cf       	rjmp	.-196    	; 0x1898 <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    195c:	8d e0       	ldi	r24, 0x0D	; 13
    195e:	b7 01       	movw	r22, r14
    1960:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
    1964:	cf e4       	ldi	r28, 0x4F	; 79
    1966:	d1 e0       	ldi	r29, 0x01	; 1
    1968:	04 c0       	rjmp	.+8      	; 0x1972 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    196a:	89 91       	ld	r24, Y+
    196c:	b7 01       	movw	r22, r14
    196e:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1972:	c0 17       	cp	r28, r16
    1974:	d1 07       	cpc	r29, r17
    1976:	c8 f3       	brcs	.-14     	; 0x196a <uart_getchar+0xf2>
    1978:	8f cf       	rjmp	.-226    	; 0x1898 <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    197a:	88 e0       	ldi	r24, 0x08	; 8
    197c:	b7 01       	movw	r22, r14
    197e:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar(' ', stream);
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	b7 01       	movw	r22, r14
    1986:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar('\b', stream);
    198a:	88 e0       	ldi	r24, 0x08	; 8
    198c:	b7 01       	movw	r22, r14
    198e:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		cp--;
    1992:	01 50       	subi	r16, 0x01	; 1
    1994:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	0f 34       	cpi	r16, 0x4F	; 79
    199a:	18 07       	cpc	r17, r24
    199c:	09 f0       	breq	.+2      	; 0x19a0 <uart_getchar+0x128>
    199e:	68 f7       	brcc	.-38     	; 0x197a <uart_getchar+0x102>
    19a0:	7b cf       	rjmp	.-266    	; 0x1898 <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    19a2:	88 e0       	ldi	r24, 0x08	; 8
    19a4:	b7 01       	movw	r22, r14
    19a6:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar(' ', stream);
    19aa:	80 e2       	ldi	r24, 0x20	; 32
    19ac:	b7 01       	movw	r22, r14
    19ae:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
		uart_putchar('\b', stream);
    19b2:	88 e0       	ldi	r24, 0x08	; 8
    19b4:	b7 01       	movw	r22, r14
    19b6:	0e 94 20 0c 	call	0x1840	; 0x1840 <uart_putchar>
    19ba:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    19bc:	e1 e0       	ldi	r30, 0x01	; 1
    19be:	0f 34       	cpi	r16, 0x4F	; 79
    19c0:	1e 07       	cpc	r17, r30
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <uart_getchar+0x14e>
    19c4:	08 f4       	brcc	.+2      	; 0x19c8 <uart_getchar+0x150>
    19c6:	68 cf       	rjmp	.-304    	; 0x1898 <uart_getchar+0x20>
    19c8:	e8 01       	movw	r28, r16
    19ca:	8a 91       	ld	r24, -Y
    19cc:	80 32       	cpi	r24, 0x20	; 32
    19ce:	49 f7       	brne	.-46     	; 0x19a2 <uart_getchar+0x12a>
    19d0:	63 cf       	rjmp	.-314    	; 0x1898 <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    19d2:	e0 91 4d 01 	lds	r30, 0x014D
    19d6:	f0 91 4e 01 	lds	r31, 0x014E
    19da:	81 91       	ld	r24, Z+
    19dc:	f0 93 4e 01 	sts	0x014E, r31
    19e0:	e0 93 4d 01 	sts	0x014D, r30
  if (c == '\n')
    19e4:	8a 30       	cpi	r24, 0x0A	; 10
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <uart_getchar+0x178>
    rxp = 0;
    19e8:	10 92 4e 01 	sts	0x014E, r1
    19ec:	10 92 4d 01 	sts	0x014D, r1

  return c;
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <uart_getchar+0x182>
    19f6:	2f ef       	ldi	r18, 0xFF	; 255
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
}
    19fa:	c9 01       	movw	r24, r18
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	ef 90       	pop	r14
    1a08:	08 95       	ret

00001a0a <btn_init>:
volatile uint8_t pot_disp = 1;

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
    1a0a:	0f 93       	push	r16
	btns[idx].port = prt;
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	fc 01       	movw	r30, r24
    1a10:	33 e0       	ldi	r19, 0x03	; 3
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	3a 95       	dec	r19
    1a18:	e1 f7       	brne	.-8      	; 0x1a12 <btn_init+0x8>
    1a1a:	e8 1b       	sub	r30, r24
    1a1c:	f9 0b       	sbc	r31, r25
    1a1e:	ee 51       	subi	r30, 0x1E	; 30
    1a20:	fe 4f       	sbci	r31, 0xFE	; 254
    1a22:	71 83       	std	Z+1, r23	; 0x01
    1a24:	60 83       	st	Z, r22
	btns[idx].pin = pn;
    1a26:	42 83       	std	Z+2, r20	; 0x02
	btns[idx].state = BTN_STATE_START;
    1a28:	13 82       	std	Z+3, r1	; 0x03
	btns[idx].pshd = p;
    1a2a:	24 83       	std	Z+4, r18	; 0x04
	btns[idx].held = h;
    1a2c:	05 83       	std	Z+5, r16	; 0x05
	btns[idx].hcnt = 0;
    1a2e:	16 82       	std	Z+6, r1	; 0x06
}
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <led_level>:


void led_level(uint8_t lvl)
{

}
    1a34:	08 95       	ret

00001a36 <led_ctrl>:

void led_ctrl(uint8_t led,uint8_t state,uint16_t tmr)
{
	leds.rem[led] = LED_NO_TMR;
    1a36:	a8 2f       	mov	r26, r24
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	fd 01       	movw	r30, r26
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	e4 53       	subi	r30, 0x34	; 52
    1a42:	fe 4f       	sbci	r31, 0xFE	; 254
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	9f ef       	ldi	r25, 0xFF	; 255
    1a48:	96 83       	std	Z+6, r25	; 0x06
    1a4a:	85 83       	std	Z+5, r24	; 0x05
	switch(state)
    1a4c:	61 30       	cpi	r22, 0x01	; 1
    1a4e:	29 f1       	breq	.+74     	; 0x1a9a <led_ctrl+0x64>
    1a50:	61 30       	cpi	r22, 0x01	; 1
    1a52:	30 f0       	brcs	.+12     	; 0x1a60 <led_ctrl+0x2a>
    1a54:	62 30       	cpi	r22, 0x02	; 2
    1a56:	e9 f1       	breq	.+122    	; 0x1ad2 <led_ctrl+0x9c>
    1a58:	63 30       	cpi	r22, 0x03	; 3
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <led_ctrl+0x28>
    1a5c:	6d c0       	rjmp	.+218    	; 0x1b38 <led_ctrl+0x102>
    1a5e:	53 c0       	rjmp	.+166    	; 0x1b06 <led_ctrl+0xd0>
	{
		case LED_OFF:
			leds.on &= ~_BV(led);
    1a60:	80 91 ce 01 	lds	r24, 0x01CE
    1a64:	21 e0       	ldi	r18, 0x01	; 1
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	0a 2e       	mov	r0, r26
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <led_ctrl+0x3a>
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <led_ctrl+0x36>
    1a74:	92 2f       	mov	r25, r18
    1a76:	90 95       	com	r25
    1a78:	89 23       	and	r24, r25
    1a7a:	80 93 ce 01 	sts	0x01CE, r24
			leds.blink_fst &= ~_BV(led);
    1a7e:	80 91 d0 01 	lds	r24, 0x01D0
    1a82:	89 23       	and	r24, r25
    1a84:	80 93 d0 01 	sts	0x01D0, r24
			leds.blink_slw &= ~_BV(led);
    1a88:	80 91 cf 01 	lds	r24, 0x01CF
    1a8c:	98 23       	and	r25, r24
    1a8e:	90 93 cf 01 	sts	0x01CF, r25
			PORTC |= _BV(led);
    1a92:	88 b1       	in	r24, 0x08	; 8
    1a94:	28 2b       	or	r18, r24
    1a96:	28 b9       	out	0x08, r18	; 8
    1a98:	4f c0       	rjmp	.+158    	; 0x1b38 <led_ctrl+0x102>
			break;
		case LED_ON:
			leds.on |=	_BV(led);
    1a9a:	20 91 ce 01 	lds	r18, 0x01CE
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0a 2e       	mov	r0, r26
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <led_ctrl+0x74>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <led_ctrl+0x70>
    1aae:	28 2b       	or	r18, r24
    1ab0:	20 93 ce 01 	sts	0x01CE, r18
			leds.blink_fst &= ~_BV(led);
    1ab4:	20 91 d0 01 	lds	r18, 0x01D0
    1ab8:	80 95       	com	r24
    1aba:	28 23       	and	r18, r24
    1abc:	20 93 d0 01 	sts	0x01D0, r18
			leds.blink_slw &= ~_BV(led);
    1ac0:	20 91 cf 01 	lds	r18, 0x01CF
    1ac4:	28 23       	and	r18, r24
    1ac6:	20 93 cf 01 	sts	0x01CF, r18
			PORTC &= ~_BV(led);
    1aca:	28 b1       	in	r18, 0x08	; 8
    1acc:	82 23       	and	r24, r18
    1ace:	88 b9       	out	0x08, r24	; 8
    1ad0:	33 c0       	rjmp	.+102    	; 0x1b38 <led_ctrl+0x102>
			break;
		case LED_BLINK_FAST:
			leds.on &= ~_BV(led);
    1ad2:	20 91 ce 01 	lds	r18, 0x01CE
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	0a 2e       	mov	r0, r26
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <led_ctrl+0xac>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <led_ctrl+0xa8>
    1ae6:	38 2f       	mov	r19, r24
    1ae8:	30 95       	com	r19
    1aea:	23 23       	and	r18, r19
    1aec:	20 93 ce 01 	sts	0x01CE, r18
			leds.blink_fst |= _BV(led);
    1af0:	20 91 d0 01 	lds	r18, 0x01D0
    1af4:	82 2b       	or	r24, r18
    1af6:	80 93 d0 01 	sts	0x01D0, r24
			leds.blink_slw &= ~_BV(led);
    1afa:	80 91 cf 01 	lds	r24, 0x01CF
    1afe:	38 23       	and	r19, r24
    1b00:	30 93 cf 01 	sts	0x01CF, r19
    1b04:	19 c0       	rjmp	.+50     	; 0x1b38 <led_ctrl+0x102>
			break;
		case LED_BLINK_SLOW:
			leds.on &= ~_BV(led);
    1b06:	30 91 ce 01 	lds	r19, 0x01CE
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	0a 2e       	mov	r0, r26
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <led_ctrl+0xe0>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <led_ctrl+0xdc>
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	20 95       	com	r18
    1b1e:	32 23       	and	r19, r18
    1b20:	30 93 ce 01 	sts	0x01CE, r19
			leds.blink_fst &= ~_BV(led);
    1b24:	30 91 d0 01 	lds	r19, 0x01D0
    1b28:	23 23       	and	r18, r19
    1b2a:	20 93 d0 01 	sts	0x01D0, r18
			leds.blink_slw |= _BV(led);
    1b2e:	20 91 cf 01 	lds	r18, 0x01CF
    1b32:	82 2b       	or	r24, r18
    1b34:	80 93 cf 01 	sts	0x01CF, r24
			break;
		default :
			break;
	}
	leds.rem[led] = tmr;
    1b38:	aa 0f       	add	r26, r26
    1b3a:	bb 1f       	adc	r27, r27
    1b3c:	a4 53       	subi	r26, 0x34	; 52
    1b3e:	be 4f       	sbci	r27, 0xFE	; 254
    1b40:	16 96       	adiw	r26, 0x06	; 6
    1b42:	5c 93       	st	X, r21
    1b44:	4e 93       	st	-X, r20
    1b46:	15 97       	sbiw	r26, 0x05	; 5
}
    1b48:	08 95       	ret

00001b4a <handle_btn>:

void handle_btn(uint8_t id)
{
	switch(btns[id].state)
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	50 e0       	ldi	r21, 0x00	; 0
    1b4e:	da 01       	movw	r26, r20
    1b50:	83 e0       	ldi	r24, 0x03	; 3
    1b52:	aa 0f       	add	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	8a 95       	dec	r24
    1b58:	e1 f7       	brne	.-8      	; 0x1b52 <handle_btn+0x8>
    1b5a:	a4 1b       	sub	r26, r20
    1b5c:	b5 0b       	sbc	r27, r21
    1b5e:	ae 51       	subi	r26, 0x1E	; 30
    1b60:	be 4f       	sbci	r27, 0xFE	; 254
    1b62:	13 96       	adiw	r26, 0x03	; 3
    1b64:	8c 91       	ld	r24, X
    1b66:	13 97       	sbiw	r26, 0x03	; 3
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	e9 f0       	breq	.+58     	; 0x1ba6 <handle_btn+0x5c>
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	38 f0       	brcs	.+14     	; 0x1b7e <handle_btn+0x34>
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <handle_btn+0x2c>
    1b74:	45 c0       	rjmp	.+138    	; 0x1c00 <handle_btn+0xb6>
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <handle_btn+0x32>
    1b7a:	6e c0       	rjmp	.+220    	; 0x1c58 <handle_btn+0x10e>
    1b7c:	5c c0       	rjmp	.+184    	; 0x1c36 <handle_btn+0xec>
	{
		case BTN_STATE_START :
			if(!(*(btns[id].port) & _BV(btns[id].pin)))
    1b7e:	ed 91       	ld	r30, X+
    1b80:	fc 91       	ld	r31, X
    1b82:	11 97       	sbiw	r26, 0x01	; 1
    1b84:	80 81       	ld	r24, Z
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	2c 91       	ld	r18, X
    1b8a:	12 97       	sbiw	r26, 0x02	; 2
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <handle_btn+0x4a>
    1b90:	95 95       	asr	r25
    1b92:	87 95       	ror	r24
    1b94:	2a 95       	dec	r18
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <handle_btn+0x46>
    1b98:	80 fd       	sbrc	r24, 0
    1b9a:	5e c0       	rjmp	.+188    	; 0x1c58 <handle_btn+0x10e>
			{
				btns[id].hcnt = 0;
    1b9c:	16 96       	adiw	r26, 0x06	; 6
    1b9e:	1c 92       	st	X, r1
    1ba0:	16 97       	sbiw	r26, 0x06	; 6
				btns[id].state = BTN_STATE_WAIT;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	45 c0       	rjmp	.+138    	; 0x1c30 <handle_btn+0xe6>
			}
			break;
		case BTN_STATE_WAIT :
			if(btns[id].hcnt >= BTN_HELD_TIME)
    1ba6:	16 96       	adiw	r26, 0x06	; 6
    1ba8:	8c 91       	ld	r24, X
    1baa:	16 97       	sbiw	r26, 0x06	; 6
    1bac:	84 36       	cpi	r24, 0x64	; 100
    1bae:	20 f0       	brcs	.+8      	; 0x1bb8 <handle_btn+0x6e>
			{
				btns[id].state = BTN_STATE_HELD;
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	13 96       	adiw	r26, 0x03	; 3
    1bb4:	8c 93       	st	X, r24
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <handle_btn+0x9a>
			}
			else if(*(btns[id].port) & _BV(btns[id].pin))
    1bb8:	ed 91       	ld	r30, X+
    1bba:	fc 91       	ld	r31, X
    1bbc:	11 97       	sbiw	r26, 0x01	; 1
    1bbe:	80 81       	ld	r24, Z
    1bc0:	12 96       	adiw	r26, 0x02	; 2
    1bc2:	2c 91       	ld	r18, X
    1bc4:	12 97       	sbiw	r26, 0x02	; 2
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <handle_btn+0x84>
    1bca:	95 95       	asr	r25
    1bcc:	87 95       	ror	r24
    1bce:	2a 95       	dec	r18
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <handle_btn+0x80>
    1bd2:	80 ff       	sbrs	r24, 0
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <handle_btn+0x9a>
			{
				last_btn = btns[id].pshd;
    1bd6:	14 96       	adiw	r26, 0x04	; 4
    1bd8:	8c 91       	ld	r24, X
    1bda:	14 97       	sbiw	r26, 0x04	; 4
    1bdc:	80 93 b2 01 	sts	0x01B2, r24
				btns[id].state = BTN_STATE_START;
    1be0:	13 96       	adiw	r26, 0x03	; 3
    1be2:	1c 92       	st	X, r1
			}
			btns[id].hcnt++;
    1be4:	fa 01       	movw	r30, r20
    1be6:	a3 e0       	ldi	r26, 0x03	; 3
    1be8:	ee 0f       	add	r30, r30
    1bea:	ff 1f       	adc	r31, r31
    1bec:	aa 95       	dec	r26
    1bee:	e1 f7       	brne	.-8      	; 0x1be8 <handle_btn+0x9e>
    1bf0:	e4 1b       	sub	r30, r20
    1bf2:	f5 0b       	sbc	r31, r21
    1bf4:	ee 51       	subi	r30, 0x1E	; 30
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	86 81       	ldd	r24, Z+6	; 0x06
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	86 83       	std	Z+6, r24	; 0x06
    1bfe:	08 95       	ret
			break;
		case BTN_STATE_HELD :
			last_btn = btns[id].held;
    1c00:	15 96       	adiw	r26, 0x05	; 5
    1c02:	8c 91       	ld	r24, X
    1c04:	15 97       	sbiw	r26, 0x05	; 5
    1c06:	80 93 b2 01 	sts	0x01B2, r24
			if(*(btns[id].port) & _BV(btns[id].pin))
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	11 97       	sbiw	r26, 0x01	; 1
    1c10:	80 81       	ld	r24, Z
    1c12:	12 96       	adiw	r26, 0x02	; 2
    1c14:	2c 91       	ld	r18, X
    1c16:	12 97       	sbiw	r26, 0x02	; 2
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <handle_btn+0xd6>
    1c1c:	95 95       	asr	r25
    1c1e:	87 95       	ror	r24
    1c20:	2a 95       	dec	r18
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <handle_btn+0xd2>
    1c24:	80 ff       	sbrs	r24, 0
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <handle_btn+0xe4>
			{
				btns[id].state = BTN_STATE_START;
    1c28:	13 96       	adiw	r26, 0x03	; 3
    1c2a:	1c 92       	st	X, r1
    1c2c:	08 95       	ret
			}
			else
			{
				btns[id].state = BTN_STATE_RELEASE;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	13 96       	adiw	r26, 0x03	; 3
    1c32:	8c 93       	st	X, r24
    1c34:	08 95       	ret
			}
			break;
		case BTN_STATE_RELEASE :
			if(*(btns[id].port) & _BV(btns[id].pin))
    1c36:	ed 91       	ld	r30, X+
    1c38:	fc 91       	ld	r31, X
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	80 81       	ld	r24, Z
    1c3e:	12 96       	adiw	r26, 0x02	; 2
    1c40:	2c 91       	ld	r18, X
    1c42:	12 97       	sbiw	r26, 0x02	; 2
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <handle_btn+0x102>
    1c48:	95 95       	asr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	2a 95       	dec	r18
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <handle_btn+0xfe>
    1c50:	80 ff       	sbrs	r24, 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <handle_btn+0x10e>
			{
				btns[id].state = BTN_STATE_START;
    1c54:	13 96       	adiw	r26, 0x03	; 3
    1c56:	1c 92       	st	X, r1
    1c58:	08 95       	ret

00001c5a <handle_enc>:
	uint8_t a_new = 0;
	uint8_t b_new = 0;
	uint8_t i;
	uint8_t sum = 0;

	if(ENC_A_PINS & _BV(ENC_A))	a_new = 1;
    1c5a:	89 b1       	in	r24, 0x09	; 9
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	38 2f       	mov	r19, r24
    1c64:	31 70       	andi	r19, 0x01	; 1
	if(ENC_B_PINS & _BV(ENC_B)) b_new = 1;
    1c66:	29 b1       	in	r18, 0x09	; 9
    1c68:	21 70       	andi	r18, 0x01	; 1

	if(a_new == enc.a && b_new == enc.b)
    1c6a:	80 91 b7 01 	lds	r24, 0x01B7
    1c6e:	38 17       	cp	r19, r24
    1c70:	29 f4       	brne	.+10     	; 0x1c7c <handle_enc+0x22>
    1c72:	80 91 b8 01 	lds	r24, 0x01B8
    1c76:	28 17       	cp	r18, r24
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <handle_enc+0x22>
    1c7a:	4f c0       	rjmp	.+158    	; 0x1d1a <handle_enc+0xc0>
	{
		return;
	}

	enc.hist.shft = (enc.hist.shft) << 8;
    1c7c:	80 91 b3 01 	lds	r24, 0x01B3
    1c80:	90 91 b4 01 	lds	r25, 0x01B4
    1c84:	a0 91 b5 01 	lds	r26, 0x01B5
    1c88:	b0 91 b6 01 	lds	r27, 0x01B6
    1c8c:	ba 2f       	mov	r27, r26
    1c8e:	a9 2f       	mov	r26, r25
    1c90:	98 2f       	mov	r25, r24
    1c92:	88 27       	eor	r24, r24
    1c94:	80 93 b3 01 	sts	0x01B3, r24
    1c98:	90 93 b4 01 	sts	0x01B4, r25
    1c9c:	a0 93 b5 01 	sts	0x01B5, r26
    1ca0:	b0 93 b6 01 	sts	0x01B6, r27
	enc.hist.buf[0] = enc_table[a_new + b_new*2][enc.a +enc.b*2];
    1ca4:	90 91 b7 01 	lds	r25, 0x01B7
    1ca8:	80 91 b8 01 	lds	r24, 0x01B8
    1cac:	e2 2f       	mov	r30, r18
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	ee 0f       	add	r30, r30
    1cb2:	ff 1f       	adc	r31, r31
    1cb4:	e3 0f       	add	r30, r19
    1cb6:	f1 1d       	adc	r31, r1
    1cb8:	ee 0f       	add	r30, r30
    1cba:	ff 1f       	adc	r31, r31
    1cbc:	e8 0f       	add	r30, r24
    1cbe:	f1 1d       	adc	r31, r1
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	e9 0f       	add	r30, r25
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	ec 5c       	subi	r30, 0xCC	; 204
    1cca:	fe 4f       	sbci	r31, 0xFE	; 254
    1ccc:	80 81       	ld	r24, Z
    1cce:	80 93 b3 01 	sts	0x01B3, r24

	enc.a = a_new;
    1cd2:	30 93 b7 01 	sts	0x01B7, r19
	enc.b = b_new;
    1cd6:	20 93 b8 01 	sts	0x01B8, r18

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1cda:	80 91 b3 01 	lds	r24, 0x01B3
    1cde:	82 30       	cpi	r24, 0x02	; 2
    1ce0:	e1 f0       	breq	.+56     	; 0x1d1a <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1ce2:	20 91 b3 01 	lds	r18, 0x01B3
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1ce6:	80 91 b4 01 	lds	r24, 0x01B4
    1cea:	82 30       	cpi	r24, 0x02	; 2
    1cec:	b1 f0       	breq	.+44     	; 0x1d1a <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1cee:	90 91 b4 01 	lds	r25, 0x01B4
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1cf2:	80 91 b5 01 	lds	r24, 0x01B5
    1cf6:	82 30       	cpi	r24, 0x02	; 2
    1cf8:	81 f0       	breq	.+32     	; 0x1d1a <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1cfa:	80 91 b5 01 	lds	r24, 0x01B5
    1cfe:	29 0f       	add	r18, r25
    1d00:	28 0f       	add	r18, r24
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1d02:	80 91 b6 01 	lds	r24, 0x01B6
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	41 f0       	breq	.+16     	; 0x1d1a <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1d0a:	80 91 b6 01 	lds	r24, 0x01B6
	}

	enc.val +=sum;
    1d0e:	90 91 ba 01 	lds	r25, 0x01BA
    1d12:	28 0f       	add	r18, r24
    1d14:	29 0f       	add	r18, r25
    1d16:	20 93 ba 01 	sts	0x01BA, r18
    1d1a:	08 95       	ret

00001d1c <handle_tach>:
volatile uint16_t last_tach_disp = 0;

#define SHIFT_POINT 14500

void handle_tach(void)
{
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
	uint16_t curr_tach;
	uint16_t curr_tach_disp;
	if(data[0].rpm_mode == RPM_OFF)
    1d20:	80 91 df 02 	lds	r24, 0x02DF
    1d24:	88 23       	and	r24, r24
    1d26:	29 f4       	brne	.+10     	; 0x1d32 <handle_tach+0x16>
	{
		curr_tach = data[0].rpm;
    1d28:	c0 91 29 02 	lds	r28, 0x0229
    1d2c:	d0 91 2a 02 	lds	r29, 0x022A
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <handle_tach+0x28>
	}
	else
	{
		curr_tach = data[0].rpm_disp;
    1d32:	80 91 d7 02 	lds	r24, 0x02D7
    1d36:	90 91 d8 02 	lds	r25, 0x02D8
    1d3a:	a0 91 d9 02 	lds	r26, 0x02D9
    1d3e:	b0 91 da 02 	lds	r27, 0x02DA
    1d42:	ec 01       	movw	r28, r24
	}

	if(curr_tach > SHIFT_POINT)
    1d44:	88 e3       	ldi	r24, 0x38	; 56
    1d46:	c5 3a       	cpi	r28, 0xA5	; 165
    1d48:	d8 07       	cpc	r29, r24
    1d4a:	28 f0       	brcs	.+10     	; 0x1d56 <handle_tach+0x3a>
	{
		//PORTC &= ~_BV(LED5);
		//PORTC &= ~_BV(LED6);
		tach_on();
    1d4c:	2d 98       	cbi	0x05, 5	; 5
		tach_out(15);
    1d4e:	8f e0       	ldi	r24, 0x0F	; 15
    1d50:	0e 94 df 0b 	call	0x17be	; 0x17be <tach_out>
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <handle_tach+0x3c>
	}
	else
	{
		//PORTC |= _BV(LED5);
		//PORTC |= _BV(LED6);
		tach_off();
    1d56:	2d 9a       	sbi	0x05, 5	; 5
//					last_tach_disp = curr_tach_disp;
//				}
//
//		}

		svn_seg_put_val(curr_tach);
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <svn_seg_put_val>

		last_tach = curr_tach;
    1d5e:	d0 93 a3 01 	sts	0x01A3, r29
    1d62:	c0 93 a2 01 	sts	0x01A2, r28

}
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <__vector_9>:
volatile int16_t lastz = 0;
volatile uint8_t acl_frozen = 0;
volatile uint8_t last_acl_chg = 0;

ISR(TIMER2_COMP_vect)
{
    1d6c:	1f 92       	push	r1
    1d6e:	0f 92       	push	r0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	0f 92       	push	r0
    1d74:	0b b6       	in	r0, 0x3b	; 59
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	1f 93       	push	r17
    1d7c:	2f 93       	push	r18
    1d7e:	3f 93       	push	r19
    1d80:	4f 93       	push	r20
    1d82:	5f 93       	push	r21
    1d84:	6f 93       	push	r22
    1d86:	7f 93       	push	r23
    1d88:	8f 93       	push	r24
    1d8a:	9f 93       	push	r25
    1d8c:	af 93       	push	r26
    1d8e:	bf 93       	push	r27
    1d90:	ef 93       	push	r30
    1d92:	ff 93       	push	r31
	uint8_t i;

	ui_cntr2++;
    1d94:	80 91 a0 01 	lds	r24, 0x01A0
    1d98:	90 91 a1 01 	lds	r25, 0x01A1
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	90 93 a1 01 	sts	0x01A1, r25
    1da2:	80 93 a0 01 	sts	0x01A0, r24
	if(ui_cntr2 == 100000)
    1da6:	80 91 a0 01 	lds	r24, 0x01A0
    1daa:	90 91 a1 01 	lds	r25, 0x01A1
	{
		ui_cntr2 = 0;
	}

	handle_enc();
    1dae:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <handle_enc>
    1db2:	10 e0       	ldi	r17, 0x00	; 0


	for(i = 0;i<10;i++)
	{
		if(i != 3)
    1db4:	13 30       	cpi	r17, 0x03	; 3
    1db6:	19 f0       	breq	.+6      	; 0x1dbe <__vector_9+0x52>
		{
			handle_btn(i);
    1db8:	81 2f       	mov	r24, r17
    1dba:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <handle_btn>
	}

	handle_enc();


	for(i = 0;i<10;i++)
    1dbe:	1f 5f       	subi	r17, 0xFF	; 255
    1dc0:	1a 30       	cpi	r17, 0x0A	; 10
    1dc2:	c1 f7       	brne	.-16     	; 0x1db4 <__vector_9+0x48>
		{
			handle_btn(i);
		}
	}

	handle_tach();
    1dc4:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <handle_tach>

	if((data[0].acl_x == lastx)&&(data[0].acl_y == lasty)&&(data[0].acl_z == lastz))
    1dc8:	20 91 84 02 	lds	r18, 0x0284
    1dcc:	30 91 85 02 	lds	r19, 0x0285
    1dd0:	80 91 a6 01 	lds	r24, 0x01A6
    1dd4:	90 91 a7 01 	lds	r25, 0x01A7
    1dd8:	28 17       	cp	r18, r24
    1dda:	39 07       	cpc	r19, r25
    1ddc:	21 f5       	brne	.+72     	; 0x1e26 <__vector_9+0xba>
    1dde:	20 91 86 02 	lds	r18, 0x0286
    1de2:	30 91 87 02 	lds	r19, 0x0287
    1de6:	80 91 a8 01 	lds	r24, 0x01A8
    1dea:	90 91 a9 01 	lds	r25, 0x01A9
    1dee:	28 17       	cp	r18, r24
    1df0:	39 07       	cpc	r19, r25
    1df2:	c9 f4       	brne	.+50     	; 0x1e26 <__vector_9+0xba>
    1df4:	20 91 88 02 	lds	r18, 0x0288
    1df8:	30 91 89 02 	lds	r19, 0x0289
    1dfc:	80 91 aa 01 	lds	r24, 0x01AA
    1e00:	90 91 ab 01 	lds	r25, 0x01AB
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	71 f4       	brne	.+28     	; 0x1e26 <__vector_9+0xba>
	{
		if(last_acl_chg < 100)
    1e0a:	80 91 ad 01 	lds	r24, 0x01AD
    1e0e:	84 36       	cpi	r24, 0x64	; 100
    1e10:	30 f4       	brcc	.+12     	; 0x1e1e <__vector_9+0xb2>
		{
				last_acl_chg++;
    1e12:	80 91 ad 01 	lds	r24, 0x01AD
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	80 93 ad 01 	sts	0x01AD, r24
    1e1c:	08 c0       	rjmp	.+16     	; 0x1e2e <__vector_9+0xc2>
		}
		else
		{
			acl_frozen = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 ac 01 	sts	0x01AC, r24
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <__vector_9+0xc2>
		}
	}
	else
	{
		last_acl_chg = 0;
    1e26:	10 92 ad 01 	sts	0x01AD, r1
		acl_frozen = 0;
    1e2a:	10 92 ac 01 	sts	0x01AC, r1
	}

	lastx=data[0].acl_x;
    1e2e:	80 91 84 02 	lds	r24, 0x0284
    1e32:	90 91 85 02 	lds	r25, 0x0285
    1e36:	90 93 a7 01 	sts	0x01A7, r25
    1e3a:	80 93 a6 01 	sts	0x01A6, r24
	lasty=data[0].acl_y;
    1e3e:	80 91 86 02 	lds	r24, 0x0286
    1e42:	90 91 87 02 	lds	r25, 0x0287
    1e46:	90 93 a9 01 	sts	0x01A9, r25
    1e4a:	80 93 a8 01 	sts	0x01A8, r24
	lastz=data[0].acl_z;
    1e4e:	80 91 88 02 	lds	r24, 0x0288
    1e52:	90 91 89 02 	lds	r25, 0x0289
    1e56:	90 93 ab 01 	sts	0x01AB, r25
    1e5a:	80 93 aa 01 	sts	0x01AA, r24

	if(data[0].rpm_mode == RPM_ON)
    1e5e:	80 91 df 02 	lds	r24, 0x02DF
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	11 f4       	brne	.+4      	; 0x1e6a <__vector_9+0xfe>
	{
		PORTC &= ~_BV(LED4);
    1e66:	43 98       	cbi	0x08, 3	; 8
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <__vector_9+0x100>
	}
	else
	{
		PORTC |= _BV(LED4);
    1e6a:	43 9a       	sbi	0x08, 3	; 8
	}

	if(data[0].DLG_status == 1)
    1e6c:	80 91 ba 02 	lds	r24, 0x02BA
    1e70:	81 30       	cpi	r24, 0x01	; 1
    1e72:	11 f4       	brne	.+4      	; 0x1e78 <__vector_9+0x10c>
	{
		PORTC &= ~_BV(LED1);
    1e74:	40 98       	cbi	0x08, 0	; 8
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <__vector_9+0x10e>
	}
	else
	{
		PORTC |= _BV(LED1);
    1e78:	40 9a       	sbi	0x08, 0	; 8
	}

	if(!(PINE & _BV(PE5)))
    1e7a:	65 99       	sbic	0x0c, 5	; 12
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <__vector_9+0x116>
	{
		PORTC &= ~_BV(LED7);
    1e7e:	46 98       	cbi	0x08, 6	; 8
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <__vector_9+0x118>
	}
	else
	{
		PORTC |= _BV(LED7);
    1e82:	46 9a       	sbi	0x08, 6	; 8
	}

	if(acl_frozen == 1)
    1e84:	80 91 ac 01 	lds	r24, 0x01AC
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	19 f4       	brne	.+6      	; 0x1e92 <__vector_9+0x126>
	{
		PORTC &= ~_BV(LED5);
    1e8c:	44 98       	cbi	0x08, 4	; 8
		PORTC &= ~_BV(LED6);
    1e8e:	45 98       	cbi	0x08, 5	; 8
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <__vector_9+0x12a>
	}
	else
	{
		PORTC |= _BV(LED5);
    1e92:	44 9a       	sbi	0x08, 4	; 8
		PORTC |= _BV(LED6);
    1e94:	45 9a       	sbi	0x08, 5	; 8
	}

	if(data[0].lnc_status == 1)
    1e96:	80 91 5e 02 	lds	r24, 0x025E
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <__vector_9+0x136>
	{
		PORTC &= ~_BV(LED3);
    1e9e:	42 98       	cbi	0x08, 2	; 8
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <__vector_9+0x138>
	}
	else
	{
		PORTC |= _BV(LED3);
    1ea2:	42 9a       	sbi	0x08, 2	; 8
		*/

		//PORTC = ~leds.on;


}
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 90       	pop	r0
    1ec0:	0b be       	out	0x3b, r0	; 59
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <ui_init>:
{
	uint8_t i;

	char str[10];

	glcd_init();
    1ecc:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <glcd_init>

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1ed0:	20 e2       	ldi	r18, 0x20	; 32
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	30 93 e3 01 	sts	0x01E3, r19
    1ed8:	20 93 e2 01 	sts	0x01E2, r18
	btns[idx].pin = pn;
    1edc:	10 92 e4 01 	sts	0x01E4, r1
	btns[idx].state = BTN_STATE_START;
    1ee0:	10 92 e5 01 	sts	0x01E5, r1
	btns[idx].pshd = p;
    1ee4:	91 e0       	ldi	r25, 0x01	; 1
    1ee6:	90 93 e6 01 	sts	0x01E6, r25
	btns[idx].held = h;
    1eea:	81 e1       	ldi	r24, 0x11	; 17
    1eec:	80 93 e7 01 	sts	0x01E7, r24
	btns[idx].hcnt = 0;
    1ef0:	10 92 e8 01 	sts	0x01E8, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1ef4:	30 93 ea 01 	sts	0x01EA, r19
    1ef8:	20 93 e9 01 	sts	0x01E9, r18
	btns[idx].pin = pn;
    1efc:	90 93 eb 01 	sts	0x01EB, r25
	btns[idx].state = BTN_STATE_START;
    1f00:	10 92 ec 01 	sts	0x01EC, r1
	btns[idx].pshd = p;
    1f04:	52 e0       	ldi	r21, 0x02	; 2
    1f06:	50 93 ed 01 	sts	0x01ED, r21
	btns[idx].held = h;
    1f0a:	82 e1       	ldi	r24, 0x12	; 18
    1f0c:	80 93 ee 01 	sts	0x01EE, r24
	btns[idx].hcnt = 0;
    1f10:	10 92 ef 01 	sts	0x01EF, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f14:	30 93 f1 01 	sts	0x01F1, r19
    1f18:	20 93 f0 01 	sts	0x01F0, r18
	btns[idx].pin = pn;
    1f1c:	50 93 f2 01 	sts	0x01F2, r21
	btns[idx].state = BTN_STATE_START;
    1f20:	10 92 f3 01 	sts	0x01F3, r1
	btns[idx].pshd = p;
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	80 93 f4 01 	sts	0x01F4, r24
	btns[idx].held = h;
    1f2a:	83 e1       	ldi	r24, 0x13	; 19
    1f2c:	80 93 f5 01 	sts	0x01F5, r24
	btns[idx].hcnt = 0;
    1f30:	10 92 f6 01 	sts	0x01F6, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f34:	30 93 ff 01 	sts	0x01FF, r19
    1f38:	20 93 fe 01 	sts	0x01FE, r18
	btns[idx].pin = pn;
    1f3c:	84 e0       	ldi	r24, 0x04	; 4
    1f3e:	80 93 00 02 	sts	0x0200, r24
	btns[idx].state = BTN_STATE_START;
    1f42:	10 92 01 02 	sts	0x0201, r1
	btns[idx].pshd = p;
    1f46:	95 e0       	ldi	r25, 0x05	; 5
    1f48:	90 93 02 02 	sts	0x0202, r25
	btns[idx].held = h;
    1f4c:	85 e1       	ldi	r24, 0x15	; 21
    1f4e:	80 93 03 02 	sts	0x0203, r24
	btns[idx].hcnt = 0;
    1f52:	10 92 04 02 	sts	0x0204, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f56:	30 93 06 02 	sts	0x0206, r19
    1f5a:	20 93 05 02 	sts	0x0205, r18
	btns[idx].pin = pn;
    1f5e:	90 93 07 02 	sts	0x0207, r25
	btns[idx].state = BTN_STATE_START;
    1f62:	10 92 08 02 	sts	0x0208, r1
	btns[idx].pshd = p;
    1f66:	46 e0       	ldi	r20, 0x06	; 6
    1f68:	40 93 09 02 	sts	0x0209, r20
	btns[idx].held = h;
    1f6c:	86 e1       	ldi	r24, 0x16	; 22
    1f6e:	80 93 0a 02 	sts	0x020A, r24
	btns[idx].hcnt = 0;
    1f72:	10 92 0b 02 	sts	0x020B, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f76:	30 93 0d 02 	sts	0x020D, r19
    1f7a:	20 93 0c 02 	sts	0x020C, r18
	btns[idx].pin = pn;
    1f7e:	40 93 0e 02 	sts	0x020E, r20
	btns[idx].state = BTN_STATE_START;
    1f82:	10 92 0f 02 	sts	0x020F, r1
	btns[idx].pshd = p;
    1f86:	97 e0       	ldi	r25, 0x07	; 7
    1f88:	90 93 10 02 	sts	0x0210, r25
	btns[idx].held = h;
    1f8c:	87 e1       	ldi	r24, 0x17	; 23
    1f8e:	80 93 11 02 	sts	0x0211, r24
	btns[idx].hcnt = 0;
    1f92:	10 92 12 02 	sts	0x0212, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f96:	30 93 14 02 	sts	0x0214, r19
    1f9a:	20 93 13 02 	sts	0x0213, r18
	btns[idx].pin = pn;
    1f9e:	90 93 15 02 	sts	0x0215, r25
	btns[idx].state = BTN_STATE_START;
    1fa2:	10 92 16 02 	sts	0x0216, r1
	btns[idx].pshd = p;
    1fa6:	88 e0       	ldi	r24, 0x08	; 8
    1fa8:	80 93 17 02 	sts	0x0217, r24
	btns[idx].held = h;
    1fac:	88 e1       	ldi	r24, 0x18	; 24
    1fae:	80 93 18 02 	sts	0x0218, r24
	btns[idx].hcnt = 0;
    1fb2:	10 92 19 02 	sts	0x0219, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1fb6:	23 e2       	ldi	r18, 0x23	; 35
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	30 93 1b 02 	sts	0x021B, r19
    1fbe:	20 93 1a 02 	sts	0x021A, r18
	btns[idx].pin = pn;
    1fc2:	90 93 1c 02 	sts	0x021C, r25
	btns[idx].state = BTN_STATE_START;
    1fc6:	10 92 1d 02 	sts	0x021D, r1
	btns[idx].pshd = p;
    1fca:	89 e0       	ldi	r24, 0x09	; 9
    1fcc:	80 93 1e 02 	sts	0x021E, r24
	btns[idx].held = h;
    1fd0:	89 e1       	ldi	r24, 0x19	; 25
    1fd2:	80 93 1f 02 	sts	0x021F, r24
	btns[idx].hcnt = 0;
    1fd6:	10 92 20 02 	sts	0x0220, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1fda:	30 93 22 02 	sts	0x0222, r19
    1fde:	20 93 21 02 	sts	0x0221, r18
	btns[idx].pin = pn;
    1fe2:	40 93 23 02 	sts	0x0223, r20
	btns[idx].state = BTN_STATE_START;
    1fe6:	10 92 24 02 	sts	0x0224, r1
	btns[idx].pshd = p;
    1fea:	8a e0       	ldi	r24, 0x0A	; 10
    1fec:	80 93 25 02 	sts	0x0225, r24
	btns[idx].held = h;
    1ff0:	8a e1       	ldi	r24, 0x1A	; 26
    1ff2:	80 93 26 02 	sts	0x0226, r24
	btns[idx].hcnt = 0;
    1ff6:	10 92 27 02 	sts	0x0227, r1
	btn_init(6,&BTN_L_PINS,BTN_L,BTN_L_PSHD,BTN_L_HELD);
	btn_init(7,&BTN_R_PINS,BTN_R,BTN_R_PSHD,BTN_R_HELD);
	btn_init(8,&BTN_C_PINS,BTN_C,BTN_C_PSHD,BTN_C_HELD);
	btn_init(9,&BTN_E_PINS,BTN_E,BTN_E_PSHD,BTN_E_HELD);

	BTN_GP1_PORT = 0xFF;
    1ffa:	9f ef       	ldi	r25, 0xFF	; 255
    1ffc:	92 b9       	out	0x02, r25	; 2
	BTN_GP2_PORT |= _BV(BTN_E)|_BV(BTN_C);
    1ffe:	85 b1       	in	r24, 0x05	; 5
    2000:	80 6c       	ori	r24, 0xC0	; 192
    2002:	85 b9       	out	0x05, r24	; 5

	ENC_A_PORT |= _BV(ENC_A);
    2004:	59 9a       	sbi	0x0b, 1	; 11
	ENC_B_PORT |= _BV(ENC_B);
    2006:	58 9a       	sbi	0x0b, 0	; 11

	enc.a = 0;
    2008:	10 92 b7 01 	sts	0x01B7, r1
	enc.b = 0;
    200c:	10 92 b8 01 	sts	0x01B8, r1

	enc.hist.buf[3] = 2;
    2010:	50 93 b6 01 	sts	0x01B6, r21
	enc.hist.buf[2] = 2;
    2014:	50 93 b5 01 	sts	0x01B5, r21
	enc.hist.buf[1] = 2;
    2018:	50 93 b4 01 	sts	0x01B4, r21
	enc.hist.buf[0] = 2;
    201c:	50 93 b3 01 	sts	0x01B3, r21
	enc.val = 0;
    2020:	10 92 ba 01 	sts	0x01BA, r1

	enc.cnt = 0;
    2024:	10 92 bc 01 	sts	0x01BC, r1

	last_btn = BTN_NONE_PSHD;
    2028:	10 92 b2 01 	sts	0x01B2, r1

	// Leds
	LED_PORT = 0xFF;
    202c:	98 b9       	out	0x08, r25	; 8
	LED_DDR = 0xFF;
    202e:	97 b9       	out	0x07, r25	; 7
	leds.curr = 0;
    2030:	10 92 cc 01 	sts	0x01CC, r1
	leds.on = 0;
    2034:	10 92 ce 01 	sts	0x01CE, r1
	leds.blink_slw = 0;
    2038:	10 92 cf 01 	sts	0x01CF, r1
	leds.blink_fst = 0;
    203c:	10 92 d0 01 	sts	0x01D0, r1
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0

	for(i = 0;i<8;i++)
	{
		leds.rem[i] = LED_NO_TMR;
    2044:	2f ef       	ldi	r18, 0xFF	; 255
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	fc 01       	movw	r30, r24
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	e4 53       	subi	r30, 0x34	; 52
    2050:	fe 4f       	sbci	r31, 0xFE	; 254
    2052:	36 83       	std	Z+6, r19	; 0x06
    2054:	25 83       	std	Z+5, r18	; 0x05
    2056:	01 96       	adiw	r24, 0x01	; 1
	leds.curr = 0;
	leds.on = 0;
	leds.blink_slw = 0;
	leds.blink_fst = 0;

	for(i = 0;i<8;i++)
    2058:	88 30       	cpi	r24, 0x08	; 8
    205a:	91 05       	cpc	r25, r1
    205c:	a9 f7       	brne	.-22     	; 0x2048 <ui_init+0x17c>
		leds.rem[i] = LED_NO_TMR;
	}


	// Tach Leds
	tach_init();
    205e:	0e 94 ed 0b 	call	0x17da	; 0x17da <tach_init>
	tach_off();
    2062:	2d 9a       	sbi	0x05, 5	; 5
	tach_out(0);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	0e 94 df 0b 	call	0x17be	; 0x17be <tach_out>

	// Seven Segment
	svn_seg_init();
    206a:	0e 94 27 0b 	call	0x164e	; 0x164e <svn_seg_init>
    206e:	80 e4       	ldi	r24, 0x40	; 64
    2070:	9c e9       	ldi	r25, 0x9C	; 156
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <ui_init+0x1a6>
	TIMSK0 = 0x03;	// Output Compare interrupt
	TCCR0A = 0x04;
	*/

	// Setup UI General Timer
	ui_cntr2 = 0;
    2076:	10 92 a1 01 	sts	0x01A1, r1
    207a:	10 92 a0 01 	sts	0x01A0, r1
	OCR2A = 156;
    207e:	8c e9       	ldi	r24, 0x9C	; 156
    2080:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 = 0x02;
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = 0x0F;
    208a:	8f e0       	ldi	r24, 0x0F	; 15
    208c:	80 93 b0 00 	sts	0x00B0, r24
}
    2090:	08 95       	ret

00002092 <__mulsi3>:
    2092:	62 9f       	mul	r22, r18
    2094:	d0 01       	movw	r26, r0
    2096:	73 9f       	mul	r23, r19
    2098:	f0 01       	movw	r30, r0
    209a:	82 9f       	mul	r24, r18
    209c:	e0 0d       	add	r30, r0
    209e:	f1 1d       	adc	r31, r1
    20a0:	64 9f       	mul	r22, r20
    20a2:	e0 0d       	add	r30, r0
    20a4:	f1 1d       	adc	r31, r1
    20a6:	92 9f       	mul	r25, r18
    20a8:	f0 0d       	add	r31, r0
    20aa:	83 9f       	mul	r24, r19
    20ac:	f0 0d       	add	r31, r0
    20ae:	74 9f       	mul	r23, r20
    20b0:	f0 0d       	add	r31, r0
    20b2:	65 9f       	mul	r22, r21
    20b4:	f0 0d       	add	r31, r0
    20b6:	99 27       	eor	r25, r25
    20b8:	72 9f       	mul	r23, r18
    20ba:	b0 0d       	add	r27, r0
    20bc:	e1 1d       	adc	r30, r1
    20be:	f9 1f       	adc	r31, r25
    20c0:	63 9f       	mul	r22, r19
    20c2:	b0 0d       	add	r27, r0
    20c4:	e1 1d       	adc	r30, r1
    20c6:	f9 1f       	adc	r31, r25
    20c8:	bd 01       	movw	r22, r26
    20ca:	cf 01       	movw	r24, r30
    20cc:	11 24       	eor	r1, r1
    20ce:	08 95       	ret

000020d0 <__udivmodhi4>:
    20d0:	aa 1b       	sub	r26, r26
    20d2:	bb 1b       	sub	r27, r27
    20d4:	51 e1       	ldi	r21, 0x11	; 17
    20d6:	07 c0       	rjmp	.+14     	; 0x20e6 <__udivmodhi4_ep>

000020d8 <__udivmodhi4_loop>:
    20d8:	aa 1f       	adc	r26, r26
    20da:	bb 1f       	adc	r27, r27
    20dc:	a6 17       	cp	r26, r22
    20de:	b7 07       	cpc	r27, r23
    20e0:	10 f0       	brcs	.+4      	; 0x20e6 <__udivmodhi4_ep>
    20e2:	a6 1b       	sub	r26, r22
    20e4:	b7 0b       	sbc	r27, r23

000020e6 <__udivmodhi4_ep>:
    20e6:	88 1f       	adc	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	5a 95       	dec	r21
    20ec:	a9 f7       	brne	.-22     	; 0x20d8 <__udivmodhi4_loop>
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	08 95       	ret

000020f8 <__divmodhi4>:
    20f8:	97 fb       	bst	r25, 7
    20fa:	09 2e       	mov	r0, r25
    20fc:	07 26       	eor	r0, r23
    20fe:	0a d0       	rcall	.+20     	; 0x2114 <__divmodhi4_neg1>
    2100:	77 fd       	sbrc	r23, 7
    2102:	04 d0       	rcall	.+8      	; 0x210c <__divmodhi4_neg2>
    2104:	e5 df       	rcall	.-54     	; 0x20d0 <__udivmodhi4>
    2106:	06 d0       	rcall	.+12     	; 0x2114 <__divmodhi4_neg1>
    2108:	00 20       	and	r0, r0
    210a:	1a f4       	brpl	.+6      	; 0x2112 <__divmodhi4_exit>

0000210c <__divmodhi4_neg2>:
    210c:	70 95       	com	r23
    210e:	61 95       	neg	r22
    2110:	7f 4f       	sbci	r23, 0xFF	; 255

00002112 <__divmodhi4_exit>:
    2112:	08 95       	ret

00002114 <__divmodhi4_neg1>:
    2114:	f6 f7       	brtc	.-4      	; 0x2112 <__divmodhi4_exit>
    2116:	90 95       	com	r25
    2118:	81 95       	neg	r24
    211a:	9f 4f       	sbci	r25, 0xFF	; 255
    211c:	08 95       	ret

0000211e <__udivmodsi4>:
    211e:	a1 e2       	ldi	r26, 0x21	; 33
    2120:	1a 2e       	mov	r1, r26
    2122:	aa 1b       	sub	r26, r26
    2124:	bb 1b       	sub	r27, r27
    2126:	fd 01       	movw	r30, r26
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <__udivmodsi4_ep>

0000212a <__udivmodsi4_loop>:
    212a:	aa 1f       	adc	r26, r26
    212c:	bb 1f       	adc	r27, r27
    212e:	ee 1f       	adc	r30, r30
    2130:	ff 1f       	adc	r31, r31
    2132:	a2 17       	cp	r26, r18
    2134:	b3 07       	cpc	r27, r19
    2136:	e4 07       	cpc	r30, r20
    2138:	f5 07       	cpc	r31, r21
    213a:	20 f0       	brcs	.+8      	; 0x2144 <__udivmodsi4_ep>
    213c:	a2 1b       	sub	r26, r18
    213e:	b3 0b       	sbc	r27, r19
    2140:	e4 0b       	sbc	r30, r20
    2142:	f5 0b       	sbc	r31, r21

00002144 <__udivmodsi4_ep>:
    2144:	66 1f       	adc	r22, r22
    2146:	77 1f       	adc	r23, r23
    2148:	88 1f       	adc	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	1a 94       	dec	r1
    214e:	69 f7       	brne	.-38     	; 0x212a <__udivmodsi4_loop>
    2150:	60 95       	com	r22
    2152:	70 95       	com	r23
    2154:	80 95       	com	r24
    2156:	90 95       	com	r25
    2158:	9b 01       	movw	r18, r22
    215a:	ac 01       	movw	r20, r24
    215c:	bd 01       	movw	r22, r26
    215e:	cf 01       	movw	r24, r30
    2160:	08 95       	ret

00002162 <fputs>:
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	7c 01       	movw	r14, r24
    2170:	8b 01       	movw	r16, r22
    2172:	db 01       	movw	r26, r22
    2174:	13 96       	adiw	r26, 0x03	; 3
    2176:	8c 91       	ld	r24, X
    2178:	81 fd       	sbrc	r24, 1
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <fputs+0x20>
    217c:	cf ef       	ldi	r28, 0xFF	; 255
    217e:	df ef       	ldi	r29, 0xFF	; 255
    2180:	13 c0       	rjmp	.+38     	; 0x21a8 <fputs+0x46>
    2182:	c0 e0       	ldi	r28, 0x00	; 0
    2184:	d0 e0       	ldi	r29, 0x00	; 0
    2186:	0b c0       	rjmp	.+22     	; 0x219e <fputs+0x3c>
    2188:	d8 01       	movw	r26, r16
    218a:	18 96       	adiw	r26, 0x08	; 8
    218c:	ed 91       	ld	r30, X+
    218e:	fc 91       	ld	r31, X
    2190:	19 97       	sbiw	r26, 0x09	; 9
    2192:	b8 01       	movw	r22, r16
    2194:	09 95       	icall
    2196:	89 2b       	or	r24, r25
    2198:	11 f0       	breq	.+4      	; 0x219e <fputs+0x3c>
    219a:	cf ef       	ldi	r28, 0xFF	; 255
    219c:	df ef       	ldi	r29, 0xFF	; 255
    219e:	f7 01       	movw	r30, r14
    21a0:	81 91       	ld	r24, Z+
    21a2:	7f 01       	movw	r14, r30
    21a4:	88 23       	and	r24, r24
    21a6:	81 f7       	brne	.-32     	; 0x2188 <fputs+0x26>
    21a8:	ce 01       	movw	r24, r28
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	08 95       	ret

000021b8 <printf>:
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	fe 01       	movw	r30, r28
    21c2:	35 96       	adiw	r30, 0x05	; 5
    21c4:	61 91       	ld	r22, Z+
    21c6:	71 91       	ld	r23, Z+
    21c8:	80 91 9f 03 	lds	r24, 0x039F
    21cc:	90 91 a0 03 	lds	r25, 0x03A0
    21d0:	af 01       	movw	r20, r30
    21d2:	0e 94 1f 11 	call	0x223e	; 0x223e <vfprintf>
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <sprintf>:
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	2e 97       	sbiw	r28, 0x0e	; 14
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	0d 89       	ldd	r16, Y+21	; 0x15
    21f6:	1e 89       	ldd	r17, Y+22	; 0x16
    21f8:	86 e0       	ldi	r24, 0x06	; 6
    21fa:	8c 83       	std	Y+4, r24	; 0x04
    21fc:	1a 83       	std	Y+2, r17	; 0x02
    21fe:	09 83       	std	Y+1, r16	; 0x01
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	9f e7       	ldi	r25, 0x7F	; 127
    2204:	9e 83       	std	Y+6, r25	; 0x06
    2206:	8d 83       	std	Y+5, r24	; 0x05
    2208:	9e 01       	movw	r18, r28
    220a:	27 5e       	subi	r18, 0xE7	; 231
    220c:	3f 4f       	sbci	r19, 0xFF	; 255
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	6f 89       	ldd	r22, Y+23	; 0x17
    2214:	78 8d       	ldd	r23, Y+24	; 0x18
    2216:	a9 01       	movw	r20, r18
    2218:	0e 94 1f 11 	call	0x223e	; 0x223e <vfprintf>
    221c:	2f 81       	ldd	r18, Y+7	; 0x07
    221e:	38 85       	ldd	r19, Y+8	; 0x08
    2220:	02 0f       	add	r16, r18
    2222:	13 1f       	adc	r17, r19
    2224:	f8 01       	movw	r30, r16
    2226:	10 82       	st	Z, r1
    2228:	2e 96       	adiw	r28, 0x0e	; 14
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	08 95       	ret

0000223e <vfprintf>:
    223e:	2f 92       	push	r2
    2240:	3f 92       	push	r3
    2242:	4f 92       	push	r4
    2244:	5f 92       	push	r5
    2246:	6f 92       	push	r6
    2248:	7f 92       	push	r7
    224a:	8f 92       	push	r8
    224c:	9f 92       	push	r9
    224e:	af 92       	push	r10
    2250:	bf 92       	push	r11
    2252:	cf 92       	push	r12
    2254:	df 92       	push	r13
    2256:	ef 92       	push	r14
    2258:	ff 92       	push	r15
    225a:	0f 93       	push	r16
    225c:	1f 93       	push	r17
    225e:	df 93       	push	r29
    2260:	cf 93       	push	r28
    2262:	cd b7       	in	r28, 0x3d	; 61
    2264:	de b7       	in	r29, 0x3e	; 62
    2266:	2b 97       	sbiw	r28, 0x0b	; 11
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	3c 01       	movw	r6, r24
    2274:	2b 01       	movw	r4, r22
    2276:	5a 01       	movw	r10, r20
    2278:	fc 01       	movw	r30, r24
    227a:	17 82       	std	Z+7, r1	; 0x07
    227c:	16 82       	std	Z+6, r1	; 0x06
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	81 fd       	sbrc	r24, 1
    2282:	03 c0       	rjmp	.+6      	; 0x228a <vfprintf+0x4c>
    2284:	6f ef       	ldi	r22, 0xFF	; 255
    2286:	7f ef       	ldi	r23, 0xFF	; 255
    2288:	c6 c1       	rjmp	.+908    	; 0x2616 <vfprintf+0x3d8>
    228a:	9a e0       	ldi	r25, 0x0A	; 10
    228c:	89 2e       	mov	r8, r25
    228e:	1e 01       	movw	r2, r28
    2290:	08 94       	sec
    2292:	21 1c       	adc	r2, r1
    2294:	31 1c       	adc	r3, r1
    2296:	f3 01       	movw	r30, r6
    2298:	23 81       	ldd	r18, Z+3	; 0x03
    229a:	f2 01       	movw	r30, r4
    229c:	23 fd       	sbrc	r18, 3
    229e:	85 91       	lpm	r24, Z+
    22a0:	23 ff       	sbrs	r18, 3
    22a2:	81 91       	ld	r24, Z+
    22a4:	2f 01       	movw	r4, r30
    22a6:	88 23       	and	r24, r24
    22a8:	09 f4       	brne	.+2      	; 0x22ac <vfprintf+0x6e>
    22aa:	b2 c1       	rjmp	.+868    	; 0x2610 <vfprintf+0x3d2>
    22ac:	85 32       	cpi	r24, 0x25	; 37
    22ae:	39 f4       	brne	.+14     	; 0x22be <vfprintf+0x80>
    22b0:	23 fd       	sbrc	r18, 3
    22b2:	85 91       	lpm	r24, Z+
    22b4:	23 ff       	sbrs	r18, 3
    22b6:	81 91       	ld	r24, Z+
    22b8:	2f 01       	movw	r4, r30
    22ba:	85 32       	cpi	r24, 0x25	; 37
    22bc:	29 f4       	brne	.+10     	; 0x22c8 <vfprintf+0x8a>
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	b3 01       	movw	r22, r6
    22c2:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    22c6:	e7 cf       	rjmp	.-50     	; 0x2296 <vfprintf+0x58>
    22c8:	98 2f       	mov	r25, r24
    22ca:	ff 24       	eor	r15, r15
    22cc:	ee 24       	eor	r14, r14
    22ce:	99 24       	eor	r9, r9
    22d0:	ff e1       	ldi	r31, 0x1F	; 31
    22d2:	ff 15       	cp	r31, r15
    22d4:	d0 f0       	brcs	.+52     	; 0x230a <vfprintf+0xcc>
    22d6:	9b 32       	cpi	r25, 0x2B	; 43
    22d8:	69 f0       	breq	.+26     	; 0x22f4 <vfprintf+0xb6>
    22da:	9c 32       	cpi	r25, 0x2C	; 44
    22dc:	28 f4       	brcc	.+10     	; 0x22e8 <vfprintf+0xaa>
    22de:	90 32       	cpi	r25, 0x20	; 32
    22e0:	59 f0       	breq	.+22     	; 0x22f8 <vfprintf+0xba>
    22e2:	93 32       	cpi	r25, 0x23	; 35
    22e4:	91 f4       	brne	.+36     	; 0x230a <vfprintf+0xcc>
    22e6:	0e c0       	rjmp	.+28     	; 0x2304 <vfprintf+0xc6>
    22e8:	9d 32       	cpi	r25, 0x2D	; 45
    22ea:	49 f0       	breq	.+18     	; 0x22fe <vfprintf+0xc0>
    22ec:	90 33       	cpi	r25, 0x30	; 48
    22ee:	69 f4       	brne	.+26     	; 0x230a <vfprintf+0xcc>
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	24 c0       	rjmp	.+72     	; 0x233c <vfprintf+0xfe>
    22f4:	52 e0       	ldi	r21, 0x02	; 2
    22f6:	f5 2a       	or	r15, r21
    22f8:	84 e0       	ldi	r24, 0x04	; 4
    22fa:	f8 2a       	or	r15, r24
    22fc:	28 c0       	rjmp	.+80     	; 0x234e <vfprintf+0x110>
    22fe:	98 e0       	ldi	r25, 0x08	; 8
    2300:	f9 2a       	or	r15, r25
    2302:	25 c0       	rjmp	.+74     	; 0x234e <vfprintf+0x110>
    2304:	e0 e1       	ldi	r30, 0x10	; 16
    2306:	fe 2a       	or	r15, r30
    2308:	22 c0       	rjmp	.+68     	; 0x234e <vfprintf+0x110>
    230a:	f7 fc       	sbrc	r15, 7
    230c:	29 c0       	rjmp	.+82     	; 0x2360 <vfprintf+0x122>
    230e:	89 2f       	mov	r24, r25
    2310:	80 53       	subi	r24, 0x30	; 48
    2312:	8a 30       	cpi	r24, 0x0A	; 10
    2314:	70 f4       	brcc	.+28     	; 0x2332 <vfprintf+0xf4>
    2316:	f6 fe       	sbrs	r15, 6
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <vfprintf+0xe6>
    231a:	98 9c       	mul	r9, r8
    231c:	90 2c       	mov	r9, r0
    231e:	11 24       	eor	r1, r1
    2320:	98 0e       	add	r9, r24
    2322:	15 c0       	rjmp	.+42     	; 0x234e <vfprintf+0x110>
    2324:	e8 9c       	mul	r14, r8
    2326:	e0 2c       	mov	r14, r0
    2328:	11 24       	eor	r1, r1
    232a:	e8 0e       	add	r14, r24
    232c:	f0 e2       	ldi	r31, 0x20	; 32
    232e:	ff 2a       	or	r15, r31
    2330:	0e c0       	rjmp	.+28     	; 0x234e <vfprintf+0x110>
    2332:	9e 32       	cpi	r25, 0x2E	; 46
    2334:	29 f4       	brne	.+10     	; 0x2340 <vfprintf+0x102>
    2336:	f6 fc       	sbrc	r15, 6
    2338:	6b c1       	rjmp	.+726    	; 0x2610 <vfprintf+0x3d2>
    233a:	40 e4       	ldi	r20, 0x40	; 64
    233c:	f4 2a       	or	r15, r20
    233e:	07 c0       	rjmp	.+14     	; 0x234e <vfprintf+0x110>
    2340:	9c 36       	cpi	r25, 0x6C	; 108
    2342:	19 f4       	brne	.+6      	; 0x234a <vfprintf+0x10c>
    2344:	50 e8       	ldi	r21, 0x80	; 128
    2346:	f5 2a       	or	r15, r21
    2348:	02 c0       	rjmp	.+4      	; 0x234e <vfprintf+0x110>
    234a:	98 36       	cpi	r25, 0x68	; 104
    234c:	49 f4       	brne	.+18     	; 0x2360 <vfprintf+0x122>
    234e:	f2 01       	movw	r30, r4
    2350:	23 fd       	sbrc	r18, 3
    2352:	95 91       	lpm	r25, Z+
    2354:	23 ff       	sbrs	r18, 3
    2356:	91 91       	ld	r25, Z+
    2358:	2f 01       	movw	r4, r30
    235a:	99 23       	and	r25, r25
    235c:	09 f0       	breq	.+2      	; 0x2360 <vfprintf+0x122>
    235e:	b8 cf       	rjmp	.-144    	; 0x22d0 <vfprintf+0x92>
    2360:	89 2f       	mov	r24, r25
    2362:	85 54       	subi	r24, 0x45	; 69
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	18 f0       	brcs	.+6      	; 0x236e <vfprintf+0x130>
    2368:	80 52       	subi	r24, 0x20	; 32
    236a:	83 30       	cpi	r24, 0x03	; 3
    236c:	38 f4       	brcc	.+14     	; 0x237c <vfprintf+0x13e>
    236e:	44 e0       	ldi	r20, 0x04	; 4
    2370:	50 e0       	ldi	r21, 0x00	; 0
    2372:	a4 0e       	add	r10, r20
    2374:	b5 1e       	adc	r11, r21
    2376:	5f e3       	ldi	r21, 0x3F	; 63
    2378:	59 83       	std	Y+1, r21	; 0x01
    237a:	0f c0       	rjmp	.+30     	; 0x239a <vfprintf+0x15c>
    237c:	93 36       	cpi	r25, 0x63	; 99
    237e:	31 f0       	breq	.+12     	; 0x238c <vfprintf+0x14e>
    2380:	93 37       	cpi	r25, 0x73	; 115
    2382:	79 f0       	breq	.+30     	; 0x23a2 <vfprintf+0x164>
    2384:	93 35       	cpi	r25, 0x53	; 83
    2386:	09 f0       	breq	.+2      	; 0x238a <vfprintf+0x14c>
    2388:	56 c0       	rjmp	.+172    	; 0x2436 <vfprintf+0x1f8>
    238a:	20 c0       	rjmp	.+64     	; 0x23cc <vfprintf+0x18e>
    238c:	f5 01       	movw	r30, r10
    238e:	80 81       	ld	r24, Z
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	42 e0       	ldi	r20, 0x02	; 2
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	a4 0e       	add	r10, r20
    2398:	b5 1e       	adc	r11, r21
    239a:	61 01       	movw	r12, r2
    239c:	01 e0       	ldi	r16, 0x01	; 1
    239e:	10 e0       	ldi	r17, 0x00	; 0
    23a0:	12 c0       	rjmp	.+36     	; 0x23c6 <vfprintf+0x188>
    23a2:	f5 01       	movw	r30, r10
    23a4:	c0 80       	ld	r12, Z
    23a6:	d1 80       	ldd	r13, Z+1	; 0x01
    23a8:	f6 fc       	sbrc	r15, 6
    23aa:	03 c0       	rjmp	.+6      	; 0x23b2 <vfprintf+0x174>
    23ac:	6f ef       	ldi	r22, 0xFF	; 255
    23ae:	7f ef       	ldi	r23, 0xFF	; 255
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <vfprintf+0x178>
    23b2:	69 2d       	mov	r22, r9
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	42 e0       	ldi	r20, 0x02	; 2
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	a4 0e       	add	r10, r20
    23bc:	b5 1e       	adc	r11, r21
    23be:	c6 01       	movw	r24, r12
    23c0:	0e 94 30 13 	call	0x2660	; 0x2660 <strnlen>
    23c4:	8c 01       	movw	r16, r24
    23c6:	5f e7       	ldi	r21, 0x7F	; 127
    23c8:	f5 22       	and	r15, r21
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <vfprintf+0x1b6>
    23cc:	f5 01       	movw	r30, r10
    23ce:	c0 80       	ld	r12, Z
    23d0:	d1 80       	ldd	r13, Z+1	; 0x01
    23d2:	f6 fc       	sbrc	r15, 6
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <vfprintf+0x19e>
    23d6:	6f ef       	ldi	r22, 0xFF	; 255
    23d8:	7f ef       	ldi	r23, 0xFF	; 255
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <vfprintf+0x1a2>
    23dc:	69 2d       	mov	r22, r9
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	42 e0       	ldi	r20, 0x02	; 2
    23e2:	50 e0       	ldi	r21, 0x00	; 0
    23e4:	a4 0e       	add	r10, r20
    23e6:	b5 1e       	adc	r11, r21
    23e8:	c6 01       	movw	r24, r12
    23ea:	0e 94 25 13 	call	0x264a	; 0x264a <strnlen_P>
    23ee:	8c 01       	movw	r16, r24
    23f0:	50 e8       	ldi	r21, 0x80	; 128
    23f2:	f5 2a       	or	r15, r21
    23f4:	f3 fe       	sbrs	r15, 3
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <vfprintf+0x1c8>
    23f8:	1a c0       	rjmp	.+52     	; 0x242e <vfprintf+0x1f0>
    23fa:	80 e2       	ldi	r24, 0x20	; 32
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	b3 01       	movw	r22, r6
    2400:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    2404:	ea 94       	dec	r14
    2406:	8e 2d       	mov	r24, r14
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	08 17       	cp	r16, r24
    240c:	19 07       	cpc	r17, r25
    240e:	a8 f3       	brcs	.-22     	; 0x23fa <vfprintf+0x1bc>
    2410:	0e c0       	rjmp	.+28     	; 0x242e <vfprintf+0x1f0>
    2412:	f6 01       	movw	r30, r12
    2414:	f7 fc       	sbrc	r15, 7
    2416:	85 91       	lpm	r24, Z+
    2418:	f7 fe       	sbrs	r15, 7
    241a:	81 91       	ld	r24, Z+
    241c:	6f 01       	movw	r12, r30
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	b3 01       	movw	r22, r6
    2422:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    2426:	e1 10       	cpse	r14, r1
    2428:	ea 94       	dec	r14
    242a:	01 50       	subi	r16, 0x01	; 1
    242c:	10 40       	sbci	r17, 0x00	; 0
    242e:	01 15       	cp	r16, r1
    2430:	11 05       	cpc	r17, r1
    2432:	79 f7       	brne	.-34     	; 0x2412 <vfprintf+0x1d4>
    2434:	ea c0       	rjmp	.+468    	; 0x260a <vfprintf+0x3cc>
    2436:	94 36       	cpi	r25, 0x64	; 100
    2438:	11 f0       	breq	.+4      	; 0x243e <vfprintf+0x200>
    243a:	99 36       	cpi	r25, 0x69	; 105
    243c:	69 f5       	brne	.+90     	; 0x2498 <vfprintf+0x25a>
    243e:	f7 fe       	sbrs	r15, 7
    2440:	08 c0       	rjmp	.+16     	; 0x2452 <vfprintf+0x214>
    2442:	f5 01       	movw	r30, r10
    2444:	20 81       	ld	r18, Z
    2446:	31 81       	ldd	r19, Z+1	; 0x01
    2448:	42 81       	ldd	r20, Z+2	; 0x02
    244a:	53 81       	ldd	r21, Z+3	; 0x03
    244c:	84 e0       	ldi	r24, 0x04	; 4
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0a c0       	rjmp	.+20     	; 0x2466 <vfprintf+0x228>
    2452:	f5 01       	movw	r30, r10
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	9c 01       	movw	r18, r24
    245a:	44 27       	eor	r20, r20
    245c:	37 fd       	sbrc	r19, 7
    245e:	40 95       	com	r20
    2460:	54 2f       	mov	r21, r20
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a8 0e       	add	r10, r24
    2468:	b9 1e       	adc	r11, r25
    246a:	9f e6       	ldi	r25, 0x6F	; 111
    246c:	f9 22       	and	r15, r25
    246e:	57 ff       	sbrs	r21, 7
    2470:	09 c0       	rjmp	.+18     	; 0x2484 <vfprintf+0x246>
    2472:	50 95       	com	r21
    2474:	40 95       	com	r20
    2476:	30 95       	com	r19
    2478:	21 95       	neg	r18
    247a:	3f 4f       	sbci	r19, 0xFF	; 255
    247c:	4f 4f       	sbci	r20, 0xFF	; 255
    247e:	5f 4f       	sbci	r21, 0xFF	; 255
    2480:	e0 e8       	ldi	r30, 0x80	; 128
    2482:	fe 2a       	or	r15, r30
    2484:	ca 01       	movw	r24, r20
    2486:	b9 01       	movw	r22, r18
    2488:	a1 01       	movw	r20, r2
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__ultoa_invert>
    2492:	d8 2e       	mov	r13, r24
    2494:	d2 18       	sub	r13, r2
    2496:	40 c0       	rjmp	.+128    	; 0x2518 <vfprintf+0x2da>
    2498:	95 37       	cpi	r25, 0x75	; 117
    249a:	29 f4       	brne	.+10     	; 0x24a6 <vfprintf+0x268>
    249c:	1f 2d       	mov	r17, r15
    249e:	1f 7e       	andi	r17, 0xEF	; 239
    24a0:	2a e0       	ldi	r18, 0x0A	; 10
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	1d c0       	rjmp	.+58     	; 0x24e0 <vfprintf+0x2a2>
    24a6:	1f 2d       	mov	r17, r15
    24a8:	19 7f       	andi	r17, 0xF9	; 249
    24aa:	9f 36       	cpi	r25, 0x6F	; 111
    24ac:	61 f0       	breq	.+24     	; 0x24c6 <vfprintf+0x288>
    24ae:	90 37       	cpi	r25, 0x70	; 112
    24b0:	20 f4       	brcc	.+8      	; 0x24ba <vfprintf+0x27c>
    24b2:	98 35       	cpi	r25, 0x58	; 88
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <vfprintf+0x27a>
    24b6:	ac c0       	rjmp	.+344    	; 0x2610 <vfprintf+0x3d2>
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <vfprintf+0x29a>
    24ba:	90 37       	cpi	r25, 0x70	; 112
    24bc:	39 f0       	breq	.+14     	; 0x24cc <vfprintf+0x28e>
    24be:	98 37       	cpi	r25, 0x78	; 120
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <vfprintf+0x286>
    24c2:	a6 c0       	rjmp	.+332    	; 0x2610 <vfprintf+0x3d2>
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <vfprintf+0x290>
    24c6:	28 e0       	ldi	r18, 0x08	; 8
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	0a c0       	rjmp	.+20     	; 0x24e0 <vfprintf+0x2a2>
    24cc:	10 61       	ori	r17, 0x10	; 16
    24ce:	14 fd       	sbrc	r17, 4
    24d0:	14 60       	ori	r17, 0x04	; 4
    24d2:	20 e1       	ldi	r18, 0x10	; 16
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <vfprintf+0x2a2>
    24d8:	14 fd       	sbrc	r17, 4
    24da:	16 60       	ori	r17, 0x06	; 6
    24dc:	20 e1       	ldi	r18, 0x10	; 16
    24de:	32 e0       	ldi	r19, 0x02	; 2
    24e0:	17 ff       	sbrs	r17, 7
    24e2:	08 c0       	rjmp	.+16     	; 0x24f4 <vfprintf+0x2b6>
    24e4:	f5 01       	movw	r30, r10
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	44 e0       	ldi	r20, 0x04	; 4
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	08 c0       	rjmp	.+16     	; 0x2504 <vfprintf+0x2c6>
    24f4:	f5 01       	movw	r30, r10
    24f6:	80 81       	ld	r24, Z
    24f8:	91 81       	ldd	r25, Z+1	; 0x01
    24fa:	bc 01       	movw	r22, r24
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	42 e0       	ldi	r20, 0x02	; 2
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	a4 0e       	add	r10, r20
    2506:	b5 1e       	adc	r11, r21
    2508:	a1 01       	movw	r20, r2
    250a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__ultoa_invert>
    250e:	d8 2e       	mov	r13, r24
    2510:	d2 18       	sub	r13, r2
    2512:	8f e7       	ldi	r24, 0x7F	; 127
    2514:	f8 2e       	mov	r15, r24
    2516:	f1 22       	and	r15, r17
    2518:	f6 fe       	sbrs	r15, 6
    251a:	0b c0       	rjmp	.+22     	; 0x2532 <vfprintf+0x2f4>
    251c:	5e ef       	ldi	r21, 0xFE	; 254
    251e:	f5 22       	and	r15, r21
    2520:	d9 14       	cp	r13, r9
    2522:	38 f4       	brcc	.+14     	; 0x2532 <vfprintf+0x2f4>
    2524:	f4 fe       	sbrs	r15, 4
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <vfprintf+0x2f8>
    2528:	f2 fc       	sbrc	r15, 2
    252a:	05 c0       	rjmp	.+10     	; 0x2536 <vfprintf+0x2f8>
    252c:	8f ee       	ldi	r24, 0xEF	; 239
    252e:	f8 22       	and	r15, r24
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <vfprintf+0x2f8>
    2532:	1d 2d       	mov	r17, r13
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <vfprintf+0x2fa>
    2536:	19 2d       	mov	r17, r9
    2538:	f4 fe       	sbrs	r15, 4
    253a:	0d c0       	rjmp	.+26     	; 0x2556 <vfprintf+0x318>
    253c:	fe 01       	movw	r30, r28
    253e:	ed 0d       	add	r30, r13
    2540:	f1 1d       	adc	r31, r1
    2542:	80 81       	ld	r24, Z
    2544:	80 33       	cpi	r24, 0x30	; 48
    2546:	19 f4       	brne	.+6      	; 0x254e <vfprintf+0x310>
    2548:	99 ee       	ldi	r25, 0xE9	; 233
    254a:	f9 22       	and	r15, r25
    254c:	08 c0       	rjmp	.+16     	; 0x255e <vfprintf+0x320>
    254e:	1f 5f       	subi	r17, 0xFF	; 255
    2550:	f2 fe       	sbrs	r15, 2
    2552:	05 c0       	rjmp	.+10     	; 0x255e <vfprintf+0x320>
    2554:	03 c0       	rjmp	.+6      	; 0x255c <vfprintf+0x31e>
    2556:	8f 2d       	mov	r24, r15
    2558:	86 78       	andi	r24, 0x86	; 134
    255a:	09 f0       	breq	.+2      	; 0x255e <vfprintf+0x320>
    255c:	1f 5f       	subi	r17, 0xFF	; 255
    255e:	0f 2d       	mov	r16, r15
    2560:	f3 fc       	sbrc	r15, 3
    2562:	14 c0       	rjmp	.+40     	; 0x258c <vfprintf+0x34e>
    2564:	f0 fe       	sbrs	r15, 0
    2566:	0f c0       	rjmp	.+30     	; 0x2586 <vfprintf+0x348>
    2568:	1e 15       	cp	r17, r14
    256a:	10 f0       	brcs	.+4      	; 0x2570 <vfprintf+0x332>
    256c:	9d 2c       	mov	r9, r13
    256e:	0b c0       	rjmp	.+22     	; 0x2586 <vfprintf+0x348>
    2570:	9d 2c       	mov	r9, r13
    2572:	9e 0c       	add	r9, r14
    2574:	91 1a       	sub	r9, r17
    2576:	1e 2d       	mov	r17, r14
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <vfprintf+0x348>
    257a:	80 e2       	ldi	r24, 0x20	; 32
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	b3 01       	movw	r22, r6
    2580:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    2584:	1f 5f       	subi	r17, 0xFF	; 255
    2586:	1e 15       	cp	r17, r14
    2588:	c0 f3       	brcs	.-16     	; 0x257a <vfprintf+0x33c>
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <vfprintf+0x356>
    258c:	1e 15       	cp	r17, r14
    258e:	10 f4       	brcc	.+4      	; 0x2594 <vfprintf+0x356>
    2590:	e1 1a       	sub	r14, r17
    2592:	01 c0       	rjmp	.+2      	; 0x2596 <vfprintf+0x358>
    2594:	ee 24       	eor	r14, r14
    2596:	04 ff       	sbrs	r16, 4
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <vfprintf+0x37a>
    259a:	80 e3       	ldi	r24, 0x30	; 48
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	b3 01       	movw	r22, r6
    25a0:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    25a4:	02 ff       	sbrs	r16, 2
    25a6:	1d c0       	rjmp	.+58     	; 0x25e2 <vfprintf+0x3a4>
    25a8:	01 fd       	sbrc	r16, 1
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <vfprintf+0x374>
    25ac:	88 e7       	ldi	r24, 0x78	; 120
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <vfprintf+0x390>
    25b2:	88 e5       	ldi	r24, 0x58	; 88
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0b c0       	rjmp	.+22     	; 0x25ce <vfprintf+0x390>
    25b8:	80 2f       	mov	r24, r16
    25ba:	86 78       	andi	r24, 0x86	; 134
    25bc:	91 f0       	breq	.+36     	; 0x25e2 <vfprintf+0x3a4>
    25be:	01 ff       	sbrs	r16, 1
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <vfprintf+0x388>
    25c2:	8b e2       	ldi	r24, 0x2B	; 43
    25c4:	01 c0       	rjmp	.+2      	; 0x25c8 <vfprintf+0x38a>
    25c6:	80 e2       	ldi	r24, 0x20	; 32
    25c8:	f7 fc       	sbrc	r15, 7
    25ca:	8d e2       	ldi	r24, 0x2D	; 45
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	b3 01       	movw	r22, r6
    25d0:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <vfprintf+0x3a4>
    25d6:	80 e3       	ldi	r24, 0x30	; 48
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	b3 01       	movw	r22, r6
    25dc:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    25e0:	9a 94       	dec	r9
    25e2:	d9 14       	cp	r13, r9
    25e4:	c0 f3       	brcs	.-16     	; 0x25d6 <vfprintf+0x398>
    25e6:	da 94       	dec	r13
    25e8:	f1 01       	movw	r30, r2
    25ea:	ed 0d       	add	r30, r13
    25ec:	f1 1d       	adc	r31, r1
    25ee:	80 81       	ld	r24, Z
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	b3 01       	movw	r22, r6
    25f4:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    25f8:	dd 20       	and	r13, r13
    25fa:	a9 f7       	brne	.-22     	; 0x25e6 <vfprintf+0x3a8>
    25fc:	06 c0       	rjmp	.+12     	; 0x260a <vfprintf+0x3cc>
    25fe:	80 e2       	ldi	r24, 0x20	; 32
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	b3 01       	movw	r22, r6
    2604:	0e 94 3b 13 	call	0x2676	; 0x2676 <fputc>
    2608:	ea 94       	dec	r14
    260a:	ee 20       	and	r14, r14
    260c:	c1 f7       	brne	.-16     	; 0x25fe <vfprintf+0x3c0>
    260e:	43 ce       	rjmp	.-890    	; 0x2296 <vfprintf+0x58>
    2610:	f3 01       	movw	r30, r6
    2612:	66 81       	ldd	r22, Z+6	; 0x06
    2614:	77 81       	ldd	r23, Z+7	; 0x07
    2616:	cb 01       	movw	r24, r22
    2618:	2b 96       	adiw	r28, 0x0b	; 11
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	cd bf       	out	0x3d, r28	; 61
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	df 90       	pop	r13
    2632:	cf 90       	pop	r12
    2634:	bf 90       	pop	r11
    2636:	af 90       	pop	r10
    2638:	9f 90       	pop	r9
    263a:	8f 90       	pop	r8
    263c:	7f 90       	pop	r7
    263e:	6f 90       	pop	r6
    2640:	5f 90       	pop	r5
    2642:	4f 90       	pop	r4
    2644:	3f 90       	pop	r3
    2646:	2f 90       	pop	r2
    2648:	08 95       	ret

0000264a <strnlen_P>:
    264a:	fc 01       	movw	r30, r24
    264c:	05 90       	lpm	r0, Z+
    264e:	61 50       	subi	r22, 0x01	; 1
    2650:	70 40       	sbci	r23, 0x00	; 0
    2652:	01 10       	cpse	r0, r1
    2654:	d8 f7       	brcc	.-10     	; 0x264c <strnlen_P+0x2>
    2656:	80 95       	com	r24
    2658:	90 95       	com	r25
    265a:	8e 0f       	add	r24, r30
    265c:	9f 1f       	adc	r25, r31
    265e:	08 95       	ret

00002660 <strnlen>:
    2660:	fc 01       	movw	r30, r24
    2662:	61 50       	subi	r22, 0x01	; 1
    2664:	70 40       	sbci	r23, 0x00	; 0
    2666:	01 90       	ld	r0, Z+
    2668:	01 10       	cpse	r0, r1
    266a:	d8 f7       	brcc	.-10     	; 0x2662 <strnlen+0x2>
    266c:	80 95       	com	r24
    266e:	90 95       	com	r25
    2670:	8e 0f       	add	r24, r30
    2672:	9f 1f       	adc	r25, r31
    2674:	08 95       	ret

00002676 <fputc>:
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	8c 01       	movw	r16, r24
    2680:	eb 01       	movw	r28, r22
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	81 ff       	sbrs	r24, 1
    2686:	1b c0       	rjmp	.+54     	; 0x26be <fputc+0x48>
    2688:	82 ff       	sbrs	r24, 2
    268a:	0d c0       	rjmp	.+26     	; 0x26a6 <fputc+0x30>
    268c:	2e 81       	ldd	r18, Y+6	; 0x06
    268e:	3f 81       	ldd	r19, Y+7	; 0x07
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	9d 81       	ldd	r25, Y+5	; 0x05
    2694:	28 17       	cp	r18, r24
    2696:	39 07       	cpc	r19, r25
    2698:	64 f4       	brge	.+24     	; 0x26b2 <fputc+0x3c>
    269a:	e8 81       	ld	r30, Y
    269c:	f9 81       	ldd	r31, Y+1	; 0x01
    269e:	01 93       	st	Z+, r16
    26a0:	f9 83       	std	Y+1, r31	; 0x01
    26a2:	e8 83       	st	Y, r30
    26a4:	06 c0       	rjmp	.+12     	; 0x26b2 <fputc+0x3c>
    26a6:	e8 85       	ldd	r30, Y+8	; 0x08
    26a8:	f9 85       	ldd	r31, Y+9	; 0x09
    26aa:	80 2f       	mov	r24, r16
    26ac:	09 95       	icall
    26ae:	89 2b       	or	r24, r25
    26b0:	31 f4       	brne	.+12     	; 0x26be <fputc+0x48>
    26b2:	8e 81       	ldd	r24, Y+6	; 0x06
    26b4:	9f 81       	ldd	r25, Y+7	; 0x07
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	9f 83       	std	Y+7, r25	; 0x07
    26ba:	8e 83       	std	Y+6, r24	; 0x06
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <fputc+0x4c>
    26be:	0f ef       	ldi	r16, 0xFF	; 255
    26c0:	1f ef       	ldi	r17, 0xFF	; 255
    26c2:	c8 01       	movw	r24, r16
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	08 95       	ret

000026ce <__ultoa_invert>:
    26ce:	fa 01       	movw	r30, r20
    26d0:	aa 27       	eor	r26, r26
    26d2:	28 30       	cpi	r18, 0x08	; 8
    26d4:	51 f1       	breq	.+84     	; 0x272a <__ultoa_invert+0x5c>
    26d6:	20 31       	cpi	r18, 0x10	; 16
    26d8:	81 f1       	breq	.+96     	; 0x273a <__ultoa_invert+0x6c>
    26da:	e8 94       	clt
    26dc:	6f 93       	push	r22
    26de:	6e 7f       	andi	r22, 0xFE	; 254
    26e0:	6e 5f       	subi	r22, 0xFE	; 254
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	8f 4f       	sbci	r24, 0xFF	; 255
    26e6:	9f 4f       	sbci	r25, 0xFF	; 255
    26e8:	af 4f       	sbci	r26, 0xFF	; 255
    26ea:	b1 e0       	ldi	r27, 0x01	; 1
    26ec:	3e d0       	rcall	.+124    	; 0x276a <__ultoa_invert+0x9c>
    26ee:	b4 e0       	ldi	r27, 0x04	; 4
    26f0:	3c d0       	rcall	.+120    	; 0x276a <__ultoa_invert+0x9c>
    26f2:	67 0f       	add	r22, r23
    26f4:	78 1f       	adc	r23, r24
    26f6:	89 1f       	adc	r24, r25
    26f8:	9a 1f       	adc	r25, r26
    26fa:	a1 1d       	adc	r26, r1
    26fc:	68 0f       	add	r22, r24
    26fe:	79 1f       	adc	r23, r25
    2700:	8a 1f       	adc	r24, r26
    2702:	91 1d       	adc	r25, r1
    2704:	a1 1d       	adc	r26, r1
    2706:	6a 0f       	add	r22, r26
    2708:	71 1d       	adc	r23, r1
    270a:	81 1d       	adc	r24, r1
    270c:	91 1d       	adc	r25, r1
    270e:	a1 1d       	adc	r26, r1
    2710:	20 d0       	rcall	.+64     	; 0x2752 <__ultoa_invert+0x84>
    2712:	09 f4       	brne	.+2      	; 0x2716 <__ultoa_invert+0x48>
    2714:	68 94       	set
    2716:	3f 91       	pop	r19
    2718:	2a e0       	ldi	r18, 0x0A	; 10
    271a:	26 9f       	mul	r18, r22
    271c:	11 24       	eor	r1, r1
    271e:	30 19       	sub	r19, r0
    2720:	30 5d       	subi	r19, 0xD0	; 208
    2722:	31 93       	st	Z+, r19
    2724:	de f6       	brtc	.-74     	; 0x26dc <__ultoa_invert+0xe>
    2726:	cf 01       	movw	r24, r30
    2728:	08 95       	ret
    272a:	46 2f       	mov	r20, r22
    272c:	47 70       	andi	r20, 0x07	; 7
    272e:	40 5d       	subi	r20, 0xD0	; 208
    2730:	41 93       	st	Z+, r20
    2732:	b3 e0       	ldi	r27, 0x03	; 3
    2734:	0f d0       	rcall	.+30     	; 0x2754 <__ultoa_invert+0x86>
    2736:	c9 f7       	brne	.-14     	; 0x272a <__ultoa_invert+0x5c>
    2738:	f6 cf       	rjmp	.-20     	; 0x2726 <__ultoa_invert+0x58>
    273a:	46 2f       	mov	r20, r22
    273c:	4f 70       	andi	r20, 0x0F	; 15
    273e:	40 5d       	subi	r20, 0xD0	; 208
    2740:	4a 33       	cpi	r20, 0x3A	; 58
    2742:	18 f0       	brcs	.+6      	; 0x274a <__ultoa_invert+0x7c>
    2744:	49 5d       	subi	r20, 0xD9	; 217
    2746:	31 fd       	sbrc	r19, 1
    2748:	40 52       	subi	r20, 0x20	; 32
    274a:	41 93       	st	Z+, r20
    274c:	02 d0       	rcall	.+4      	; 0x2752 <__ultoa_invert+0x84>
    274e:	a9 f7       	brne	.-22     	; 0x273a <__ultoa_invert+0x6c>
    2750:	ea cf       	rjmp	.-44     	; 0x2726 <__ultoa_invert+0x58>
    2752:	b4 e0       	ldi	r27, 0x04	; 4
    2754:	a6 95       	lsr	r26
    2756:	97 95       	ror	r25
    2758:	87 95       	ror	r24
    275a:	77 95       	ror	r23
    275c:	67 95       	ror	r22
    275e:	ba 95       	dec	r27
    2760:	c9 f7       	brne	.-14     	; 0x2754 <__ultoa_invert+0x86>
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	61 05       	cpc	r22, r1
    2766:	71 05       	cpc	r23, r1
    2768:	08 95       	ret
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	0a 2e       	mov	r0, r26
    2770:	06 94       	lsr	r0
    2772:	57 95       	ror	r21
    2774:	47 95       	ror	r20
    2776:	37 95       	ror	r19
    2778:	27 95       	ror	r18
    277a:	ba 95       	dec	r27
    277c:	c9 f7       	brne	.-14     	; 0x2770 <__ultoa_invert+0xa2>
    277e:	62 0f       	add	r22, r18
    2780:	73 1f       	adc	r23, r19
    2782:	84 1f       	adc	r24, r20
    2784:	95 1f       	adc	r25, r21
    2786:	a0 1d       	adc	r26, r0
    2788:	08 95       	ret

0000278a <_exit>:
    278a:	f8 94       	cli

0000278c <__stop_program>:
    278c:	ff cf       	rjmp	.-2      	; 0x278c <__stop_program>
