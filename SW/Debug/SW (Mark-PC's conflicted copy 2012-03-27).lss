
SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000026e0  00002774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000240  00800148  00800148  000027bc  2**0
                  ALLOC
  3 .stab         00003e58  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c50  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__ctors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <__vector_9>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_12>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__vector_16>
      44:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__vector_17>
      48:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__vector_18>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      68:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      6c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      70:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      74:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      78:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      7c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      80:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      84:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      88:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      8c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      90:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      94:	fb 03       	fmulsu	r23, r19
      96:	0e 04       	cpc	r0, r14
      98:	33 04       	cpc	r3, r3
      9a:	58 04       	cpc	r5, r8
      9c:	7d 04       	cpc	r7, r13
      9e:	9c 04       	cpc	r9, r12
      a0:	b8 04       	cpc	r11, r8
      a2:	d4 04       	cpc	r13, r4
      a4:	f9 04       	cpc	r15, r9
      a6:	ff 04       	cpc	r15, r15
      a8:	24 05       	cpc	r18, r4
      aa:	49 05       	cpc	r20, r9
      ac:	6e 05       	cpc	r22, r14
      ae:	93 05       	cpc	r25, r3
      b0:	a3 05       	cpc	r26, r3
      b2:	fc 05       	cpc	r31, r12
      b4:	35 06       	cpc	r3, r21
      b6:	4b 06       	cpc	r4, r27
      b8:	4b 06       	cpc	r4, r27
      ba:	52 06       	cpc	r5, r18
      bc:	52 06       	cpc	r5, r18
      be:	52 06       	cpc	r5, r18
      c0:	52 06       	cpc	r5, r18
      c2:	52 06       	cpc	r5, r18
      c4:	52 06       	cpc	r5, r18
      c6:	52 06       	cpc	r5, r18
      c8:	52 06       	cpc	r5, r18
      ca:	52 06       	cpc	r5, r18
      cc:	52 06       	cpc	r5, r18
      ce:	52 06       	cpc	r5, r18
      d0:	52 06       	cpc	r5, r18
      d2:	52 06       	cpc	r5, r18
      d4:	13 03       	mulsu	r17, r19
      d6:	38 03       	fmul	r19, r16
      d8:	54 03       	mulsu	r21, r20
      da:	79 03       	fmul	r23, r17
      dc:	9e 03       	fmulsu	r17, r22
      de:	c3 03       	fmuls	r20, r19
      e0:	df 03       	fmulsu	r21, r23

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d0 e1       	ldi	r29, 0x10	; 16
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61

000000ee <__do_copy_data>:
      ee:	11 e0       	ldi	r17, 0x01	; 1
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b1 e0       	ldi	r27, 0x01	; 1
      f4:	e0 ee       	ldi	r30, 0xE0	; 224
      f6:	f6 e2       	ldi	r31, 0x26	; 38
      f8:	00 e0       	ldi	r16, 0x00	; 0
      fa:	0b bf       	out	0x3b, r16	; 59
      fc:	02 c0       	rjmp	.+4      	; 0x102 <__do_copy_data+0x14>
      fe:	07 90       	elpm	r0, Z+
     100:	0d 92       	st	X+, r0
     102:	a8 34       	cpi	r26, 0x48	; 72
     104:	b1 07       	cpc	r27, r17
     106:	d9 f7       	brne	.-10     	; 0xfe <__do_copy_data+0x10>

00000108 <__do_clear_bss>:
     108:	13 e0       	ldi	r17, 0x03	; 3
     10a:	a8 e4       	ldi	r26, 0x48	; 72
     10c:	b1 e0       	ldi	r27, 0x01	; 1
     10e:	01 c0       	rjmp	.+2      	; 0x112 <.do_clear_bss_start>

00000110 <.do_clear_bss_loop>:
     110:	1d 92       	st	X+, r1

00000112 <.do_clear_bss_start>:
     112:	a8 38       	cpi	r26, 0x88	; 136
     114:	b1 07       	cpc	r27, r17
     116:	e1 f7       	brne	.-8      	; 0x110 <.do_clear_bss_loop>
     118:	0e 94 93 00 	call	0x126	; 0x126 <main>
     11c:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <_exit>

00000120 <__bad_interrupt>:
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <handle_10ms_tick>:
	if(systimer_10ms % 1000 == 0)
	{
		// Send 1Hz Data
		//led_ctrl(LED7,LED_ON,LED_NO_TMR);
	}
}
     124:	08 95       	ret

00000126 <main>:
	}
	return(0);
}

int main(void)
{
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	69 97       	sbiw	r28, 0x19	; 25
     14a:	0f b6       	in	r0, 0x3f	; 63
     14c:	f8 94       	cli
     14e:	de bf       	out	0x3e, r29	; 62
     150:	0f be       	out	0x3f, r0	; 63
     152:	cd bf       	out	0x3d, r28	; 61
	DDRD |= _BV(PD7)|_BV(PD4);
     154:	8a b1       	in	r24, 0x0a	; 10
     156:	80 69       	ori	r24, 0x90	; 144
     158:	8a b9       	out	0x0a, r24	; 10
	uint16_t i;

	ui_init();
     15a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <ui_init>
	can_init();
     15e:	0e 94 8c 08 	call	0x1118	; 0x1118 <can_init>

	uint8_t frozen = 0;

	prepare_rx(0,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	40 e0       	ldi	r20, 0x00	; 0
     166:	50 e0       	ldi	r21, 0x00	; 0
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	70 e0       	ldi	r23, 0x00	; 0
     16c:	00 e0       	ldi	r16, 0x00	; 0
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	ee 24       	eor	r14, r14
     176:	e3 94       	inc	r14
     178:	cc 24       	eor	r12, r12
     17a:	c3 94       	inc	r12
     17c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(1,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	40 e0       	ldi	r20, 0x00	; 0
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	00 e0       	ldi	r16, 0x00	; 0
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(2,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	50 e0       	ldi	r21, 0x00	; 0
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	20 e0       	ldi	r18, 0x00	; 0
     1a6:	30 e0       	ldi	r19, 0x00	; 0
     1a8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(3,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	00 e0       	ldi	r16, 0x00	; 0
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(4,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     1c2:	84 e0       	ldi	r24, 0x04	; 4
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	00 e0       	ldi	r16, 0x00	; 0
     1ce:	10 e0       	ldi	r17, 0x00	; 0
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(5,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     1d8:	85 e0       	ldi	r24, 0x05	; 5
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(6,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>
	prepare_rx(7,0,0,CAN_EXT_MSG,CAN_DATABRDCST);
     204:	87 e0       	ldi	r24, 0x07	; 7
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	10 e0       	ldi	r17, 0x00	; 0
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <prepare_rx>


	//systimer_10ms_restart(0);


	sei();
     21a:	78 94       	sei

	data_chg = 0;
     21c:	10 92 48 01 	sts	0x0148, r1
     220:	88 ee       	ldi	r24, 0xE8	; 232
     222:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     224:	20 e9       	ldi	r18, 0x90	; 144
     226:	31 e0       	ldi	r19, 0x01	; 1
     228:	f9 01       	movw	r30, r18
     22a:	31 97       	sbiw	r30, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <main+0x104>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     22e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     230:	d9 f7       	brne	.-10     	; 0x228 <main+0x102>

	_delay_ms(100);

	i = 100;

	data[0].rpm = 2000;
     232:	80 ed       	ldi	r24, 0xD0	; 208
     234:	97 e0       	ldi	r25, 0x07	; 7
     236:	90 93 21 02 	sts	0x0221, r25
     23a:	80 93 20 02 	sts	0x0220, r24
	int16_t last_wtr_temp = 0;
	int16_t last_air_temp = 0;
	int16_t new_val = 0;
	uint8_t b;

	int16_t last_temps[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
     23e:	fe 01       	movw	r30, r28
     240:	31 96       	adiw	r30, 0x01	; 1
     242:	88 e1       	ldi	r24, 0x18	; 24
     244:	df 01       	movw	r26, r30
     246:	1d 92       	st	X+, r1
     248:	8a 95       	dec	r24
     24a:	e9 f7       	brne	.-6      	; 0x246 <main+0x120>
     24c:	99 24       	eor	r9, r9
     24e:	b1 e0       	ldi	r27, 0x01	; 1
     250:	b9 8f       	std	Y+25, r27	; 0x19
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	cc 24       	eor	r12, r12
     258:	dd 24       	eor	r13, r13
     25a:	aa 24       	eor	r10, r10
     25c:	bb 24       	eor	r11, r11
				glcd_set(10,0);
				glcd_set(11,0);
				glcd_set(12,0);
				glcd_set(13,0);
				glcd_set(14,0);
				glcd_set(15,0);
     25e:	8e 2e       	mov	r8, r30
     260:	5f 2e       	mov	r5, r31
				for(i = 0;i<12;i++)
     262:	89 e1       	ldi	r24, 0x19	; 25
     264:	68 2e       	mov	r6, r24
     266:	71 2c       	mov	r7, r1
     268:	6c 0e       	add	r6, r28
     26a:	7d 1e       	adc	r7, r29

	int16_t last_temps[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

	while(1)
	{
		switch(page)
     26c:	89 8d       	ldd	r24, Y+25	; 0x19
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	21 f0       	breq	.+8      	; 0x27a <main+0x154>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	09 f0       	breq	.+2      	; 0x278 <main+0x152>
     276:	62 c1       	rjmp	.+708    	; 0x53c <main+0x416>
     278:	49 c0       	rjmp	.+146    	; 0x30c <main+0x1e6>
		{
		case 1:
			if(page_update == 1)
     27a:	91 30       	cpi	r25, 0x01	; 1
     27c:	f1 f4       	brne	.+60     	; 0x2ba <main+0x194>
			{
				glcd_set(0,1);
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(4,0);
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(5,0);
     292:	85 e0       	ldi	r24, 0x05	; 5
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(6,0);
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(7,0);
     2a6:	87 e0       	ldi	r24, 0x07	; 7
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	cc 24       	eor	r12, r12
     2b4:	dd 24       	eor	r13, r13
     2b6:	aa 24       	eor	r10, r10
     2b8:	bb 24       	eor	r11, r11
				page_update = 0;
			}


			// Water Temp
			new_val = data[0].wtr_temp/10;
     2ba:	80 91 4a 02 	lds	r24, 0x024A
     2be:	90 91 4b 02 	lds	r25, 0x024B
     2c2:	6a e0       	ldi	r22, 0x0A	; 10
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	0e 94 25 10 	call	0x204a	; 0x204a <__divmodhi4>
     2ca:	7b 01       	movw	r14, r22
			if(new_val != last_wtr_temp)
     2cc:	6c 15       	cp	r22, r12
     2ce:	7d 05       	cpc	r23, r13
     2d0:	21 f0       	breq	.+8      	; 0x2da <main+0x1b4>
			{
				glcd_set(4,new_val);
     2d2:	84 e0       	ldi	r24, 0x04	; 4
     2d4:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
				last_wtr_temp = new_val;
				updated = 1;
			}

			new_val = data[0].air_temp/10;
     2da:	80 91 48 02 	lds	r24, 0x0248
     2de:	90 91 49 02 	lds	r25, 0x0249
     2e2:	6a e0       	ldi	r22, 0x0A	; 10
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	0e 94 25 10 	call	0x204a	; 0x204a <__divmodhi4>
     2ea:	8b 01       	movw	r16, r22
			if(new_val != last_air_temp)
     2ec:	6a 15       	cp	r22, r10
     2ee:	7b 05       	cpc	r23, r11
     2f0:	21 f0       	breq	.+8      	; 0x2fa <main+0x1d4>
			{
				glcd_set(5,new_val);
     2f2:	85 e0       	ldi	r24, 0x05	; 5
     2f4:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <main+0x1dc>
				last_air_temp = new_val;
				updated = 1;
			}

			if(updated == 1)
     2fa:	21 30       	cpi	r18, 0x01	; 1
     2fc:	11 f0       	breq	.+4      	; 0x302 <main+0x1dc>
     2fe:	67 01       	movw	r12, r14
     300:	17 c1       	rjmp	.+558    	; 0x530 <main+0x40a>
			{
				glcd_update();
     302:	0e 94 84 09 	call	0x1308	; 0x1308 <glcd_update>
     306:	67 01       	movw	r12, r14
     308:	58 01       	movw	r10, r16
     30a:	16 c1       	rjmp	.+556    	; 0x538 <main+0x412>
			}

			break;

		case 2:
			if(page_update == 1)
     30c:	91 30       	cpi	r25, 0x01	; 1
     30e:	09 f0       	breq	.+2      	; 0x312 <main+0x1ec>
     310:	4a c0       	rjmp	.+148    	; 0x3a6 <main+0x280>
			{
				glcd_set(0,2);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	62 e0       	ldi	r22, 0x02	; 2
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(4,0);
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(5,0);
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(6,0);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(7,0);
     33a:	87 e0       	ldi	r24, 0x07	; 7
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(8,0);
     344:	88 e0       	ldi	r24, 0x08	; 8
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(9,0);
     34e:	89 e0       	ldi	r24, 0x09	; 9
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(10,0);
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(11,0);
     362:	8b e0       	ldi	r24, 0x0B	; 11
     364:	60 e0       	ldi	r22, 0x00	; 0
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(12,0);
     36c:	8c e0       	ldi	r24, 0x0C	; 12
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(13,0);
     376:	8d e0       	ldi	r24, 0x0D	; 13
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(14,0);
     380:	8e e0       	ldi	r24, 0x0E	; 14
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	70 e0       	ldi	r23, 0x00	; 0
     386:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
				glcd_set(15,0);
     38a:	8f e0       	ldi	r24, 0x0F	; 15
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
     394:	88 2d       	mov	r24, r8
     396:	95 2d       	mov	r25, r5
     398:	fc 01       	movw	r30, r24
				for(i = 0;i<12;i++)
				{
					last_temps[i]=0;
     39a:	11 92       	st	Z+, r1
     39c:	11 92       	st	Z+, r1
				glcd_set(11,0);
				glcd_set(12,0);
				glcd_set(13,0);
				glcd_set(14,0);
				glcd_set(15,0);
				for(i = 0;i<12;i++)
     39e:	e6 15       	cp	r30, r6
     3a0:	f7 05       	cpc	r31, r7
     3a2:	d9 f7       	brne	.-10     	; 0x39a <main+0x274>
     3a4:	21 e0       	ldi	r18, 0x01	; 1
				}
				updated = 1;
				page_update = 0;
			}

			if(!frozen)
     3a6:	99 20       	and	r9, r9
     3a8:	09 f0       	breq	.+2      	; 0x3ac <main+0x286>
     3aa:	c0 c0       	rjmp	.+384    	; 0x52c <main+0x406>
			{
				new_val = data[0].ttemp_otr_fl;
     3ac:	00 91 95 02 	lds	r16, 0x0295
     3b0:	10 91 96 02 	lds	r17, 0x0296
				if(new_val != last_temps[0])
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	9a 81       	ldd	r25, Y+2	; 0x02
     3b8:	08 17       	cp	r16, r24
     3ba:	19 07       	cpc	r17, r25
     3bc:	39 f0       	breq	.+14     	; 0x3cc <main+0x2a6>
				{
					glcd_set(4,new_val);
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	b8 01       	movw	r22, r16
     3c2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[0] = new_val;
     3c6:	1a 83       	std	Y+2, r17	; 0x02
     3c8:	09 83       	std	Y+1, r16	; 0x01
     3ca:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fl;
     3cc:	00 91 93 02 	lds	r16, 0x0293
     3d0:	10 91 94 02 	lds	r17, 0x0294
				if(new_val != last_temps[1])
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	08 17       	cp	r16, r24
     3da:	19 07       	cpc	r17, r25
     3dc:	39 f0       	breq	.+14     	; 0x3ec <main+0x2c6>
				{
					glcd_set(5,new_val);
     3de:	85 e0       	ldi	r24, 0x05	; 5
     3e0:	b8 01       	movw	r22, r16
     3e2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[1] = new_val;
     3e6:	1c 83       	std	Y+4, r17	; 0x04
     3e8:	0b 83       	std	Y+3, r16	; 0x03
     3ea:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fl;
     3ec:	00 91 91 02 	lds	r16, 0x0291
     3f0:	10 91 92 02 	lds	r17, 0x0292
				if(new_val != last_temps[2])
     3f4:	8d 81       	ldd	r24, Y+5	; 0x05
     3f6:	9e 81       	ldd	r25, Y+6	; 0x06
     3f8:	08 17       	cp	r16, r24
     3fa:	19 07       	cpc	r17, r25
     3fc:	39 f0       	breq	.+14     	; 0x40c <main+0x2e6>
				{
					glcd_set(6,new_val);
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	b8 01       	movw	r22, r16
     402:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[2] = new_val;
     406:	1e 83       	std	Y+6, r17	; 0x06
     408:	0d 83       	std	Y+5, r16	; 0x05
     40a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_otr_fr;
     40c:	00 91 9b 02 	lds	r16, 0x029B
     410:	10 91 9c 02 	lds	r17, 0x029C
				if(new_val != last_temps[3])
     414:	8f 81       	ldd	r24, Y+7	; 0x07
     416:	98 85       	ldd	r25, Y+8	; 0x08
     418:	08 17       	cp	r16, r24
     41a:	19 07       	cpc	r17, r25
     41c:	39 f0       	breq	.+14     	; 0x42c <main+0x306>
				{
					glcd_set(7,new_val);
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	b8 01       	movw	r22, r16
     422:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[3] = new_val;
     426:	18 87       	std	Y+8, r17	; 0x08
     428:	0f 83       	std	Y+7, r16	; 0x07
     42a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_fr;
     42c:	00 91 99 02 	lds	r16, 0x0299
     430:	10 91 9a 02 	lds	r17, 0x029A
				if(new_val != last_temps[4])
     434:	89 85       	ldd	r24, Y+9	; 0x09
     436:	9a 85       	ldd	r25, Y+10	; 0x0a
     438:	08 17       	cp	r16, r24
     43a:	19 07       	cpc	r17, r25
     43c:	39 f0       	breq	.+14     	; 0x44c <main+0x326>
				{
					glcd_set(8,new_val);
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	b8 01       	movw	r22, r16
     442:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[4] = new_val;
     446:	1a 87       	std	Y+10, r17	; 0x0a
     448:	09 87       	std	Y+9, r16	; 0x09
     44a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_inr_fr;
     44c:	00 91 97 02 	lds	r16, 0x0297
     450:	10 91 98 02 	lds	r17, 0x0298
				if(new_val != last_temps[5])
     454:	8b 85       	ldd	r24, Y+11	; 0x0b
     456:	9c 85       	ldd	r25, Y+12	; 0x0c
     458:	08 17       	cp	r16, r24
     45a:	19 07       	cpc	r17, r25
     45c:	39 f0       	breq	.+14     	; 0x46c <main+0x346>
				{
					glcd_set(9,new_val);
     45e:	89 e0       	ldi	r24, 0x09	; 9
     460:	b8 01       	movw	r22, r16
     462:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[5] = new_val;
     466:	1c 87       	std	Y+12, r17	; 0x0c
     468:	0b 87       	std	Y+11, r16	; 0x0b
     46a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}
				//-------------
				new_val = data[0].ttemp_otr_rl;
     46c:	00 91 a1 02 	lds	r16, 0x02A1
     470:	10 91 a2 02 	lds	r17, 0x02A2
				if(new_val != last_temps[6])
     474:	8d 85       	ldd	r24, Y+13	; 0x0d
     476:	9e 85       	ldd	r25, Y+14	; 0x0e
     478:	08 17       	cp	r16, r24
     47a:	19 07       	cpc	r17, r25
     47c:	39 f0       	breq	.+14     	; 0x48c <main+0x366>
				{
					glcd_set(10,new_val);
     47e:	8a e0       	ldi	r24, 0x0A	; 10
     480:	b8 01       	movw	r22, r16
     482:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[6] = new_val;
     486:	1e 87       	std	Y+14, r17	; 0x0e
     488:	0d 87       	std	Y+13, r16	; 0x0d
     48a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rl;
     48c:	00 91 9f 02 	lds	r16, 0x029F
     490:	10 91 a0 02 	lds	r17, 0x02A0
				if(new_val != last_temps[7])
     494:	8f 85       	ldd	r24, Y+15	; 0x0f
     496:	98 89       	ldd	r25, Y+16	; 0x10
     498:	08 17       	cp	r16, r24
     49a:	19 07       	cpc	r17, r25
     49c:	39 f0       	breq	.+14     	; 0x4ac <main+0x386>
				{
					glcd_set(11,new_val);
     49e:	8b e0       	ldi	r24, 0x0B	; 11
     4a0:	b8 01       	movw	r22, r16
     4a2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[7] = new_val;
     4a6:	18 8b       	std	Y+16, r17	; 0x10
     4a8:	0f 87       	std	Y+15, r16	; 0x0f
     4aa:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rl;
     4ac:	00 91 9d 02 	lds	r16, 0x029D
     4b0:	10 91 9e 02 	lds	r17, 0x029E
				if(new_val != last_temps[8])
     4b4:	89 89       	ldd	r24, Y+17	; 0x11
     4b6:	9a 89       	ldd	r25, Y+18	; 0x12
     4b8:	08 17       	cp	r16, r24
     4ba:	19 07       	cpc	r17, r25
     4bc:	39 f0       	breq	.+14     	; 0x4cc <main+0x3a6>
				{
					glcd_set(12,new_val);
     4be:	8c e0       	ldi	r24, 0x0C	; 12
     4c0:	b8 01       	movw	r22, r16
     4c2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[8] = new_val;
     4c6:	1a 8b       	std	Y+18, r17	; 0x12
     4c8:	09 8b       	std	Y+17, r16	; 0x11
     4ca:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_otr_rr;
     4cc:	00 91 a7 02 	lds	r16, 0x02A7
     4d0:	10 91 a8 02 	lds	r17, 0x02A8
				if(new_val != last_temps[9])
     4d4:	8b 89       	ldd	r24, Y+19	; 0x13
     4d6:	9c 89       	ldd	r25, Y+20	; 0x14
     4d8:	08 17       	cp	r16, r24
     4da:	19 07       	cpc	r17, r25
     4dc:	39 f0       	breq	.+14     	; 0x4ec <main+0x3c6>
				{
					glcd_set(13,new_val);
     4de:	8d e0       	ldi	r24, 0x0D	; 13
     4e0:	b8 01       	movw	r22, r16
     4e2:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[9] = new_val;
     4e6:	1c 8b       	std	Y+20, r17	; 0x14
     4e8:	0b 8b       	std	Y+19, r16	; 0x13
     4ea:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_mdl_rr;
     4ec:	00 91 a5 02 	lds	r16, 0x02A5
     4f0:	10 91 a6 02 	lds	r17, 0x02A6
				if(new_val != last_temps[10])
     4f4:	8d 89       	ldd	r24, Y+21	; 0x15
     4f6:	9e 89       	ldd	r25, Y+22	; 0x16
     4f8:	08 17       	cp	r16, r24
     4fa:	19 07       	cpc	r17, r25
     4fc:	39 f0       	breq	.+14     	; 0x50c <main+0x3e6>
				{
					glcd_set(14,new_val);
     4fe:	8e e0       	ldi	r24, 0x0E	; 14
     500:	b8 01       	movw	r22, r16
     502:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[10] = new_val;
     506:	1e 8b       	std	Y+22, r17	; 0x16
     508:	0d 8b       	std	Y+21, r16	; 0x15
     50a:	21 e0       	ldi	r18, 0x01	; 1
					updated = 1;
				}

				new_val = data[0].ttemp_inr_rr;
     50c:	00 91 a3 02 	lds	r16, 0x02A3
     510:	10 91 a4 02 	lds	r17, 0x02A4
				if(new_val != last_temps[11])
     514:	8f 89       	ldd	r24, Y+23	; 0x17
     516:	98 8d       	ldd	r25, Y+24	; 0x18
     518:	08 17       	cp	r16, r24
     51a:	19 07       	cpc	r17, r25
     51c:	39 f0       	breq	.+14     	; 0x52c <main+0x406>
				{
					glcd_set(15,new_val);
     51e:	8f e0       	ldi	r24, 0x0F	; 15
     520:	b8 01       	movw	r22, r16
     522:	0e 94 ca 09 	call	0x1394	; 0x1394 <glcd_set>
					last_temps[11] = new_val;
     526:	18 8f       	std	Y+24, r17	; 0x18
     528:	0f 8b       	std	Y+23, r16	; 0x17
     52a:	04 c0       	rjmp	.+8      	; 0x534 <main+0x40e>
					updated = 1;
				}
			}

			if(updated == 1)
     52c:	21 30       	cpi	r18, 0x01	; 1
     52e:	11 f0       	breq	.+4      	; 0x534 <main+0x40e>
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	04 c0       	rjmp	.+8      	; 0x53c <main+0x416>
			{
				glcd_update();
     534:	0e 94 84 09 	call	0x1308	; 0x1308 <glcd_update>
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	20 e0       	ldi	r18, 0x00	; 0
			break;
		default:
			break;
		}

		if(last_btn != 0)
     53c:	80 91 a9 01 	lds	r24, 0x01A9
     540:	88 23       	and	r24, r24
     542:	09 f4       	brne	.+2      	; 0x546 <main+0x420>
     544:	93 ce       	rjmp	.-730    	; 0x26c <main+0x146>
		{
			b = last_btn;
     546:	80 91 a9 01 	lds	r24, 0x01A9
			last_btn = 0;
     54a:	10 92 a9 01 	sts	0x01A9, r1

			if(b == BTN_R_PSHD)
     54e:	88 30       	cpi	r24, 0x08	; 8
     550:	39 f4       	brne	.+14     	; 0x560 <main+0x43a>
			{
				if(page != 2)
     552:	a9 8d       	ldd	r26, Y+25	; 0x19
     554:	a2 30       	cpi	r26, 0x02	; 2
     556:	09 f4       	brne	.+2      	; 0x55a <main+0x434>
     558:	89 ce       	rjmp	.-750    	; 0x26c <main+0x146>
     55a:	b2 e0       	ldi	r27, 0x02	; 2
     55c:	b9 8f       	std	Y+25, r27	; 0x19
     55e:	d9 ce       	rjmp	.-590    	; 0x312 <main+0x1ec>
					page = 2;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_L_PSHD)
     560:	87 30       	cpi	r24, 0x07	; 7
     562:	39 f4       	brne	.+14     	; 0x572 <main+0x44c>
			{
				if(page != 1)
     564:	89 8d       	ldd	r24, Y+25	; 0x19
     566:	81 30       	cpi	r24, 0x01	; 1
     568:	09 f4       	brne	.+2      	; 0x56c <main+0x446>
     56a:	80 ce       	rjmp	.-768    	; 0x26c <main+0x146>
     56c:	a1 e0       	ldi	r26, 0x01	; 1
     56e:	a9 8f       	std	Y+25, r26	; 0x19
     570:	86 ce       	rjmp	.-756    	; 0x27e <main+0x158>
					page = 1;
					page_update = 1;
					b = 0;
				}
			}
			else if(b == BTN_1_PSHD)
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	21 f4       	brne	.+8      	; 0x57e <main+0x458>
			{
				tach_flag = 1;
     576:	80 93 81 03 	sts	0x0381, r24
				tach_on();
     57a:	2d 98       	cbi	0x05, 5	; 5
     57c:	77 ce       	rjmp	.-786    	; 0x26c <main+0x146>
				b = 0;
			}
			else if((b == BTN_2_PSHD))
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	21 f4       	brne	.+8      	; 0x58a <main+0x464>
			{
				tach_flag = 0;
     582:	10 92 81 03 	sts	0x0381, r1
				tach_off();
     586:	2d 9a       	sbi	0x05, 5	; 5
     588:	71 ce       	rjmp	.-798    	; 0x26c <main+0x146>
			}
			else if((b==BTN_3_PSHD))
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	19 f4       	brne	.+6      	; 0x594 <main+0x46e>
     58e:	99 24       	eor	r9, r9
     590:	93 94       	inc	r9
     592:	6c ce       	rjmp	.-808    	; 0x26c <main+0x146>
			{
				frozen = 1;
			}
			else if(b==BTN_4_PSHD)
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	09 f0       	breq	.+2      	; 0x59a <main+0x474>
     598:	69 ce       	rjmp	.-814    	; 0x26c <main+0x146>
     59a:	99 24       	eor	r9, r9
     59c:	67 ce       	rjmp	.-818    	; 0x26c <main+0x146>

0000059e <ProcessCanMsg>:
#define ch2dblword(b3,b2,b1,b0)	((((uint32_t)(b3) & 0x000000FF) << 24) + (((uint32_t)(b2) & 0x000000FF) << 16) + (((uint32_t)(b1) & 0x000000FF) << 8) + b0)

volatile uint8_t data_chg = 0;

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
     59e:	df 92       	push	r13
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
	uint8_t msg_type;

	unsigned char i;

	// Get the Message Type
	msg_type = pkt->msg_type;
     5ae:	dd 80       	ldd	r13, Y+5	; 0x05
	// Clear the message type in the lookup table

	uint16_t id = (uint16_t)((uint32_t)(pkt->id)>>8);
     5b0:	e8 80       	ld	r14, Y
     5b2:	f9 80       	ldd	r15, Y+1	; 0x01
     5b4:	0a 81       	ldd	r16, Y+2	; 0x02
     5b6:	1b 81       	ldd	r17, Y+3	; 0x03

	printf("CAN ID: %04X%04X\n",(uint16_t)(pkt->id >> 16),(uint16_t)pkt->id);
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <ProcessCanMsg+0x1c>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <ProcessCanMsg+0x1e>
     5bc:	00 d0       	rcall	.+0      	; 0x5be <ProcessCanMsg+0x20>
     5be:	ed b7       	in	r30, 0x3d	; 61
     5c0:	fe b7       	in	r31, 0x3e	; 62
     5c2:	31 96       	adiw	r30, 0x01	; 1
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	ad b7       	in	r26, 0x3d	; 61
     5ca:	be b7       	in	r27, 0x3e	; 62
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	9c 93       	st	X, r25
     5d0:	8e 93       	st	-X, r24
     5d2:	11 97       	sbiw	r26, 0x01	; 1
     5d4:	c8 01       	movw	r24, r16
     5d6:	aa 27       	eor	r26, r26
     5d8:	bb 27       	eor	r27, r27
     5da:	93 83       	std	Z+3, r25	; 0x03
     5dc:	82 83       	std	Z+2, r24	; 0x02
     5de:	f5 82       	std	Z+5, r15	; 0x05
     5e0:	e4 82       	std	Z+4, r14	; 0x04
     5e2:	0e 94 85 10 	call	0x210a	; 0x210a <printf>

	switch(msg_type)
     5e6:	8d b7       	in	r24, 0x3d	; 61
     5e8:	9e b7       	in	r25, 0x3e	; 62
     5ea:	06 96       	adiw	r24, 0x06	; 6
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	9e bf       	out	0x3e, r25	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	8d bf       	out	0x3d, r24	; 61
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	d9 16       	cp	r13, r25
     5fa:	09 f0       	breq	.+2      	; 0x5fe <ProcessCanMsg+0x60>
     5fc:	53 c3       	rjmp	.+1702   	; 0xca4 <ProcessCanMsg+0x706>
	{
		case CAN_MSGTYPE_NONE:
			return(0);
		case CAN_DATABRDCST:
			data_chg = 1;
     5fe:	d0 92 48 01 	sts	0x0148, r13

			switch(id)
     602:	bb 27       	eor	r27, r27
     604:	a1 2f       	mov	r26, r17
     606:	90 2f       	mov	r25, r16
     608:	8f 2d       	mov	r24, r15
     60a:	fc 01       	movw	r30, r24
     60c:	f0 96       	adiw	r30, 0x30	; 48
     60e:	e7 32       	cpi	r30, 0x27	; 39
     610:	f1 05       	cpc	r31, r1
     612:	08 f0       	brcs	.+2      	; 0x616 <ProcessCanMsg+0x78>
     614:	47 c3       	rjmp	.+1678   	; 0xca4 <ProcessCanMsg+0x706>
     616:	e6 5b       	subi	r30, 0xB6	; 182
     618:	ff 4f       	sbci	r31, 0xFF	; 255
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	05 90       	lpm	r0, Z+
     620:	f4 91       	lpm	r31, Z+
     622:	e0 2d       	mov	r30, r0
     624:	09 94       	ijmp
			{
				case CAN_DATA_PE1:
					//led_ctrl(LED1,LED_ON,LED_NO_TMR);
					data[0].rpm = ch2word(pkt->data[1],pkt->data[0]);
     626:	98 85       	ldd	r25, Y+8	; 0x08
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	2f 81       	ldd	r18, Y+7	; 0x07
     62c:	82 0f       	add	r24, r18
     62e:	91 1d       	adc	r25, r1
     630:	90 93 21 02 	sts	0x0221, r25
     634:	80 93 20 02 	sts	0x0220, r24
					data[0].tps = ch2word(pkt->data[3],pkt->data[2]);
     638:	9a 85       	ldd	r25, Y+10	; 0x0a
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	29 85       	ldd	r18, Y+9	; 0x09
     63e:	82 0f       	add	r24, r18
     640:	91 1d       	adc	r25, r1
     642:	90 93 23 02 	sts	0x0223, r25
     646:	80 93 22 02 	sts	0x0222, r24
					data[0].fuel_open_time = ch2word(pkt->data[5],pkt->data[4]);
     64a:	9c 85       	ldd	r25, Y+12	; 0x0c
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	2b 85       	ldd	r18, Y+11	; 0x0b
     650:	82 0f       	add	r24, r18
     652:	91 1d       	adc	r25, r1
     654:	90 93 25 02 	sts	0x0225, r25
     658:	80 93 24 02 	sts	0x0224, r24
					data[0].ign_angle = ch2word(pkt->data[7],pkt->data[6]);
     65c:	9e 85       	ldd	r25, Y+14	; 0x0e
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	2d 85       	ldd	r18, Y+13	; 0x0d
     662:	82 0f       	add	r24, r18
     664:	91 1d       	adc	r25, r1
     666:	90 93 27 02 	sts	0x0227, r25
     66a:	80 93 26 02 	sts	0x0226, r24
     66e:	1b c3       	rjmp	.+1590   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE2:
					data[0].barometer = ch2word(pkt->data[1],pkt->data[0]);
     670:	98 85       	ldd	r25, Y+8	; 0x08
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	2f 81       	ldd	r18, Y+7	; 0x07
     676:	82 0f       	add	r24, r18
     678:	91 1d       	adc	r25, r1
     67a:	90 93 29 02 	sts	0x0229, r25
     67e:	80 93 28 02 	sts	0x0228, r24
					data[0].map = ch2word(pkt->data[3],pkt->data[2]);
     682:	9a 85       	ldd	r25, Y+10	; 0x0a
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	29 85       	ldd	r18, Y+9	; 0x09
     688:	82 0f       	add	r24, r18
     68a:	91 1d       	adc	r25, r1
     68c:	90 93 2b 02 	sts	0x022B, r25
     690:	80 93 2a 02 	sts	0x022A, r24
					data[0].lambda = ch2word(pkt->data[5],pkt->data[4]);
     694:	9c 85       	ldd	r25, Y+12	; 0x0c
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	2b 85       	ldd	r18, Y+11	; 0x0b
     69a:	82 0f       	add	r24, r18
     69c:	91 1d       	adc	r25, r1
     69e:	90 93 2d 02 	sts	0x022D, r25
     6a2:	80 93 2c 02 	sts	0x022C, r24
     6a6:	ff c2       	rjmp	.+1534   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE3:
					data[0].pe3_a1 = ch2word(pkt->data[1],pkt->data[0]);
     6a8:	98 85       	ldd	r25, Y+8	; 0x08
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	2f 81       	ldd	r18, Y+7	; 0x07
     6ae:	82 0f       	add	r24, r18
     6b0:	91 1d       	adc	r25, r1
     6b2:	90 93 2f 02 	sts	0x022F, r25
     6b6:	80 93 2e 02 	sts	0x022E, r24
					data[0].pe3_a2 = ch2word(pkt->data[3],pkt->data[2]);
     6ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	29 85       	ldd	r18, Y+9	; 0x09
     6c0:	82 0f       	add	r24, r18
     6c2:	91 1d       	adc	r25, r1
     6c4:	90 93 31 02 	sts	0x0231, r25
     6c8:	80 93 30 02 	sts	0x0230, r24
					data[0].pe3_a3 = ch2word(pkt->data[5],pkt->data[4]);
     6cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	2b 85       	ldd	r18, Y+11	; 0x0b
     6d2:	82 0f       	add	r24, r18
     6d4:	91 1d       	adc	r25, r1
     6d6:	90 93 33 02 	sts	0x0233, r25
     6da:	80 93 32 02 	sts	0x0232, r24
					data[0].pe3_a4 = ch2word(pkt->data[7],pkt->data[6]);
     6de:	9e 85       	ldd	r25, Y+14	; 0x0e
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	2d 85       	ldd	r18, Y+13	; 0x0d
     6e4:	82 0f       	add	r24, r18
     6e6:	91 1d       	adc	r25, r1
     6e8:	90 93 35 02 	sts	0x0235, r25
     6ec:	80 93 34 02 	sts	0x0234, r24
     6f0:	da c2       	rjmp	.+1460   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE4:
					data[0].pe3_a5 = ch2word(pkt->data[1],pkt->data[0]);
     6f2:	98 85       	ldd	r25, Y+8	; 0x08
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	2f 81       	ldd	r18, Y+7	; 0x07
     6f8:	82 0f       	add	r24, r18
     6fa:	91 1d       	adc	r25, r1
     6fc:	90 93 37 02 	sts	0x0237, r25
     700:	80 93 36 02 	sts	0x0236, r24
					data[0].pe3_a6 = ch2word(pkt->data[3],pkt->data[2]);
     704:	9a 85       	ldd	r25, Y+10	; 0x0a
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	29 85       	ldd	r18, Y+9	; 0x09
     70a:	82 0f       	add	r24, r18
     70c:	91 1d       	adc	r25, r1
     70e:	90 93 39 02 	sts	0x0239, r25
     712:	80 93 38 02 	sts	0x0238, r24
					data[0].pe3_a7 = ch2word(pkt->data[5],pkt->data[4]);
     716:	9c 85       	ldd	r25, Y+12	; 0x0c
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	2b 85       	ldd	r18, Y+11	; 0x0b
     71c:	82 0f       	add	r24, r18
     71e:	91 1d       	adc	r25, r1
     720:	90 93 3b 02 	sts	0x023B, r25
     724:	80 93 3a 02 	sts	0x023A, r24
					data[0].pe3_a8 = ch2word(pkt->data[7],pkt->data[6]);
     728:	9e 85       	ldd	r25, Y+14	; 0x0e
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	2d 85       	ldd	r18, Y+13	; 0x0d
     72e:	82 0f       	add	r24, r18
     730:	91 1d       	adc	r25, r1
     732:	90 93 3d 02 	sts	0x023D, r25
     736:	80 93 3c 02 	sts	0x023C, r24
     73a:	b5 c2       	rjmp	.+1386   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE5:
					data[0].freq1 = ch2word(pkt->data[1],pkt->data[0]);
     73c:	98 85       	ldd	r25, Y+8	; 0x08
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	2f 81       	ldd	r18, Y+7	; 0x07
     742:	82 0f       	add	r24, r18
     744:	91 1d       	adc	r25, r1
     746:	90 93 3f 02 	sts	0x023F, r25
     74a:	80 93 3e 02 	sts	0x023E, r24
					data[0].freq2 = ch2word(pkt->data[3],pkt->data[2]);
     74e:	9a 85       	ldd	r25, Y+10	; 0x0a
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	29 85       	ldd	r18, Y+9	; 0x09
     754:	82 0f       	add	r24, r18
     756:	91 1d       	adc	r25, r1
     758:	90 93 41 02 	sts	0x0241, r25
     75c:	80 93 40 02 	sts	0x0240, r24
					data[0].freq3 = ch2word(pkt->data[5],pkt->data[4]);
     760:	9c 85       	ldd	r25, Y+12	; 0x0c
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	2b 85       	ldd	r18, Y+11	; 0x0b
     766:	82 0f       	add	r24, r18
     768:	91 1d       	adc	r25, r1
     76a:	90 93 43 02 	sts	0x0243, r25
     76e:	80 93 42 02 	sts	0x0242, r24
					data[0].freq4 = ch2word(pkt->data[7],pkt->data[6]);
     772:	9e 85       	ldd	r25, Y+14	; 0x0e
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	2d 85       	ldd	r18, Y+13	; 0x0d
     778:	82 0f       	add	r24, r18
     77a:	91 1d       	adc	r25, r1
     77c:	90 93 45 02 	sts	0x0245, r25
     780:	80 93 44 02 	sts	0x0244, r24
     784:	90 c2       	rjmp	.+1312   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE6:
					data[0].batt_volt = ch2word(pkt->data[1],pkt->data[0]);
     786:	98 85       	ldd	r25, Y+8	; 0x08
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	82 0f       	add	r24, r18
     78e:	91 1d       	adc	r25, r1
     790:	90 93 47 02 	sts	0x0247, r25
     794:	80 93 46 02 	sts	0x0246, r24
					data[0].air_temp = ch2word(pkt->data[3],pkt->data[2]);
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	29 85       	ldd	r18, Y+9	; 0x09
     79e:	82 0f       	add	r24, r18
     7a0:	91 1d       	adc	r25, r1
     7a2:	90 93 49 02 	sts	0x0249, r25
     7a6:	80 93 48 02 	sts	0x0248, r24
					data[0].wtr_temp = ch2word(pkt->data[5],pkt->data[4]);
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     7b0:	82 0f       	add	r24, r18
     7b2:	91 1d       	adc	r25, r1
     7b4:	90 93 4b 02 	sts	0x024B, r25
     7b8:	80 93 4a 02 	sts	0x024A, r24
     7bc:	74 c2       	rjmp	.+1256   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_PE7:
					data[0].therm5 = ch2word(pkt->data[1],pkt->data[0]);
     7be:	98 85       	ldd	r25, Y+8	; 0x08
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	2f 81       	ldd	r18, Y+7	; 0x07
     7c4:	82 0f       	add	r24, r18
     7c6:	91 1d       	adc	r25, r1
     7c8:	90 93 4d 02 	sts	0x024D, r25
     7cc:	80 93 4c 02 	sts	0x024C, r24
					data[0].therm6 = ch2word(pkt->data[3],pkt->data[2]);
     7d0:	9a 85       	ldd	r25, Y+10	; 0x0a
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	29 85       	ldd	r18, Y+9	; 0x09
     7d6:	82 0f       	add	r24, r18
     7d8:	91 1d       	adc	r25, r1
     7da:	90 93 4f 02 	sts	0x024F, r25
     7de:	80 93 4e 02 	sts	0x024E, r24
					data[0].ver_mjr = pkt->data[4];
     7e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e4:	80 93 50 02 	sts	0x0250, r24
					data[0].ver_min = pkt->data[5];
     7e8:	8c 85       	ldd	r24, Y+12	; 0x0c
     7ea:	80 93 51 02 	sts	0x0251, r24
					data[0].ver_bld = pkt->data[6];
     7ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     7f0:	80 93 52 02 	sts	0x0252, r24
     7f4:	58 c2       	rjmp	.+1200   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_TCS1:
					data[0].TCS_status = pkt->data[0];
     7f6:	8f 81       	ldd	r24, Y+7	; 0x07
     7f8:	80 93 53 02 	sts	0x0253, r24
					data[0].trac_status = pkt->data[1];
     7fc:	88 85       	ldd	r24, Y+8	; 0x08
     7fe:	80 93 54 02 	sts	0x0254, r24
					data[0].lnc_status = pkt->data[2];
     802:	89 85       	ldd	r24, Y+9	; 0x09
     804:	80 93 55 02 	sts	0x0255, r24
					data[0].lnc_dsb_spd = ch2word(pkt->data[3],pkt->data[4]);
     808:	9a 85       	ldd	r25, Y+10	; 0x0a
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	2b 85       	ldd	r18, Y+11	; 0x0b
     80e:	82 0f       	add	r24, r18
     810:	91 1d       	adc	r25, r1
     812:	90 93 57 02 	sts	0x0257, r25
     816:	80 93 56 02 	sts	0x0256, r24
     81a:	45 c2       	rjmp	.+1162   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_TCS2:
					data[0].fuel_slip_err = ch2word(pkt->data[0],pkt->data[1]);
     81c:	9f 81       	ldd	r25, Y+7	; 0x07
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	28 85       	ldd	r18, Y+8	; 0x08
     822:	82 0f       	add	r24, r18
     824:	91 1d       	adc	r25, r1
     826:	90 93 59 02 	sts	0x0259, r25
     82a:	80 93 58 02 	sts	0x0258, r24
					data[0].fuel_comp = ch2word(pkt->data[2],pkt->data[3]);
     82e:	99 85       	ldd	r25, Y+9	; 0x09
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	2a 85       	ldd	r18, Y+10	; 0x0a
     834:	82 0f       	add	r24, r18
     836:	91 1d       	adc	r25, r1
     838:	90 93 5b 02 	sts	0x025B, r25
     83c:	80 93 5a 02 	sts	0x025A, r24
					data[0].timing_err = ch2word(pkt->data[4],pkt->data[5]);
     840:	9b 85       	ldd	r25, Y+11	; 0x0b
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	2c 85       	ldd	r18, Y+12	; 0x0c
     846:	82 0f       	add	r24, r18
     848:	91 1d       	adc	r25, r1
     84a:	90 93 5d 02 	sts	0x025D, r25
     84e:	80 93 5c 02 	sts	0x025C, r24
					data[0].timing_comp = ch2word(pkt->data[6],pkt->data[7]);
     852:	9d 85       	ldd	r25, Y+13	; 0x0d
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	2e 85       	ldd	r18, Y+14	; 0x0e
     858:	82 0f       	add	r24, r18
     85a:	91 1d       	adc	r25, r1
     85c:	90 93 5f 02 	sts	0x025F, r25
     860:	80 93 5e 02 	sts	0x025E, r24
     864:	20 c2       	rjmp	.+1088   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_TCS3:
					data[0].tcs_a0 = ch2word(pkt->data[0],pkt->data[1]);
     866:	9f 81       	ldd	r25, Y+7	; 0x07
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	28 85       	ldd	r18, Y+8	; 0x08
     86c:	82 0f       	add	r24, r18
     86e:	91 1d       	adc	r25, r1
     870:	90 93 61 02 	sts	0x0261, r25
     874:	80 93 60 02 	sts	0x0260, r24
					data[0].tcs_a1 = ch2word(pkt->data[2],pkt->data[3]);
     878:	99 85       	ldd	r25, Y+9	; 0x09
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	2a 85       	ldd	r18, Y+10	; 0x0a
     87e:	82 0f       	add	r24, r18
     880:	91 1d       	adc	r25, r1
     882:	90 93 63 02 	sts	0x0263, r25
     886:	80 93 62 02 	sts	0x0262, r24
					data[0].tcs_a2 = ch2word(pkt->data[4],pkt->data[5]);
     88a:	9b 85       	ldd	r25, Y+11	; 0x0b
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	2c 85       	ldd	r18, Y+12	; 0x0c
     890:	82 0f       	add	r24, r18
     892:	91 1d       	adc	r25, r1
     894:	90 93 65 02 	sts	0x0265, r25
     898:	80 93 64 02 	sts	0x0264, r24
					data[0].tcs_a3 = ch2word(pkt->data[6],pkt->data[7]);
     89c:	9d 85       	ldd	r25, Y+13	; 0x0d
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	2e 85       	ldd	r18, Y+14	; 0x0e
     8a2:	82 0f       	add	r24, r18
     8a4:	91 1d       	adc	r25, r1
     8a6:	90 93 67 02 	sts	0x0267, r25
     8aa:	80 93 66 02 	sts	0x0266, r24
     8ae:	fb c1       	rjmp	.+1014   	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_TCS4:
					data[0].fuel_kp = pkt->data[0];
     8b0:	8f 81       	ldd	r24, Y+7	; 0x07
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 69 02 	sts	0x0269, r25
     8b8:	80 93 68 02 	sts	0x0268, r24
					data[0].fuel_kd = pkt->data[1];
     8bc:	88 85       	ldd	r24, Y+8	; 0x08
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 6b 02 	sts	0x026B, r25
     8c4:	80 93 6a 02 	sts	0x026A, r24
					data[0].fuel_ki = pkt->data[2];
     8c8:	89 85       	ldd	r24, Y+9	; 0x09
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	90 93 6d 02 	sts	0x026D, r25
     8d0:	80 93 6c 02 	sts	0x026C, r24
					data[0].timing_kp = pkt->data[3];
     8d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	90 93 6f 02 	sts	0x026F, r25
     8dc:	80 93 6e 02 	sts	0x026E, r24
					data[0].timing_kd = pkt->data[4];
     8e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	90 93 71 02 	sts	0x0271, r25
     8e8:	80 93 70 02 	sts	0x0270, r24
					data[0].timing_ki = pkt->data[5];
     8ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	90 93 73 02 	sts	0x0273, r25
     8f4:	80 93 72 02 	sts	0x0272, r24
     8f8:	d6 c1       	rjmp	.+940    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_IMU1:
					data[0].IMU_status = pkt->data[0];
     8fa:	8f 81       	ldd	r24, Y+7	; 0x07
     8fc:	80 93 74 02 	sts	0x0274, r24
					data[0].x_comp = ch2word(pkt->data[1],pkt->data[2]);
     900:	98 85       	ldd	r25, Y+8	; 0x08
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	29 85       	ldd	r18, Y+9	; 0x09
     906:	82 0f       	add	r24, r18
     908:	91 1d       	adc	r25, r1
     90a:	90 93 76 02 	sts	0x0276, r25
     90e:	80 93 75 02 	sts	0x0275, r24
					data[0].y_comp = ch2word(pkt->data[3],pkt->data[4]);
     912:	9a 85       	ldd	r25, Y+10	; 0x0a
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	2b 85       	ldd	r18, Y+11	; 0x0b
     918:	82 0f       	add	r24, r18
     91a:	91 1d       	adc	r25, r1
     91c:	90 93 78 02 	sts	0x0278, r25
     920:	80 93 77 02 	sts	0x0277, r24
					data[0].z_comp = ch2word(pkt->data[5],pkt->data[6]);
     924:	9c 85       	ldd	r25, Y+12	; 0x0c
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	2d 85       	ldd	r18, Y+13	; 0x0d
     92a:	82 0f       	add	r24, r18
     92c:	91 1d       	adc	r25, r1
     92e:	90 93 7a 02 	sts	0x027A, r25
     932:	80 93 79 02 	sts	0x0279, r24
     936:	b7 c1       	rjmp	.+878    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_IMU2:
					data[0].acl_x = ch2word(pkt->data[0],pkt->data[1]);
     938:	9f 81       	ldd	r25, Y+7	; 0x07
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	28 85       	ldd	r18, Y+8	; 0x08
     93e:	82 0f       	add	r24, r18
     940:	91 1d       	adc	r25, r1
     942:	90 93 7c 02 	sts	0x027C, r25
     946:	80 93 7b 02 	sts	0x027B, r24
					data[0].acl_y = ch2word(pkt->data[2],pkt->data[3]);
     94a:	99 85       	ldd	r25, Y+9	; 0x09
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	2a 85       	ldd	r18, Y+10	; 0x0a
     950:	82 0f       	add	r24, r18
     952:	91 1d       	adc	r25, r1
     954:	90 93 7e 02 	sts	0x027E, r25
     958:	80 93 7d 02 	sts	0x027D, r24
					data[0].acl_z = ch2word(pkt->data[4],pkt->data[5]);
     95c:	9b 85       	ldd	r25, Y+11	; 0x0b
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	2c 85       	ldd	r18, Y+12	; 0x0c
     962:	82 0f       	add	r24, r18
     964:	91 1d       	adc	r25, r1
     966:	90 93 80 02 	sts	0x0280, r25
     96a:	80 93 7f 02 	sts	0x027F, r24
     96e:	9b c1       	rjmp	.+822    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_IMU3:
					data[0].gyro_x = ch2word(pkt->data[0],pkt->data[1]);
     970:	9f 81       	ldd	r25, Y+7	; 0x07
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	28 85       	ldd	r18, Y+8	; 0x08
     976:	82 0f       	add	r24, r18
     978:	91 1d       	adc	r25, r1
     97a:	90 93 82 02 	sts	0x0282, r25
     97e:	80 93 81 02 	sts	0x0281, r24
					data[0].gyro_y = ch2word(pkt->data[2],pkt->data[3]);
     982:	99 85       	ldd	r25, Y+9	; 0x09
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	2a 85       	ldd	r18, Y+10	; 0x0a
     988:	82 0f       	add	r24, r18
     98a:	91 1d       	adc	r25, r1
     98c:	90 93 84 02 	sts	0x0284, r25
     990:	80 93 83 02 	sts	0x0283, r24
					data[0].gyro_z = ch2word(pkt->data[4],pkt->data[5]);
     994:	9b 85       	ldd	r25, Y+11	; 0x0b
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	2c 85       	ldd	r18, Y+12	; 0x0c
     99a:	82 0f       	add	r24, r18
     99c:	91 1d       	adc	r25, r1
     99e:	90 93 86 02 	sts	0x0286, r25
     9a2:	80 93 85 02 	sts	0x0285, r24
     9a6:	7f c1       	rjmp	.+766    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_IMU4:
					data[0].mag_x = ch2word(pkt->data[0],pkt->data[1]);
     9a8:	9f 81       	ldd	r25, Y+7	; 0x07
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	28 85       	ldd	r18, Y+8	; 0x08
     9ae:	82 0f       	add	r24, r18
     9b0:	91 1d       	adc	r25, r1
     9b2:	90 93 88 02 	sts	0x0288, r25
     9b6:	80 93 87 02 	sts	0x0287, r24
					data[0].mag_y = ch2word(pkt->data[2],pkt->data[3]);
     9ba:	99 85       	ldd	r25, Y+9	; 0x09
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	2a 85       	ldd	r18, Y+10	; 0x0a
     9c0:	82 0f       	add	r24, r18
     9c2:	91 1d       	adc	r25, r1
     9c4:	90 93 8a 02 	sts	0x028A, r25
     9c8:	80 93 89 02 	sts	0x0289, r24
					data[0].mag_z = ch2word(pkt->data[4],pkt->data[5]);
     9cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	2c 85       	ldd	r18, Y+12	; 0x0c
     9d2:	82 0f       	add	r24, r18
     9d4:	91 1d       	adc	r25, r1
     9d6:	90 93 8c 02 	sts	0x028C, r25
     9da:	80 93 8b 02 	sts	0x028B, r24
					data[0].mag_heading = ch2word(pkt->data[6],pkt->data[7]);
     9de:	9d 85       	ldd	r25, Y+13	; 0x0d
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	2e 85       	ldd	r18, Y+14	; 0x0e
     9e4:	82 0f       	add	r24, r18
     9e6:	91 1d       	adc	r25, r1
     9e8:	90 93 8e 02 	sts	0x028E, r25
     9ec:	80 93 8d 02 	sts	0x028D, r24
     9f0:	5a c1       	rjmp	.+692    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_STS1:
					data[0].STS_status = ch2word(pkt->data[0],pkt->data[1]);
     9f2:	9f 81       	ldd	r25, Y+7	; 0x07
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	28 85       	ldd	r18, Y+8	; 0x08
     9f8:	82 0f       	add	r24, r18
     9fa:	91 1d       	adc	r25, r1
     9fc:	4e c1       	rjmp	.+668    	; 0xc9a <ProcessCanMsg+0x6fc>
					return(msg_type);
				case CAN_DATA_STS2:
					data[0].susp_trvl_fl = ch2word(pkt->data[0],pkt->data[1]);
     9fe:	9f 81       	ldd	r25, Y+7	; 0x07
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	28 85       	ldd	r18, Y+8	; 0x08
     a04:	82 0f       	add	r24, r18
     a06:	91 1d       	adc	r25, r1
     a08:	90 93 aa 02 	sts	0x02AA, r25
     a0c:	80 93 a9 02 	sts	0x02A9, r24
					data[0].susp_trvl_fr = ch2word(pkt->data[2],pkt->data[3]);
     a10:	99 85       	ldd	r25, Y+9	; 0x09
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	2a 85       	ldd	r18, Y+10	; 0x0a
     a16:	82 0f       	add	r24, r18
     a18:	91 1d       	adc	r25, r1
     a1a:	90 93 ac 02 	sts	0x02AC, r25
     a1e:	80 93 ab 02 	sts	0x02AB, r24
					data[0].susp_trvl_rl = ch2word(pkt->data[4],pkt->data[5]);
     a22:	9b 85       	ldd	r25, Y+11	; 0x0b
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	2c 85       	ldd	r18, Y+12	; 0x0c
     a28:	82 0f       	add	r24, r18
     a2a:	91 1d       	adc	r25, r1
     a2c:	90 93 ae 02 	sts	0x02AE, r25
     a30:	80 93 ad 02 	sts	0x02AD, r24
					data[0].susp_trvl_rr = ch2word(pkt->data[6],pkt->data[7]);
     a34:	9d 85       	ldd	r25, Y+13	; 0x0d
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	2e 85       	ldd	r18, Y+14	; 0x0e
     a3a:	82 0f       	add	r24, r18
     a3c:	91 1d       	adc	r25, r1
     a3e:	90 93 b0 02 	sts	0x02B0, r25
     a42:	80 93 af 02 	sts	0x02AF, r24
     a46:	2f c1       	rjmp	.+606    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_STS3:
					data[0].ttemp_inr_fl = ch2word(pkt->data[0],pkt->data[1]);
     a48:	9f 81       	ldd	r25, Y+7	; 0x07
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	28 85       	ldd	r18, Y+8	; 0x08
     a4e:	82 0f       	add	r24, r18
     a50:	91 1d       	adc	r25, r1
     a52:	90 93 92 02 	sts	0x0292, r25
     a56:	80 93 91 02 	sts	0x0291, r24
					data[0].ttemp_inr_fr = ch2word(pkt->data[2],pkt->data[3]);
     a5a:	99 85       	ldd	r25, Y+9	; 0x09
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a60:	82 0f       	add	r24, r18
     a62:	91 1d       	adc	r25, r1
     a64:	90 93 98 02 	sts	0x0298, r25
     a68:	80 93 97 02 	sts	0x0297, r24
					data[0].ttemp_inr_rl = ch2word(pkt->data[4],pkt->data[5]);
     a6c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	2c 85       	ldd	r18, Y+12	; 0x0c
     a72:	82 0f       	add	r24, r18
     a74:	91 1d       	adc	r25, r1
     a76:	90 93 9e 02 	sts	0x029E, r25
     a7a:	80 93 9d 02 	sts	0x029D, r24
					data[0].ttemp_inr_rr = ch2word(pkt->data[6],pkt->data[7]);
     a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	2e 85       	ldd	r18, Y+14	; 0x0e
     a84:	82 0f       	add	r24, r18
     a86:	91 1d       	adc	r25, r1
     a88:	90 93 a4 02 	sts	0x02A4, r25
     a8c:	80 93 a3 02 	sts	0x02A3, r24
     a90:	0a c1       	rjmp	.+532    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_STS4:
					data[0].ttemp_mdl_fl = ch2word(pkt->data[0],pkt->data[1]);
     a92:	9f 81       	ldd	r25, Y+7	; 0x07
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	28 85       	ldd	r18, Y+8	; 0x08
     a98:	82 0f       	add	r24, r18
     a9a:	91 1d       	adc	r25, r1
     a9c:	90 93 94 02 	sts	0x0294, r25
     aa0:	80 93 93 02 	sts	0x0293, r24
					data[0].ttemp_mdl_fr = ch2word(pkt->data[2],pkt->data[3]);
     aa4:	99 85       	ldd	r25, Y+9	; 0x09
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	2a 85       	ldd	r18, Y+10	; 0x0a
     aaa:	82 0f       	add	r24, r18
     aac:	91 1d       	adc	r25, r1
     aae:	90 93 9a 02 	sts	0x029A, r25
     ab2:	80 93 99 02 	sts	0x0299, r24
					data[0].ttemp_mdl_rl = ch2word(pkt->data[4],pkt->data[5]);
     ab6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	2c 85       	ldd	r18, Y+12	; 0x0c
     abc:	82 0f       	add	r24, r18
     abe:	91 1d       	adc	r25, r1
     ac0:	90 93 a0 02 	sts	0x02A0, r25
     ac4:	80 93 9f 02 	sts	0x029F, r24
					data[0].ttemp_mdl_rr = ch2word(pkt->data[6],pkt->data[7]);
     ac8:	9d 85       	ldd	r25, Y+13	; 0x0d
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	2e 85       	ldd	r18, Y+14	; 0x0e
     ace:	82 0f       	add	r24, r18
     ad0:	91 1d       	adc	r25, r1
     ad2:	90 93 a6 02 	sts	0x02A6, r25
     ad6:	80 93 a5 02 	sts	0x02A5, r24
     ada:	e5 c0       	rjmp	.+458    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_STS5:
					data[0].ttemp_otr_fl = ch2word(pkt->data[0],pkt->data[1]);
     adc:	9f 81       	ldd	r25, Y+7	; 0x07
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	28 85       	ldd	r18, Y+8	; 0x08
     ae2:	82 0f       	add	r24, r18
     ae4:	91 1d       	adc	r25, r1
     ae6:	90 93 96 02 	sts	0x0296, r25
     aea:	80 93 95 02 	sts	0x0295, r24
					data[0].ttemp_otr_fr = ch2word(pkt->data[2],pkt->data[3]);
     aee:	99 85       	ldd	r25, Y+9	; 0x09
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	2a 85       	ldd	r18, Y+10	; 0x0a
     af4:	82 0f       	add	r24, r18
     af6:	91 1d       	adc	r25, r1
     af8:	90 93 9c 02 	sts	0x029C, r25
     afc:	80 93 9b 02 	sts	0x029B, r24
					data[0].ttemp_otr_rl = ch2word(pkt->data[4],pkt->data[5]);
     b00:	9b 85       	ldd	r25, Y+11	; 0x0b
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	2c 85       	ldd	r18, Y+12	; 0x0c
     b06:	82 0f       	add	r24, r18
     b08:	91 1d       	adc	r25, r1
     b0a:	90 93 a2 02 	sts	0x02A2, r25
     b0e:	80 93 a1 02 	sts	0x02A1, r24
					data[0].ttemp_otr_rr = ch2word(pkt->data[6],pkt->data[7]);
     b12:	9d 85       	ldd	r25, Y+13	; 0x0d
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	2e 85       	ldd	r18, Y+14	; 0x0e
     b18:	82 0f       	add	r24, r18
     b1a:	91 1d       	adc	r25, r1
     b1c:	90 93 a8 02 	sts	0x02A8, r25
     b20:	80 93 a7 02 	sts	0x02A7, r24
     b24:	c0 c0       	rjmp	.+384    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_DLG1:
					data[0].DLG_status = pkt->data[0];
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	80 93 b1 02 	sts	0x02B1, r24
					data[0].hmsphr = pkt->data[1];
     b2c:	88 85       	ldd	r24, Y+8	; 0x08
     b2e:	80 93 b2 02 	sts	0x02B2, r24
					data[0].pos_dil = pkt->data[2];
     b32:	89 85       	ldd	r24, Y+9	; 0x09
     b34:	80 93 b3 02 	sts	0x02B3, r24
					data[0].time_dil = pkt->data[3];
     b38:	8a 85       	ldd	r24, Y+10	; 0x0a
     b3a:	80 93 b4 02 	sts	0x02B4, r24
					data[0].date = ch2word(pkt->data[4],pkt->data[5]);
     b3e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b40:	80 93 b5 02 	sts	0x02B5, r24
     b44:	b0 c0       	rjmp	.+352    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_DLG2:
					data[0].lat = ch2dblword(pkt->data[0],pkt->data[1],pkt->data[2],pkt->data[3]);
     b46:	2f 81       	ldd	r18, Y+7	; 0x07
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	52 2f       	mov	r21, r18
     b50:	44 27       	eor	r20, r20
     b52:	33 27       	eor	r19, r19
     b54:	22 27       	eor	r18, r18
     b56:	88 85       	ldd	r24, Y+8	; 0x08
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	dc 01       	movw	r26, r24
     b60:	99 27       	eor	r25, r25
     b62:	88 27       	eor	r24, r24
     b64:	28 0f       	add	r18, r24
     b66:	39 1f       	adc	r19, r25
     b68:	4a 1f       	adc	r20, r26
     b6a:	5b 1f       	adc	r21, r27
     b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b6e:	28 0f       	add	r18, r24
     b70:	31 1d       	adc	r19, r1
     b72:	41 1d       	adc	r20, r1
     b74:	51 1d       	adc	r21, r1
     b76:	89 85       	ldd	r24, Y+9	; 0x09
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 e0       	ldi	r26, 0x00	; 0
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ba 2f       	mov	r27, r26
     b80:	a9 2f       	mov	r26, r25
     b82:	98 2f       	mov	r25, r24
     b84:	88 27       	eor	r24, r24
     b86:	28 0f       	add	r18, r24
     b88:	39 1f       	adc	r19, r25
     b8a:	4a 1f       	adc	r20, r26
     b8c:	5b 1f       	adc	r21, r27
     b8e:	20 93 b6 02 	sts	0x02B6, r18
     b92:	30 93 b7 02 	sts	0x02B7, r19
     b96:	40 93 b8 02 	sts	0x02B8, r20
     b9a:	50 93 b9 02 	sts	0x02B9, r21
					data[0].lng = ch2dblword(pkt->data[4],pkt->data[5],pkt->data[6],pkt->data[7]);
     b9e:	2b 85       	ldd	r18, Y+11	; 0x0b
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	52 2f       	mov	r21, r18
     ba8:	44 27       	eor	r20, r20
     baa:	33 27       	eor	r19, r19
     bac:	22 27       	eor	r18, r18
     bae:	8c 85       	ldd	r24, Y+12	; 0x0c
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	dc 01       	movw	r26, r24
     bb8:	99 27       	eor	r25, r25
     bba:	88 27       	eor	r24, r24
     bbc:	28 0f       	add	r18, r24
     bbe:	39 1f       	adc	r19, r25
     bc0:	4a 1f       	adc	r20, r26
     bc2:	5b 1f       	adc	r21, r27
     bc4:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc6:	28 0f       	add	r18, r24
     bc8:	31 1d       	adc	r19, r1
     bca:	41 1d       	adc	r20, r1
     bcc:	51 1d       	adc	r21, r1
     bce:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ba 2f       	mov	r27, r26
     bd8:	a9 2f       	mov	r26, r25
     bda:	98 2f       	mov	r25, r24
     bdc:	88 27       	eor	r24, r24
     bde:	28 0f       	add	r18, r24
     be0:	39 1f       	adc	r19, r25
     be2:	4a 1f       	adc	r20, r26
     be4:	5b 1f       	adc	r21, r27
     be6:	20 93 ba 02 	sts	0x02BA, r18
     bea:	30 93 bb 02 	sts	0x02BB, r19
     bee:	40 93 bc 02 	sts	0x02BC, r20
     bf2:	50 93 bd 02 	sts	0x02BD, r21
     bf6:	57 c0       	rjmp	.+174    	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_DLG3:
					data[0].heading = ch2word(pkt->data[0],pkt->data[1]);
     bf8:	9f 81       	ldd	r25, Y+7	; 0x07
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	28 85       	ldd	r18, Y+8	; 0x08
     bfe:	82 0f       	add	r24, r18
     c00:	91 1d       	adc	r25, r1
     c02:	90 93 bf 02 	sts	0x02BF, r25
     c06:	80 93 be 02 	sts	0x02BE, r24
					data[0].speed = pkt->data[2];
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	80 93 c0 02 	sts	0x02C0, r24
					data[0].time = ch2dblword(pkt->data[3],pkt->data[4],pkt->data[5],pkt->data[6]);
     c10:	2a 85       	ldd	r18, Y+10	; 0x0a
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	52 2f       	mov	r21, r18
     c1a:	44 27       	eor	r20, r20
     c1c:	33 27       	eor	r19, r19
     c1e:	22 27       	eor	r18, r18
     c20:	8b 85       	ldd	r24, Y+11	; 0x0b
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	dc 01       	movw	r26, r24
     c2a:	99 27       	eor	r25, r25
     c2c:	88 27       	eor	r24, r24
     c2e:	28 0f       	add	r18, r24
     c30:	39 1f       	adc	r19, r25
     c32:	4a 1f       	adc	r20, r26
     c34:	5b 1f       	adc	r21, r27
     c36:	8d 85       	ldd	r24, Y+13	; 0x0d
     c38:	28 0f       	add	r18, r24
     c3a:	31 1d       	adc	r19, r1
     c3c:	41 1d       	adc	r20, r1
     c3e:	51 1d       	adc	r21, r1
     c40:	8c 85       	ldd	r24, Y+12	; 0x0c
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ba 2f       	mov	r27, r26
     c4a:	a9 2f       	mov	r26, r25
     c4c:	98 2f       	mov	r25, r24
     c4e:	88 27       	eor	r24, r24
     c50:	28 0f       	add	r18, r24
     c52:	39 1f       	adc	r19, r25
     c54:	4a 1f       	adc	r20, r26
     c56:	5b 1f       	adc	r21, r27
     c58:	20 93 c1 02 	sts	0x02C1, r18
     c5c:	30 93 c2 02 	sts	0x02C2, r19
     c60:	40 93 c3 02 	sts	0x02C3, r20
     c64:	50 93 c4 02 	sts	0x02C4, r21
     c68:	1e c0       	rjmp	.+60     	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_DLG4:
					data[0].log_status = pkt->data[0];
     c6a:	8f 81       	ldd	r24, Y+7	; 0x07
     c6c:	80 93 c5 02 	sts	0x02C5, r24
     c70:	de 01       	movw	r26, r28
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
					for(i = 0;i<7;i++)
					{
						data[0].log_name[i] = pkt->data[i+1];
     c76:	18 96       	adiw	r26, 0x08	; 8
     c78:	8c 91       	ld	r24, X
     c7a:	18 97       	sbiw	r26, 0x08	; 8
     c7c:	f9 01       	movw	r30, r18
     c7e:	ea 53       	subi	r30, 0x3A	; 58
     c80:	fd 4f       	sbci	r31, 0xFD	; 253
     c82:	80 83       	st	Z, r24
     c84:	2f 5f       	subi	r18, 0xFF	; 255
     c86:	3f 4f       	sbci	r19, 0xFF	; 255
     c88:	11 96       	adiw	r26, 0x01	; 1
					data[0].speed = pkt->data[2];
					data[0].time = ch2dblword(pkt->data[3],pkt->data[4],pkt->data[5],pkt->data[6]);
					return(msg_type);
				case CAN_DATA_DLG4:
					data[0].log_status = pkt->data[0];
					for(i = 0;i<7;i++)
     c8a:	27 30       	cpi	r18, 0x07	; 7
     c8c:	31 05       	cpc	r19, r1
     c8e:	99 f7       	brne	.-26     	; 0xc76 <ProcessCanMsg+0x6d8>
					{
						data[0].log_name[i] = pkt->data[i+1];
					}
					data[0].log_name[7] = 0;
     c90:	10 92 cd 02 	sts	0x02CD, r1
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
				case CAN_DATA_STW1:
					data[0].STS_status = pkt->data[0];
					return(msg_type);
				case CAN_DATA_WRL1:
					data[0].STS_status = pkt->data[0];
     c96:	8f 81       	ldd	r24, Y+7	; 0x07
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 90 02 	sts	0x0290, r25
     c9e:	80 93 8f 02 	sts	0x028F, r24
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <ProcessCanMsg+0x708>
					return(msg_type);
     ca4:	dd 24       	eor	r13, r13
			break;
		default:
			return(0);
	}
	return(0);
}
     ca6:	8d 2d       	mov	r24, r13
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	08 95       	ret

00000cb8 <__vector_18>:
	}
}

//! CAN interrupt service routine
ISR( CANIT_vect)
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	0b b6       	in	r0, 0x3b	; 59
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	2f 97       	sbiw	r28, 0x0f	; 15
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	cd bf       	out	0x3d, r28	; 61
	unsigned char save_canpage;
	unsigned char mob;
	unsigned char length;

	/*-------------Device Specific-----------------*/
	led_ctrl(LED8,LED_ON,1);
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	0e 94 88 0c 	call	0x1910	; 0x1910 <led_ctrl>
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob
     d0a:	90 90 ec 00 	lds	r9, 0x00EC

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
     d0e:	89 2d       	mov	r24, r9
     d10:	80 7f       	andi	r24, 0xF0	; 240
     d12:	80 93 ed 00 	sts	0x00ED, r24
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];
     d16:	89 2d       	mov	r24, r9
     d18:	82 95       	swap	r24
     d1a:	8f 70       	andi	r24, 0x0F	; 15
     d1c:	a8 2f       	mov	r26, r24
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	fd 01       	movw	r30, r26
     d22:	ec 54       	subi	r30, 0x4C	; 76
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 81       	ld	r24, Z
     d28:	8e 83       	std	Y+6, r24	; 0x06

	if(packet.msg_type == CAN_TX_MSG)
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	b1 f4       	brne	.+44     	; 0xd5a <__vector_18+0xa2>
	{
		CANSTMOB = 0;
     d2e:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0;
     d32:	10 92 ef 00 	sts	0x00EF, r1

		CANIDT1 = 0;
     d36:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;
     d3a:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;
     d3e:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
     d42:	10 92 f0 00 	sts	0x00F0, r1
     d46:	80 e0       	ldi	r24, 0x00	; 0

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
     d48:	10 92 fa 00 	sts	0x00FA, r1
		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	88 30       	cpi	r24, 0x08	; 8
     d50:	d9 f7       	brne	.-10     	; 0xd48 <__vector_18+0x90>
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
     d52:	ac 54       	subi	r26, 0x4C	; 76
     d54:	be 4f       	sbci	r27, 0xFE	; 254
     d56:	1c 92       	st	X, r1
     d58:	78 c0       	rjmp	.+240    	; 0xe4a <__vector_18+0x192>
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
     d5a:	80 91 ef 00 	lds	r24, 0x00EF
     d5e:	84 ff       	sbrs	r24, 4
     d60:	3b c0       	rjmp	.+118    	; 0xdd8 <__vector_18+0x120>
		{
			packet.id_type = CAN_EXT_MSG;
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	8d 83       	std	Y+5, r24	; 0x05
			packet.id = 	(((uint32_t)CANIDT1) << 21)
     d66:	20 91 f3 00 	lds	r18, 0x00F3
     d6a:	80 91 f2 00 	lds	r24, 0x00F2
     d6e:	e0 90 f1 00 	lds	r14, 0x00F1
     d72:	a0 90 f0 00 	lds	r10, 0x00F0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	7d e0       	ldi	r23, 0x0D	; 13
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	aa 1f       	adc	r26, r26
     d84:	bb 1f       	adc	r27, r27
     d86:	7a 95       	dec	r23
     d88:	d1 f7       	brne	.-12     	; 0xd7e <__vector_18+0xc6>
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	65 e1       	ldi	r22, 0x15	; 21
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	6a 95       	dec	r22
     d9c:	d1 f7       	brne	.-12     	; 0xd92 <__vector_18+0xda>
     d9e:	82 2b       	or	r24, r18
     da0:	93 2b       	or	r25, r19
     da2:	a4 2b       	or	r26, r20
     da4:	b5 2b       	or	r27, r21
     da6:	ff 24       	eor	r15, r15
     da8:	00 e0       	ldi	r16, 0x00	; 0
     daa:	10 e0       	ldi	r17, 0x00	; 0
     dac:	25 e0       	ldi	r18, 0x05	; 5
     dae:	ee 0c       	add	r14, r14
     db0:	ff 1c       	adc	r15, r15
     db2:	00 1f       	adc	r16, r16
     db4:	11 1f       	adc	r17, r17
     db6:	2a 95       	dec	r18
     db8:	d1 f7       	brne	.-12     	; 0xdae <__vector_18+0xf6>
     dba:	8e 29       	or	r24, r14
     dbc:	9f 29       	or	r25, r15
     dbe:	a0 2b       	or	r26, r16
     dc0:	b1 2b       	or	r27, r17
     dc2:	a6 94       	lsr	r10
     dc4:	a6 94       	lsr	r10
     dc6:	a6 94       	lsr	r10
     dc8:	bb 24       	eor	r11, r11
     dca:	cc 24       	eor	r12, r12
     dcc:	dd 24       	eor	r13, r13
     dce:	8a 29       	or	r24, r10
     dd0:	9b 29       	or	r25, r11
     dd2:	ac 29       	or	r26, r12
     dd4:	bd 29       	or	r27, r13
     dd6:	15 c0       	rjmp	.+42     	; 0xe02 <__vector_18+0x14a>
						| (((uint32_t)CANIDT4) >> 3);
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
     dd8:	1d 82       	std	Y+5, r1	; 0x05
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
     dda:	20 91 f2 00 	lds	r18, 0x00F2
     dde:	80 91 f3 00 	lds	r24, 0x00F3
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	b3 e0       	ldi	r27, 0x03	; 3
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	ba 95       	dec	r27
     dec:	e1 f7       	brne	.-8      	; 0xde6 <__vector_18+0x12e>
     dee:	22 95       	swap	r18
     df0:	26 95       	lsr	r18
     df2:	27 70       	andi	r18, 0x07	; 7
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	82 2b       	or	r24, r18
     df8:	93 2b       	or	r25, r19
     dfa:	aa 27       	eor	r26, r26
     dfc:	97 fd       	sbrc	r25, 7
     dfe:	a0 95       	com	r26
     e00:	ba 2f       	mov	r27, r26
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	9a 83       	std	Y+2, r25	; 0x02
     e06:	ab 83       	std	Y+3, r26	; 0x03
     e08:	bc 83       	std	Y+4, r27	; 0x04
		}

		length=CANCDMOB & 0x0f;
     e0a:	40 91 ef 00 	lds	r20, 0x00EF
     e0e:	4f 70       	andi	r20, 0x0F	; 15
     e10:	fe 01       	movw	r30, r28
     e12:	38 96       	adiw	r30, 0x08	; 8
		packet.length=length;

		for (i = 0; i <length; ++i)
     e14:	24 2f       	mov	r18, r20
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	29 5f       	subi	r18, 0xF9	; 249
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	be 01       	movw	r22, r28
     e1e:	6f 5f       	subi	r22, 0xFF	; 255
     e20:	7f 4f       	sbci	r23, 0xFF	; 255
     e22:	26 0f       	add	r18, r22
     e24:	37 1f       	adc	r19, r23
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <__vector_18+0x176>
		{
			packet.data[i] = CANMSG;
     e28:	80 91 fa 00 	lds	r24, 0x00FA
     e2c:	81 93       	st	Z+, r24
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
     e2e:	e2 17       	cp	r30, r18
     e30:	f3 07       	cpc	r31, r19
     e32:	d1 f7       	brne	.-12     	; 0xe28 <__vector_18+0x170>
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;
     e34:	4f 83       	std	Y+7, r20	; 0x07
		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);
     e36:	cb 01       	movw	r24, r22
     e38:	0e 94 cf 02 	call	0x59e	; 0x59e <ProcessCanMsg>

		CANSTMOB=0;		// reset INT reason
     e3c:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
     e40:	80 91 ef 00 	lds	r24, 0x00EF
     e44:	80 79       	andi	r24, 0x90	; 144
     e46:	80 93 ef 00 	sts	0x00EF, r24
	led_ctrl(LED8,LED_ON,1);
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;
     e4a:	80 ef       	ldi	r24, 0xF0	; 240
     e4c:	98 2a       	or	r9, r24

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE
     e4e:	90 92 ed 00 	sts	0x00ED, r9

	/*-------------Device Specific-----------------*/

	led_ctrl(LED8,LED_OFF,1);
     e52:	87 e0       	ldi	r24, 0x07	; 7
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	0e 94 88 0c 	call	0x1910	; 0x1910 <led_ctrl>

	/*---------------------------------------------*/
}
     e5e:	2f 96       	adiw	r28, 0x0f	; 15
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	0f 90       	pop	r0
     e94:	0b be       	out	0x3b, r0	; 59
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <can_tx>:
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	e8 2f       	mov	r30, r24
     ea6:	eb 01       	movw	r28, r22
     ea8:	82 95       	swap	r24
     eaa:	80 7f       	andi	r24, 0xF0	; 240
     eac:	80 93 ed 00 	sts	0x00ED, r24
     eb0:	80 91 ef 00 	lds	r24, 0x00EF
     eb4:	80 7c       	andi	r24, 0xC0	; 192
     eb6:	21 f0       	breq	.+8      	; 0xec0 <can_tx+0x20>
     eb8:	80 91 ee 00 	lds	r24, 0x00EE
     ebc:	86 ff       	sbrs	r24, 6
     ebe:	88 c0       	rjmp	.+272    	; 0xfd0 <can_tx+0x130>
     ec0:	6e 2f       	mov	r22, r30
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	fb 01       	movw	r30, r22
     ec6:	ec 54       	subi	r30, 0x4C	; 76
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	80 81       	ld	r24, Z
     ecc:	88 23       	and	r24, r24
     ece:	09 f0       	breq	.+2      	; 0xed2 <can_tx+0x32>
     ed0:	7f c0       	rjmp	.+254    	; 0xfd0 <can_tx+0x130>
     ed2:	10 92 ee 00 	sts	0x00EE, r1
     ed6:	10 92 ef 00 	sts	0x00EF, r1
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	28 81       	ld	r18, Y
     ede:	39 81       	ldd	r19, Y+1	; 0x01
     ee0:	4a 81       	ldd	r20, Y+2	; 0x02
     ee2:	5b 81       	ldd	r21, Y+3	; 0x03
     ee4:	88 23       	and	r24, r24
     ee6:	e1 f4       	brne	.+56     	; 0xf20 <can_tx+0x80>
     ee8:	da 01       	movw	r26, r20
     eea:	c9 01       	movw	r24, r18
     eec:	33 e0       	ldi	r19, 0x03	; 3
     eee:	b6 95       	lsr	r27
     ef0:	a7 95       	ror	r26
     ef2:	97 95       	ror	r25
     ef4:	87 95       	ror	r24
     ef6:	3a 95       	dec	r19
     ef8:	d1 f7       	brne	.-12     	; 0xeee <can_tx+0x4e>
     efa:	80 93 f3 00 	sts	0x00F3, r24
     efe:	82 2f       	mov	r24, r18
     f00:	82 95       	swap	r24
     f02:	88 0f       	add	r24, r24
     f04:	80 7e       	andi	r24, 0xE0	; 224
     f06:	80 93 f2 00 	sts	0x00F2, r24
     f0a:	10 92 f1 00 	sts	0x00F1, r1
     f0e:	10 92 f0 00 	sts	0x00F0, r1
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	49 2f       	mov	r20, r25
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	fe 01       	movw	r30, r28
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	32 c0       	rjmp	.+100    	; 0xf84 <can_tx+0xe4>
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	f5 e1       	ldi	r31, 0x15	; 21
     f26:	b6 95       	lsr	r27
     f28:	a7 95       	ror	r26
     f2a:	97 95       	ror	r25
     f2c:	87 95       	ror	r24
     f2e:	fa 95       	dec	r31
     f30:	d1 f7       	brne	.-12     	; 0xf26 <can_tx+0x86>
     f32:	80 93 f3 00 	sts	0x00F3, r24
     f36:	da 01       	movw	r26, r20
     f38:	c9 01       	movw	r24, r18
     f3a:	ed e0       	ldi	r30, 0x0D	; 13
     f3c:	b6 95       	lsr	r27
     f3e:	a7 95       	ror	r26
     f40:	97 95       	ror	r25
     f42:	87 95       	ror	r24
     f44:	ea 95       	dec	r30
     f46:	d1 f7       	brne	.-12     	; 0xf3c <can_tx+0x9c>
     f48:	80 93 f2 00 	sts	0x00F2, r24
     f4c:	da 01       	movw	r26, r20
     f4e:	c9 01       	movw	r24, r18
     f50:	35 e0       	ldi	r19, 0x05	; 5
     f52:	b6 95       	lsr	r27
     f54:	a7 95       	ror	r26
     f56:	97 95       	ror	r25
     f58:	87 95       	ror	r24
     f5a:	3a 95       	dec	r19
     f5c:	d1 f7       	brne	.-12     	; 0xf52 <can_tx+0xb2>
     f5e:	80 93 f1 00 	sts	0x00F1, r24
     f62:	82 2f       	mov	r24, r18
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	88 0f       	add	r24, r24
     f6a:	80 93 f0 00 	sts	0x00F0, r24
     f6e:	80 91 ef 00 	lds	r24, 0x00EF
     f72:	80 61       	ori	r24, 0x10	; 16
     f74:	80 93 ef 00 	sts	0x00EF, r24
     f78:	cc cf       	rjmp	.-104    	; 0xf12 <can_tx+0x72>
     f7a:	86 81       	ldd	r24, Z+6	; 0x06
     f7c:	80 93 fa 00 	sts	0x00FA, r24
     f80:	2f 5f       	subi	r18, 0xFF	; 255
     f82:	3f 4f       	sbci	r19, 0xFF	; 255
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	24 17       	cp	r18, r20
     f88:	35 07       	cpc	r19, r21
     f8a:	b8 f3       	brcs	.-18     	; 0xf7a <can_tx+0xda>
     f8c:	80 91 ef 00 	lds	r24, 0x00EF
     f90:	98 2b       	or	r25, r24
     f92:	90 93 ef 00 	sts	0x00EF, r25
     f96:	fb 01       	movw	r30, r22
     f98:	ec 54       	subi	r30, 0x4C	; 76
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 83       	st	Z, r24
     fa0:	21 e0       	ldi	r18, 0x01	; 1
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <can_tx+0x10a>
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	6a 95       	dec	r22
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <can_tx+0x106>
     fae:	80 91 de 00 	lds	r24, 0x00DE
     fb2:	82 2b       	or	r24, r18
     fb4:	80 93 de 00 	sts	0x00DE, r24
     fb8:	80 91 df 00 	lds	r24, 0x00DF
     fbc:	83 2b       	or	r24, r19
     fbe:	80 93 df 00 	sts	0x00DF, r24
     fc2:	80 91 ef 00 	lds	r24, 0x00EF
     fc6:	80 64       	ori	r24, 0x40	; 64
     fc8:	80 93 ef 00 	sts	0x00EF, r24
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <can_tx+0x132>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <prepare_rx>:
     fd8:	cf 92       	push	r12
     fda:	ef 92       	push	r14
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	e8 2f       	mov	r30, r24
     fe6:	9e 2d       	mov	r25, r14
     fe8:	8f 30       	cpi	r24, 0x0F	; 15
     fea:	08 f0       	brcs	.+2      	; 0xfee <prepare_rx+0x16>
     fec:	8d c0       	rjmp	.+282    	; 0x1108 <__stack+0x9>
     fee:	82 95       	swap	r24
     ff0:	80 7f       	andi	r24, 0xF0	; 240
     ff2:	80 93 ed 00 	sts	0x00ED, r24
     ff6:	80 91 ef 00 	lds	r24, 0x00EF
     ffa:	80 7c       	andi	r24, 0xC0	; 192
     ffc:	09 f0       	breq	.+2      	; 0x1000 <prepare_rx+0x28>
     ffe:	84 c0       	rjmp	.+264    	; 0x1108 <__stack+0x9>
    1000:	ce 2f       	mov	r28, r30
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	fe 01       	movw	r30, r28
    1006:	ec 54       	subi	r30, 0x4C	; 76
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	c0 82       	st	Z, r12
    100c:	10 92 ee 00 	sts	0x00EE, r1
    1010:	10 92 ef 00 	sts	0x00EF, r1
    1014:	10 92 ec 00 	sts	0x00EC, r1
    1018:	91 30       	cpi	r25, 0x01	; 1
    101a:	09 f0       	breq	.+2      	; 0x101e <prepare_rx+0x46>
    101c:	62 c0       	rjmp	.+196    	; 0x10e2 <prepare_rx+0x10a>
    101e:	db 01       	movw	r26, r22
    1020:	ca 01       	movw	r24, r20
    1022:	f5 e1       	ldi	r31, 0x15	; 21
    1024:	b6 95       	lsr	r27
    1026:	a7 95       	ror	r26
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	fa 95       	dec	r31
    102e:	d1 f7       	brne	.-12     	; 0x1024 <prepare_rx+0x4c>
    1030:	80 93 f0 00 	sts	0x00F0, r24
    1034:	db 01       	movw	r26, r22
    1036:	ca 01       	movw	r24, r20
    1038:	ed e0       	ldi	r30, 0x0D	; 13
    103a:	b6 95       	lsr	r27
    103c:	a7 95       	ror	r26
    103e:	97 95       	ror	r25
    1040:	87 95       	ror	r24
    1042:	ea 95       	dec	r30
    1044:	d1 f7       	brne	.-12     	; 0x103a <prepare_rx+0x62>
    1046:	80 93 f1 00 	sts	0x00F1, r24
    104a:	db 01       	movw	r26, r22
    104c:	ca 01       	movw	r24, r20
    104e:	75 e0       	ldi	r23, 0x05	; 5
    1050:	b6 95       	lsr	r27
    1052:	a7 95       	ror	r26
    1054:	97 95       	ror	r25
    1056:	87 95       	ror	r24
    1058:	7a 95       	dec	r23
    105a:	d1 f7       	brne	.-12     	; 0x1050 <prepare_rx+0x78>
    105c:	80 93 f2 00 	sts	0x00F2, r24
    1060:	84 2f       	mov	r24, r20
    1062:	88 0f       	add	r24, r24
    1064:	88 0f       	add	r24, r24
    1066:	88 0f       	add	r24, r24
    1068:	80 93 f3 00 	sts	0x00F3, r24
    106c:	d9 01       	movw	r26, r18
    106e:	c8 01       	movw	r24, r16
    1070:	65 e1       	ldi	r22, 0x15	; 21
    1072:	b6 95       	lsr	r27
    1074:	a7 95       	ror	r26
    1076:	97 95       	ror	r25
    1078:	87 95       	ror	r24
    107a:	6a 95       	dec	r22
    107c:	d1 f7       	brne	.-12     	; 0x1072 <prepare_rx+0x9a>
    107e:	80 93 f4 00 	sts	0x00F4, r24
    1082:	d9 01       	movw	r26, r18
    1084:	c8 01       	movw	r24, r16
    1086:	5d e0       	ldi	r21, 0x0D	; 13
    1088:	b6 95       	lsr	r27
    108a:	a7 95       	ror	r26
    108c:	97 95       	ror	r25
    108e:	87 95       	ror	r24
    1090:	5a 95       	dec	r21
    1092:	d1 f7       	brne	.-12     	; 0x1088 <prepare_rx+0xb0>
    1094:	80 93 f5 00 	sts	0x00F5, r24
    1098:	d9 01       	movw	r26, r18
    109a:	c8 01       	movw	r24, r16
    109c:	45 e0       	ldi	r20, 0x05	; 5
    109e:	b6 95       	lsr	r27
    10a0:	a7 95       	ror	r26
    10a2:	97 95       	ror	r25
    10a4:	87 95       	ror	r24
    10a6:	4a 95       	dec	r20
    10a8:	d1 f7       	brne	.-12     	; 0x109e <prepare_rx+0xc6>
    10aa:	80 93 f6 00 	sts	0x00F6, r24
    10ae:	80 2f       	mov	r24, r16
    10b0:	88 0f       	add	r24, r24
    10b2:	88 0f       	add	r24, r24
    10b4:	88 0f       	add	r24, r24
    10b6:	80 93 f7 00 	sts	0x00F7, r24
    10ba:	80 91 f4 00 	lds	r24, 0x00F4
    10be:	90 91 f5 00 	lds	r25, 0x00F5
    10c2:	a0 91 f6 00 	lds	r26, 0x00F6
    10c6:	b0 91 f7 00 	lds	r27, 0x00F7
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 93 f4 00 	sts	0x00F4, r24
    10d0:	90 93 f5 00 	sts	0x00F5, r25
    10d4:	a0 93 f6 00 	sts	0x00F6, r26
    10d8:	b0 93 f7 00 	sts	0x00F7, r27
    10dc:	80 e9       	ldi	r24, 0x90	; 144
    10de:	80 93 ef 00 	sts	0x00EF, r24
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <prepare_rx+0x114>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	ca 95       	dec	r28
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <prepare_rx+0x110>
    10f0:	20 91 de 00 	lds	r18, 0x00DE
    10f4:	28 2b       	or	r18, r24
    10f6:	20 93 de 00 	sts	0x00DE, r18
    10fa:	20 91 df 00 	lds	r18, 0x00DF
    10fe:	29 2b       	or	r18, r25
    1100:	20 93 df 00 	sts	0x00DF, r18
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	01 c0       	rjmp	.+2      	; 0x110a <__stack+0xb>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ef 90       	pop	r14
    1114:	cf 90       	pop	r12
    1116:	08 95       	ret

00001118 <can_init>:
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	80 93 e2 00 	sts	0x00E2, r24
    111e:	8c e0       	ldi	r24, 0x0C	; 12
    1120:	80 93 e3 00 	sts	0x00E3, r24
    1124:	87 e3       	ldi	r24, 0x37	; 55
    1126:	80 93 e4 00 	sts	0x00E4, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	89 2f       	mov	r24, r25
    112e:	82 95       	swap	r24
    1130:	80 7f       	andi	r24, 0xF0	; 240
    1132:	80 93 ed 00 	sts	0x00ED, r24
    1136:	10 92 ee 00 	sts	0x00EE, r1
    113a:	10 92 ef 00 	sts	0x00EF, r1
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	9f 30       	cpi	r25, 0x0F	; 15
    1142:	a1 f7       	brne	.-24     	; 0x112c <can_init+0x14>
    1144:	80 91 d8 00 	lds	r24, 0x00D8
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	80 93 d8 00 	sts	0x00D8, r24
    114e:	80 eb       	ldi	r24, 0xB0	; 176
    1150:	80 93 db 00 	sts	0x00DB, r24
    1154:	80 91 d9 00 	lds	r24, 0x00D9
    1158:	82 ff       	sbrs	r24, 2
    115a:	fc cf       	rjmp	.-8      	; 0x1154 <can_init+0x3c>
    115c:	08 95       	ret

0000115e <get_open_mob>:
    115e:	e4 eb       	ldi	r30, 0xB4	; 180
    1160:	f1 e0       	ldi	r31, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 23       	and	r24, r24
    1168:	29 f0       	breq	.+10     	; 0x1174 <get_open_mob+0x16>
    116a:	9f 5f       	subi	r25, 0xFF	; 255
    116c:	31 96       	adiw	r30, 0x01	; 1
    116e:	9f 30       	cpi	r25, 0x0F	; 15
    1170:	c9 f7       	brne	.-14     	; 0x1164 <get_open_mob+0x6>
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	89 2f       	mov	r24, r25
    1176:	08 95       	ret

00001178 <uart0_init>:
		i++;
	}
}

void uart0_init(uint32_t baud)
{
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
	PORTE |= _BV(PE1)|_BV(PE0);
    117c:	8e b1       	in	r24, 0x0e	; 14
    117e:	83 60       	ori	r24, 0x03	; 3
    1180:	8e b9       	out	0x0e, r24	; 14
	DDRE |= _BV(PE1);
    1182:	69 9a       	sbi	0x0d, 1	; 13
	UCSR0A=_BV(U2X1);
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B=0x18;
    118a:	88 e1       	ldi	r24, 0x18	; 24
    118c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=0x06;
    1190:	86 e0       	ldi	r24, 0x06	; 6
    1192:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = (F_CPU / (8UL * baud)) - 1;
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	44 1f       	adc	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	8a 95       	dec	r24
    11a2:	d1 f7       	brne	.-12     	; 0x1198 <uart0_init+0x20>
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	74 e2       	ldi	r23, 0x24	; 36
    11a8:	84 ef       	ldi	r24, 0xF4	; 244
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    11b0:	21 50       	subi	r18, 0x01	; 1
    11b2:	30 40       	sbci	r19, 0x00	; 0
    11b4:	30 93 c5 00 	sts	0x00C5, r19
    11b8:	20 93 c4 00 	sts	0x00C4, r18
}
    11bc:	08 95       	ret

000011be <uart0_tx>:

void uart0_tx( unsigned char data )
{
    11be:	98 2f       	mov	r25, r24
	PORTD |= _BV(PD4);
    11c0:	5c 9a       	sbi	0x0b, 4	; 11
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) ) ;
    11c2:	80 91 c0 00 	lds	r24, 0x00C0
    11c6:	85 ff       	sbrs	r24, 5
    11c8:	fc cf       	rjmp	.-8      	; 0x11c2 <uart0_tx+0x4>
	/* Put data into buffer, sends the data */
	UDR0 = data;
    11ca:	90 93 c6 00 	sts	0x00C6, r25
	PORTD &= ~_BV(PD4);
    11ce:	5c 98       	cbi	0x0b, 4	; 11
}
    11d0:	08 95       	ret

000011d2 <glcd_puts0>:

#define GLCD_BAUD	115200UL
#define GLCD_INIT_TIME 3000 //ms

void glcd_puts0(const char *s)
{
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	ec 01       	movw	r28, r24
    11da:	10 e0       	ldi	r17, 0x00	; 0
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <glcd_puts0+0x12>
	uint8_t i = 0;
	while(s[i]!=0)
	{
		uart0_tx(s[i]);
    11de:	0e 94 df 08 	call	0x11be	; 0x11be <uart0_tx>
		i++;
    11e2:	1f 5f       	subi	r17, 0xFF	; 255
#define GLCD_INIT_TIME 3000 //ms

void glcd_puts0(const char *s)
{
	uint8_t i = 0;
	while(s[i]!=0)
    11e4:	fe 01       	movw	r30, r28
    11e6:	e1 0f       	add	r30, r17
    11e8:	f1 1d       	adc	r31, r1
    11ea:	80 81       	ld	r24, Z
    11ec:	88 23       	and	r24, r24
    11ee:	b9 f7       	brne	.-18     	; 0x11de <glcd_puts0+0xc>
	{
		uart0_tx(s[i]);
		i++;
	}
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	08 95       	ret

000011f8 <uart0_rx>:
	UDR0 = data;
	PORTD &= ~_BV(PD4);
}

uint8_t uart0_rx(char *c)
{
    11f8:	fc 01       	movw	r30, r24
	/* Wait for data to be received */
	if (UCSR0A & (1<<RXC0))
    11fa:	80 91 c0 00 	lds	r24, 0x00C0
    11fe:	87 ff       	sbrs	r24, 7
    1200:	06 c0       	rjmp	.+12     	; 0x120e <uart0_rx+0x16>
	{
		PORTD |=_BV(PD7);
    1202:	5f 9a       	sbi	0x0b, 7	; 11
		*c = UDR0;
    1204:	80 91 c6 00 	lds	r24, 0x00C6
    1208:	80 83       	st	Z, r24
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	08 95       	ret
		return 1;
	}
	else
	{
		PORTD &=~_BV(PD7);
    120e:	5f 98       	cbi	0x0b, 7	; 11
    1210:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	}
}
    1212:	08 95       	ret

00001214 <clear_rx_buf>:

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    1214:	e6 ec       	ldi	r30, 0xC6	; 198
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    121a:	90 81       	ld	r25, Z
    121c:	38 2f       	mov	r19, r24
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	29 0f       	add	r18, r25
    1222:	31 1d       	adc	r19, r1
}
    1224:	c9 01       	movw	r24, r18
    1226:	08 95       	ret

00001228 <glcd_reset>:

void glcd_reset(void)
{
	GLCD_RST_PORT &= ~_BV(GLCD_RST);
    1228:	72 98       	cbi	0x0e, 2	; 14
	GLCD_RST_DDR |= _BV(GLCD_RST);
    122a:	6a 9a       	sbi	0x0d, 2	; 13
    122c:	80 e9       	ldi	r24, 0x90	; 144
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	fc 01       	movw	r30, r24
    1232:	31 97       	sbiw	r30, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <glcd_reset+0xa>
	_delay_us(100);
	GLCD_RST_DDR &= ~_BV(GLCD_RST);
    1236:	6a 98       	cbi	0x0d, 2	; 13
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <glcd_reset+0x10>
	_delay_us(100);
}
    123c:	08 95       	ret

0000123e <glcd_init>:

void glcd_init(void)
{
	glcd_reset();
    123e:	0e 94 14 09 	call	0x1228	; 0x1228 <glcd_reset>
    1242:	80 e3       	ldi	r24, 0x30	; 48
    1244:	95 e7       	ldi	r25, 0x75	; 117
    1246:	20 e9       	ldi	r18, 0x90	; 144
    1248:	31 e0       	ldi	r19, 0x01	; 1
    124a:	f9 01       	movw	r30, r18
    124c:	31 97       	sbiw	r30, 0x01	; 1
    124e:	f1 f7       	brne	.-4      	; 0x124c <glcd_init+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1250:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	d9 f7       	brne	.-10     	; 0x124a <glcd_init+0xc>
	_delay_ms(GLCD_INIT_TIME);
	uart0_init(GLCD_BAUD);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	72 ec       	ldi	r23, 0xC2	; 194
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 bc 08 	call	0x1178	; 0x1178 <uart0_init>
}
    1260:	08 95       	ret

00001262 <glcd_resp>:
		return 0;
	}
}

uint8_t glcd_resp(uint32_t timeout,char *s)
{
    1262:	8f 92       	push	r8
    1264:	9f 92       	push	r9
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	7b 01       	movw	r14, r22
    1282:	8c 01       	movw	r16, r24
    1284:	6a 01       	movw	r12, r20
	uint8_t resp;
	char c = 0;
    1286:	19 82       	std	Y+1, r1	; 0x01
	s[0]=0;
    1288:	fa 01       	movw	r30, r20
    128a:	10 82       	st	Z, r1
    128c:	bb 24       	eor	r11, r11
	uint8_t idx = 0;

	for(;timeout >0;timeout--)
	{
		resp = uart0_rx(&c);
    128e:	4e 01       	movw	r8, r28
    1290:	08 94       	sec
    1292:	81 1c       	adc	r8, r1
    1294:	91 1c       	adc	r9, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1296:	95 e0       	ldi	r25, 0x05	; 5
    1298:	a9 2e       	mov	r10, r25
    129a:	21 c0       	rjmp	.+66     	; 0x12de <glcd_resp+0x7c>
    129c:	c4 01       	movw	r24, r8
    129e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <uart0_rx>
		if(resp)
    12a2:	88 23       	and	r24, r24
    12a4:	a1 f0       	breq	.+40     	; 0x12ce <glcd_resp+0x6c>
		{
			s[idx] = c;
    12a6:	ab 2d       	mov	r26, r11
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	f6 01       	movw	r30, r12
    12ac:	ea 0f       	add	r30, r26
    12ae:	fb 1f       	adc	r31, r27
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	80 83       	st	Z, r24
			if((c == '\n') || (c == '\r'))
    12b4:	8a 30       	cpi	r24, 0x0A	; 10
    12b6:	11 f0       	breq	.+4      	; 0x12bc <glcd_resp+0x5a>
    12b8:	8d 30       	cpi	r24, 0x0D	; 13
    12ba:	41 f4       	brne	.+16     	; 0x12cc <glcd_resp+0x6a>
			{
				s[idx+1] = 0;
    12bc:	ac 0d       	add	r26, r12
    12be:	bd 1d       	adc	r27, r13
    12c0:	11 96       	adiw	r26, 0x01	; 1
    12c2:	1c 92       	st	X, r1
				PORTD &=~_BV(PD7);
    12c4:	5f 98       	cbi	0x0b, 7	; 11
				return s[0];
    12c6:	f6 01       	movw	r30, r12
    12c8:	80 81       	ld	r24, Z
    12ca:	10 c0       	rjmp	.+32     	; 0x12ec <glcd_resp+0x8a>
			}
			else
			{
				idx++;
    12cc:	b3 94       	inc	r11
    12ce:	8a 2d       	mov	r24, r10
    12d0:	8a 95       	dec	r24
    12d2:	f1 f7       	brne	.-4      	; 0x12d0 <glcd_resp+0x6e>
	uint8_t resp;
	char c = 0;
	s[0]=0;
	uint8_t idx = 0;

	for(;timeout >0;timeout--)
    12d4:	08 94       	sec
    12d6:	e1 08       	sbc	r14, r1
    12d8:	f1 08       	sbc	r15, r1
    12da:	01 09       	sbc	r16, r1
    12dc:	11 09       	sbc	r17, r1
    12de:	e1 14       	cp	r14, r1
    12e0:	f1 04       	cpc	r15, r1
    12e2:	01 05       	cpc	r16, r1
    12e4:	11 05       	cpc	r17, r1
    12e6:	d1 f6       	brne	.-76     	; 0x129c <glcd_resp+0x3a>
			}
		}
		_delay_us(1);
	}

	PORTD &=~_BV(PD7);
    12e8:	5f 98       	cbi	0x0b, 7	; 11
    12ea:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	08 95       	ret

00001308 <glcd_update>:

int8_t glcd_update(void)
{
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	00 d0       	rcall	.+0      	; 0x1312 <glcd_update+0xa>
    1312:	00 d0       	rcall	.+0      	; 0x1314 <glcd_update+0xc>
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	char s[5] = "/U\n";
    131a:	8f e2       	ldi	r24, 0x2F	; 47
    131c:	95 e5       	ldi	r25, 0x55	; 85
    131e:	aa e0       	ldi	r26, 0x0A	; 10
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	ab 83       	std	Y+3, r26	; 0x03
    1328:	bc 83       	std	Y+4, r27	; 0x04
    132a:	1d 82       	std	Y+5, r1	; 0x05
	}
}

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    132c:	80 91 c6 00 	lds	r24, 0x00C6

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    1330:	80 91 c6 00 	lds	r24, 0x00C6
	char s[5] = "/U\n";
	uint8_t resp;

	clear_rx_buf();

	glcd_puts0(s);
    1334:	8e 01       	movw	r16, r28
    1336:	0f 5f       	subi	r16, 0xFF	; 255
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	c8 01       	movw	r24, r16
    133c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <glcd_puts0>

	resp = glcd_resp(650000,s);
    1340:	60 e1       	ldi	r22, 0x10	; 16
    1342:	7b ee       	ldi	r23, 0xEB	; 235
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a8 01       	movw	r20, r16
    134a:	0e 94 31 09 	call	0x1262	; 0x1262 <glcd_resp>

	if(resp)
    134e:	88 23       	and	r24, r24
    1350:	b9 f0       	breq	.+46     	; 0x1380 <glcd_update+0x78>
	{
		if(resp == 'Y')
    1352:	89 35       	cpi	r24, 0x59	; 89
    1354:	59 f4       	brne	.+22     	; 0x136c <glcd_update+0x64>
    1356:	88 ee       	ldi	r24, 0xE8	; 232
    1358:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    135a:	20 e9       	ldi	r18, 0x90	; 144
    135c:	31 e0       	ldi	r19, 0x01	; 1
    135e:	f9 01       	movw	r30, r18
    1360:	31 97       	sbiw	r30, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <glcd_update+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	d9 f7       	brne	.-10     	; 0x135e <glcd_update+0x56>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	0a c0       	rjmp	.+20     	; 0x1380 <glcd_update+0x78>
    136c:	88 ee       	ldi	r24, 0xE8	; 232
    136e:	93 e0       	ldi	r25, 0x03	; 3
    1370:	20 e9       	ldi	r18, 0x90	; 144
    1372:	31 e0       	ldi	r19, 0x01	; 1
    1374:	f9 01       	movw	r30, r18
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <glcd_update+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137c:	d9 f7       	brne	.-10     	; 0x1374 <glcd_update+0x6c>
    137e:	8f ef       	ldi	r24, 0xFF	; 255
	{
		return 0;
	}


}
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	08 95       	ret

00001394 <glcd_set>:
	_delay_ms(GLCD_INIT_TIME);
	uart0_init(GLCD_BAUD);
}

int8_t glcd_set(uint8_t reg,int16_t val)
{
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	6e 97       	sbiw	r28, 0x1e	; 30
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	f8 94       	cli
    13a6:	de bf       	out	0x3e, r29	; 62
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	cd bf       	out	0x3d, r28	; 61
	}
}

uint16_t clear_rx_buf(void)
{
	uint16_t a = UDR0;
    13ac:	90 91 c6 00 	lds	r25, 0x00C6

	a = a<<8;
	return a + (0x00FF & ((uint16_t)UDR0));
    13b0:	90 91 c6 00 	lds	r25, 0x00C6
	uint8_t resp;
	char s[30];

	clear_rx_buf();

	sprintf(s,"/S%02u0%i\n",reg,val);
    13b4:	2d b7       	in	r18, 0x3d	; 61
    13b6:	3e b7       	in	r19, 0x3e	; 62
    13b8:	28 50       	subi	r18, 0x08	; 8
    13ba:	30 40       	sbci	r19, 0x00	; 0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	3e bf       	out	0x3e, r19	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	2d bf       	out	0x3d, r18	; 61
    13c6:	ed b7       	in	r30, 0x3d	; 61
    13c8:	fe b7       	in	r31, 0x3e	; 62
    13ca:	31 96       	adiw	r30, 0x01	; 1
    13cc:	8e 01       	movw	r16, r28
    13ce:	0f 5f       	subi	r16, 0xFF	; 255
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	ad b7       	in	r26, 0x3d	; 61
    13d4:	be b7       	in	r27, 0x3e	; 62
    13d6:	12 96       	adiw	r26, 0x02	; 2
    13d8:	1c 93       	st	X, r17
    13da:	0e 93       	st	-X, r16
    13dc:	11 97       	sbiw	r26, 0x01	; 1
    13de:	22 e1       	ldi	r18, 0x12	; 18
    13e0:	31 e0       	ldi	r19, 0x01	; 1
    13e2:	33 83       	std	Z+3, r19	; 0x03
    13e4:	22 83       	std	Z+2, r18	; 0x02
    13e6:	84 83       	std	Z+4, r24	; 0x04
    13e8:	15 82       	std	Z+5, r1	; 0x05
    13ea:	77 83       	std	Z+7, r23	; 0x07
    13ec:	66 83       	std	Z+6, r22	; 0x06
    13ee:	0e 94 97 10 	call	0x212e	; 0x212e <sprintf>
	glcd_puts0(s);
    13f2:	2d b7       	in	r18, 0x3d	; 61
    13f4:	3e b7       	in	r19, 0x3e	; 62
    13f6:	28 5f       	subi	r18, 0xF8	; 248
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	3e bf       	out	0x3e, r19	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	2d bf       	out	0x3d, r18	; 61
    1404:	c8 01       	movw	r24, r16
    1406:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <glcd_puts0>

	resp = glcd_resp(650000,s);
    140a:	60 e1       	ldi	r22, 0x10	; 16
    140c:	7b ee       	ldi	r23, 0xEB	; 235
    140e:	89 e0       	ldi	r24, 0x09	; 9
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	a8 01       	movw	r20, r16
    1414:	0e 94 31 09 	call	0x1262	; 0x1262 <glcd_resp>

	if(resp)
    1418:	88 23       	and	r24, r24
    141a:	29 f0       	breq	.+10     	; 0x1426 <glcd_set+0x92>
	{
		if(resp == 'Y')
    141c:	89 35       	cpi	r24, 0x59	; 89
    141e:	11 f0       	breq	.+4      	; 0x1424 <glcd_set+0x90>
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <glcd_set+0x92>
    1424:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
    1426:	6e 96       	adiw	r28, 0x1e	; 30
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <svn_seg_spi>:

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    143c:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & _BV(SPIF)));
    143e:	0d b4       	in	r0, 0x2d	; 45
    1440:	07 fe       	sbrs	r0, 7
    1442:	fd cf       	rjmp	.-6      	; 0x143e <svn_seg_spi+0x2>

	return(SPDR);
    1444:	8e b5       	in	r24, 0x2e	; 46
}
    1446:	08 95       	ret

00001448 <svn_seg_write>:

void svn_seg_write(unsigned char addr,unsigned char data)
{
	svn_seg_select();
    1448:	28 98       	cbi	0x05, 0	; 5

	svn_seg_spi(addr & 0x0F);
    144a:	8f 70       	andi	r24, 0x0F	; 15

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    144c:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & _BV(SPIF)));
    144e:	0d b4       	in	r0, 0x2d	; 45
    1450:	07 fe       	sbrs	r0, 7
    1452:	fd cf       	rjmp	.-6      	; 0x144e <svn_seg_write+0x6>

	return(SPDR);
    1454:	8e b5       	in	r24, 0x2e	; 46

#include "svn_seg.h"

unsigned char svn_seg_spi(unsigned char data)
{
	SPDR = data;
    1456:	6e bd       	out	0x2e, r22	; 46

	while(!(SPSR & _BV(SPIF)));
    1458:	0d b4       	in	r0, 0x2d	; 45
    145a:	07 fe       	sbrs	r0, 7
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <svn_seg_write+0x10>

	return(SPDR);
    145e:	8e b5       	in	r24, 0x2e	; 46
	svn_seg_select();

	svn_seg_spi(addr & 0x0F);
	svn_seg_spi(data);

	svn_seg_deselect();
    1460:	28 9a       	sbi	0x05, 0	; 5
}
    1462:	08 95       	ret

00001464 <svn_seg_put_val>:

void svn_seg_put_val(unsigned int val)
{
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	ec 01       	movw	r28, r24
    146c:	16 e0       	ldi	r17, 0x06	; 6
	unsigned char dig = 0;
	for(int i = 6;i > 0;i--)
	{
		dig = val % 10;
    146e:	ce 01       	movw	r24, r28
    1470:	6a e0       	ldi	r22, 0x0A	; 10
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1478:	48 2f       	mov	r20, r24
		val = val / 10;
    147a:	ce 01       	movw	r24, r28
    147c:	6a e0       	ldi	r22, 0x0A	; 10
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1484:	eb 01       	movw	r28, r22

		if(dig == 0 && val == 0)
    1486:	44 23       	and	r20, r20
    1488:	31 f4       	brne	.+12     	; 0x1496 <svn_seg_put_val+0x32>
    148a:	61 15       	cp	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	19 f4       	brne	.+6      	; 0x1496 <svn_seg_put_val+0x32>
		{
			svn_seg_write(i,0xF);
    1490:	81 2f       	mov	r24, r17
    1492:	6f e0       	ldi	r22, 0x0F	; 15
    1494:	02 c0       	rjmp	.+4      	; 0x149a <svn_seg_put_val+0x36>
		}
		else
		{
			svn_seg_write(i,dig);
    1496:	81 2f       	mov	r24, r17
    1498:	64 2f       	mov	r22, r20
    149a:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
    149e:	11 50       	subi	r17, 0x01	; 1
}

void svn_seg_put_val(unsigned int val)
{
	unsigned char dig = 0;
	for(int i = 6;i > 0;i--)
    14a0:	31 f7       	brne	.-52     	; 0x146e <svn_seg_put_val+0xa>
		else
		{
			svn_seg_write(i,dig);
		}
	}
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	08 95       	ret

000014aa <svn_seg_clr>:

}

void svn_seg_clr(void)
{
	svn_seg_write(SEG_ADDR_D0,SEG_SPC);
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	6f e0       	ldi	r22, 0x0F	; 15
    14ae:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D1,SEG_SPC);
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	6f e0       	ldi	r22, 0x0F	; 15
    14b6:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D2,SEG_SPC);
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	6f e0       	ldi	r22, 0x0F	; 15
    14be:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D3,SEG_SPC);
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	6f e0       	ldi	r22, 0x0F	; 15
    14c6:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D4,SEG_SPC);
    14ca:	85 e0       	ldi	r24, 0x05	; 5
    14cc:	6f e0       	ldi	r22, 0x0F	; 15
    14ce:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D5,SEG_SPC);
    14d2:	86 e0       	ldi	r24, 0x06	; 6
    14d4:	6f e0       	ldi	r22, 0x0F	; 15
    14d6:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D6,0);
    14da:	87 e0       	ldi	r24, 0x07	; 7
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_D7,0);
    14e2:	88 e0       	ldi	r24, 0x08	; 8
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
}
    14ea:	08 95       	ret

000014ec <svn_seg_init>:
}

void svn_seg_init(void)
{
	// Init IO Pins
	SVN_SEG_PORT |= _BV(SVN_SEG_CS);
    14ec:	28 9a       	sbi	0x05, 0	; 5
	SVN_SEG_DDR |= _BV(SVN_SEG_CS);
    14ee:	20 9a       	sbi	0x04, 0	; 4
	SPI_DDR |= _BV(SPI_MOSI)|_BV(SPI_SCK);
    14f0:	84 b1       	in	r24, 0x04	; 4
    14f2:	86 60       	ori	r24, 0x06	; 6
    14f4:	84 b9       	out	0x04, r24	; 4

	// Init SPI
	SPCR = _BV(SPE)|_BV(MSTR);
    14f6:	80 e5       	ldi	r24, 0x50	; 80
    14f8:	8c bd       	out	0x2c, r24	; 44

	// Normal Operation
	svn_seg_write(SEG_ADDR_TST,SEG_TST_OFF);
    14fa:	8f e0       	ldi	r24, 0x0F	; 15
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
	svn_seg_write(SEG_ADDR_SHTDWN,SEG_NORMAL);
    1502:	8c e0       	ldi	r24, 0x0C	; 12
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>

	// Set first 6 to decode
	svn_seg_write(SEG_ADDR_DCMD,0x3F);
    150a:	89 e0       	ldi	r24, 0x09	; 9
    150c:	6f e3       	ldi	r22, 0x3F	; 63
    150e:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>

	// Set for 6 Digits
	svn_seg_write(SEG_ADDR_SCNLMT,0x07);
    1512:	8b e0       	ldi	r24, 0x0B	; 11
    1514:	67 e0       	ldi	r22, 0x07	; 7
    1516:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>

	// Set Highest Intensity
	svn_seg_write(SEG_ADDR_INT,0x0F);
    151a:	8a e0       	ldi	r24, 0x0A	; 10
    151c:	6f e0       	ldi	r22, 0x0F	; 15
    151e:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>

	svn_seg_clr();
    1522:	0e 94 55 0a 	call	0x14aa	; 0x14aa <svn_seg_clr>

}
    1526:	08 95       	ret

00001528 <svn_seg_pnum>:
	svn_seg_write(SEG_ADDR_D7,0);
}

void svn_seg_pnum(uint8_t dig,uint8_t val,uint8_t dp)
{
	svn_seg_write(SEG_ADDR_D0 + dig,val | dp);
    1528:	46 2b       	or	r20, r22
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	64 2f       	mov	r22, r20
    152e:	0e 94 24 0a 	call	0x1448	; 0x1448 <svn_seg_write>
}
    1532:	08 95       	ret

00001534 <__vector_12>:
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	0b b6       	in	r0, 0x3b	; 59
    153e:	0f 92       	push	r0
    1540:	11 24       	eor	r1, r1
    1542:	2f 93       	push	r18
    1544:	3f 93       	push	r19
    1546:	4f 93       	push	r20
    1548:	5f 93       	push	r21
    154a:	6f 93       	push	r22
    154c:	7f 93       	push	r23
    154e:	8f 93       	push	r24
    1550:	9f 93       	push	r25
    1552:	af 93       	push	r26
    1554:	bf 93       	push	r27
    1556:	ef 93       	push	r30
    1558:	ff 93       	push	r31
    155a:	10 92 6f 00 	sts	0x006F, r1
    155e:	10 92 70 00 	sts	0x0070, r1
    1562:	78 94       	sei
    1564:	84 ec       	ldi	r24, 0xC4	; 196
    1566:	99 e0       	ldi	r25, 0x09	; 9
    1568:	90 93 89 00 	sts	0x0089, r25
    156c:	80 93 88 00 	sts	0x0088, r24
    1570:	80 91 49 01 	lds	r24, 0x0149
    1574:	90 91 4a 01 	lds	r25, 0x014A
    1578:	a0 91 4b 01 	lds	r26, 0x014B
    157c:	b0 91 4c 01 	lds	r27, 0x014C
    1580:	0a 96       	adiw	r24, 0x0a	; 10
    1582:	a1 1d       	adc	r26, r1
    1584:	b1 1d       	adc	r27, r1
    1586:	80 93 49 01 	sts	0x0149, r24
    158a:	90 93 4a 01 	sts	0x014A, r25
    158e:	a0 93 4b 01 	sts	0x014B, r26
    1592:	b0 93 4c 01 	sts	0x014C, r27
    1596:	0e 94 92 00 	call	0x124	; 0x124 <handle_10ms_tick>
    159a:	f8 94       	cli
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	80 93 70 00 	sts	0x0070, r24
    15a2:	80 93 6f 00 	sts	0x006F, r24
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0b be       	out	0x3b, r0	; 59
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <systimer_10ms_restart>:
    15cc:	28 2f       	mov	r18, r24
    15ce:	10 92 85 00 	sts	0x0085, r1
    15d2:	10 92 84 00 	sts	0x0084, r1
    15d6:	88 23       	and	r24, r24
    15d8:	29 f0       	breq	.+10     	; 0x15e4 <systimer_10ms_restart+0x18>
    15da:	8a ef       	ldi	r24, 0xFA	; 250
    15dc:	28 9f       	mul	r18, r24
    15de:	c0 01       	movw	r24, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <systimer_10ms_restart+0x1c>
    15e4:	84 ec       	ldi	r24, 0xC4	; 196
    15e6:	99 e0       	ldi	r25, 0x09	; 9
    15e8:	90 93 89 00 	sts	0x0089, r25
    15ec:	80 93 88 00 	sts	0x0088, r24
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	80 93 6f 00 	sts	0x006F, r24
    15f6:	8b e0       	ldi	r24, 0x0B	; 11
    15f8:	80 93 81 00 	sts	0x0081, r24
    15fc:	22 23       	and	r18, r18
    15fe:	a9 f4       	brne	.+42     	; 0x162a <systimer_10ms_restart+0x5e>
    1600:	80 91 49 01 	lds	r24, 0x0149
    1604:	90 91 4a 01 	lds	r25, 0x014A
    1608:	a0 91 4b 01 	lds	r26, 0x014B
    160c:	b0 91 4c 01 	lds	r27, 0x014C
    1610:	0a 96       	adiw	r24, 0x0a	; 10
    1612:	a1 1d       	adc	r26, r1
    1614:	b1 1d       	adc	r27, r1
    1616:	80 93 49 01 	sts	0x0149, r24
    161a:	90 93 4a 01 	sts	0x014A, r25
    161e:	a0 93 4b 01 	sts	0x014B, r26
    1622:	b0 93 4c 01 	sts	0x014C, r27
    1626:	0e 94 92 00 	call	0x124	; 0x124 <handle_10ms_tick>
    162a:	08 95       	ret

0000162c <tach_leds>:
#include "tach.h"

volatile uint8_t tach_flag;

void tach_leds(uint16_t leds)
{
    162c:	ac 01       	movw	r20, r24
	uint8_t i = 0;
	uint8_t tach_hld = 0;

	tach_flag = 0;
    162e:	10 92 81 03 	sts	0x0381, r1

	if(tach_sts()) 	tach_hld = 1;
    1632:	65 b1       	in	r22, 0x05	; 5
	else			tach_hld = 0;

	COM_PORT &= ~(_BV(TACH_CLK)|_BV(TACH_DATA));
    1634:	81 b3       	in	r24, 0x11	; 17
    1636:	8a 7f       	andi	r24, 0xFA	; 250
    1638:	81 bb       	out	0x11, r24	; 17

	tach_off();
    163a:	2d 9a       	sbi	0x05, 5	; 5
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0

	for(i = 0;i<16;i++)
	{
		if((leds >> i) & 0x0001)
    1640:	ca 01       	movw	r24, r20
    1642:	02 2e       	mov	r0, r18
    1644:	02 c0       	rjmp	.+4      	; 0x164a <tach_leds+0x1e>
    1646:	96 95       	lsr	r25
    1648:	87 95       	ror	r24
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <tach_leds+0x1a>
    164e:	80 fd       	sbrc	r24, 0
		{
			COM_PORT |= _BV(TACH_DATA);
    1650:	8a 9a       	sbi	0x11, 2	; 17
		}
		COM_PORT |= _BV(TACH_CLK);	// Clock High
    1652:	88 9a       	sbi	0x11, 0	; 17
		COM_PORT &= ~_BV(TACH_DATA);	// Data low
    1654:	8a 98       	cbi	0x11, 2	; 17
		COM_PORT &= ~_BV(TACH_CLK);
    1656:	88 98       	cbi	0x11, 0	; 17
		TACH_PORT |= _BV(TACH_LAT);
    1658:	2c 9a       	sbi	0x05, 4	; 5
		TACH_PORT &= ~_BV(TACH_LAT);
    165a:	2c 98       	cbi	0x05, 4	; 5
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255

	COM_PORT &= ~(_BV(TACH_CLK)|_BV(TACH_DATA));

	tach_off();

	for(i = 0;i<16;i++)
    1660:	20 31       	cpi	r18, 0x10	; 16
    1662:	31 05       	cpc	r19, r1
    1664:	69 f7       	brne	.-38     	; 0x1640 <tach_leds+0x14>
		COM_PORT &= ~_BV(TACH_CLK);
		TACH_PORT |= _BV(TACH_LAT);
		TACH_PORT &= ~_BV(TACH_LAT);
	}

	if(tach_hld == 1)	tach_on();
    1666:	65 ff       	sbrs	r22, 5
    1668:	2d 98       	cbi	0x05, 5	; 5

	tach_flag = 1;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	80 93 81 03 	sts	0x0381, r24
}
    1670:	08 95       	ret

00001672 <tach_out>:

void tach_out(uint8_t val)
{
    1672:	38 2f       	mov	r19, r24
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <tach_out+0x12>
	uint16_t led_vals = 0;
	uint8_t i = 0;

	for(i = 0;i<val;i++)
	{
		led_vals = (led_vals >> 1);
    167c:	96 95       	lsr	r25
    167e:	87 95       	ror	r24
		led_vals |= 0x8000;
    1680:	90 68       	ori	r25, 0x80	; 128
void tach_out(uint8_t val)
{
	uint16_t led_vals = 0;
	uint8_t i = 0;

	for(i = 0;i<val;i++)
    1682:	2f 5f       	subi	r18, 0xFF	; 255
    1684:	23 17       	cp	r18, r19
    1686:	d0 f3       	brcs	.-12     	; 0x167c <tach_out+0xa>
	{
		led_vals = (led_vals >> 1);
		led_vals |= 0x8000;
	}

	tach_leds(led_vals);
    1688:	0e 94 16 0b 	call	0x162c	; 0x162c <tach_leds>
}
    168c:	08 95       	ret

0000168e <tach_init>:

void tach_init(void)
{
	TACH_DDR |= _BV(TACH_LAT)|_BV(TACH_EN);
    168e:	84 b1       	in	r24, 0x04	; 4
    1690:	80 63       	ori	r24, 0x30	; 48
    1692:	84 b9       	out	0x04, r24	; 4
	COM_DDR |= _BV(TACH_CLK)|_BV(TACH_DATA);
    1694:	80 b3       	in	r24, 0x10	; 16
    1696:	85 60       	ori	r24, 0x05	; 5
    1698:	80 bb       	out	0x10, r24	; 16

	tach_flag = 1;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 81 03 	sts	0x0381, r24
}
    16a0:	08 95       	ret

000016a2 <uart_init>:
 */
void uart_init(void)
{
	//initialize USART1
	//initialize UART1
	stdout = stdin = &uart_str;
    16a2:	85 e2       	ldi	r24, 0x25	; 37
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	90 93 83 03 	sts	0x0383, r25
    16aa:	80 93 82 03 	sts	0x0382, r24
    16ae:	90 93 85 03 	sts	0x0385, r25
    16b2:	80 93 84 03 	sts	0x0384, r24
	UCSR1A=_BV(U2X1);
    16b6:	82 e0       	ldi	r24, 0x02	; 2
    16b8:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B=0x98;
    16bc:	88 e9       	ldi	r24, 0x98	; 152
    16be:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C=0x06;
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = (F_CPU / (8UL * UART_BAUD1)) - 1;
    16c8:	80 e1       	ldi	r24, 0x10	; 16
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	90 93 cd 00 	sts	0x00CD, r25
    16d0:	80 93 cc 00 	sts	0x00CC, r24
}
    16d4:	08 95       	ret

000016d6 <uart_Transmit>:

void uart_Transmit( unsigned char data )
{
    16d6:	98 2f       	mov	r25, r24
/* Wait for empty transmit buffer */
while ( !( UCSR1A & (1<<UDRE1)) ) ;
    16d8:	80 91 c8 00 	lds	r24, 0x00C8
    16dc:	85 ff       	sbrs	r24, 5
    16de:	fc cf       	rjmp	.-8      	; 0x16d8 <uart_Transmit+0x2>
/* Put data into buffer, sends the data */
UDR1 = data;
    16e0:	90 93 ce 00 	sts	0x00CE, r25
}
    16e4:	08 95       	ret

000016e6 <uart_Receive>:


uint8_t uart_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSR1A & (1<<RXC1)) );
    16e6:	80 91 c8 00 	lds	r24, 0x00C8
    16ea:	87 ff       	sbrs	r24, 7
    16ec:	fc cf       	rjmp	.-8      	; 0x16e6 <uart_Receive>
/* Get and return received data from buffer */
return UDR1;
    16ee:	80 91 ce 00 	lds	r24, 0x00CE
}
    16f2:	08 95       	ret

000016f4 <uart_putchar>:
/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream)
{
    16f4:	1f 93       	push	r17
    16f6:	18 2f       	mov	r17, r24

  if (c == '\a')
    16f8:	87 30       	cpi	r24, 0x07	; 7
    16fa:	49 f4       	brne	.+18     	; 0x170e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
    16fc:	60 91 86 03 	lds	r22, 0x0386
    1700:	70 91 87 03 	lds	r23, 0x0387
    1704:	8d e1       	ldi	r24, 0x1D	; 29
    1706:	91 e0       	ldi	r25, 0x01	; 1
    1708:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <fputs>
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
    170e:	8a 30       	cpi	r24, 0x0A	; 10
    1710:	19 f4       	brne	.+6      	; 0x1718 <uart_putchar+0x24>
    uart_putchar('\r', stream);
    1712:	8d e0       	ldi	r24, 0x0D	; 13
    1714:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
  loop_until_bit_is_set(UCSR1A, UDRE1);
    1718:	80 91 c8 00 	lds	r24, 0x00C8
    171c:	85 ff       	sbrs	r24, 5
    171e:	fc cf       	rjmp	.-8      	; 0x1718 <uart_putchar+0x24>
  UDR1 = c;
    1720:	10 93 ce 00 	sts	0x00CE, r17

  return 0;
}
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	1f 91       	pop	r17
    172a:	08 95       	ret

0000172c <uart_getchar>:
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream)
{
    172c:	ef 92       	push	r14
    172e:	ff 92       	push	r15
    1730:	0f 93       	push	r16
    1732:	1f 93       	push	r17
    1734:	cf 93       	push	r28
    1736:	df 93       	push	r29
    1738:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
    173a:	80 91 4d 01 	lds	r24, 0x014D
    173e:	90 91 4e 01 	lds	r25, 0x014E
    1742:	89 2b       	or	r24, r25
    1744:	09 f0       	breq	.+2      	; 0x1748 <uart_getchar+0x1c>
    1746:	9f c0       	rjmp	.+318    	; 0x1886 <uart_getchar+0x15a>
    1748:	0f e4       	ldi	r16, 0x4F	; 79
    174a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR1A, RXC1);
    174c:	80 91 c8 00 	lds	r24, 0x00C8
    1750:	87 ff       	sbrs	r24, 7
    1752:	fc cf       	rjmp	.-8      	; 0x174c <uart_getchar+0x20>
	if (UCSR1A & _BV(FE1))
    1754:	80 91 c8 00 	lds	r24, 0x00C8
    1758:	84 ff       	sbrs	r24, 4
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <uart_getchar+0x36>
    175c:	2e ef       	ldi	r18, 0xFE	; 254
    175e:	3f ef       	ldi	r19, 0xFF	; 255
    1760:	a6 c0       	rjmp	.+332    	; 0x18ae <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
    1762:	80 91 c8 00 	lds	r24, 0x00C8
    1766:	83 fd       	sbrc	r24, 3
    1768:	a0 c0       	rjmp	.+320    	; 0x18aa <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR1;
    176a:	90 91 ce 00 	lds	r25, 0x00CE
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
    176e:	9d 30       	cpi	r25, 0x0D	; 13
    1770:	11 f0       	breq	.+4      	; 0x1776 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
    1772:	9a 30       	cpi	r25, 0x0A	; 10
    1774:	69 f4       	brne	.+26     	; 0x1790 <uart_getchar+0x64>
	  {
	    *cp = c;
    1776:	8a e0       	ldi	r24, 0x0A	; 10
    1778:	f8 01       	movw	r30, r16
    177a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
    177c:	b7 01       	movw	r22, r14
    177e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
	    rxp = b;
    1782:	8f e4       	ldi	r24, 0x4F	; 79
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	90 93 4e 01 	sts	0x014E, r25
    178a:	80 93 4d 01 	sts	0x014D, r24
    178e:	7b c0       	rjmp	.+246    	; 0x1886 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
    1790:	99 30       	cpi	r25, 0x09	; 9
    1792:	09 f4       	brne	.+2      	; 0x1796 <uart_getchar+0x6a>
    1794:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0')
    1796:	89 2f       	mov	r24, r25
    1798:	80 52       	subi	r24, 0x20	; 32
    179a:	8f 35       	cpi	r24, 0x5F	; 95
    179c:	10 f0       	brcs	.+4      	; 0x17a2 <uart_getchar+0x76>
    179e:	90 3a       	cpi	r25, 0xA0	; 160
    17a0:	70 f0       	brcs	.+28     	; 0x17be <uart_getchar+0x92>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
    17a2:	f1 e0       	ldi	r31, 0x01	; 1
    17a4:	0e 39       	cpi	r16, 0x9E	; 158
    17a6:	1f 07       	cpc	r17, r31
    17a8:	11 f4       	brne	.+4      	; 0x17ae <uart_getchar+0x82>
	      uart_putchar('\a', stream);
    17aa:	87 e0       	ldi	r24, 0x07	; 7
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
    17ae:	f8 01       	movw	r30, r16
    17b0:	91 93       	st	Z+, r25
    17b2:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
    17b4:	89 2f       	mov	r24, r25
    17b6:	b7 01       	movw	r22, r14
    17b8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
    17bc:	c7 cf       	rjmp	.-114    	; 0x174c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
    17be:	92 31       	cpi	r25, 0x12	; 18
    17c0:	39 f1       	breq	.+78     	; 0x1810 <uart_getchar+0xe4>
    17c2:	93 31       	cpi	r25, 0x13	; 19
    17c4:	38 f4       	brcc	.+14     	; 0x17d4 <uart_getchar+0xa8>
    17c6:	93 30       	cpi	r25, 0x03	; 3
    17c8:	09 f4       	brne	.+2      	; 0x17cc <uart_getchar+0xa0>
    17ca:	6f c0       	rjmp	.+222    	; 0x18aa <uart_getchar+0x17e>
    17cc:	98 30       	cpi	r25, 0x08	; 8
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <uart_getchar+0xa6>
    17d0:	bd cf       	rjmp	.-134    	; 0x174c <uart_getchar+0x20>
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <uart_getchar+0xba>
    17d4:	97 31       	cpi	r25, 0x17	; 23
    17d6:	09 f4       	brne	.+2      	; 0x17da <uart_getchar+0xae>
    17d8:	4b c0       	rjmp	.+150    	; 0x1870 <uart_getchar+0x144>
    17da:	9f 37       	cpi	r25, 0x7F	; 127
    17dc:	21 f0       	breq	.+8      	; 0x17e6 <uart_getchar+0xba>
    17de:	95 31       	cpi	r25, 0x15	; 21
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <uart_getchar+0xb8>
    17e2:	b4 cf       	rjmp	.-152    	; 0x174c <uart_getchar+0x20>
    17e4:	32 c0       	rjmp	.+100    	; 0x184a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
    17e6:	f1 e0       	ldi	r31, 0x01	; 1
    17e8:	0f 34       	cpi	r16, 0x4F	; 79
    17ea:	1f 07       	cpc	r17, r31
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <uart_getchar+0xc4>
    17ee:	08 f4       	brcc	.+2      	; 0x17f2 <uart_getchar+0xc6>
    17f0:	ad cf       	rjmp	.-166    	; 0x174c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
    17f2:	88 e0       	ldi	r24, 0x08	; 8
    17f4:	b7 01       	movw	r22, r14
    17f6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar(' ', stream);
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	b7 01       	movw	r22, r14
    17fe:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar('\b', stream);
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	b7 01       	movw	r22, r14
    1806:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		cp--;
    180a:	01 50       	subi	r16, 0x01	; 1
    180c:	10 40       	sbci	r17, 0x00	; 0
    180e:	9e cf       	rjmp	.-196    	; 0x174c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1810:	8d e0       	ldi	r24, 0x0D	; 13
    1812:	b7 01       	movw	r22, r14
    1814:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
    1818:	cf e4       	ldi	r28, 0x4F	; 79
    181a:	d1 e0       	ldi	r29, 0x01	; 1
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    181e:	89 91       	ld	r24, Y+
    1820:	b7 01       	movw	r22, r14
    1822:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1826:	c0 17       	cp	r28, r16
    1828:	d1 07       	cpc	r29, r17
    182a:	c8 f3       	brcs	.-14     	; 0x181e <uart_getchar+0xf2>
    182c:	8f cf       	rjmp	.-226    	; 0x174c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    182e:	88 e0       	ldi	r24, 0x08	; 8
    1830:	b7 01       	movw	r22, r14
    1832:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar(' ', stream);
    1836:	80 e2       	ldi	r24, 0x20	; 32
    1838:	b7 01       	movw	r22, r14
    183a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar('\b', stream);
    183e:	88 e0       	ldi	r24, 0x08	; 8
    1840:	b7 01       	movw	r22, r14
    1842:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		cp--;
    1846:	01 50       	subi	r16, 0x01	; 1
    1848:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	0f 34       	cpi	r16, 0x4F	; 79
    184e:	18 07       	cpc	r17, r24
    1850:	09 f0       	breq	.+2      	; 0x1854 <uart_getchar+0x128>
    1852:	68 f7       	brcc	.-38     	; 0x182e <uart_getchar+0x102>
    1854:	7b cf       	rjmp	.-266    	; 0x174c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1856:	88 e0       	ldi	r24, 0x08	; 8
    1858:	b7 01       	movw	r22, r14
    185a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar(' ', stream);
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	b7 01       	movw	r22, r14
    1862:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
		uart_putchar('\b', stream);
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	b7 01       	movw	r22, r14
    186a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <uart_putchar>
    186e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1870:	e1 e0       	ldi	r30, 0x01	; 1
    1872:	0f 34       	cpi	r16, 0x4F	; 79
    1874:	1e 07       	cpc	r17, r30
    1876:	09 f0       	breq	.+2      	; 0x187a <uart_getchar+0x14e>
    1878:	08 f4       	brcc	.+2      	; 0x187c <uart_getchar+0x150>
    187a:	68 cf       	rjmp	.-304    	; 0x174c <uart_getchar+0x20>
    187c:	e8 01       	movw	r28, r16
    187e:	8a 91       	ld	r24, -Y
    1880:	80 32       	cpi	r24, 0x20	; 32
    1882:	49 f7       	brne	.-46     	; 0x1856 <uart_getchar+0x12a>
    1884:	63 cf       	rjmp	.-314    	; 0x174c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1886:	e0 91 4d 01 	lds	r30, 0x014D
    188a:	f0 91 4e 01 	lds	r31, 0x014E
    188e:	81 91       	ld	r24, Z+
    1890:	f0 93 4e 01 	sts	0x014E, r31
    1894:	e0 93 4d 01 	sts	0x014D, r30
  if (c == '\n')
    1898:	8a 30       	cpi	r24, 0x0A	; 10
    189a:	21 f4       	brne	.+8      	; 0x18a4 <uart_getchar+0x178>
    rxp = 0;
    189c:	10 92 4e 01 	sts	0x014E, r1
    18a0:	10 92 4d 01 	sts	0x014D, r1

  return c;
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <uart_getchar+0x182>
    18aa:	2f ef       	ldi	r18, 0xFF	; 255
    18ac:	3f ef       	ldi	r19, 0xFF	; 255
}
    18ae:	c9 01       	movw	r24, r18
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <btn_init>:
volatile uint16_t ui_cntr2 = 0;

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
    18be:	0f 93       	push	r16
	btns[idx].port = prt;
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	33 e0       	ldi	r19, 0x03	; 3
    18c6:	ee 0f       	add	r30, r30
    18c8:	ff 1f       	adc	r31, r31
    18ca:	3a 95       	dec	r19
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <btn_init+0x8>
    18ce:	e8 1b       	sub	r30, r24
    18d0:	f9 0b       	sbc	r31, r25
    18d2:	e7 52       	subi	r30, 0x27	; 39
    18d4:	fe 4f       	sbci	r31, 0xFE	; 254
    18d6:	71 83       	std	Z+1, r23	; 0x01
    18d8:	60 83       	st	Z, r22
	btns[idx].pin = pn;
    18da:	42 83       	std	Z+2, r20	; 0x02
	btns[idx].state = BTN_STATE_START;
    18dc:	13 82       	std	Z+3, r1	; 0x03
	btns[idx].pshd = p;
    18de:	24 83       	std	Z+4, r18	; 0x04
	btns[idx].held = h;
    18e0:	05 83       	std	Z+5, r16	; 0x05
	btns[idx].hcnt = 0;
    18e2:	16 82       	std	Z+6, r1	; 0x06
}
    18e4:	0f 91       	pop	r16
    18e6:	08 95       	ret

000018e8 <led_level>:



void led_level(uint8_t lvl)
{
	leds.lvl = lvl;
    18e8:	80 93 d8 01 	sts	0x01D8, r24

	if(lvl == 0)
    18ec:	88 23       	and	r24, r24
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <led_level+0xc>
	{
		TIMSK0=0x02;
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <led_level+0x16>
		OCR0A = _BV(lvl - 1);
		TIMSK0 = 0x03;
	}
	*/

	if(lvl == 1)
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	31 f4       	brne	.+12     	; 0x1904 <led_level+0x1c>
	{
		OCR0A = 0x02;
    18f8:	82 e0       	ldi	r24, 0x02	; 2
    18fa:	87 bd       	out	0x27, r24	; 39
		TIMSK0 = 0x03;
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	80 93 6e 00 	sts	0x006E, r24
    1902:	08 95       	ret
	}

	if(lvl == 9)
    1904:	89 30       	cpi	r24, 0x09	; 9
    1906:	19 f4       	brne	.+6      	; 0x190e <led_level+0x26>
	{
		TIMSK0 = 0x01;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	80 93 6e 00 	sts	0x006E, r24
    190e:	08 95       	ret

00001910 <led_ctrl>:
	}
}

void led_ctrl(uint8_t led,uint8_t state,uint16_t tmr)
{
	leds.rem[led] = LED_NO_TMR;
    1910:	a8 2f       	mov	r26, r24
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	fd 01       	movw	r30, r26
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ed 53       	subi	r30, 0x3D	; 61
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	9f ef       	ldi	r25, 0xFF	; 255
    1922:	96 83       	std	Z+6, r25	; 0x06
    1924:	85 83       	std	Z+5, r24	; 0x05
	switch(state)
    1926:	61 30       	cpi	r22, 0x01	; 1
    1928:	29 f1       	breq	.+74     	; 0x1974 <led_ctrl+0x64>
    192a:	61 30       	cpi	r22, 0x01	; 1
    192c:	30 f0       	brcs	.+12     	; 0x193a <led_ctrl+0x2a>
    192e:	62 30       	cpi	r22, 0x02	; 2
    1930:	e9 f1       	breq	.+122    	; 0x19ac <led_ctrl+0x9c>
    1932:	63 30       	cpi	r22, 0x03	; 3
    1934:	09 f0       	breq	.+2      	; 0x1938 <led_ctrl+0x28>
    1936:	6d c0       	rjmp	.+218    	; 0x1a12 <led_ctrl+0x102>
    1938:	53 c0       	rjmp	.+166    	; 0x19e0 <led_ctrl+0xd0>
	{
		case LED_OFF:
			leds.on &= ~_BV(led);
    193a:	80 91 c5 01 	lds	r24, 0x01C5
    193e:	21 e0       	ldi	r18, 0x01	; 1
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	0a 2e       	mov	r0, r26
    1944:	02 c0       	rjmp	.+4      	; 0x194a <led_ctrl+0x3a>
    1946:	22 0f       	add	r18, r18
    1948:	33 1f       	adc	r19, r19
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <led_ctrl+0x36>
    194e:	92 2f       	mov	r25, r18
    1950:	90 95       	com	r25
    1952:	89 23       	and	r24, r25
    1954:	80 93 c5 01 	sts	0x01C5, r24
			leds.blink_fst &= ~_BV(led);
    1958:	80 91 c7 01 	lds	r24, 0x01C7
    195c:	89 23       	and	r24, r25
    195e:	80 93 c7 01 	sts	0x01C7, r24
			leds.blink_slw &= ~_BV(led);
    1962:	80 91 c6 01 	lds	r24, 0x01C6
    1966:	98 23       	and	r25, r24
    1968:	90 93 c6 01 	sts	0x01C6, r25
			PORTC |= _BV(led);
    196c:	88 b1       	in	r24, 0x08	; 8
    196e:	28 2b       	or	r18, r24
    1970:	28 b9       	out	0x08, r18	; 8
    1972:	4f c0       	rjmp	.+158    	; 0x1a12 <led_ctrl+0x102>
			break;
		case LED_ON:
			leds.on |=	_BV(led);
    1974:	20 91 c5 01 	lds	r18, 0x01C5
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0a 2e       	mov	r0, r26
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <led_ctrl+0x74>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <led_ctrl+0x70>
    1988:	28 2b       	or	r18, r24
    198a:	20 93 c5 01 	sts	0x01C5, r18
			leds.blink_fst &= ~_BV(led);
    198e:	20 91 c7 01 	lds	r18, 0x01C7
    1992:	80 95       	com	r24
    1994:	28 23       	and	r18, r24
    1996:	20 93 c7 01 	sts	0x01C7, r18
			leds.blink_slw &= ~_BV(led);
    199a:	20 91 c6 01 	lds	r18, 0x01C6
    199e:	28 23       	and	r18, r24
    19a0:	20 93 c6 01 	sts	0x01C6, r18
			PORTC &= ~_BV(led);
    19a4:	28 b1       	in	r18, 0x08	; 8
    19a6:	82 23       	and	r24, r18
    19a8:	88 b9       	out	0x08, r24	; 8
    19aa:	33 c0       	rjmp	.+102    	; 0x1a12 <led_ctrl+0x102>
			break;
		case LED_BLINK_FAST:
			leds.on &= ~_BV(led);
    19ac:	20 91 c5 01 	lds	r18, 0x01C5
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0a 2e       	mov	r0, r26
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <led_ctrl+0xac>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	0a 94       	dec	r0
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <led_ctrl+0xa8>
    19c0:	38 2f       	mov	r19, r24
    19c2:	30 95       	com	r19
    19c4:	23 23       	and	r18, r19
    19c6:	20 93 c5 01 	sts	0x01C5, r18
			leds.blink_fst |= _BV(led);
    19ca:	20 91 c7 01 	lds	r18, 0x01C7
    19ce:	82 2b       	or	r24, r18
    19d0:	80 93 c7 01 	sts	0x01C7, r24
			leds.blink_slw &= ~_BV(led);
    19d4:	80 91 c6 01 	lds	r24, 0x01C6
    19d8:	38 23       	and	r19, r24
    19da:	30 93 c6 01 	sts	0x01C6, r19
    19de:	19 c0       	rjmp	.+50     	; 0x1a12 <led_ctrl+0x102>
			break;
		case LED_BLINK_SLOW:
			leds.on &= ~_BV(led);
    19e0:	30 91 c5 01 	lds	r19, 0x01C5
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0a 2e       	mov	r0, r26
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <led_ctrl+0xe0>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <led_ctrl+0xdc>
    19f4:	28 2f       	mov	r18, r24
    19f6:	20 95       	com	r18
    19f8:	32 23       	and	r19, r18
    19fa:	30 93 c5 01 	sts	0x01C5, r19
			leds.blink_fst &= ~_BV(led);
    19fe:	30 91 c7 01 	lds	r19, 0x01C7
    1a02:	23 23       	and	r18, r19
    1a04:	20 93 c7 01 	sts	0x01C7, r18
			leds.blink_slw |= _BV(led);
    1a08:	20 91 c6 01 	lds	r18, 0x01C6
    1a0c:	82 2b       	or	r24, r18
    1a0e:	80 93 c6 01 	sts	0x01C6, r24
			break;
		default :
			break;
	}
	leds.rem[led] = tmr;
    1a12:	aa 0f       	add	r26, r26
    1a14:	bb 1f       	adc	r27, r27
    1a16:	ad 53       	subi	r26, 0x3D	; 61
    1a18:	be 4f       	sbci	r27, 0xFE	; 254
    1a1a:	16 96       	adiw	r26, 0x06	; 6
    1a1c:	5c 93       	st	X, r21
    1a1e:	4e 93       	st	-X, r20
    1a20:	15 97       	sbiw	r26, 0x05	; 5
}
    1a22:	08 95       	ret

00001a24 <handle_btn>:

void handle_btn(uint8_t id)
{
	switch(btns[id].state)
    1a24:	48 2f       	mov	r20, r24
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	da 01       	movw	r26, r20
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	aa 0f       	add	r26, r26
    1a2e:	bb 1f       	adc	r27, r27
    1a30:	8a 95       	dec	r24
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <handle_btn+0x8>
    1a34:	a4 1b       	sub	r26, r20
    1a36:	b5 0b       	sbc	r27, r21
    1a38:	a7 52       	subi	r26, 0x27	; 39
    1a3a:	be 4f       	sbci	r27, 0xFE	; 254
    1a3c:	13 96       	adiw	r26, 0x03	; 3
    1a3e:	8c 91       	ld	r24, X
    1a40:	13 97       	sbiw	r26, 0x03	; 3
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	e9 f0       	breq	.+58     	; 0x1a80 <handle_btn+0x5c>
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	38 f0       	brcs	.+14     	; 0x1a58 <handle_btn+0x34>
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <handle_btn+0x2c>
    1a4e:	45 c0       	rjmp	.+138    	; 0x1ada <handle_btn+0xb6>
    1a50:	83 30       	cpi	r24, 0x03	; 3
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <handle_btn+0x32>
    1a54:	6e c0       	rjmp	.+220    	; 0x1b32 <handle_btn+0x10e>
    1a56:	5c c0       	rjmp	.+184    	; 0x1b10 <handle_btn+0xec>
	{
		case BTN_STATE_START :
			if(!(*(btns[id].port) & _BV(btns[id].pin)))
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	80 81       	ld	r24, Z
    1a60:	12 96       	adiw	r26, 0x02	; 2
    1a62:	2c 91       	ld	r18, X
    1a64:	12 97       	sbiw	r26, 0x02	; 2
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <handle_btn+0x4a>
    1a6a:	95 95       	asr	r25
    1a6c:	87 95       	ror	r24
    1a6e:	2a 95       	dec	r18
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <handle_btn+0x46>
    1a72:	80 fd       	sbrc	r24, 0
    1a74:	5e c0       	rjmp	.+188    	; 0x1b32 <handle_btn+0x10e>
			{
				btns[id].hcnt = 0;
    1a76:	16 96       	adiw	r26, 0x06	; 6
    1a78:	1c 92       	st	X, r1
    1a7a:	16 97       	sbiw	r26, 0x06	; 6
				btns[id].state = BTN_STATE_WAIT;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	45 c0       	rjmp	.+138    	; 0x1b0a <handle_btn+0xe6>
			}
			break;
		case BTN_STATE_WAIT :
			if(btns[id].hcnt >= BTN_HELD_TIME)
    1a80:	16 96       	adiw	r26, 0x06	; 6
    1a82:	8c 91       	ld	r24, X
    1a84:	16 97       	sbiw	r26, 0x06	; 6
    1a86:	84 36       	cpi	r24, 0x64	; 100
    1a88:	20 f0       	brcs	.+8      	; 0x1a92 <handle_btn+0x6e>
			{
				btns[id].state = BTN_STATE_HELD;
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	13 96       	adiw	r26, 0x03	; 3
    1a8e:	8c 93       	st	X, r24
    1a90:	16 c0       	rjmp	.+44     	; 0x1abe <handle_btn+0x9a>
			}
			else if(*(btns[id].port) & _BV(btns[id].pin))
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	11 97       	sbiw	r26, 0x01	; 1
    1a98:	80 81       	ld	r24, Z
    1a9a:	12 96       	adiw	r26, 0x02	; 2
    1a9c:	2c 91       	ld	r18, X
    1a9e:	12 97       	sbiw	r26, 0x02	; 2
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <handle_btn+0x84>
    1aa4:	95 95       	asr	r25
    1aa6:	87 95       	ror	r24
    1aa8:	2a 95       	dec	r18
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <handle_btn+0x80>
    1aac:	80 ff       	sbrs	r24, 0
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <handle_btn+0x9a>
			{
				last_btn = btns[id].pshd;
    1ab0:	14 96       	adiw	r26, 0x04	; 4
    1ab2:	8c 91       	ld	r24, X
    1ab4:	14 97       	sbiw	r26, 0x04	; 4
    1ab6:	80 93 a9 01 	sts	0x01A9, r24
				btns[id].state = BTN_STATE_START;
    1aba:	13 96       	adiw	r26, 0x03	; 3
    1abc:	1c 92       	st	X, r1
			}
			btns[id].hcnt++;
    1abe:	fa 01       	movw	r30, r20
    1ac0:	a3 e0       	ldi	r26, 0x03	; 3
    1ac2:	ee 0f       	add	r30, r30
    1ac4:	ff 1f       	adc	r31, r31
    1ac6:	aa 95       	dec	r26
    1ac8:	e1 f7       	brne	.-8      	; 0x1ac2 <handle_btn+0x9e>
    1aca:	e4 1b       	sub	r30, r20
    1acc:	f5 0b       	sbc	r31, r21
    1ace:	e7 52       	subi	r30, 0x27	; 39
    1ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad2:	86 81       	ldd	r24, Z+6	; 0x06
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	86 83       	std	Z+6, r24	; 0x06
    1ad8:	08 95       	ret
			break;
		case BTN_STATE_HELD :
			last_btn = btns[id].held;
    1ada:	15 96       	adiw	r26, 0x05	; 5
    1adc:	8c 91       	ld	r24, X
    1ade:	15 97       	sbiw	r26, 0x05	; 5
    1ae0:	80 93 a9 01 	sts	0x01A9, r24
			if(*(btns[id].port) & _BV(btns[id].pin))
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	80 81       	ld	r24, Z
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	2c 91       	ld	r18, X
    1af0:	12 97       	sbiw	r26, 0x02	; 2
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <handle_btn+0xd6>
    1af6:	95 95       	asr	r25
    1af8:	87 95       	ror	r24
    1afa:	2a 95       	dec	r18
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <handle_btn+0xd2>
    1afe:	80 ff       	sbrs	r24, 0
    1b00:	03 c0       	rjmp	.+6      	; 0x1b08 <handle_btn+0xe4>
			{
				btns[id].state = BTN_STATE_START;
    1b02:	13 96       	adiw	r26, 0x03	; 3
    1b04:	1c 92       	st	X, r1
    1b06:	08 95       	ret
			}
			else
			{
				btns[id].state = BTN_STATE_RELEASE;
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	13 96       	adiw	r26, 0x03	; 3
    1b0c:	8c 93       	st	X, r24
    1b0e:	08 95       	ret
			}
			break;
		case BTN_STATE_RELEASE :
			if(*(btns[id].port) & _BV(btns[id].pin))
    1b10:	ed 91       	ld	r30, X+
    1b12:	fc 91       	ld	r31, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	80 81       	ld	r24, Z
    1b18:	12 96       	adiw	r26, 0x02	; 2
    1b1a:	2c 91       	ld	r18, X
    1b1c:	12 97       	sbiw	r26, 0x02	; 2
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <handle_btn+0x102>
    1b22:	95 95       	asr	r25
    1b24:	87 95       	ror	r24
    1b26:	2a 95       	dec	r18
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <handle_btn+0xfe>
    1b2a:	80 ff       	sbrs	r24, 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <handle_btn+0x10e>
			{
				btns[id].state = BTN_STATE_START;
    1b2e:	13 96       	adiw	r26, 0x03	; 3
    1b30:	1c 92       	st	X, r1
    1b32:	08 95       	ret

00001b34 <handle_enc>:
	uint8_t a_new = 0;
	uint8_t b_new = 0;
	uint8_t i;
	uint8_t sum = 0;

	if(ENC_A_PINS & _BV(ENC_A))	a_new = 1;
    1b34:	89 b1       	in	r24, 0x09	; 9
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	96 95       	lsr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	38 2f       	mov	r19, r24
    1b3e:	31 70       	andi	r19, 0x01	; 1
	if(ENC_B_PINS & _BV(ENC_B)) b_new = 1;
    1b40:	29 b1       	in	r18, 0x09	; 9
    1b42:	21 70       	andi	r18, 0x01	; 1

	if(a_new == enc.a && b_new == enc.b)
    1b44:	80 91 ae 01 	lds	r24, 0x01AE
    1b48:	38 17       	cp	r19, r24
    1b4a:	29 f4       	brne	.+10     	; 0x1b56 <handle_enc+0x22>
    1b4c:	80 91 af 01 	lds	r24, 0x01AF
    1b50:	28 17       	cp	r18, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <handle_enc+0x22>
    1b54:	4f c0       	rjmp	.+158    	; 0x1bf4 <handle_enc+0xc0>
	{
		return;
	}

	enc.hist.shft = (enc.hist.shft) << 8;
    1b56:	80 91 aa 01 	lds	r24, 0x01AA
    1b5a:	90 91 ab 01 	lds	r25, 0x01AB
    1b5e:	a0 91 ac 01 	lds	r26, 0x01AC
    1b62:	b0 91 ad 01 	lds	r27, 0x01AD
    1b66:	ba 2f       	mov	r27, r26
    1b68:	a9 2f       	mov	r26, r25
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	88 27       	eor	r24, r24
    1b6e:	80 93 aa 01 	sts	0x01AA, r24
    1b72:	90 93 ab 01 	sts	0x01AB, r25
    1b76:	a0 93 ac 01 	sts	0x01AC, r26
    1b7a:	b0 93 ad 01 	sts	0x01AD, r27
	enc.hist.buf[0] = enc_table[a_new + b_new*2][enc.a +enc.b*2];
    1b7e:	90 91 ae 01 	lds	r25, 0x01AE
    1b82:	80 91 af 01 	lds	r24, 0x01AF
    1b86:	e2 2f       	mov	r30, r18
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	ee 0f       	add	r30, r30
    1b8c:	ff 1f       	adc	r31, r31
    1b8e:	e3 0f       	add	r30, r19
    1b90:	f1 1d       	adc	r31, r1
    1b92:	ee 0f       	add	r30, r30
    1b94:	ff 1f       	adc	r31, r31
    1b96:	e8 0f       	add	r30, r24
    1b98:	f1 1d       	adc	r31, r1
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	e9 0f       	add	r30, r25
    1ba0:	f1 1d       	adc	r31, r1
    1ba2:	ed 5c       	subi	r30, 0xCD	; 205
    1ba4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba6:	80 81       	ld	r24, Z
    1ba8:	80 93 aa 01 	sts	0x01AA, r24

	enc.a = a_new;
    1bac:	30 93 ae 01 	sts	0x01AE, r19
	enc.b = b_new;
    1bb0:	20 93 af 01 	sts	0x01AF, r18

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1bb4:	80 91 aa 01 	lds	r24, 0x01AA
    1bb8:	82 30       	cpi	r24, 0x02	; 2
    1bba:	e1 f0       	breq	.+56     	; 0x1bf4 <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1bbc:	20 91 aa 01 	lds	r18, 0x01AA
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1bc0:	80 91 ab 01 	lds	r24, 0x01AB
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	b1 f0       	breq	.+44     	; 0x1bf4 <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1bc8:	90 91 ab 01 	lds	r25, 0x01AB
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1bcc:	80 91 ac 01 	lds	r24, 0x01AC
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	81 f0       	breq	.+32     	; 0x1bf4 <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1bd4:	80 91 ac 01 	lds	r24, 0x01AC
    1bd8:	29 0f       	add	r18, r25
    1bda:	28 0f       	add	r18, r24
	enc.a = a_new;
	enc.b = b_new;

	for(i = 0;i<4;i++)
	{
		if(enc.hist.buf[i] == 2)	return;
    1bdc:	80 91 ad 01 	lds	r24, 0x01AD
    1be0:	82 30       	cpi	r24, 0x02	; 2
    1be2:	41 f0       	breq	.+16     	; 0x1bf4 <handle_enc+0xc0>

		sum+= enc.hist.buf[i];
    1be4:	80 91 ad 01 	lds	r24, 0x01AD
	}

	enc.val +=sum;
    1be8:	90 91 b1 01 	lds	r25, 0x01B1
    1bec:	28 0f       	add	r18, r24
    1bee:	29 0f       	add	r18, r25
    1bf0:	20 93 b1 01 	sts	0x01B1, r18
    1bf4:	08 95       	ret

00001bf6 <__vector_16>:
}



ISR(TIMER0_COMP_vect)
{
    1bf6:	1f 92       	push	r1
    1bf8:	0f 92       	push	r0
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	0f 92       	push	r0
    1bfe:	11 24       	eor	r1, r1

	//PORTC = 0xFF;

	//if(tach_flag)	tach_off();

}
    1c00:	0f 90       	pop	r0
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	0f 90       	pop	r0
    1c06:	1f 90       	pop	r1
    1c08:	18 95       	reti

00001c0a <__vector_17>:

ISR(TIMER0_OVF_vect)
{
    1c0a:	1f 92       	push	r1
    1c0c:	0f 92       	push	r0
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	0f 92       	push	r0
    1c12:	11 24       	eor	r1, r1
	//PORTC = ~(leds.curr_sv);
	//if(tach_flag)	tach_on();
}
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <__vector_9>:

volatile uint16_t last_tach = 0;
volatile uint8_t last_tach_disp = 0;

ISR(TIMER2_COMP_vect)
{
    1c1e:	1f 92       	push	r1
    1c20:	0f 92       	push	r0
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	0f 92       	push	r0
    1c26:	0b b6       	in	r0, 0x3b	; 59
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	ef 93       	push	r30
    1c50:	ff 93       	push	r31
	uint8_t i;
	uint16_t curr_tach;
	uint8_t curr_tach_disp;


	ui_cntr2++;
    1c52:	80 91 a0 01 	lds	r24, 0x01A0
    1c56:	90 91 a1 01 	lds	r25, 0x01A1
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	90 93 a1 01 	sts	0x01A1, r25
    1c60:	80 93 a0 01 	sts	0x01A0, r24
	if(ui_cntr2 == 100000)
    1c64:	80 91 a0 01 	lds	r24, 0x01A0
    1c68:	90 91 a1 01 	lds	r25, 0x01A1
	{
		ui_cntr2 = 0;
	}

	handle_enc();
    1c6c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <handle_enc>

	if((ui_cntr2 % 10) == 0)
    1c70:	80 91 a0 01 	lds	r24, 0x01A0
    1c74:	90 91 a1 01 	lds	r25, 0x01A1
    1c78:	6a e0       	ldi	r22, 0x0A	; 10
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1c80:	89 2b       	or	r24, r25
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <__vector_9+0x68>
    1c84:	c2 c0       	rjmp	.+388    	; 0x1e0a <__vector_9+0x1ec>
	{
		curr_tach = data[0].rpm;
    1c86:	c0 91 20 02 	lds	r28, 0x0220
    1c8a:	d0 91 21 02 	lds	r29, 0x0221
		if(curr_tach != last_tach)
    1c8e:	80 91 a2 01 	lds	r24, 0x01A2
    1c92:	90 91 a3 01 	lds	r25, 0x01A3
    1c96:	c8 17       	cp	r28, r24
    1c98:	d9 07       	cpc	r29, r25
    1c9a:	71 f1       	breq	.+92     	; 0x1cf8 <__vector_9+0xda>
		{
			svn_seg_put_val(curr_tach);
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	0e 94 32 0a 	call	0x1464	; 0x1464 <svn_seg_put_val>
			curr_tach_disp = (((uint32_t)curr_tach*16)/13000);
    1ca2:	7e 01       	movw	r14, r28
    1ca4:	00 e0       	ldi	r16, 0x00	; 0
    1ca6:	10 e0       	ldi	r17, 0x00	; 0
    1ca8:	b4 e0       	ldi	r27, 0x04	; 4
    1caa:	ee 0c       	add	r14, r14
    1cac:	ff 1c       	adc	r15, r15
    1cae:	00 1f       	adc	r16, r16
    1cb0:	11 1f       	adc	r17, r17
    1cb2:	ba 95       	dec	r27
    1cb4:	d1 f7       	brne	.-12     	; 0x1caa <__vector_9+0x8c>
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	b7 01       	movw	r22, r14
    1cba:	28 ec       	ldi	r18, 0xC8	; 200
    1cbc:	32 e3       	ldi	r19, 0x32	; 50
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	0e 94 38 10 	call	0x2070	; 0x2070 <__udivmodsi4>
    1cc6:	d2 2e       	mov	r13, r18
			if(curr_tach_disp != last_tach_disp)
    1cc8:	80 91 a4 01 	lds	r24, 0x01A4
    1ccc:	28 17       	cp	r18, r24
    1cce:	81 f0       	breq	.+32     	; 0x1cf0 <__vector_9+0xd2>
			{
				tach_out(min(((uint32_t)curr_tach*16)/13000,16));
    1cd0:	28 e4       	ldi	r18, 0x48	; 72
    1cd2:	e2 16       	cp	r14, r18
    1cd4:	2f e5       	ldi	r18, 0x5F	; 95
    1cd6:	f2 06       	cpc	r15, r18
    1cd8:	23 e0       	ldi	r18, 0x03	; 3
    1cda:	02 07       	cpc	r16, r18
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	12 07       	cpc	r17, r18
    1ce0:	10 f4       	brcc	.+4      	; 0x1ce6 <__vector_9+0xc8>
    1ce2:	8d 2d       	mov	r24, r13
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <__vector_9+0xca>
    1ce6:	80 e1       	ldi	r24, 0x10	; 16
    1ce8:	0e 94 39 0b 	call	0x1672	; 0x1672 <tach_out>
				last_tach_disp = curr_tach_disp;
    1cec:	d0 92 a4 01 	sts	0x01A4, r13
			}
			last_tach = curr_tach;
    1cf0:	d0 93 a3 01 	sts	0x01A3, r29
    1cf4:	c0 93 a2 01 	sts	0x01A2, r28
    1cf8:	10 e0       	ldi	r17, 0x00	; 0



		for(i = 0;i<10;i++)
		{
			handle_btn(i);
    1cfa:	81 2f       	mov	r24, r17
    1cfc:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <handle_btn>
			last_tach = curr_tach;
		}



		for(i = 0;i<10;i++)
    1d00:	1f 5f       	subi	r17, 0xFF	; 255
    1d02:	1a 30       	cpi	r17, 0x0A	; 10
    1d04:	d1 f7       	brne	.-12     	; 0x1cfa <__vector_9+0xdc>
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
		{
			if((leds.on | leds.blink_fst | leds.blink_slw) & _BV(i))
			{
				if(leds.rem[i] == LED_TIME_EXP)
				{
					leds.on &= ~_BV(i);
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	70 e0       	ldi	r23, 0x00	; 0


		// Check for expired led timer
		for(i = 0;i<8;i++)
		{
			if((leds.on | leds.blink_fst | leds.blink_slw) & _BV(i))
    1d0e:	80 91 c5 01 	lds	r24, 0x01C5
    1d12:	20 91 c7 01 	lds	r18, 0x01C7
    1d16:	90 91 c6 01 	lds	r25, 0x01C6
    1d1a:	28 2b       	or	r18, r24
    1d1c:	29 2b       	or	r18, r25
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	04 2e       	mov	r0, r20
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <__vector_9+0x10a>
    1d24:	35 95       	asr	r19
    1d26:	27 95       	ror	r18
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <__vector_9+0x106>
    1d2c:	20 ff       	sbrs	r18, 0
    1d2e:	2b c0       	rjmp	.+86     	; 0x1d86 <__vector_9+0x168>
			{
				if(leds.rem[i] == LED_TIME_EXP)
    1d30:	fa 01       	movw	r30, r20
    1d32:	ee 0f       	add	r30, r30
    1d34:	ff 1f       	adc	r31, r31
    1d36:	ed 53       	subi	r30, 0x3D	; 61
    1d38:	fe 4f       	sbci	r31, 0xFE	; 254
    1d3a:	85 81       	ldd	r24, Z+5	; 0x05
    1d3c:	96 81       	ldd	r25, Z+6	; 0x06
    1d3e:	89 2b       	or	r24, r25
    1d40:	c1 f4       	brne	.+48     	; 0x1d72 <__vector_9+0x154>
				{
					leds.on &= ~_BV(i);
    1d42:	20 91 c5 01 	lds	r18, 0x01C5
    1d46:	cb 01       	movw	r24, r22
    1d48:	04 2e       	mov	r0, r20
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <__vector_9+0x132>
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	0a 94       	dec	r0
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <__vector_9+0x12e>
    1d54:	80 95       	com	r24
    1d56:	28 23       	and	r18, r24
    1d58:	20 93 c5 01 	sts	0x01C5, r18
					leds.blink_fst &= ~_BV(i);
    1d5c:	20 91 c7 01 	lds	r18, 0x01C7
    1d60:	28 23       	and	r18, r24
    1d62:	20 93 c7 01 	sts	0x01C7, r18
					leds.blink_slw &= ~_BV(i);
    1d66:	20 91 c6 01 	lds	r18, 0x01C6
    1d6a:	82 23       	and	r24, r18
    1d6c:	80 93 c6 01 	sts	0x01C6, r24
    1d70:	0a c0       	rjmp	.+20     	; 0x1d86 <__vector_9+0x168>
				}
				else if(leds.rem[i] != LED_NO_TMR)
    1d72:	85 81       	ldd	r24, Z+5	; 0x05
    1d74:	96 81       	ldd	r25, Z+6	; 0x06
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <__vector_9+0x168>
				{
					leds.rem[i]--;
    1d7c:	85 81       	ldd	r24, Z+5	; 0x05
    1d7e:	96 81       	ldd	r25, Z+6	; 0x06
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	96 83       	std	Z+6, r25	; 0x06
    1d84:	85 83       	std	Z+5, r24	; 0x05
    1d86:	4f 5f       	subi	r20, 0xFF	; 255
    1d88:	5f 4f       	sbci	r21, 0xFF	; 255
			handle_btn(i);
		}


		// Check for expired led timer
		for(i = 0;i<8;i++)
    1d8a:	48 30       	cpi	r20, 0x08	; 8
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <__vector_9+0x174>
    1d90:	be cf       	rjmp	.-132    	; 0x1d0e <__vector_9+0xf0>
				}
			}
		}


		leds.curr &= (leds.blink_fst | leds.blink_slw|leds.on);
    1d92:	30 91 c3 01 	lds	r19, 0x01C3
    1d96:	20 91 c7 01 	lds	r18, 0x01C7
    1d9a:	80 91 c6 01 	lds	r24, 0x01C6
    1d9e:	90 91 c5 01 	lds	r25, 0x01C5
    1da2:	82 2b       	or	r24, r18
    1da4:	89 2b       	or	r24, r25
    1da6:	83 23       	and	r24, r19
    1da8:	80 93 c3 01 	sts	0x01C3, r24
		leds.curr |= leds.on;
    1dac:	90 91 c3 01 	lds	r25, 0x01C3
    1db0:	80 91 c5 01 	lds	r24, 0x01C5
    1db4:	89 2b       	or	r24, r25
    1db6:	80 93 c3 01 	sts	0x01C3, r24


		if((ui_cntr2 % 50) == 0)
    1dba:	80 91 a0 01 	lds	r24, 0x01A0
    1dbe:	90 91 a1 01 	lds	r25, 0x01A1
    1dc2:	62 e3       	ldi	r22, 0x32	; 50
    1dc4:	70 e0       	ldi	r23, 0x00	; 0
    1dc6:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1dca:	89 2b       	or	r24, r25
    1dcc:	39 f4       	brne	.+14     	; 0x1ddc <__vector_9+0x1be>
		{
			leds.curr ^= leds.blink_slw;
    1dce:	90 91 c3 01 	lds	r25, 0x01C3
    1dd2:	80 91 c6 01 	lds	r24, 0x01C6
    1dd6:	89 27       	eor	r24, r25
    1dd8:	80 93 c3 01 	sts	0x01C3, r24
		}

		if((ui_cntr2 % 10) == 0)
    1ddc:	80 91 a0 01 	lds	r24, 0x01A0
    1de0:	90 91 a1 01 	lds	r25, 0x01A1
    1de4:	6a e0       	ldi	r22, 0x0A	; 10
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1dec:	89 2b       	or	r24, r25
    1dee:	39 f4       	brne	.+14     	; 0x1dfe <__vector_9+0x1e0>
		{
			leds.curr ^= leds.blink_fst;
    1df0:	90 91 c3 01 	lds	r25, 0x01C3
    1df4:	80 91 c7 01 	lds	r24, 0x01C7
    1df8:	89 27       	eor	r24, r25
    1dfa:	80 93 c3 01 	sts	0x01C3, r24
		}

		PORTC &= ~(leds.curr);
    1dfe:	98 b1       	in	r25, 0x08	; 8
    1e00:	80 91 c3 01 	lds	r24, 0x01C3
    1e04:	80 95       	com	r24
    1e06:	89 23       	and	r24, r25
    1e08:	88 b9       	out	0x08, r24	; 8
	}

}
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	bf 91       	pop	r27
    1e14:	af 91       	pop	r26
    1e16:	9f 91       	pop	r25
    1e18:	8f 91       	pop	r24
    1e1a:	7f 91       	pop	r23
    1e1c:	6f 91       	pop	r22
    1e1e:	5f 91       	pop	r21
    1e20:	4f 91       	pop	r20
    1e22:	3f 91       	pop	r19
    1e24:	2f 91       	pop	r18
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	0f 90       	pop	r0
    1e32:	0b be       	out	0x3b, r0	; 59
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <ui_init>:
{
	uint8_t i;

	char str[10];

	glcd_init();
    1e3e:	0e 94 1f 09 	call	0x123e	; 0x123e <glcd_init>

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1e42:	20 e2       	ldi	r18, 0x20	; 32
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	30 93 da 01 	sts	0x01DA, r19
    1e4a:	20 93 d9 01 	sts	0x01D9, r18
	btns[idx].pin = pn;
    1e4e:	10 92 db 01 	sts	0x01DB, r1
	btns[idx].state = BTN_STATE_START;
    1e52:	10 92 dc 01 	sts	0x01DC, r1
	btns[idx].pshd = p;
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	90 93 dd 01 	sts	0x01DD, r25
	btns[idx].held = h;
    1e5c:	81 e1       	ldi	r24, 0x11	; 17
    1e5e:	80 93 de 01 	sts	0x01DE, r24
	btns[idx].hcnt = 0;
    1e62:	10 92 df 01 	sts	0x01DF, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1e66:	30 93 e1 01 	sts	0x01E1, r19
    1e6a:	20 93 e0 01 	sts	0x01E0, r18
	btns[idx].pin = pn;
    1e6e:	90 93 e2 01 	sts	0x01E2, r25
	btns[idx].state = BTN_STATE_START;
    1e72:	10 92 e3 01 	sts	0x01E3, r1
	btns[idx].pshd = p;
    1e76:	52 e0       	ldi	r21, 0x02	; 2
    1e78:	50 93 e4 01 	sts	0x01E4, r21
	btns[idx].held = h;
    1e7c:	82 e1       	ldi	r24, 0x12	; 18
    1e7e:	80 93 e5 01 	sts	0x01E5, r24
	btns[idx].hcnt = 0;
    1e82:	10 92 e6 01 	sts	0x01E6, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1e86:	30 93 e8 01 	sts	0x01E8, r19
    1e8a:	20 93 e7 01 	sts	0x01E7, r18
	btns[idx].pin = pn;
    1e8e:	50 93 e9 01 	sts	0x01E9, r21
	btns[idx].state = BTN_STATE_START;
    1e92:	10 92 ea 01 	sts	0x01EA, r1
	btns[idx].pshd = p;
    1e96:	93 e0       	ldi	r25, 0x03	; 3
    1e98:	90 93 eb 01 	sts	0x01EB, r25
	btns[idx].held = h;
    1e9c:	83 e1       	ldi	r24, 0x13	; 19
    1e9e:	80 93 ec 01 	sts	0x01EC, r24
	btns[idx].hcnt = 0;
    1ea2:	10 92 ed 01 	sts	0x01ED, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1ea6:	30 93 ef 01 	sts	0x01EF, r19
    1eaa:	20 93 ee 01 	sts	0x01EE, r18
	btns[idx].pin = pn;
    1eae:	90 93 f0 01 	sts	0x01F0, r25
	btns[idx].state = BTN_STATE_START;
    1eb2:	10 92 f1 01 	sts	0x01F1, r1
	btns[idx].pshd = p;
    1eb6:	94 e0       	ldi	r25, 0x04	; 4
    1eb8:	90 93 f2 01 	sts	0x01F2, r25
	btns[idx].held = h;
    1ebc:	84 e1       	ldi	r24, 0x14	; 20
    1ebe:	80 93 f3 01 	sts	0x01F3, r24
	btns[idx].hcnt = 0;
    1ec2:	10 92 f4 01 	sts	0x01F4, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1ec6:	30 93 f6 01 	sts	0x01F6, r19
    1eca:	20 93 f5 01 	sts	0x01F5, r18
	btns[idx].pin = pn;
    1ece:	90 93 f7 01 	sts	0x01F7, r25
	btns[idx].state = BTN_STATE_START;
    1ed2:	10 92 f8 01 	sts	0x01F8, r1
	btns[idx].pshd = p;
    1ed6:	95 e0       	ldi	r25, 0x05	; 5
    1ed8:	90 93 f9 01 	sts	0x01F9, r25
	btns[idx].held = h;
    1edc:	85 e1       	ldi	r24, 0x15	; 21
    1ede:	80 93 fa 01 	sts	0x01FA, r24
	btns[idx].hcnt = 0;
    1ee2:	10 92 fb 01 	sts	0x01FB, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1ee6:	30 93 fd 01 	sts	0x01FD, r19
    1eea:	20 93 fc 01 	sts	0x01FC, r18
	btns[idx].pin = pn;
    1eee:	90 93 fe 01 	sts	0x01FE, r25
	btns[idx].state = BTN_STATE_START;
    1ef2:	10 92 ff 01 	sts	0x01FF, r1
	btns[idx].pshd = p;
    1ef6:	46 e0       	ldi	r20, 0x06	; 6
    1ef8:	40 93 00 02 	sts	0x0200, r20
	btns[idx].held = h;
    1efc:	86 e1       	ldi	r24, 0x16	; 22
    1efe:	80 93 01 02 	sts	0x0201, r24
	btns[idx].hcnt = 0;
    1f02:	10 92 02 02 	sts	0x0202, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f06:	30 93 04 02 	sts	0x0204, r19
    1f0a:	20 93 03 02 	sts	0x0203, r18
	btns[idx].pin = pn;
    1f0e:	40 93 05 02 	sts	0x0205, r20
	btns[idx].state = BTN_STATE_START;
    1f12:	10 92 06 02 	sts	0x0206, r1
	btns[idx].pshd = p;
    1f16:	97 e0       	ldi	r25, 0x07	; 7
    1f18:	90 93 07 02 	sts	0x0207, r25
	btns[idx].held = h;
    1f1c:	87 e1       	ldi	r24, 0x17	; 23
    1f1e:	80 93 08 02 	sts	0x0208, r24
	btns[idx].hcnt = 0;
    1f22:	10 92 09 02 	sts	0x0209, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f26:	30 93 0b 02 	sts	0x020B, r19
    1f2a:	20 93 0a 02 	sts	0x020A, r18
	btns[idx].pin = pn;
    1f2e:	90 93 0c 02 	sts	0x020C, r25
	btns[idx].state = BTN_STATE_START;
    1f32:	10 92 0d 02 	sts	0x020D, r1
	btns[idx].pshd = p;
    1f36:	88 e0       	ldi	r24, 0x08	; 8
    1f38:	80 93 0e 02 	sts	0x020E, r24
	btns[idx].held = h;
    1f3c:	88 e1       	ldi	r24, 0x18	; 24
    1f3e:	80 93 0f 02 	sts	0x020F, r24
	btns[idx].hcnt = 0;
    1f42:	10 92 10 02 	sts	0x0210, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f46:	23 e2       	ldi	r18, 0x23	; 35
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	30 93 12 02 	sts	0x0212, r19
    1f4e:	20 93 11 02 	sts	0x0211, r18
	btns[idx].pin = pn;
    1f52:	90 93 13 02 	sts	0x0213, r25
	btns[idx].state = BTN_STATE_START;
    1f56:	10 92 14 02 	sts	0x0214, r1
	btns[idx].pshd = p;
    1f5a:	89 e0       	ldi	r24, 0x09	; 9
    1f5c:	80 93 15 02 	sts	0x0215, r24
	btns[idx].held = h;
    1f60:	89 e1       	ldi	r24, 0x19	; 25
    1f62:	80 93 16 02 	sts	0x0216, r24
	btns[idx].hcnt = 0;
    1f66:	10 92 17 02 	sts	0x0217, r1

#define min(a,b) ((a > b) ?   (b) : (a))

void btn_init(uint8_t idx,volatile uint8_t *prt,uint8_t pn,uint8_t p,uint8_t h)
{
	btns[idx].port = prt;
    1f6a:	30 93 19 02 	sts	0x0219, r19
    1f6e:	20 93 18 02 	sts	0x0218, r18
	btns[idx].pin = pn;
    1f72:	40 93 1a 02 	sts	0x021A, r20
	btns[idx].state = BTN_STATE_START;
    1f76:	10 92 1b 02 	sts	0x021B, r1
	btns[idx].pshd = p;
    1f7a:	8a e0       	ldi	r24, 0x0A	; 10
    1f7c:	80 93 1c 02 	sts	0x021C, r24
	btns[idx].held = h;
    1f80:	8a e1       	ldi	r24, 0x1A	; 26
    1f82:	80 93 1d 02 	sts	0x021D, r24
	btns[idx].hcnt = 0;
    1f86:	10 92 1e 02 	sts	0x021E, r1
	btn_init(6,&BTN_L_PINS,BTN_L,BTN_L_PSHD,BTN_L_HELD);
	btn_init(7,&BTN_R_PINS,BTN_R,BTN_R_PSHD,BTN_R_HELD);
	btn_init(8,&BTN_C_PINS,BTN_C,BTN_C_PSHD,BTN_C_HELD);
	btn_init(9,&BTN_E_PINS,BTN_E,BTN_E_PSHD,BTN_E_HELD);

	BTN_GP1_PORT = 0xFF;
    1f8a:	9f ef       	ldi	r25, 0xFF	; 255
    1f8c:	92 b9       	out	0x02, r25	; 2
	BTN_GP2_PORT |= _BV(BTN_E)|_BV(BTN_C);
    1f8e:	85 b1       	in	r24, 0x05	; 5
    1f90:	80 6c       	ori	r24, 0xC0	; 192
    1f92:	85 b9       	out	0x05, r24	; 5

	ENC_A_PORT |= _BV(ENC_A);
    1f94:	59 9a       	sbi	0x0b, 1	; 11
	ENC_B_PORT |= _BV(ENC_B);
    1f96:	58 9a       	sbi	0x0b, 0	; 11

	enc.a = 0;
    1f98:	10 92 ae 01 	sts	0x01AE, r1
	enc.b = 0;
    1f9c:	10 92 af 01 	sts	0x01AF, r1

	enc.hist.buf[3] = 2;
    1fa0:	50 93 ad 01 	sts	0x01AD, r21
	enc.hist.buf[2] = 2;
    1fa4:	50 93 ac 01 	sts	0x01AC, r21
	enc.hist.buf[1] = 2;
    1fa8:	50 93 ab 01 	sts	0x01AB, r21
	enc.hist.buf[0] = 2;
    1fac:	50 93 aa 01 	sts	0x01AA, r21
	enc.val = 0;
    1fb0:	10 92 b1 01 	sts	0x01B1, r1

	enc.cnt = 0;
    1fb4:	10 92 b3 01 	sts	0x01B3, r1

	last_btn = BTN_NONE_PSHD;
    1fb8:	10 92 a9 01 	sts	0x01A9, r1

	// Leds
	LED_PORT = 0xFF;
    1fbc:	98 b9       	out	0x08, r25	; 8
	LED_DDR = 0xFF;
    1fbe:	97 b9       	out	0x07, r25	; 7
	leds.curr = 0;
    1fc0:	10 92 c3 01 	sts	0x01C3, r1
	leds.on = 0;
    1fc4:	10 92 c5 01 	sts	0x01C5, r1
	leds.blink_slw = 0;
    1fc8:	10 92 c6 01 	sts	0x01C6, r1
	leds.blink_fst = 0;
    1fcc:	10 92 c7 01 	sts	0x01C7, r1
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0

	for(i = 0;i<8;i++)
	{
		leds.rem[i] = LED_NO_TMR;
    1fd4:	2f ef       	ldi	r18, 0xFF	; 255
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	fc 01       	movw	r30, r24
    1fda:	ee 0f       	add	r30, r30
    1fdc:	ff 1f       	adc	r31, r31
    1fde:	ed 53       	subi	r30, 0x3D	; 61
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	36 83       	std	Z+6, r19	; 0x06
    1fe4:	25 83       	std	Z+5, r18	; 0x05
    1fe6:	01 96       	adiw	r24, 0x01	; 1
	leds.curr = 0;
	leds.on = 0;
	leds.blink_slw = 0;
	leds.blink_fst = 0;

	for(i = 0;i<8;i++)
    1fe8:	88 30       	cpi	r24, 0x08	; 8
    1fea:	91 05       	cpc	r25, r1
    1fec:	a9 f7       	brne	.-22     	; 0x1fd8 <ui_init+0x19a>
		leds.rem[i] = LED_NO_TMR;
	}


	// Tach Leds
	tach_init();
    1fee:	0e 94 47 0b 	call	0x168e	; 0x168e <tach_init>
	tach_off();
    1ff2:	2d 9a       	sbi	0x05, 5	; 5
	tach_out(0);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	0e 94 39 0b 	call	0x1672	; 0x1672 <tach_out>

	// Seven Segment
	svn_seg_init();
    1ffa:	0e 94 76 0a 	call	0x14ec	; 0x14ec <svn_seg_init>
    1ffe:	80 e4       	ldi	r24, 0x40	; 64
    2000:	9c e9       	ldi	r25, 0x9C	; 156
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <ui_init+0x1c4>
	TIMSK0 = 0x03;	// Output Compare interrupt
	TCCR0A = 0x04;
	*/

	// Setup UI General Timer
	ui_cntr2 = 0;
    2006:	10 92 a1 01 	sts	0x01A1, r1
    200a:	10 92 a0 01 	sts	0x01A0, r1
	OCR2A = 156;
    200e:	8c e9       	ldi	r24, 0x9C	; 156
    2010:	80 93 b3 00 	sts	0x00B3, r24
	TIMSK2 = 0x02;
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	80 93 70 00 	sts	0x0070, r24
	TCCR2A = 0x0F;
    201a:	8f e0       	ldi	r24, 0x0F	; 15
    201c:	80 93 b0 00 	sts	0x00B0, r24
}
    2020:	08 95       	ret

00002022 <__udivmodhi4>:
    2022:	aa 1b       	sub	r26, r26
    2024:	bb 1b       	sub	r27, r27
    2026:	51 e1       	ldi	r21, 0x11	; 17
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <__udivmodhi4_ep>

0000202a <__udivmodhi4_loop>:
    202a:	aa 1f       	adc	r26, r26
    202c:	bb 1f       	adc	r27, r27
    202e:	a6 17       	cp	r26, r22
    2030:	b7 07       	cpc	r27, r23
    2032:	10 f0       	brcs	.+4      	; 0x2038 <__udivmodhi4_ep>
    2034:	a6 1b       	sub	r26, r22
    2036:	b7 0b       	sbc	r27, r23

00002038 <__udivmodhi4_ep>:
    2038:	88 1f       	adc	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	5a 95       	dec	r21
    203e:	a9 f7       	brne	.-22     	; 0x202a <__udivmodhi4_loop>
    2040:	80 95       	com	r24
    2042:	90 95       	com	r25
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	08 95       	ret

0000204a <__divmodhi4>:
    204a:	97 fb       	bst	r25, 7
    204c:	09 2e       	mov	r0, r25
    204e:	07 26       	eor	r0, r23
    2050:	0a d0       	rcall	.+20     	; 0x2066 <__divmodhi4_neg1>
    2052:	77 fd       	sbrc	r23, 7
    2054:	04 d0       	rcall	.+8      	; 0x205e <__divmodhi4_neg2>
    2056:	e5 df       	rcall	.-54     	; 0x2022 <__udivmodhi4>
    2058:	06 d0       	rcall	.+12     	; 0x2066 <__divmodhi4_neg1>
    205a:	00 20       	and	r0, r0
    205c:	1a f4       	brpl	.+6      	; 0x2064 <__divmodhi4_exit>

0000205e <__divmodhi4_neg2>:
    205e:	70 95       	com	r23
    2060:	61 95       	neg	r22
    2062:	7f 4f       	sbci	r23, 0xFF	; 255

00002064 <__divmodhi4_exit>:
    2064:	08 95       	ret

00002066 <__divmodhi4_neg1>:
    2066:	f6 f7       	brtc	.-4      	; 0x2064 <__divmodhi4_exit>
    2068:	90 95       	com	r25
    206a:	81 95       	neg	r24
    206c:	9f 4f       	sbci	r25, 0xFF	; 255
    206e:	08 95       	ret

00002070 <__udivmodsi4>:
    2070:	a1 e2       	ldi	r26, 0x21	; 33
    2072:	1a 2e       	mov	r1, r26
    2074:	aa 1b       	sub	r26, r26
    2076:	bb 1b       	sub	r27, r27
    2078:	fd 01       	movw	r30, r26
    207a:	0d c0       	rjmp	.+26     	; 0x2096 <__udivmodsi4_ep>

0000207c <__udivmodsi4_loop>:
    207c:	aa 1f       	adc	r26, r26
    207e:	bb 1f       	adc	r27, r27
    2080:	ee 1f       	adc	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	a2 17       	cp	r26, r18
    2086:	b3 07       	cpc	r27, r19
    2088:	e4 07       	cpc	r30, r20
    208a:	f5 07       	cpc	r31, r21
    208c:	20 f0       	brcs	.+8      	; 0x2096 <__udivmodsi4_ep>
    208e:	a2 1b       	sub	r26, r18
    2090:	b3 0b       	sbc	r27, r19
    2092:	e4 0b       	sbc	r30, r20
    2094:	f5 0b       	sbc	r31, r21

00002096 <__udivmodsi4_ep>:
    2096:	66 1f       	adc	r22, r22
    2098:	77 1f       	adc	r23, r23
    209a:	88 1f       	adc	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	1a 94       	dec	r1
    20a0:	69 f7       	brne	.-38     	; 0x207c <__udivmodsi4_loop>
    20a2:	60 95       	com	r22
    20a4:	70 95       	com	r23
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	9b 01       	movw	r18, r22
    20ac:	ac 01       	movw	r20, r24
    20ae:	bd 01       	movw	r22, r26
    20b0:	cf 01       	movw	r24, r30
    20b2:	08 95       	ret

000020b4 <fputs>:
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	7c 01       	movw	r14, r24
    20c2:	8b 01       	movw	r16, r22
    20c4:	db 01       	movw	r26, r22
    20c6:	13 96       	adiw	r26, 0x03	; 3
    20c8:	8c 91       	ld	r24, X
    20ca:	81 fd       	sbrc	r24, 1
    20cc:	03 c0       	rjmp	.+6      	; 0x20d4 <fputs+0x20>
    20ce:	cf ef       	ldi	r28, 0xFF	; 255
    20d0:	df ef       	ldi	r29, 0xFF	; 255
    20d2:	13 c0       	rjmp	.+38     	; 0x20fa <fputs+0x46>
    20d4:	c0 e0       	ldi	r28, 0x00	; 0
    20d6:	d0 e0       	ldi	r29, 0x00	; 0
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <fputs+0x3c>
    20da:	d8 01       	movw	r26, r16
    20dc:	18 96       	adiw	r26, 0x08	; 8
    20de:	ed 91       	ld	r30, X+
    20e0:	fc 91       	ld	r31, X
    20e2:	19 97       	sbiw	r26, 0x09	; 9
    20e4:	b8 01       	movw	r22, r16
    20e6:	09 95       	icall
    20e8:	89 2b       	or	r24, r25
    20ea:	11 f0       	breq	.+4      	; 0x20f0 <fputs+0x3c>
    20ec:	cf ef       	ldi	r28, 0xFF	; 255
    20ee:	df ef       	ldi	r29, 0xFF	; 255
    20f0:	f7 01       	movw	r30, r14
    20f2:	81 91       	ld	r24, Z+
    20f4:	7f 01       	movw	r14, r30
    20f6:	88 23       	and	r24, r24
    20f8:	81 f7       	brne	.-32     	; 0x20da <fputs+0x26>
    20fa:	ce 01       	movw	r24, r28
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	08 95       	ret

0000210a <printf>:
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	fe 01       	movw	r30, r28
    2114:	35 96       	adiw	r30, 0x05	; 5
    2116:	61 91       	ld	r22, Z+
    2118:	71 91       	ld	r23, Z+
    211a:	80 91 84 03 	lds	r24, 0x0384
    211e:	90 91 85 03 	lds	r25, 0x0385
    2122:	af 01       	movw	r20, r30
    2124:	0e 94 c8 10 	call	0x2190	; 0x2190 <vfprintf>
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <sprintf>:
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
    213a:	2e 97       	sbiw	r28, 0x0e	; 14
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	0d 89       	ldd	r16, Y+21	; 0x15
    2148:	1e 89       	ldd	r17, Y+22	; 0x16
    214a:	86 e0       	ldi	r24, 0x06	; 6
    214c:	8c 83       	std	Y+4, r24	; 0x04
    214e:	1a 83       	std	Y+2, r17	; 0x02
    2150:	09 83       	std	Y+1, r16	; 0x01
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	9f e7       	ldi	r25, 0x7F	; 127
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	9e 01       	movw	r18, r28
    215c:	27 5e       	subi	r18, 0xE7	; 231
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	ce 01       	movw	r24, r28
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	6f 89       	ldd	r22, Y+23	; 0x17
    2166:	78 8d       	ldd	r23, Y+24	; 0x18
    2168:	a9 01       	movw	r20, r18
    216a:	0e 94 c8 10 	call	0x2190	; 0x2190 <vfprintf>
    216e:	2f 81       	ldd	r18, Y+7	; 0x07
    2170:	38 85       	ldd	r19, Y+8	; 0x08
    2172:	02 0f       	add	r16, r18
    2174:	13 1f       	adc	r17, r19
    2176:	f8 01       	movw	r30, r16
    2178:	10 82       	st	Z, r1
    217a:	2e 96       	adiw	r28, 0x0e	; 14
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <vfprintf>:
    2190:	2f 92       	push	r2
    2192:	3f 92       	push	r3
    2194:	4f 92       	push	r4
    2196:	5f 92       	push	r5
    2198:	6f 92       	push	r6
    219a:	7f 92       	push	r7
    219c:	8f 92       	push	r8
    219e:	9f 92       	push	r9
    21a0:	af 92       	push	r10
    21a2:	bf 92       	push	r11
    21a4:	cf 92       	push	r12
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	2b 97       	sbiw	r28, 0x0b	; 11
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	3c 01       	movw	r6, r24
    21c6:	2b 01       	movw	r4, r22
    21c8:	5a 01       	movw	r10, r20
    21ca:	fc 01       	movw	r30, r24
    21cc:	17 82       	std	Z+7, r1	; 0x07
    21ce:	16 82       	std	Z+6, r1	; 0x06
    21d0:	83 81       	ldd	r24, Z+3	; 0x03
    21d2:	81 fd       	sbrc	r24, 1
    21d4:	03 c0       	rjmp	.+6      	; 0x21dc <vfprintf+0x4c>
    21d6:	6f ef       	ldi	r22, 0xFF	; 255
    21d8:	7f ef       	ldi	r23, 0xFF	; 255
    21da:	c6 c1       	rjmp	.+908    	; 0x2568 <vfprintf+0x3d8>
    21dc:	9a e0       	ldi	r25, 0x0A	; 10
    21de:	89 2e       	mov	r8, r25
    21e0:	1e 01       	movw	r2, r28
    21e2:	08 94       	sec
    21e4:	21 1c       	adc	r2, r1
    21e6:	31 1c       	adc	r3, r1
    21e8:	f3 01       	movw	r30, r6
    21ea:	23 81       	ldd	r18, Z+3	; 0x03
    21ec:	f2 01       	movw	r30, r4
    21ee:	23 fd       	sbrc	r18, 3
    21f0:	85 91       	lpm	r24, Z+
    21f2:	23 ff       	sbrs	r18, 3
    21f4:	81 91       	ld	r24, Z+
    21f6:	2f 01       	movw	r4, r30
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <vfprintf+0x6e>
    21fc:	b2 c1       	rjmp	.+868    	; 0x2562 <vfprintf+0x3d2>
    21fe:	85 32       	cpi	r24, 0x25	; 37
    2200:	39 f4       	brne	.+14     	; 0x2210 <vfprintf+0x80>
    2202:	23 fd       	sbrc	r18, 3
    2204:	85 91       	lpm	r24, Z+
    2206:	23 ff       	sbrs	r18, 3
    2208:	81 91       	ld	r24, Z+
    220a:	2f 01       	movw	r4, r30
    220c:	85 32       	cpi	r24, 0x25	; 37
    220e:	29 f4       	brne	.+10     	; 0x221a <vfprintf+0x8a>
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	b3 01       	movw	r22, r6
    2214:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    2218:	e7 cf       	rjmp	.-50     	; 0x21e8 <vfprintf+0x58>
    221a:	98 2f       	mov	r25, r24
    221c:	ff 24       	eor	r15, r15
    221e:	ee 24       	eor	r14, r14
    2220:	99 24       	eor	r9, r9
    2222:	ff e1       	ldi	r31, 0x1F	; 31
    2224:	ff 15       	cp	r31, r15
    2226:	d0 f0       	brcs	.+52     	; 0x225c <vfprintf+0xcc>
    2228:	9b 32       	cpi	r25, 0x2B	; 43
    222a:	69 f0       	breq	.+26     	; 0x2246 <vfprintf+0xb6>
    222c:	9c 32       	cpi	r25, 0x2C	; 44
    222e:	28 f4       	brcc	.+10     	; 0x223a <vfprintf+0xaa>
    2230:	90 32       	cpi	r25, 0x20	; 32
    2232:	59 f0       	breq	.+22     	; 0x224a <vfprintf+0xba>
    2234:	93 32       	cpi	r25, 0x23	; 35
    2236:	91 f4       	brne	.+36     	; 0x225c <vfprintf+0xcc>
    2238:	0e c0       	rjmp	.+28     	; 0x2256 <vfprintf+0xc6>
    223a:	9d 32       	cpi	r25, 0x2D	; 45
    223c:	49 f0       	breq	.+18     	; 0x2250 <vfprintf+0xc0>
    223e:	90 33       	cpi	r25, 0x30	; 48
    2240:	69 f4       	brne	.+26     	; 0x225c <vfprintf+0xcc>
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	24 c0       	rjmp	.+72     	; 0x228e <vfprintf+0xfe>
    2246:	52 e0       	ldi	r21, 0x02	; 2
    2248:	f5 2a       	or	r15, r21
    224a:	84 e0       	ldi	r24, 0x04	; 4
    224c:	f8 2a       	or	r15, r24
    224e:	28 c0       	rjmp	.+80     	; 0x22a0 <vfprintf+0x110>
    2250:	98 e0       	ldi	r25, 0x08	; 8
    2252:	f9 2a       	or	r15, r25
    2254:	25 c0       	rjmp	.+74     	; 0x22a0 <vfprintf+0x110>
    2256:	e0 e1       	ldi	r30, 0x10	; 16
    2258:	fe 2a       	or	r15, r30
    225a:	22 c0       	rjmp	.+68     	; 0x22a0 <vfprintf+0x110>
    225c:	f7 fc       	sbrc	r15, 7
    225e:	29 c0       	rjmp	.+82     	; 0x22b2 <vfprintf+0x122>
    2260:	89 2f       	mov	r24, r25
    2262:	80 53       	subi	r24, 0x30	; 48
    2264:	8a 30       	cpi	r24, 0x0A	; 10
    2266:	70 f4       	brcc	.+28     	; 0x2284 <vfprintf+0xf4>
    2268:	f6 fe       	sbrs	r15, 6
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <vfprintf+0xe6>
    226c:	98 9c       	mul	r9, r8
    226e:	90 2c       	mov	r9, r0
    2270:	11 24       	eor	r1, r1
    2272:	98 0e       	add	r9, r24
    2274:	15 c0       	rjmp	.+42     	; 0x22a0 <vfprintf+0x110>
    2276:	e8 9c       	mul	r14, r8
    2278:	e0 2c       	mov	r14, r0
    227a:	11 24       	eor	r1, r1
    227c:	e8 0e       	add	r14, r24
    227e:	f0 e2       	ldi	r31, 0x20	; 32
    2280:	ff 2a       	or	r15, r31
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <vfprintf+0x110>
    2284:	9e 32       	cpi	r25, 0x2E	; 46
    2286:	29 f4       	brne	.+10     	; 0x2292 <vfprintf+0x102>
    2288:	f6 fc       	sbrc	r15, 6
    228a:	6b c1       	rjmp	.+726    	; 0x2562 <vfprintf+0x3d2>
    228c:	40 e4       	ldi	r20, 0x40	; 64
    228e:	f4 2a       	or	r15, r20
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <vfprintf+0x110>
    2292:	9c 36       	cpi	r25, 0x6C	; 108
    2294:	19 f4       	brne	.+6      	; 0x229c <vfprintf+0x10c>
    2296:	50 e8       	ldi	r21, 0x80	; 128
    2298:	f5 2a       	or	r15, r21
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <vfprintf+0x110>
    229c:	98 36       	cpi	r25, 0x68	; 104
    229e:	49 f4       	brne	.+18     	; 0x22b2 <vfprintf+0x122>
    22a0:	f2 01       	movw	r30, r4
    22a2:	23 fd       	sbrc	r18, 3
    22a4:	95 91       	lpm	r25, Z+
    22a6:	23 ff       	sbrs	r18, 3
    22a8:	91 91       	ld	r25, Z+
    22aa:	2f 01       	movw	r4, r30
    22ac:	99 23       	and	r25, r25
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <vfprintf+0x122>
    22b0:	b8 cf       	rjmp	.-144    	; 0x2222 <vfprintf+0x92>
    22b2:	89 2f       	mov	r24, r25
    22b4:	85 54       	subi	r24, 0x45	; 69
    22b6:	83 30       	cpi	r24, 0x03	; 3
    22b8:	18 f0       	brcs	.+6      	; 0x22c0 <vfprintf+0x130>
    22ba:	80 52       	subi	r24, 0x20	; 32
    22bc:	83 30       	cpi	r24, 0x03	; 3
    22be:	38 f4       	brcc	.+14     	; 0x22ce <vfprintf+0x13e>
    22c0:	44 e0       	ldi	r20, 0x04	; 4
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	a4 0e       	add	r10, r20
    22c6:	b5 1e       	adc	r11, r21
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	59 83       	std	Y+1, r21	; 0x01
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <vfprintf+0x15c>
    22ce:	93 36       	cpi	r25, 0x63	; 99
    22d0:	31 f0       	breq	.+12     	; 0x22de <vfprintf+0x14e>
    22d2:	93 37       	cpi	r25, 0x73	; 115
    22d4:	79 f0       	breq	.+30     	; 0x22f4 <vfprintf+0x164>
    22d6:	93 35       	cpi	r25, 0x53	; 83
    22d8:	09 f0       	breq	.+2      	; 0x22dc <vfprintf+0x14c>
    22da:	56 c0       	rjmp	.+172    	; 0x2388 <vfprintf+0x1f8>
    22dc:	20 c0       	rjmp	.+64     	; 0x231e <vfprintf+0x18e>
    22de:	f5 01       	movw	r30, r10
    22e0:	80 81       	ld	r24, Z
    22e2:	89 83       	std	Y+1, r24	; 0x01
    22e4:	42 e0       	ldi	r20, 0x02	; 2
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	a4 0e       	add	r10, r20
    22ea:	b5 1e       	adc	r11, r21
    22ec:	61 01       	movw	r12, r2
    22ee:	01 e0       	ldi	r16, 0x01	; 1
    22f0:	10 e0       	ldi	r17, 0x00	; 0
    22f2:	12 c0       	rjmp	.+36     	; 0x2318 <vfprintf+0x188>
    22f4:	f5 01       	movw	r30, r10
    22f6:	c0 80       	ld	r12, Z
    22f8:	d1 80       	ldd	r13, Z+1	; 0x01
    22fa:	f6 fc       	sbrc	r15, 6
    22fc:	03 c0       	rjmp	.+6      	; 0x2304 <vfprintf+0x174>
    22fe:	6f ef       	ldi	r22, 0xFF	; 255
    2300:	7f ef       	ldi	r23, 0xFF	; 255
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <vfprintf+0x178>
    2304:	69 2d       	mov	r22, r9
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	42 e0       	ldi	r20, 0x02	; 2
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	a4 0e       	add	r10, r20
    230e:	b5 1e       	adc	r11, r21
    2310:	c6 01       	movw	r24, r12
    2312:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <strnlen>
    2316:	8c 01       	movw	r16, r24
    2318:	5f e7       	ldi	r21, 0x7F	; 127
    231a:	f5 22       	and	r15, r21
    231c:	14 c0       	rjmp	.+40     	; 0x2346 <vfprintf+0x1b6>
    231e:	f5 01       	movw	r30, r10
    2320:	c0 80       	ld	r12, Z
    2322:	d1 80       	ldd	r13, Z+1	; 0x01
    2324:	f6 fc       	sbrc	r15, 6
    2326:	03 c0       	rjmp	.+6      	; 0x232e <vfprintf+0x19e>
    2328:	6f ef       	ldi	r22, 0xFF	; 255
    232a:	7f ef       	ldi	r23, 0xFF	; 255
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <vfprintf+0x1a2>
    232e:	69 2d       	mov	r22, r9
    2330:	70 e0       	ldi	r23, 0x00	; 0
    2332:	42 e0       	ldi	r20, 0x02	; 2
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	a4 0e       	add	r10, r20
    2338:	b5 1e       	adc	r11, r21
    233a:	c6 01       	movw	r24, r12
    233c:	0e 94 ce 12 	call	0x259c	; 0x259c <strnlen_P>
    2340:	8c 01       	movw	r16, r24
    2342:	50 e8       	ldi	r21, 0x80	; 128
    2344:	f5 2a       	or	r15, r21
    2346:	f3 fe       	sbrs	r15, 3
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <vfprintf+0x1c8>
    234a:	1a c0       	rjmp	.+52     	; 0x2380 <vfprintf+0x1f0>
    234c:	80 e2       	ldi	r24, 0x20	; 32
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	b3 01       	movw	r22, r6
    2352:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    2356:	ea 94       	dec	r14
    2358:	8e 2d       	mov	r24, r14
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	08 17       	cp	r16, r24
    235e:	19 07       	cpc	r17, r25
    2360:	a8 f3       	brcs	.-22     	; 0x234c <vfprintf+0x1bc>
    2362:	0e c0       	rjmp	.+28     	; 0x2380 <vfprintf+0x1f0>
    2364:	f6 01       	movw	r30, r12
    2366:	f7 fc       	sbrc	r15, 7
    2368:	85 91       	lpm	r24, Z+
    236a:	f7 fe       	sbrs	r15, 7
    236c:	81 91       	ld	r24, Z+
    236e:	6f 01       	movw	r12, r30
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	b3 01       	movw	r22, r6
    2374:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    2378:	e1 10       	cpse	r14, r1
    237a:	ea 94       	dec	r14
    237c:	01 50       	subi	r16, 0x01	; 1
    237e:	10 40       	sbci	r17, 0x00	; 0
    2380:	01 15       	cp	r16, r1
    2382:	11 05       	cpc	r17, r1
    2384:	79 f7       	brne	.-34     	; 0x2364 <vfprintf+0x1d4>
    2386:	ea c0       	rjmp	.+468    	; 0x255c <vfprintf+0x3cc>
    2388:	94 36       	cpi	r25, 0x64	; 100
    238a:	11 f0       	breq	.+4      	; 0x2390 <vfprintf+0x200>
    238c:	99 36       	cpi	r25, 0x69	; 105
    238e:	69 f5       	brne	.+90     	; 0x23ea <vfprintf+0x25a>
    2390:	f7 fe       	sbrs	r15, 7
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <vfprintf+0x214>
    2394:	f5 01       	movw	r30, r10
    2396:	20 81       	ld	r18, Z
    2398:	31 81       	ldd	r19, Z+1	; 0x01
    239a:	42 81       	ldd	r20, Z+2	; 0x02
    239c:	53 81       	ldd	r21, Z+3	; 0x03
    239e:	84 e0       	ldi	r24, 0x04	; 4
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0a c0       	rjmp	.+20     	; 0x23b8 <vfprintf+0x228>
    23a4:	f5 01       	movw	r30, r10
    23a6:	80 81       	ld	r24, Z
    23a8:	91 81       	ldd	r25, Z+1	; 0x01
    23aa:	9c 01       	movw	r18, r24
    23ac:	44 27       	eor	r20, r20
    23ae:	37 fd       	sbrc	r19, 7
    23b0:	40 95       	com	r20
    23b2:	54 2f       	mov	r21, r20
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a8 0e       	add	r10, r24
    23ba:	b9 1e       	adc	r11, r25
    23bc:	9f e6       	ldi	r25, 0x6F	; 111
    23be:	f9 22       	and	r15, r25
    23c0:	57 ff       	sbrs	r21, 7
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <vfprintf+0x246>
    23c4:	50 95       	com	r21
    23c6:	40 95       	com	r20
    23c8:	30 95       	com	r19
    23ca:	21 95       	neg	r18
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	4f 4f       	sbci	r20, 0xFF	; 255
    23d0:	5f 4f       	sbci	r21, 0xFF	; 255
    23d2:	e0 e8       	ldi	r30, 0x80	; 128
    23d4:	fe 2a       	or	r15, r30
    23d6:	ca 01       	movw	r24, r20
    23d8:	b9 01       	movw	r22, r18
    23da:	a1 01       	movw	r20, r2
    23dc:	2a e0       	ldi	r18, 0x0A	; 10
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	0e 94 10 13 	call	0x2620	; 0x2620 <__ultoa_invert>
    23e4:	d8 2e       	mov	r13, r24
    23e6:	d2 18       	sub	r13, r2
    23e8:	40 c0       	rjmp	.+128    	; 0x246a <vfprintf+0x2da>
    23ea:	95 37       	cpi	r25, 0x75	; 117
    23ec:	29 f4       	brne	.+10     	; 0x23f8 <vfprintf+0x268>
    23ee:	1f 2d       	mov	r17, r15
    23f0:	1f 7e       	andi	r17, 0xEF	; 239
    23f2:	2a e0       	ldi	r18, 0x0A	; 10
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	1d c0       	rjmp	.+58     	; 0x2432 <vfprintf+0x2a2>
    23f8:	1f 2d       	mov	r17, r15
    23fa:	19 7f       	andi	r17, 0xF9	; 249
    23fc:	9f 36       	cpi	r25, 0x6F	; 111
    23fe:	61 f0       	breq	.+24     	; 0x2418 <vfprintf+0x288>
    2400:	90 37       	cpi	r25, 0x70	; 112
    2402:	20 f4       	brcc	.+8      	; 0x240c <vfprintf+0x27c>
    2404:	98 35       	cpi	r25, 0x58	; 88
    2406:	09 f0       	breq	.+2      	; 0x240a <vfprintf+0x27a>
    2408:	ac c0       	rjmp	.+344    	; 0x2562 <vfprintf+0x3d2>
    240a:	0f c0       	rjmp	.+30     	; 0x242a <vfprintf+0x29a>
    240c:	90 37       	cpi	r25, 0x70	; 112
    240e:	39 f0       	breq	.+14     	; 0x241e <vfprintf+0x28e>
    2410:	98 37       	cpi	r25, 0x78	; 120
    2412:	09 f0       	breq	.+2      	; 0x2416 <vfprintf+0x286>
    2414:	a6 c0       	rjmp	.+332    	; 0x2562 <vfprintf+0x3d2>
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <vfprintf+0x290>
    2418:	28 e0       	ldi	r18, 0x08	; 8
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	0a c0       	rjmp	.+20     	; 0x2432 <vfprintf+0x2a2>
    241e:	10 61       	ori	r17, 0x10	; 16
    2420:	14 fd       	sbrc	r17, 4
    2422:	14 60       	ori	r17, 0x04	; 4
    2424:	20 e1       	ldi	r18, 0x10	; 16
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	04 c0       	rjmp	.+8      	; 0x2432 <vfprintf+0x2a2>
    242a:	14 fd       	sbrc	r17, 4
    242c:	16 60       	ori	r17, 0x06	; 6
    242e:	20 e1       	ldi	r18, 0x10	; 16
    2430:	32 e0       	ldi	r19, 0x02	; 2
    2432:	17 ff       	sbrs	r17, 7
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <vfprintf+0x2b6>
    2436:	f5 01       	movw	r30, r10
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	44 e0       	ldi	r20, 0x04	; 4
    2442:	50 e0       	ldi	r21, 0x00	; 0
    2444:	08 c0       	rjmp	.+16     	; 0x2456 <vfprintf+0x2c6>
    2446:	f5 01       	movw	r30, r10
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	bc 01       	movw	r22, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	42 e0       	ldi	r20, 0x02	; 2
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	a4 0e       	add	r10, r20
    2458:	b5 1e       	adc	r11, r21
    245a:	a1 01       	movw	r20, r2
    245c:	0e 94 10 13 	call	0x2620	; 0x2620 <__ultoa_invert>
    2460:	d8 2e       	mov	r13, r24
    2462:	d2 18       	sub	r13, r2
    2464:	8f e7       	ldi	r24, 0x7F	; 127
    2466:	f8 2e       	mov	r15, r24
    2468:	f1 22       	and	r15, r17
    246a:	f6 fe       	sbrs	r15, 6
    246c:	0b c0       	rjmp	.+22     	; 0x2484 <vfprintf+0x2f4>
    246e:	5e ef       	ldi	r21, 0xFE	; 254
    2470:	f5 22       	and	r15, r21
    2472:	d9 14       	cp	r13, r9
    2474:	38 f4       	brcc	.+14     	; 0x2484 <vfprintf+0x2f4>
    2476:	f4 fe       	sbrs	r15, 4
    2478:	07 c0       	rjmp	.+14     	; 0x2488 <vfprintf+0x2f8>
    247a:	f2 fc       	sbrc	r15, 2
    247c:	05 c0       	rjmp	.+10     	; 0x2488 <vfprintf+0x2f8>
    247e:	8f ee       	ldi	r24, 0xEF	; 239
    2480:	f8 22       	and	r15, r24
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x2f8>
    2484:	1d 2d       	mov	r17, r13
    2486:	01 c0       	rjmp	.+2      	; 0x248a <vfprintf+0x2fa>
    2488:	19 2d       	mov	r17, r9
    248a:	f4 fe       	sbrs	r15, 4
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <vfprintf+0x318>
    248e:	fe 01       	movw	r30, r28
    2490:	ed 0d       	add	r30, r13
    2492:	f1 1d       	adc	r31, r1
    2494:	80 81       	ld	r24, Z
    2496:	80 33       	cpi	r24, 0x30	; 48
    2498:	19 f4       	brne	.+6      	; 0x24a0 <vfprintf+0x310>
    249a:	99 ee       	ldi	r25, 0xE9	; 233
    249c:	f9 22       	and	r15, r25
    249e:	08 c0       	rjmp	.+16     	; 0x24b0 <vfprintf+0x320>
    24a0:	1f 5f       	subi	r17, 0xFF	; 255
    24a2:	f2 fe       	sbrs	r15, 2
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <vfprintf+0x320>
    24a6:	03 c0       	rjmp	.+6      	; 0x24ae <vfprintf+0x31e>
    24a8:	8f 2d       	mov	r24, r15
    24aa:	86 78       	andi	r24, 0x86	; 134
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <vfprintf+0x320>
    24ae:	1f 5f       	subi	r17, 0xFF	; 255
    24b0:	0f 2d       	mov	r16, r15
    24b2:	f3 fc       	sbrc	r15, 3
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <vfprintf+0x34e>
    24b6:	f0 fe       	sbrs	r15, 0
    24b8:	0f c0       	rjmp	.+30     	; 0x24d8 <vfprintf+0x348>
    24ba:	1e 15       	cp	r17, r14
    24bc:	10 f0       	brcs	.+4      	; 0x24c2 <vfprintf+0x332>
    24be:	9d 2c       	mov	r9, r13
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <vfprintf+0x348>
    24c2:	9d 2c       	mov	r9, r13
    24c4:	9e 0c       	add	r9, r14
    24c6:	91 1a       	sub	r9, r17
    24c8:	1e 2d       	mov	r17, r14
    24ca:	06 c0       	rjmp	.+12     	; 0x24d8 <vfprintf+0x348>
    24cc:	80 e2       	ldi	r24, 0x20	; 32
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	b3 01       	movw	r22, r6
    24d2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    24d6:	1f 5f       	subi	r17, 0xFF	; 255
    24d8:	1e 15       	cp	r17, r14
    24da:	c0 f3       	brcs	.-16     	; 0x24cc <vfprintf+0x33c>
    24dc:	04 c0       	rjmp	.+8      	; 0x24e6 <vfprintf+0x356>
    24de:	1e 15       	cp	r17, r14
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <vfprintf+0x356>
    24e2:	e1 1a       	sub	r14, r17
    24e4:	01 c0       	rjmp	.+2      	; 0x24e8 <vfprintf+0x358>
    24e6:	ee 24       	eor	r14, r14
    24e8:	04 ff       	sbrs	r16, 4
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <vfprintf+0x37a>
    24ec:	80 e3       	ldi	r24, 0x30	; 48
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	b3 01       	movw	r22, r6
    24f2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    24f6:	02 ff       	sbrs	r16, 2
    24f8:	1d c0       	rjmp	.+58     	; 0x2534 <vfprintf+0x3a4>
    24fa:	01 fd       	sbrc	r16, 1
    24fc:	03 c0       	rjmp	.+6      	; 0x2504 <vfprintf+0x374>
    24fe:	88 e7       	ldi	r24, 0x78	; 120
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e c0       	rjmp	.+28     	; 0x2520 <vfprintf+0x390>
    2504:	88 e5       	ldi	r24, 0x58	; 88
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0b c0       	rjmp	.+22     	; 0x2520 <vfprintf+0x390>
    250a:	80 2f       	mov	r24, r16
    250c:	86 78       	andi	r24, 0x86	; 134
    250e:	91 f0       	breq	.+36     	; 0x2534 <vfprintf+0x3a4>
    2510:	01 ff       	sbrs	r16, 1
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <vfprintf+0x388>
    2514:	8b e2       	ldi	r24, 0x2B	; 43
    2516:	01 c0       	rjmp	.+2      	; 0x251a <vfprintf+0x38a>
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	f7 fc       	sbrc	r15, 7
    251c:	8d e2       	ldi	r24, 0x2D	; 45
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	b3 01       	movw	r22, r6
    2522:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    2526:	06 c0       	rjmp	.+12     	; 0x2534 <vfprintf+0x3a4>
    2528:	80 e3       	ldi	r24, 0x30	; 48
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	b3 01       	movw	r22, r6
    252e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    2532:	9a 94       	dec	r9
    2534:	d9 14       	cp	r13, r9
    2536:	c0 f3       	brcs	.-16     	; 0x2528 <vfprintf+0x398>
    2538:	da 94       	dec	r13
    253a:	f1 01       	movw	r30, r2
    253c:	ed 0d       	add	r30, r13
    253e:	f1 1d       	adc	r31, r1
    2540:	80 81       	ld	r24, Z
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	b3 01       	movw	r22, r6
    2546:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    254a:	dd 20       	and	r13, r13
    254c:	a9 f7       	brne	.-22     	; 0x2538 <vfprintf+0x3a8>
    254e:	06 c0       	rjmp	.+12     	; 0x255c <vfprintf+0x3cc>
    2550:	80 e2       	ldi	r24, 0x20	; 32
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	b3 01       	movw	r22, r6
    2556:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <fputc>
    255a:	ea 94       	dec	r14
    255c:	ee 20       	and	r14, r14
    255e:	c1 f7       	brne	.-16     	; 0x2550 <vfprintf+0x3c0>
    2560:	43 ce       	rjmp	.-890    	; 0x21e8 <vfprintf+0x58>
    2562:	f3 01       	movw	r30, r6
    2564:	66 81       	ldd	r22, Z+6	; 0x06
    2566:	77 81       	ldd	r23, Z+7	; 0x07
    2568:	cb 01       	movw	r24, r22
    256a:	2b 96       	adiw	r28, 0x0b	; 11
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	5f 90       	pop	r5
    2594:	4f 90       	pop	r4
    2596:	3f 90       	pop	r3
    2598:	2f 90       	pop	r2
    259a:	08 95       	ret

0000259c <strnlen_P>:
    259c:	fc 01       	movw	r30, r24
    259e:	05 90       	lpm	r0, Z+
    25a0:	61 50       	subi	r22, 0x01	; 1
    25a2:	70 40       	sbci	r23, 0x00	; 0
    25a4:	01 10       	cpse	r0, r1
    25a6:	d8 f7       	brcc	.-10     	; 0x259e <strnlen_P+0x2>
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	8e 0f       	add	r24, r30
    25ae:	9f 1f       	adc	r25, r31
    25b0:	08 95       	ret

000025b2 <strnlen>:
    25b2:	fc 01       	movw	r30, r24
    25b4:	61 50       	subi	r22, 0x01	; 1
    25b6:	70 40       	sbci	r23, 0x00	; 0
    25b8:	01 90       	ld	r0, Z+
    25ba:	01 10       	cpse	r0, r1
    25bc:	d8 f7       	brcc	.-10     	; 0x25b4 <strnlen+0x2>
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	8e 0f       	add	r24, r30
    25c4:	9f 1f       	adc	r25, r31
    25c6:	08 95       	ret

000025c8 <fputc>:
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	8c 01       	movw	r16, r24
    25d2:	eb 01       	movw	r28, r22
    25d4:	8b 81       	ldd	r24, Y+3	; 0x03
    25d6:	81 ff       	sbrs	r24, 1
    25d8:	1b c0       	rjmp	.+54     	; 0x2610 <fputc+0x48>
    25da:	82 ff       	sbrs	r24, 2
    25dc:	0d c0       	rjmp	.+26     	; 0x25f8 <fputc+0x30>
    25de:	2e 81       	ldd	r18, Y+6	; 0x06
    25e0:	3f 81       	ldd	r19, Y+7	; 0x07
    25e2:	8c 81       	ldd	r24, Y+4	; 0x04
    25e4:	9d 81       	ldd	r25, Y+5	; 0x05
    25e6:	28 17       	cp	r18, r24
    25e8:	39 07       	cpc	r19, r25
    25ea:	64 f4       	brge	.+24     	; 0x2604 <fputc+0x3c>
    25ec:	e8 81       	ld	r30, Y
    25ee:	f9 81       	ldd	r31, Y+1	; 0x01
    25f0:	01 93       	st	Z+, r16
    25f2:	f9 83       	std	Y+1, r31	; 0x01
    25f4:	e8 83       	st	Y, r30
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <fputc+0x3c>
    25f8:	e8 85       	ldd	r30, Y+8	; 0x08
    25fa:	f9 85       	ldd	r31, Y+9	; 0x09
    25fc:	80 2f       	mov	r24, r16
    25fe:	09 95       	icall
    2600:	89 2b       	or	r24, r25
    2602:	31 f4       	brne	.+12     	; 0x2610 <fputc+0x48>
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	9f 81       	ldd	r25, Y+7	; 0x07
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	9f 83       	std	Y+7, r25	; 0x07
    260c:	8e 83       	std	Y+6, r24	; 0x06
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <fputc+0x4c>
    2610:	0f ef       	ldi	r16, 0xFF	; 255
    2612:	1f ef       	ldi	r17, 0xFF	; 255
    2614:	c8 01       	movw	r24, r16
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	08 95       	ret

00002620 <__ultoa_invert>:
    2620:	fa 01       	movw	r30, r20
    2622:	aa 27       	eor	r26, r26
    2624:	28 30       	cpi	r18, 0x08	; 8
    2626:	51 f1       	breq	.+84     	; 0x267c <__ultoa_invert+0x5c>
    2628:	20 31       	cpi	r18, 0x10	; 16
    262a:	81 f1       	breq	.+96     	; 0x268c <__ultoa_invert+0x6c>
    262c:	e8 94       	clt
    262e:	6f 93       	push	r22
    2630:	6e 7f       	andi	r22, 0xFE	; 254
    2632:	6e 5f       	subi	r22, 0xFE	; 254
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	8f 4f       	sbci	r24, 0xFF	; 255
    2638:	9f 4f       	sbci	r25, 0xFF	; 255
    263a:	af 4f       	sbci	r26, 0xFF	; 255
    263c:	b1 e0       	ldi	r27, 0x01	; 1
    263e:	3e d0       	rcall	.+124    	; 0x26bc <__ultoa_invert+0x9c>
    2640:	b4 e0       	ldi	r27, 0x04	; 4
    2642:	3c d0       	rcall	.+120    	; 0x26bc <__ultoa_invert+0x9c>
    2644:	67 0f       	add	r22, r23
    2646:	78 1f       	adc	r23, r24
    2648:	89 1f       	adc	r24, r25
    264a:	9a 1f       	adc	r25, r26
    264c:	a1 1d       	adc	r26, r1
    264e:	68 0f       	add	r22, r24
    2650:	79 1f       	adc	r23, r25
    2652:	8a 1f       	adc	r24, r26
    2654:	91 1d       	adc	r25, r1
    2656:	a1 1d       	adc	r26, r1
    2658:	6a 0f       	add	r22, r26
    265a:	71 1d       	adc	r23, r1
    265c:	81 1d       	adc	r24, r1
    265e:	91 1d       	adc	r25, r1
    2660:	a1 1d       	adc	r26, r1
    2662:	20 d0       	rcall	.+64     	; 0x26a4 <__ultoa_invert+0x84>
    2664:	09 f4       	brne	.+2      	; 0x2668 <__ultoa_invert+0x48>
    2666:	68 94       	set
    2668:	3f 91       	pop	r19
    266a:	2a e0       	ldi	r18, 0x0A	; 10
    266c:	26 9f       	mul	r18, r22
    266e:	11 24       	eor	r1, r1
    2670:	30 19       	sub	r19, r0
    2672:	30 5d       	subi	r19, 0xD0	; 208
    2674:	31 93       	st	Z+, r19
    2676:	de f6       	brtc	.-74     	; 0x262e <__ultoa_invert+0xe>
    2678:	cf 01       	movw	r24, r30
    267a:	08 95       	ret
    267c:	46 2f       	mov	r20, r22
    267e:	47 70       	andi	r20, 0x07	; 7
    2680:	40 5d       	subi	r20, 0xD0	; 208
    2682:	41 93       	st	Z+, r20
    2684:	b3 e0       	ldi	r27, 0x03	; 3
    2686:	0f d0       	rcall	.+30     	; 0x26a6 <__ultoa_invert+0x86>
    2688:	c9 f7       	brne	.-14     	; 0x267c <__ultoa_invert+0x5c>
    268a:	f6 cf       	rjmp	.-20     	; 0x2678 <__ultoa_invert+0x58>
    268c:	46 2f       	mov	r20, r22
    268e:	4f 70       	andi	r20, 0x0F	; 15
    2690:	40 5d       	subi	r20, 0xD0	; 208
    2692:	4a 33       	cpi	r20, 0x3A	; 58
    2694:	18 f0       	brcs	.+6      	; 0x269c <__ultoa_invert+0x7c>
    2696:	49 5d       	subi	r20, 0xD9	; 217
    2698:	31 fd       	sbrc	r19, 1
    269a:	40 52       	subi	r20, 0x20	; 32
    269c:	41 93       	st	Z+, r20
    269e:	02 d0       	rcall	.+4      	; 0x26a4 <__ultoa_invert+0x84>
    26a0:	a9 f7       	brne	.-22     	; 0x268c <__ultoa_invert+0x6c>
    26a2:	ea cf       	rjmp	.-44     	; 0x2678 <__ultoa_invert+0x58>
    26a4:	b4 e0       	ldi	r27, 0x04	; 4
    26a6:	a6 95       	lsr	r26
    26a8:	97 95       	ror	r25
    26aa:	87 95       	ror	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	ba 95       	dec	r27
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__ultoa_invert+0x86>
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	61 05       	cpc	r22, r1
    26b8:	71 05       	cpc	r23, r1
    26ba:	08 95       	ret
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	0a 2e       	mov	r0, r26
    26c2:	06 94       	lsr	r0
    26c4:	57 95       	ror	r21
    26c6:	47 95       	ror	r20
    26c8:	37 95       	ror	r19
    26ca:	27 95       	ror	r18
    26cc:	ba 95       	dec	r27
    26ce:	c9 f7       	brne	.-14     	; 0x26c2 <__ultoa_invert+0xa2>
    26d0:	62 0f       	add	r22, r18
    26d2:	73 1f       	adc	r23, r19
    26d4:	84 1f       	adc	r24, r20
    26d6:	95 1f       	adc	r25, r21
    26d8:	a0 1d       	adc	r26, r0
    26da:	08 95       	ret

000026dc <_exit>:
    26dc:	f8 94       	cli

000026de <__stop_program>:
    26de:	ff cf       	rjmp	.-2      	; 0x26de <__stop_program>
