
IMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000017aa  0000183e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  00800146  00800146  00001884  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000145d  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea ea       	ldi	r30, 0xAA	; 170
      a8:	f7 e1       	ldi	r31, 0x17	; 23
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a6 34       	cpi	r26, 0x46	; 70
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	12 e0       	ldi	r17, 0x02	; 2
      bc:	a6 e4       	ldi	r26, 0x46	; 70
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 30       	cpi	r26, 0x0F	; 15
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 b4 02 	call	0x568	; 0x568 <main>
      ce:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__vector_18>:
	}
}

//CAN interrupt service routine
ISR(CANIT_vect)
{
      d6:	1f 92       	push	r1
      d8:	0f 92       	push	r0
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	0f 92       	push	r0
      de:	0b b6       	in	r0, 0x3b	; 59
      e0:	0f 92       	push	r0
      e2:	11 24       	eor	r1, r1
      e4:	2f 93       	push	r18
      e6:	3f 93       	push	r19
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
      ec:	af 93       	push	r26
      ee:	bf 93       	push	r27
      f0:	ef 93       	push	r30
      f2:	ff 93       	push	r31
	CAN_packet packet;
	unsigned char save_canpage;
	unsigned char mob;
	unsigned char length;

	PORTD |= _BV(PD7);
      f4:	5f 9a       	sbi	0x0b, 7	; 11
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob
      f6:	20 91 ec 00 	lds	r18, 0x00EC

	save_canpage = 0xF0 | mob;

    CANPAGE = mob & 0xf0;
      fa:	82 2f       	mov	r24, r18
      fc:	80 7f       	andi	r24, 0xF0	; 240
      fe:	80 93 ed 00 	sts	0x00ED, r24
	mob >>= 4; // -> mob number 0..15

	packet.msg_type = msg_type_lu[mob];
     102:	82 2f       	mov	r24, r18
     104:	82 95       	swap	r24
     106:	8f 70       	andi	r24, 0x0F	; 15
     108:	a8 2f       	mov	r26, r24
     10a:	b0 e0       	ldi	r27, 0x00	; 0

	if(packet.msg_type == CAN_TX_MSG)
     10c:	fd 01       	movw	r30, r26
     10e:	e1 55       	subi	r30, 0x51	; 81
     110:	fe 4f       	sbci	r31, 0xFE	; 254
     112:	80 81       	ld	r24, Z
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	b1 f4       	brne	.+44     	; 0x144 <__vector_18+0x6e>
	{
		CANSTMOB = 0;
     118:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB = 0;
     11c:	10 92 ef 00 	sts	0x00EF, r1

		CANIDT1 = 0;
     120:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;
     124:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;
     128:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;
     12c:	10 92 f0 00 	sts	0x00F0, r1
     130:	80 e0       	ldi	r24, 0x00	; 0

		for(i = 0;i<8;i++)
		{
			CANMSG = 0;
     132:	10 92 fa 00 	sts	0x00FA, r1
		CANIDT1 = 0;
		CANIDT2 = 0;
		CANIDT3 = 0;
		CANIDT4 = 0;

		for(i = 0;i<8;i++)
     136:	8f 5f       	subi	r24, 0xFF	; 255
     138:	88 30       	cpi	r24, 0x08	; 8
     13a:	d9 f7       	brne	.-10     	; 0x132 <__vector_18+0x5c>
		{
			CANMSG = 0;
		}

		msg_type_lu[mob] = 0;
     13c:	a1 55       	subi	r26, 0x51	; 81
     13e:	be 4f       	sbci	r27, 0xFE	; 254
     140:	1c 92       	st	X, r1
     142:	22 c0       	rjmp	.+68     	; 0x188 <__vector_18+0xb2>
	}
	else
	{
		if(CANCDMOB & _BV(IDE))
     144:	80 91 ef 00 	lds	r24, 0x00EF
     148:	84 ff       	sbrs	r24, 4
     14a:	09 c0       	rjmp	.+18     	; 0x15e <__vector_18+0x88>
		{
			packet.id_type = CAN_EXT_MSG;
			packet.id = 	(((uint32_t)CANIDT1) << 21)
     14c:	80 91 f3 00 	lds	r24, 0x00F3
     150:	80 91 f2 00 	lds	r24, 0x00F2
     154:	80 91 f1 00 	lds	r24, 0x00F1
     158:	80 91 f0 00 	lds	r24, 0x00F0
     15c:	04 c0       	rjmp	.+8      	; 0x166 <__vector_18+0x90>
		}

		else
		{
			packet.id_type = CAN_STD_MSG;
			packet.id = (CANIDT2>>5) | (CANIDT1 <<3);
     15e:	80 91 f2 00 	lds	r24, 0x00F2
     162:	80 91 f3 00 	lds	r24, 0x00F3
		}

		length=CANCDMOB & 0x0f;
     166:	90 91 ef 00 	lds	r25, 0x00EF
     16a:	9f 70       	andi	r25, 0x0F	; 15
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	03 c0       	rjmp	.+6      	; 0x176 <__vector_18+0xa0>
		packet.length=length;

		for (i = 0; i <length; ++i)
		{
			packet.data[i] = CANMSG;
     170:	30 91 fa 00 	lds	r19, 0x00FA
		}

		length=CANCDMOB & 0x0f;
		packet.length=length;

		for (i = 0; i <length; ++i)
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	89 17       	cp	r24, r25
     178:	d8 f3       	brcs	.-10     	; 0x170 <__vector_18+0x9a>
			packet.data[i] = CANMSG;
		}

		ProcessCanMsg(&packet);

		CANSTMOB=0;		// reset INT reason
     17a:	10 92 ee 00 	sts	0x00EE, r1
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
     17e:	80 91 ef 00 	lds	r24, 0x00EF
     182:	80 79       	andi	r24, 0x90	; 144
     184:	80 93 ef 00 	sts	0x00EF, r24
	PORTD |= _BV(PD7);
	/*---------------------------------------------*/

	mob=CANHPMOB; // get highest prio mob

	save_canpage = 0xF0 | mob;
     188:	20 6f       	ori	r18, 0xF0	; 240

		CANSTMOB=0;		// reset INT reason
		CANCDMOB &= 0x80|_BV(IDE);	// re-enable RX on this channel
	}

	CANPAGE=save_canpage;	// restore CANPAGE
     18a:	20 93 ed 00 	sts	0x00ED, r18

	/*-------------Device Specific-----------------*/
	PORTD &= ~_BV(PD7);
     18e:	5f 98       	cbi	0x0b, 7	; 11
	/*---------------------------------------------*/
}
     190:	ff 91       	pop	r31
     192:	ef 91       	pop	r30
     194:	bf 91       	pop	r27
     196:	af 91       	pop	r26
     198:	9f 91       	pop	r25
     19a:	8f 91       	pop	r24
     19c:	3f 91       	pop	r19
     19e:	2f 91       	pop	r18
     1a0:	0f 90       	pop	r0
     1a2:	0b be       	out	0x3b, r0	; 59
     1a4:	0f 90       	pop	r0
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	0f 90       	pop	r0
     1aa:	1f 90       	pop	r1
     1ac:	18 95       	reti

000001ae <InitCanMsgs>:

void InitCanMsgs(void)
{
	uint8_t i;
	imu2.id_type = CAN_EXT_MSG;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	80 93 ef 01 	sts	0x01EF, r24
	imu2.id = CAN_DATA_IMU2;
     1b4:	85 ed       	ldi	r24, 0xD5	; 213
     1b6:	9f ef       	ldi	r25, 0xFF	; 255
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b0 e0       	ldi	r27, 0x00	; 0
     1bc:	80 93 eb 01 	sts	0x01EB, r24
     1c0:	90 93 ec 01 	sts	0x01EC, r25
     1c4:	a0 93 ed 01 	sts	0x01ED, r26
     1c8:	b0 93 ee 01 	sts	0x01EE, r27
	imu2.id = (imu2.id << 8);
     1cc:	80 91 eb 01 	lds	r24, 0x01EB
     1d0:	90 91 ec 01 	lds	r25, 0x01EC
     1d4:	a0 91 ed 01 	lds	r26, 0x01ED
     1d8:	b0 91 ee 01 	lds	r27, 0x01EE
     1dc:	ba 2f       	mov	r27, r26
     1de:	a9 2f       	mov	r26, r25
     1e0:	98 2f       	mov	r25, r24
     1e2:	88 27       	eor	r24, r24
     1e4:	80 93 eb 01 	sts	0x01EB, r24
     1e8:	90 93 ec 01 	sts	0x01EC, r25
     1ec:	a0 93 ed 01 	sts	0x01ED, r26
     1f0:	b0 93 ee 01 	sts	0x01EE, r27
	imu2.length = 6;
     1f4:	86 e0       	ldi	r24, 0x06	; 6
     1f6:	80 93 f1 01 	sts	0x01F1, r24
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0;i<8;i++)
	{
		imu2.data[i] = 0;
     1fe:	fc 01       	movw	r30, r24
     200:	e5 51       	subi	r30, 0x15	; 21
     202:	fe 4f       	sbci	r31, 0xFE	; 254
     204:	17 82       	std	Z+7, r1	; 0x07
     206:	01 96       	adiw	r24, 0x01	; 1
	uint8_t i;
	imu2.id_type = CAN_EXT_MSG;
	imu2.id = CAN_DATA_IMU2;
	imu2.id = (imu2.id << 8);
	imu2.length = 6;
	for(i = 0;i<8;i++)
     208:	88 30       	cpi	r24, 0x08	; 8
     20a:	91 05       	cpc	r25, r1
     20c:	c1 f7       	brne	.-16     	; 0x1fe <InitCanMsgs+0x50>
	{
		imu2.data[i] = 0;
	}

	sts3.id_type = CAN_EXT_MSG;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 c2 01 	sts	0x01C2, r24
	sts3.id = CAN_DATA_STS3;
     214:	8a ed       	ldi	r24, 0xDA	; 218
     216:	9f ef       	ldi	r25, 0xFF	; 255
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	80 93 be 01 	sts	0x01BE, r24
     220:	90 93 bf 01 	sts	0x01BF, r25
     224:	a0 93 c0 01 	sts	0x01C0, r26
     228:	b0 93 c1 01 	sts	0x01C1, r27
	sts3.id = (sts3.id << 8);
     22c:	80 91 be 01 	lds	r24, 0x01BE
     230:	90 91 bf 01 	lds	r25, 0x01BF
     234:	a0 91 c0 01 	lds	r26, 0x01C0
     238:	b0 91 c1 01 	lds	r27, 0x01C1
     23c:	ba 2f       	mov	r27, r26
     23e:	a9 2f       	mov	r26, r25
     240:	98 2f       	mov	r25, r24
     242:	88 27       	eor	r24, r24
     244:	80 93 be 01 	sts	0x01BE, r24
     248:	90 93 bf 01 	sts	0x01BF, r25
     24c:	a0 93 c0 01 	sts	0x01C0, r26
     250:	b0 93 c1 01 	sts	0x01C1, r27
	sts3.length = 8;
     254:	88 e0       	ldi	r24, 0x08	; 8
     256:	80 93 c4 01 	sts	0x01C4, r24
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0;i<8;i++)
	{
		sts3.data[i] = 0;
     25e:	fc 01       	movw	r30, r24
     260:	e2 54       	subi	r30, 0x42	; 66
     262:	fe 4f       	sbci	r31, 0xFE	; 254
     264:	17 82       	std	Z+7, r1	; 0x07
     266:	01 96       	adiw	r24, 0x01	; 1

	sts3.id_type = CAN_EXT_MSG;
	sts3.id = CAN_DATA_STS3;
	sts3.id = (sts3.id << 8);
	sts3.length = 8;
	for(i = 0;i<8;i++)
     268:	88 30       	cpi	r24, 0x08	; 8
     26a:	91 05       	cpc	r25, r1
     26c:	c1 f7       	brne	.-16     	; 0x25e <InitCanMsgs+0xb0>
	{
		sts3.data[i] = 0;
	}

	sts4.id_type = CAN_EXT_MSG;
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 e0 01 	sts	0x01E0, r24
	sts4.id = CAN_DATA_STS4;
     274:	8b ed       	ldi	r24, 0xDB	; 219
     276:	9f ef       	ldi	r25, 0xFF	; 255
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	80 93 dc 01 	sts	0x01DC, r24
     280:	90 93 dd 01 	sts	0x01DD, r25
     284:	a0 93 de 01 	sts	0x01DE, r26
     288:	b0 93 df 01 	sts	0x01DF, r27
	sts4.id = (sts4.id << 8);
     28c:	80 91 dc 01 	lds	r24, 0x01DC
     290:	90 91 dd 01 	lds	r25, 0x01DD
     294:	a0 91 de 01 	lds	r26, 0x01DE
     298:	b0 91 df 01 	lds	r27, 0x01DF
     29c:	ba 2f       	mov	r27, r26
     29e:	a9 2f       	mov	r26, r25
     2a0:	98 2f       	mov	r25, r24
     2a2:	88 27       	eor	r24, r24
     2a4:	80 93 dc 01 	sts	0x01DC, r24
     2a8:	90 93 dd 01 	sts	0x01DD, r25
     2ac:	a0 93 de 01 	sts	0x01DE, r26
     2b0:	b0 93 df 01 	sts	0x01DF, r27
	sts4.length = 8;
     2b4:	88 e0       	ldi	r24, 0x08	; 8
     2b6:	80 93 e2 01 	sts	0x01E2, r24
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0;i<8;i++)
	{
		sts4.data[i] = 0;
     2be:	fc 01       	movw	r30, r24
     2c0:	e4 52       	subi	r30, 0x24	; 36
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	17 82       	std	Z+7, r1	; 0x07
     2c6:	01 96       	adiw	r24, 0x01	; 1

	sts4.id_type = CAN_EXT_MSG;
	sts4.id = CAN_DATA_STS4;
	sts4.id = (sts4.id << 8);
	sts4.length = 8;
	for(i = 0;i<8;i++)
     2c8:	88 30       	cpi	r24, 0x08	; 8
     2ca:	91 05       	cpc	r25, r1
     2cc:	c1 f7       	brne	.-16     	; 0x2be <InitCanMsgs+0x110>
	{
		sts4.data[i] = 0;
	}

	sts5.id_type = CAN_EXT_MSG;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 d1 01 	sts	0x01D1, r24
	sts5.id = CAN_DATA_STS5;
     2d4:	8c ed       	ldi	r24, 0xDC	; 220
     2d6:	9f ef       	ldi	r25, 0xFF	; 255
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	80 93 cd 01 	sts	0x01CD, r24
     2e0:	90 93 ce 01 	sts	0x01CE, r25
     2e4:	a0 93 cf 01 	sts	0x01CF, r26
     2e8:	b0 93 d0 01 	sts	0x01D0, r27
	sts5.id = (sts5.id << 8);
     2ec:	80 91 cd 01 	lds	r24, 0x01CD
     2f0:	90 91 ce 01 	lds	r25, 0x01CE
     2f4:	a0 91 cf 01 	lds	r26, 0x01CF
     2f8:	b0 91 d0 01 	lds	r27, 0x01D0
     2fc:	ba 2f       	mov	r27, r26
     2fe:	a9 2f       	mov	r26, r25
     300:	98 2f       	mov	r25, r24
     302:	88 27       	eor	r24, r24
     304:	80 93 cd 01 	sts	0x01CD, r24
     308:	90 93 ce 01 	sts	0x01CE, r25
     30c:	a0 93 cf 01 	sts	0x01CF, r26
     310:	b0 93 d0 01 	sts	0x01D0, r27
	sts5.length = 8;
     314:	88 e0       	ldi	r24, 0x08	; 8
     316:	80 93 d3 01 	sts	0x01D3, r24
	sts5.msg_type = CAN_TX_MSG;
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 93 d2 01 	sts	0x01D2, r24
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0;i<8;i++)
	{
		sts5.data[i] = 0;
     324:	fc 01       	movw	r30, r24
     326:	e3 53       	subi	r30, 0x33	; 51
     328:	fe 4f       	sbci	r31, 0xFE	; 254
     32a:	17 82       	std	Z+7, r1	; 0x07
     32c:	01 96       	adiw	r24, 0x01	; 1
	sts5.id_type = CAN_EXT_MSG;
	sts5.id = CAN_DATA_STS5;
	sts5.id = (sts5.id << 8);
	sts5.length = 8;
	sts5.msg_type = CAN_TX_MSG;
	for(i = 0;i<8;i++)
     32e:	88 30       	cpi	r24, 0x08	; 8
     330:	91 05       	cpc	r25, r1
     332:	c1 f7       	brne	.-16     	; 0x324 <InitCanMsgs+0x176>
	{
		sts5.data[i] = 0;
	}

	sts2.id_type = CAN_EXT_MSG;
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	80 93 fe 01 	sts	0x01FE, r24
	sts2.id = CAN_DATA_STS2;
     33a:	89 ed       	ldi	r24, 0xD9	; 217
     33c:	9f ef       	ldi	r25, 0xFF	; 255
     33e:	a0 e0       	ldi	r26, 0x00	; 0
     340:	b0 e0       	ldi	r27, 0x00	; 0
     342:	80 93 fa 01 	sts	0x01FA, r24
     346:	90 93 fb 01 	sts	0x01FB, r25
     34a:	a0 93 fc 01 	sts	0x01FC, r26
     34e:	b0 93 fd 01 	sts	0x01FD, r27
	sts2.id = (sts2.id << 8);
     352:	80 91 fa 01 	lds	r24, 0x01FA
     356:	90 91 fb 01 	lds	r25, 0x01FB
     35a:	a0 91 fc 01 	lds	r26, 0x01FC
     35e:	b0 91 fd 01 	lds	r27, 0x01FD
     362:	ba 2f       	mov	r27, r26
     364:	a9 2f       	mov	r26, r25
     366:	98 2f       	mov	r25, r24
     368:	88 27       	eor	r24, r24
     36a:	80 93 fa 01 	sts	0x01FA, r24
     36e:	90 93 fb 01 	sts	0x01FB, r25
     372:	a0 93 fc 01 	sts	0x01FC, r26
     376:	b0 93 fd 01 	sts	0x01FD, r27
	sts2.length = 8;
     37a:	88 e0       	ldi	r24, 0x08	; 8
     37c:	80 93 00 02 	sts	0x0200, r24
	sts2.msg_type = CAN_TX_MSG;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	80 93 ff 01 	sts	0x01FF, r24
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
	for(i = 0;i<8;i++)
	{
		sts2.data[i] = 0;
     38a:	fc 01       	movw	r30, r24
     38c:	e6 50       	subi	r30, 0x06	; 6
     38e:	fe 4f       	sbci	r31, 0xFE	; 254
     390:	17 82       	std	Z+7, r1	; 0x07
     392:	01 96       	adiw	r24, 0x01	; 1
	sts2.id_type = CAN_EXT_MSG;
	sts2.id = CAN_DATA_STS2;
	sts2.id = (sts2.id << 8);
	sts2.length = 8;
	sts2.msg_type = CAN_TX_MSG;
	for(i = 0;i<8;i++)
     394:	88 30       	cpi	r24, 0x08	; 8
     396:	91 05       	cpc	r25, r1
     398:	c1 f7       	brne	.-16     	; 0x38a <InitCanMsgs+0x1dc>
	{
		sts2.data[i] = 0;
	}


}
     39a:	08 95       	ret

0000039c <ProcessCanMsg>:

uint8_t ProcessCanMsg(CAN_packet *pkt)
{
	return 0;
}
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret

000003a0 <handle_10ms_tick>:
	}
}

void handle_10ms_tick(void)
{
	if(systimer_10ms %10 == 0)
     3a0:	60 91 55 01 	lds	r22, 0x0155
     3a4:	70 91 56 01 	lds	r23, 0x0156
     3a8:	80 91 57 01 	lds	r24, 0x0157
     3ac:	90 91 58 01 	lds	r25, 0x0158
     3b0:	2a e0       	ldi	r18, 0x0A	; 10
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     3bc:	61 15       	cp	r22, r1
     3be:	71 05       	cpc	r23, r1
     3c0:	81 05       	cpc	r24, r1
     3c2:	91 05       	cpc	r25, r1
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <handle_10ms_tick+0x28>
     3c6:	60 c0       	rjmp	.+192    	; 0x488 <handle_10ms_tick+0xe8>
	{
		imu2.data[0]=(acl_x >> 8) & 0x00FF;
     3c8:	80 91 46 01 	lds	r24, 0x0146
     3cc:	90 91 47 01 	lds	r25, 0x0147
     3d0:	90 93 f2 01 	sts	0x01F2, r25
		imu2.data[1]=(acl_x & 0x00FF);
     3d4:	80 91 46 01 	lds	r24, 0x0146
     3d8:	90 91 47 01 	lds	r25, 0x0147
     3dc:	80 93 f3 01 	sts	0x01F3, r24
		imu2.data[2]=(acl_y >> 8) & 0x00FF;
     3e0:	80 91 48 01 	lds	r24, 0x0148
     3e4:	90 91 49 01 	lds	r25, 0x0149
     3e8:	90 93 f4 01 	sts	0x01F4, r25
		imu2.data[3]=(acl_y & 0x00FF);
     3ec:	80 91 48 01 	lds	r24, 0x0148
     3f0:	90 91 49 01 	lds	r25, 0x0149
     3f4:	80 93 f5 01 	sts	0x01F5, r24
		imu2.data[4]=(acl_z >> 8) & 0x00FF;
     3f8:	80 91 4a 01 	lds	r24, 0x014A
     3fc:	90 91 4b 01 	lds	r25, 0x014B
     400:	90 93 f6 01 	sts	0x01F6, r25
		imu2.data[5]=(acl_z & 0x00FF);
     404:	80 91 4a 01 	lds	r24, 0x014A
     408:	90 91 4b 01 	lds	r25, 0x014B
     40c:	80 93 f7 01 	sts	0x01F7, r24

		can_tx(get_open_mob(),&imu2);
     410:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     414:	6b ee       	ldi	r22, 0xEB	; 235
     416:	71 e0       	ldi	r23, 0x01	; 1
     418:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>

		sts2.data[0]=(susp_trvl[FL_SUSP_TRVL-1] >> 8) & 0x00FF;
     41c:	80 91 4f 01 	lds	r24, 0x014F
     420:	90 91 50 01 	lds	r25, 0x0150
     424:	90 93 01 02 	sts	0x0201, r25
		sts2.data[1]=(susp_trvl[FL_SUSP_TRVL-1] & 0x00FF);
     428:	80 91 4f 01 	lds	r24, 0x014F
     42c:	90 91 50 01 	lds	r25, 0x0150
     430:	80 93 02 02 	sts	0x0202, r24
		sts2.data[2]=(susp_trvl[FR_SUSP_TRVL-1] >> 8) & 0x00FF;
     434:	80 91 53 01 	lds	r24, 0x0153
     438:	90 91 54 01 	lds	r25, 0x0154
     43c:	90 93 03 02 	sts	0x0203, r25
		sts2.data[3]=(susp_trvl[FR_SUSP_TRVL-1] & 0x00FF);
     440:	80 91 53 01 	lds	r24, 0x0153
     444:	90 91 54 01 	lds	r25, 0x0154
     448:	80 93 04 02 	sts	0x0204, r24
		sts2.data[4]=(susp_trvl[RL_SUSP_TRVL-1] >> 8) & 0x00FF;
     44c:	80 91 51 01 	lds	r24, 0x0151
     450:	90 91 52 01 	lds	r25, 0x0152
     454:	90 93 05 02 	sts	0x0205, r25
		sts2.data[5]=(susp_trvl[RL_SUSP_TRVL-1] & 0x00FF);
     458:	80 91 51 01 	lds	r24, 0x0151
     45c:	90 91 52 01 	lds	r25, 0x0152
     460:	80 93 06 02 	sts	0x0206, r24
		sts2.data[6]=(susp_trvl[RR_SUSP_TRVL-1] >> 8) & 0x00FF;
     464:	80 91 4d 01 	lds	r24, 0x014D
     468:	90 91 4e 01 	lds	r25, 0x014E
     46c:	90 93 07 02 	sts	0x0207, r25
		sts2.data[7]=(susp_trvl[RR_SUSP_TRVL-1] & 0x00FF);
     470:	80 91 4d 01 	lds	r24, 0x014D
     474:	90 91 4e 01 	lds	r25, 0x014E
     478:	80 93 08 02 	sts	0x0208, r24

		can_tx(get_open_mob(),&sts2);
     47c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     480:	6a ef       	ldi	r22, 0xFA	; 250
     482:	71 e0       	ldi	r23, 0x01	; 1
     484:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>
	{
		// Send 20Hz Data
		//led_ctrl(LED3,LED_ON,LED_NO_TMR);
	}

	if(systimer_10ms % 100 == 0)
     488:	60 91 55 01 	lds	r22, 0x0155
     48c:	70 91 56 01 	lds	r23, 0x0156
     490:	80 91 57 01 	lds	r24, 0x0157
     494:	90 91 58 01 	lds	r25, 0x0158
     498:	24 e6       	ldi	r18, 0x64	; 100
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     4a4:	61 15       	cp	r22, r1
     4a6:	71 05       	cpc	r23, r1
     4a8:	81 05       	cpc	r24, r1
     4aa:	91 05       	cpc	r25, r1
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <handle_10ms_tick+0x110>
     4ae:	42 c0       	rjmp	.+132    	; 0x534 <handle_10ms_tick+0x194>
	{
		// Send 10Hz Data
		sts3.data[1] = temps[TMP_FLI];
     4b0:	80 91 32 01 	lds	r24, 0x0132
     4b4:	80 93 c6 01 	sts	0x01C6, r24
		sts3.data[3] = temps[TMP_FRI];
     4b8:	80 91 35 01 	lds	r24, 0x0135
     4bc:	80 93 c8 01 	sts	0x01C8, r24
		sts3.data[5] = temps[TMP_RLI];
     4c0:	80 91 38 01 	lds	r24, 0x0138
     4c4:	80 93 ca 01 	sts	0x01CA, r24
		sts3.data[7] = temps[TMP_RRI];
     4c8:	80 91 3b 01 	lds	r24, 0x013B
     4cc:	80 93 cc 01 	sts	0x01CC, r24

		sts4.data[1] = temps[TMP_FLM];
     4d0:	80 91 33 01 	lds	r24, 0x0133
     4d4:	80 93 e4 01 	sts	0x01E4, r24
		sts4.data[3] = temps[TMP_FRM];
     4d8:	80 91 36 01 	lds	r24, 0x0136
     4dc:	80 93 e6 01 	sts	0x01E6, r24
		sts4.data[5] = temps[TMP_RLM];
     4e0:	80 91 39 01 	lds	r24, 0x0139
     4e4:	80 93 e8 01 	sts	0x01E8, r24
		sts4.data[7] = temps[TMP_RRM];
     4e8:	80 91 3c 01 	lds	r24, 0x013C
     4ec:	80 93 ea 01 	sts	0x01EA, r24

		sts5.data[1] = temps[TMP_FLO];
     4f0:	80 91 34 01 	lds	r24, 0x0134
     4f4:	80 93 d5 01 	sts	0x01D5, r24
		sts5.data[3] = temps[TMP_FRO];
     4f8:	80 91 37 01 	lds	r24, 0x0137
     4fc:	80 93 d7 01 	sts	0x01D7, r24
		sts5.data[5] = temps[TMP_RLO];
     500:	80 91 3a 01 	lds	r24, 0x013A
     504:	80 93 d9 01 	sts	0x01D9, r24
		sts5.data[7] = temps[TMP_RRO];
     508:	80 91 3d 01 	lds	r24, 0x013D
     50c:	80 93 db 01 	sts	0x01DB, r24

		can_tx(get_open_mob(),&sts3);
     510:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     514:	6e eb       	ldi	r22, 0xBE	; 190
     516:	71 e0       	ldi	r23, 0x01	; 1
     518:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>
		can_tx(get_open_mob(),&sts4);
     51c:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     520:	6c ed       	ldi	r22, 0xDC	; 220
     522:	71 e0       	ldi	r23, 0x01	; 1
     524:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>
		can_tx(get_open_mob(),&sts5);
     528:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     52c:	6d ec       	ldi	r22, 0xCD	; 205
     52e:	71 e0       	ldi	r23, 0x01	; 1
     530:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>
	if(systimer_10ms % 500 == 0)
	{
		// Send 2Hz Data
		//led_ctrl(LED6,LED_ON,LED_NO_TMR);
	}
	if(systimer_10ms % 1000 == 0)
     534:	60 91 55 01 	lds	r22, 0x0155
     538:	70 91 56 01 	lds	r23, 0x0156
     53c:	80 91 57 01 	lds	r24, 0x0157
     540:	90 91 58 01 	lds	r25, 0x0158
     544:	28 ee       	ldi	r18, 0xE8	; 232
     546:	33 e0       	ldi	r19, 0x03	; 3
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     550:	61 15       	cp	r22, r1
     552:	71 05       	cpc	r23, r1
     554:	81 05       	cpc	r24, r1
     556:	91 05       	cpc	r25, r1
     558:	31 f4       	brne	.+12     	; 0x566 <handle_10ms_tick+0x1c6>
	{
		// Send 1Hz Data
		//led_ctrl(LED7,LED_ON,LED_NO_TMR);
		can_tx(get_open_mob(),&sts5);
     55a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_open_mob>
     55e:	6d ec       	ldi	r22, 0xCD	; 205
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	0e 94 f6 03 	call	0x7ec	; 0x7ec <can_tx>
     566:	08 95       	ret

00000568 <main>:
 */

#include "IMU.h"

int main(void)
{
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
	DDRD|=_BV(PD7);
     56c:	57 9a       	sbi	0x0a, 7	; 10
	DDRE|=_BV(PE6);
     56e:	6e 9a       	sbi	0x0d, 6	; 13

	uint8_t i;

	stdout = stdin = &uart_str;
     570:	84 e2       	ldi	r24, 0x24	; 36
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	90 93 0a 02 	sts	0x020A, r25
     578:	80 93 09 02 	sts	0x0209, r24
     57c:	90 93 0c 02 	sts	0x020C, r25
     580:	80 93 0b 02 	sts	0x020B, r24
	uart_init(UART1_BAUD);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	72 ec       	ldi	r23, 0xC2	; 194
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 4c 07 	call	0xe98	; 0xe98 <uart_init>
	i2c_init(100000UL);
     590:	60 ea       	ldi	r22, 0xA0	; 160
     592:	76 e8       	ldi	r23, 0x86	; 134
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 90 06 	call	0xd20	; 0xd20 <i2c_init>
	can_init();
     59c:	0e 94 2c 05 	call	0xa58	; 0xa58 <can_init>

	uint8_t resp;

	InitCanMsgs();
     5a0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <InitCanMsgs>
	printf("Start\n");
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <puts>

	if((resp = acl_init())!= 0)	printf("ACL initialization error: %u\n",resp);
     5ac:	0e 94 1c 03 	call	0x638	; 0x638 <acl_init>
     5b0:	28 2f       	mov	r18, r24
     5b2:	88 23       	and	r24, r24
     5b4:	a9 f0       	breq	.+42     	; 0x5e0 <main+0x78>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <main+0x50>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <main+0x52>
     5ba:	ed b7       	in	r30, 0x3d	; 61
     5bc:	fe b7       	in	r31, 0x3e	; 62
     5be:	31 96       	adiw	r30, 0x01	; 1
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	ad b7       	in	r26, 0x3d	; 61
     5c6:	be b7       	in	r27, 0x3e	; 62
     5c8:	12 96       	adiw	r26, 0x02	; 2
     5ca:	9c 93       	st	X, r25
     5cc:	8e 93       	st	-X, r24
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	22 83       	std	Z+2, r18	; 0x02
     5d2:	13 82       	std	Z+3, r1	; 0x03
     5d4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <printf>
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0

	sts_init();
     5e0:	0e 94 5c 05 	call	0xab8	; 0xab8 <sts_init>

	sei();
     5e4:	78 94       	sei

	systimer_10ms_restart(10);
     5e6:	8a e0       	ldi	r24, 0x0A	; 10
     5e8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <systimer_10ms_restart>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5ec:	c0 e9       	ldi	r28, 0x90	; 144
     5ee:	d1 e0       	ldi	r29, 0x01	; 1

	while(1)
	{
			acl_get_values();
     5f0:	0e 94 33 03 	call	0x666	; 0x666 <acl_get_values>
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <main+0x8e>
			_delay_us(100);
			sts_get_values();
     5fa:	0e 94 67 05 	call	0xace	; 0xace <sts_get_values>
     5fe:	ce 01       	movw	r24, r28
     600:	01 97       	sbiw	r24, 0x01	; 1
     602:	f1 f7       	brne	.-4      	; 0x600 <main+0x98>
     604:	f5 cf       	rjmp	.-22     	; 0x5f0 <main+0x88>

00000606 <acl_write>:
volatile int16_t acl_x = 0;
volatile int16_t acl_y = 0;
volatile int16_t acl_z = 0;

uint8_t acl_write(uint8_t reg,uint8_t data)
{
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	18 2f       	mov	r17, r24
     60c:	06 2f       	mov	r16, r22
	// Set Sampling Rate
	if(i2c_start(ACL_WR))
     60e:	86 ea       	ldi	r24, 0xA6	; 166
     610:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>
     614:	88 23       	and	r24, r24
     616:	21 f0       	breq	.+8      	; 0x620 <acl_write+0x1a>
	{
		i2c_stop();
     618:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	09 c0       	rjmp	.+18     	; 0x632 <acl_write+0x2c>
		return 1;
	}

	i2c_write(reg);
     620:	81 2f       	mov	r24, r17
     622:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
	i2c_write(data);
     626:	80 2f       	mov	r24, r16
     628:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>
	i2c_stop();
     62c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     630:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     632:	1f 91       	pop	r17
     634:	0f 91       	pop	r16
     636:	08 95       	ret

00000638 <acl_init>:
}

uint8_t acl_init(void)
{
	// Set Sampling Rate
	if(acl_write(ACL_BW_RATE,0x0C)) 	return 1;
     638:	8c e2       	ldi	r24, 0x2C	; 44
     63a:	6c e0       	ldi	r22, 0x0C	; 12
     63c:	0e 94 03 03 	call	0x606	; 0x606 <acl_write>
     640:	88 23       	and	r24, r24
     642:	11 f0       	breq	.+4      	; 0x648 <acl_init+0x10>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	08 95       	ret

	// Configure data format
	if(acl_write(ACL_DATA_FORMAT,0x00)) return 2;
     648:	81 e3       	ldi	r24, 0x31	; 49
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	0e 94 03 03 	call	0x606	; 0x606 <acl_write>
     650:	88 23       	and	r24, r24
     652:	11 f0       	breq	.+4      	; 0x658 <acl_init+0x20>
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	08 95       	ret

	// Configure Power Control
	if(acl_write(ACL_POWER_CTL,0x08))	return 3;
     658:	8d e2       	ldi	r24, 0x2D	; 45
     65a:	68 e0       	ldi	r22, 0x08	; 8
     65c:	0e 94 03 03 	call	0x606	; 0x606 <acl_write>
     660:	81 11       	cpse	r24, r1
     662:	83 e0       	ldi	r24, 0x03	; 3

	return 0;
}
     664:	08 95       	ret

00000666 <acl_get_values>:

uint8_t acl_get_values(void)
{
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
	uint8_t x0,x1,y0,y1,z0,z1;
	int16_t x,y,z;

	//Write Address
	if(i2c_start(ACL_WR))
     676:	86 ea       	ldi	r24, 0xA6	; 166
     678:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>
     67c:	88 23       	and	r24, r24
     67e:	21 f0       	breq	.+8      	; 0x688 <acl_get_values+0x22>
	{
		i2c_stop();
     680:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	87 c0       	rjmp	.+270    	; 0x796 <acl_get_values+0x130>
		return 1;
	}

	// Write register address
	i2c_write(ACL_DATAX0);
     688:	82 e3       	ldi	r24, 0x32	; 50
     68a:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>

	// Repeat Start
	if(i2c_rep_start(ACL_RD))
     68e:	87 ea       	ldi	r24, 0xA7	; 167
     690:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_rep_start>
     694:	88 23       	and	r24, r24
     696:	21 f0       	breq	.+8      	; 0x6a0 <acl_get_values+0x3a>
	{
		i2c_stop();
     698:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	7b c0       	rjmp	.+246    	; 0x796 <acl_get_values+0x130>
		return 2;
	}

	// Read data
	x0 = i2c_read(ACK);
     6a0:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     6a4:	08 2f       	mov	r16, r24
	x1 = i2c_read(ACK);
     6a6:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     6aa:	18 2f       	mov	r17, r24
	y0 = i2c_read(ACK);
     6ac:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     6b0:	c8 2e       	mov	r12, r24
	y1 = i2c_read(ACK);
     6b2:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     6b6:	d8 2e       	mov	r13, r24
	z0 = i2c_read(ACK);
     6b8:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     6bc:	a8 2e       	mov	r10, r24
	z1 = i2c_read(NACK);
     6be:	0e 94 42 07 	call	0xe84	; 0xe84 <i2c_readNak>
     6c2:	b8 2e       	mov	r11, r24

	// I2c stop
	i2c_stop();
     6c4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
	x = 4*((((int16_t)x1) << 8) + (int16_t)x0);
	y = 4*((((int16_t)y1) << 8) + (int16_t)y0);
	z = 4*((((int16_t)z1) << 8) + (int16_t)z0);

	// Compensation (MUL*(val+OFFSET)/1000)
	x = (uint16_t)((ACL_X_MUL*((int32_t)x + ACL_X_OFFSET))/1000);
     6c8:	71 2f       	mov	r23, r17
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	60 0f       	add	r22, r16
     6ce:	71 1d       	adc	r23, r1
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	66 0f       	add	r22, r22
     6d6:	77 1f       	adc	r23, r23
     6d8:	88 27       	eor	r24, r24
     6da:	77 fd       	sbrc	r23, 7
     6dc:	80 95       	com	r24
     6de:	98 2f       	mov	r25, r24
     6e0:	21 eb       	ldi	r18, 0xB1	; 177
     6e2:	33 e0       	ldi	r19, 0x03	; 3
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsi3>
     6ec:	6e 5c       	subi	r22, 0xCE	; 206
     6ee:	79 4a       	sbci	r23, 0xA9	; 169
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	90 40       	sbci	r25, 0x00	; 0
     6f4:	28 ee       	ldi	r18, 0xE8	; 232
     6f6:	33 e0       	ldi	r19, 0x03	; 3
     6f8:	40 e0       	ldi	r20, 0x00	; 0
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     700:	79 01       	movw	r14, r18
	y = (uint16_t)((ACL_Y_MUL*((int32_t)y + ACL_Y_OFFSET))/1000);
     702:	7d 2d       	mov	r23, r13
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	6c 0d       	add	r22, r12
     708:	71 1d       	adc	r23, r1
     70a:	66 0f       	add	r22, r22
     70c:	77 1f       	adc	r23, r23
     70e:	66 0f       	add	r22, r22
     710:	77 1f       	adc	r23, r23
     712:	88 27       	eor	r24, r24
     714:	77 fd       	sbrc	r23, 7
     716:	80 95       	com	r24
     718:	98 2f       	mov	r25, r24
     71a:	29 eb       	ldi	r18, 0xB9	; 185
     71c:	33 e0       	ldi	r19, 0x03	; 3
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsi3>
     726:	6e 5a       	subi	r22, 0xAE	; 174
     728:	7f 46       	sbci	r23, 0x6F	; 111
     72a:	80 40       	sbci	r24, 0x00	; 0
     72c:	90 40       	sbci	r25, 0x00	; 0
     72e:	28 ee       	ldi	r18, 0xE8	; 232
     730:	33 e0       	ldi	r19, 0x03	; 3
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     73a:	89 01       	movw	r16, r18
	z = (uint16_t)((ACL_Z_MUL*((int32_t)z + ACL_Z_OFFSET))/1000);
     73c:	7b 2d       	mov	r23, r11
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	6a 0d       	add	r22, r10
     742:	71 1d       	adc	r23, r1
     744:	66 0f       	add	r22, r22
     746:	77 1f       	adc	r23, r23
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	88 27       	eor	r24, r24
     74e:	77 fd       	sbrc	r23, 7
     750:	80 95       	com	r24
     752:	98 2f       	mov	r25, r24
     754:	24 ed       	ldi	r18, 0xD4	; 212
     756:	33 e0       	ldi	r19, 0x03	; 3
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	0e 94 5f 08 	call	0x10be	; 0x10be <__mulsi3>
     760:	6c 5b       	subi	r22, 0xBC	; 188
     762:	78 44       	sbci	r23, 0x48	; 72
     764:	80 40       	sbci	r24, 0x00	; 0
     766:	90 40       	sbci	r25, 0x00	; 0
     768:	28 ee       	ldi	r18, 0xE8	; 232
     76a:	33 e0       	ldi	r19, 0x03	; 3
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     774:	c9 01       	movw	r24, r18

	// Guarantee atomic write
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     776:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     778:	f8 94       	cli
	{
		acl_x = x;
     77a:	f0 92 47 01 	sts	0x0147, r15
     77e:	e0 92 46 01 	sts	0x0146, r14
		acl_y = y;
     782:	10 93 49 01 	sts	0x0149, r17
     786:	00 93 48 01 	sts	0x0148, r16
		acl_z = z;
     78a:	90 93 4b 01 	sts	0x014B, r25
     78e:	80 93 4a 01 	sts	0x014A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     792:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     794:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 0;
}
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	ef 90       	pop	r14
     79e:	df 90       	pop	r13
     7a0:	cf 90       	pop	r12
     7a2:	bf 90       	pop	r11
     7a4:	af 90       	pop	r10
     7a6:	08 95       	ret

000007a8 <acl_read>:

	return 0;
}

uint8_t acl_read(uint8_t reg,uint8_t *data)
{
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	18 2f       	mov	r17, r24
     7b0:	eb 01       	movw	r28, r22
	// Send Register
	if(i2c_start(ACL_WR))
     7b2:	86 ea       	ldi	r24, 0xA6	; 166
     7b4:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>
     7b8:	88 23       	and	r24, r24
     7ba:	21 f0       	breq	.+8      	; 0x7c4 <acl_read+0x1c>
	{
		i2c_stop();
     7bc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	10 c0       	rjmp	.+32     	; 0x7e4 <acl_read+0x3c>
		return 1;
	}

	i2c_write(reg);
     7c4:	81 2f       	mov	r24, r17
     7c6:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>

	// Read Register
	if(i2c_rep_start(ACL_RD))
     7ca:	87 ea       	ldi	r24, 0xA7	; 167
     7cc:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_rep_start>
     7d0:	88 23       	and	r24, r24
     7d2:	21 f0       	breq	.+8      	; 0x7dc <acl_read+0x34>
	{
		i2c_stop();
     7d4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	04 c0       	rjmp	.+8      	; 0x7e4 <acl_read+0x3c>
		return 2;
	}

	*data = i2c_read(NACK);
     7dc:	0e 94 42 07 	call	0xe84	; 0xe84 <i2c_readNak>
     7e0:	88 83       	st	Y, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0

	return 0;
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <can_tx>:
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	e8 2f       	mov	r30, r24
     7f2:	eb 01       	movw	r28, r22
     7f4:	82 95       	swap	r24
     7f6:	80 7f       	andi	r24, 0xF0	; 240
     7f8:	80 93 ed 00 	sts	0x00ED, r24
     7fc:	80 91 ef 00 	lds	r24, 0x00EF
     800:	80 7c       	andi	r24, 0xC0	; 192
     802:	21 f0       	breq	.+8      	; 0x80c <can_tx+0x20>
     804:	80 91 ee 00 	lds	r24, 0x00EE
     808:	86 ff       	sbrs	r24, 6
     80a:	93 c0       	rjmp	.+294    	; 0x932 <can_tx+0x146>
     80c:	4e 2f       	mov	r20, r30
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	fa 01       	movw	r30, r20
     812:	e1 55       	subi	r30, 0x51	; 81
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	80 81       	ld	r24, Z
     818:	88 23       	and	r24, r24
     81a:	09 f0       	breq	.+2      	; 0x81e <can_tx+0x32>
     81c:	8a c0       	rjmp	.+276    	; 0x932 <can_tx+0x146>
     81e:	10 92 ee 00 	sts	0x00EE, r1
     822:	10 92 ef 00 	sts	0x00EF, r1
     826:	8c 81       	ldd	r24, Y+4	; 0x04
     828:	88 23       	and	r24, r24
     82a:	d9 f4       	brne	.+54     	; 0x862 <can_tx+0x76>
     82c:	88 81       	ld	r24, Y
     82e:	99 81       	ldd	r25, Y+1	; 0x01
     830:	aa 81       	ldd	r26, Y+2	; 0x02
     832:	bb 81       	ldd	r27, Y+3	; 0x03
     834:	73 e0       	ldi	r23, 0x03	; 3
     836:	b6 95       	lsr	r27
     838:	a7 95       	ror	r26
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	7a 95       	dec	r23
     840:	d1 f7       	brne	.-12     	; 0x836 <can_tx+0x4a>
     842:	80 93 f3 00 	sts	0x00F3, r24
     846:	88 81       	ld	r24, Y
     848:	99 81       	ldd	r25, Y+1	; 0x01
     84a:	aa 81       	ldd	r26, Y+2	; 0x02
     84c:	bb 81       	ldd	r27, Y+3	; 0x03
     84e:	82 95       	swap	r24
     850:	88 0f       	add	r24, r24
     852:	80 7e       	andi	r24, 0xE0	; 224
     854:	80 93 f2 00 	sts	0x00F2, r24
     858:	10 92 f1 00 	sts	0x00F1, r1
     85c:	10 92 f0 00 	sts	0x00F0, r1
     860:	35 c0       	rjmp	.+106    	; 0x8cc <can_tx+0xe0>
     862:	88 81       	ld	r24, Y
     864:	99 81       	ldd	r25, Y+1	; 0x01
     866:	aa 81       	ldd	r26, Y+2	; 0x02
     868:	bb 81       	ldd	r27, Y+3	; 0x03
     86a:	65 e1       	ldi	r22, 0x15	; 21
     86c:	b6 95       	lsr	r27
     86e:	a7 95       	ror	r26
     870:	97 95       	ror	r25
     872:	87 95       	ror	r24
     874:	6a 95       	dec	r22
     876:	d1 f7       	brne	.-12     	; 0x86c <can_tx+0x80>
     878:	80 93 f3 00 	sts	0x00F3, r24
     87c:	88 81       	ld	r24, Y
     87e:	99 81       	ldd	r25, Y+1	; 0x01
     880:	aa 81       	ldd	r26, Y+2	; 0x02
     882:	bb 81       	ldd	r27, Y+3	; 0x03
     884:	3d e0       	ldi	r19, 0x0D	; 13
     886:	b6 95       	lsr	r27
     888:	a7 95       	ror	r26
     88a:	97 95       	ror	r25
     88c:	87 95       	ror	r24
     88e:	3a 95       	dec	r19
     890:	d1 f7       	brne	.-12     	; 0x886 <can_tx+0x9a>
     892:	80 93 f2 00 	sts	0x00F2, r24
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	aa 81       	ldd	r26, Y+2	; 0x02
     89c:	bb 81       	ldd	r27, Y+3	; 0x03
     89e:	25 e0       	ldi	r18, 0x05	; 5
     8a0:	b6 95       	lsr	r27
     8a2:	a7 95       	ror	r26
     8a4:	97 95       	ror	r25
     8a6:	87 95       	ror	r24
     8a8:	2a 95       	dec	r18
     8aa:	d1 f7       	brne	.-12     	; 0x8a0 <can_tx+0xb4>
     8ac:	80 93 f1 00 	sts	0x00F1, r24
     8b0:	88 81       	ld	r24, Y
     8b2:	99 81       	ldd	r25, Y+1	; 0x01
     8b4:	aa 81       	ldd	r26, Y+2	; 0x02
     8b6:	bb 81       	ldd	r27, Y+3	; 0x03
     8b8:	88 0f       	add	r24, r24
     8ba:	88 0f       	add	r24, r24
     8bc:	88 0f       	add	r24, r24
     8be:	80 93 f0 00 	sts	0x00F0, r24
     8c2:	80 91 ef 00 	lds	r24, 0x00EF
     8c6:	80 61       	ori	r24, 0x10	; 16
     8c8:	80 93 ef 00 	sts	0x00EF, r24
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <can_tx+0xf6>
     8d2:	fe 01       	movw	r30, r28
     8d4:	e2 0f       	add	r30, r18
     8d6:	f3 1f       	adc	r31, r19
     8d8:	87 81       	ldd	r24, Z+7	; 0x07
     8da:	80 93 fa 00 	sts	0x00FA, r24
     8de:	2f 5f       	subi	r18, 0xFF	; 255
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	8e 81       	ldd	r24, Y+6	; 0x06
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	28 17       	cp	r18, r24
     8e8:	39 07       	cpc	r19, r25
     8ea:	98 f3       	brcs	.-26     	; 0x8d2 <can_tx+0xe6>
     8ec:	90 91 ef 00 	lds	r25, 0x00EF
     8f0:	8e 81       	ldd	r24, Y+6	; 0x06
     8f2:	89 2b       	or	r24, r25
     8f4:	80 93 ef 00 	sts	0x00EF, r24
     8f8:	fa 01       	movw	r30, r20
     8fa:	e1 55       	subi	r30, 0x51	; 81
     8fc:	fe 4f       	sbci	r31, 0xFE	; 254
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	80 83       	st	Z, r24
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	02 c0       	rjmp	.+4      	; 0x90c <can_tx+0x120>
     908:	22 0f       	add	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	4a 95       	dec	r20
     90e:	e2 f7       	brpl	.-8      	; 0x908 <can_tx+0x11c>
     910:	80 91 de 00 	lds	r24, 0x00DE
     914:	82 2b       	or	r24, r18
     916:	80 93 de 00 	sts	0x00DE, r24
     91a:	80 91 df 00 	lds	r24, 0x00DF
     91e:	83 2b       	or	r24, r19
     920:	80 93 df 00 	sts	0x00DF, r24
     924:	80 91 ef 00 	lds	r24, 0x00EF
     928:	80 64       	ori	r24, 0x40	; 64
     92a:	80 93 ef 00 	sts	0x00EF, r24
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	01 c0       	rjmp	.+2      	; 0x934 <can_tx+0x148>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <prepare_rx>:
     93a:	cf 92       	push	r12
     93c:	ef 92       	push	r14
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	e8 2f       	mov	r30, r24
     948:	9e 2d       	mov	r25, r14
     94a:	8f 30       	cpi	r24, 0x0F	; 15
     94c:	08 f0       	brcs	.+2      	; 0x950 <prepare_rx+0x16>
     94e:	7c c0       	rjmp	.+248    	; 0xa48 <prepare_rx+0x10e>
     950:	82 95       	swap	r24
     952:	80 7f       	andi	r24, 0xF0	; 240
     954:	80 93 ed 00 	sts	0x00ED, r24
     958:	80 91 ef 00 	lds	r24, 0x00EF
     95c:	80 7c       	andi	r24, 0xC0	; 192
     95e:	09 f0       	breq	.+2      	; 0x962 <prepare_rx+0x28>
     960:	73 c0       	rjmp	.+230    	; 0xa48 <prepare_rx+0x10e>
     962:	ce 2f       	mov	r28, r30
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	fe 01       	movw	r30, r28
     968:	e1 55       	subi	r30, 0x51	; 81
     96a:	fe 4f       	sbci	r31, 0xFE	; 254
     96c:	c0 82       	st	Z, r12
     96e:	10 92 ee 00 	sts	0x00EE, r1
     972:	10 92 ef 00 	sts	0x00EF, r1
     976:	10 92 ec 00 	sts	0x00EC, r1
     97a:	91 30       	cpi	r25, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <prepare_rx+0x46>
     97e:	51 c0       	rjmp	.+162    	; 0xa22 <prepare_rx+0xe8>
     980:	db 01       	movw	r26, r22
     982:	ca 01       	movw	r24, r20
     984:	f5 e1       	ldi	r31, 0x15	; 21
     986:	b6 95       	lsr	r27
     988:	a7 95       	ror	r26
     98a:	97 95       	ror	r25
     98c:	87 95       	ror	r24
     98e:	fa 95       	dec	r31
     990:	d1 f7       	brne	.-12     	; 0x986 <prepare_rx+0x4c>
     992:	80 93 f3 00 	sts	0x00F3, r24
     996:	db 01       	movw	r26, r22
     998:	ca 01       	movw	r24, r20
     99a:	ed e0       	ldi	r30, 0x0D	; 13
     99c:	b6 95       	lsr	r27
     99e:	a7 95       	ror	r26
     9a0:	97 95       	ror	r25
     9a2:	87 95       	ror	r24
     9a4:	ea 95       	dec	r30
     9a6:	d1 f7       	brne	.-12     	; 0x99c <prepare_rx+0x62>
     9a8:	80 93 f2 00 	sts	0x00F2, r24
     9ac:	db 01       	movw	r26, r22
     9ae:	ca 01       	movw	r24, r20
     9b0:	55 e0       	ldi	r21, 0x05	; 5
     9b2:	b6 95       	lsr	r27
     9b4:	a7 95       	ror	r26
     9b6:	97 95       	ror	r25
     9b8:	87 95       	ror	r24
     9ba:	5a 95       	dec	r21
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <prepare_rx+0x78>
     9be:	80 93 f1 00 	sts	0x00F1, r24
     9c2:	84 2f       	mov	r24, r20
     9c4:	88 0f       	add	r24, r24
     9c6:	88 0f       	add	r24, r24
     9c8:	88 0f       	add	r24, r24
     9ca:	80 93 f0 00 	sts	0x00F0, r24
     9ce:	d9 01       	movw	r26, r18
     9d0:	c8 01       	movw	r24, r16
     9d2:	45 e1       	ldi	r20, 0x15	; 21
     9d4:	b6 95       	lsr	r27
     9d6:	a7 95       	ror	r26
     9d8:	97 95       	ror	r25
     9da:	87 95       	ror	r24
     9dc:	4a 95       	dec	r20
     9de:	d1 f7       	brne	.-12     	; 0x9d4 <prepare_rx+0x9a>
     9e0:	80 93 f7 00 	sts	0x00F7, r24
     9e4:	d9 01       	movw	r26, r18
     9e6:	c8 01       	movw	r24, r16
     9e8:	fd e0       	ldi	r31, 0x0D	; 13
     9ea:	b6 95       	lsr	r27
     9ec:	a7 95       	ror	r26
     9ee:	97 95       	ror	r25
     9f0:	87 95       	ror	r24
     9f2:	fa 95       	dec	r31
     9f4:	d1 f7       	brne	.-12     	; 0x9ea <prepare_rx+0xb0>
     9f6:	80 93 f6 00 	sts	0x00F6, r24
     9fa:	d9 01       	movw	r26, r18
     9fc:	c8 01       	movw	r24, r16
     9fe:	e5 e0       	ldi	r30, 0x05	; 5
     a00:	b6 95       	lsr	r27
     a02:	a7 95       	ror	r26
     a04:	97 95       	ror	r25
     a06:	87 95       	ror	r24
     a08:	ea 95       	dec	r30
     a0a:	d1 f7       	brne	.-12     	; 0xa00 <prepare_rx+0xc6>
     a0c:	80 93 f5 00 	sts	0x00F5, r24
     a10:	80 2f       	mov	r24, r16
     a12:	88 0f       	add	r24, r24
     a14:	88 0f       	add	r24, r24
     a16:	88 0f       	add	r24, r24
     a18:	80 93 f4 00 	sts	0x00F4, r24
     a1c:	80 e9       	ldi	r24, 0x90	; 144
     a1e:	80 93 ef 00 	sts	0x00EF, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <prepare_rx+0xf2>
     a28:	88 0f       	add	r24, r24
     a2a:	99 1f       	adc	r25, r25
     a2c:	ca 95       	dec	r28
     a2e:	e2 f7       	brpl	.-8      	; 0xa28 <prepare_rx+0xee>
     a30:	20 91 de 00 	lds	r18, 0x00DE
     a34:	28 2b       	or	r18, r24
     a36:	20 93 de 00 	sts	0x00DE, r18
     a3a:	20 91 df 00 	lds	r18, 0x00DF
     a3e:	29 2b       	or	r18, r25
     a40:	20 93 df 00 	sts	0x00DF, r18
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <prepare_rx+0x110>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ef 90       	pop	r14
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <can_init>:
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	80 93 e2 00 	sts	0x00E2, r24
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	80 93 e3 00 	sts	0x00E3, r24
     a64:	87 e3       	ldi	r24, 0x37	; 55
     a66:	80 93 e4 00 	sts	0x00E4, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	89 2f       	mov	r24, r25
     a6e:	82 95       	swap	r24
     a70:	80 7f       	andi	r24, 0xF0	; 240
     a72:	80 93 ed 00 	sts	0x00ED, r24
     a76:	10 92 ee 00 	sts	0x00EE, r1
     a7a:	10 92 ef 00 	sts	0x00EF, r1
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
     a80:	9f 30       	cpi	r25, 0x0F	; 15
     a82:	a1 f7       	brne	.-24     	; 0xa6c <can_init+0x14>
     a84:	80 91 d8 00 	lds	r24, 0x00D8
     a88:	82 60       	ori	r24, 0x02	; 2
     a8a:	80 93 d8 00 	sts	0x00D8, r24
     a8e:	80 eb       	ldi	r24, 0xB0	; 176
     a90:	80 93 db 00 	sts	0x00DB, r24
     a94:	80 91 d9 00 	lds	r24, 0x00D9
     a98:	82 ff       	sbrs	r24, 2
     a9a:	fc cf       	rjmp	.-8      	; 0xa94 <can_init+0x3c>
     a9c:	08 95       	ret

00000a9e <get_open_mob>:
     a9e:	ef ea       	ldi	r30, 0xAF	; 175
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	88 23       	and	r24, r24
     aa8:	29 f0       	breq	.+10     	; 0xab4 <get_open_mob+0x16>
     aaa:	9f 5f       	subi	r25, 0xFF	; 255
     aac:	31 96       	adiw	r30, 0x01	; 1
     aae:	9f 30       	cpi	r25, 0x0F	; 15
     ab0:	c9 f7       	brne	.-14     	; 0xaa4 <get_open_mob+0x6>
     ab2:	9f ef       	ldi	r25, 0xFF	; 255
     ab4:	89 2f       	mov	r24, r25
     ab6:	08 95       	ret

00000ab8 <sts_init>:
volatile uint8_t curr_chan = 0;
volatile uint16_t susp_trvl[4] = {0,0,0,0};

void sts_init(void)
{
	ADMUX |= _BV(REFS0);
     ab8:	ec e7       	ldi	r30, 0x7C	; 124
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	80 64       	ori	r24, 0x40	; 64
     ac0:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1)|_BV(ADPS0);
     ac2:	ea e7       	ldi	r30, 0x7A	; 122
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	87 68       	ori	r24, 0x87	; 135
     aca:	80 83       	st	Z, r24
}
     acc:	08 95       	ret

00000ace <sts_get_values>:

void sts_get_values(void)
{
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
	//Channel 0
	uint8_t i;

	for(i = 0;i<4;i++)
	{
		ADMUX &= 0xE0;
     ad2:	80 91 7c 00 	lds	r24, 0x007C
     ad6:	80 7e       	andi	r24, 0xE0	; 224
     ad8:	80 93 7c 00 	sts	0x007C, r24
		ADMUX |= i;
     adc:	80 91 7c 00 	lds	r24, 0x007C
     ae0:	82 2b       	or	r24, r18
     ae2:	80 93 7c 00 	sts	0x007C, r24
		ADCSRA |=_BV(ADSC);
     ae6:	80 91 7a 00 	lds	r24, 0x007A
     aea:	80 64       	ori	r24, 0x40	; 64
     aec:	80 93 7a 00 	sts	0x007A, r24
		while(!(ADCSRA & _BV(ADIF)));
     af0:	80 91 7a 00 	lds	r24, 0x007A
     af4:	84 ff       	sbrs	r24, 4
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <sts_get_values+0x22>
		susp_trvl[i] = ADC;
     af8:	80 91 78 00 	lds	r24, 0x0078
     afc:	90 91 79 00 	lds	r25, 0x0079
     b00:	f9 01       	movw	r30, r18
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e3 5b       	subi	r30, 0xB3	; 179
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	91 83       	std	Z+1, r25	; 0x01
     b0c:	80 83       	st	Z, r24
		susp_trvl[i] &= 0b0000001111111111;
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	93 70       	andi	r25, 0x03	; 3
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
		ADCSRA |= _BV(ADIF);
     b18:	80 91 7a 00 	lds	r24, 0x007A
     b1c:	80 61       	ori	r24, 0x10	; 16
     b1e:	80 93 7a 00 	sts	0x007A, r24
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
void sts_get_values(void)
{
	//Channel 0
	uint8_t i;

	for(i = 0;i<4;i++)
     b26:	24 30       	cpi	r18, 0x04	; 4
     b28:	31 05       	cpc	r19, r1
     b2a:	99 f6       	brne	.-90     	; 0xad2 <sts_get_values+0x4>
		while(!(ADCSRA & _BV(ADIF)));
		susp_trvl[i] = ADC;
		susp_trvl[i] &= 0b0000001111111111;
		ADCSRA |= _BV(ADIF);
	}
}
     b2c:	08 95       	ret

00000b2e <__vector_12>:
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	0b b6       	in	r0, 0x3b	; 59
     b38:	0f 92       	push	r0
     b3a:	11 24       	eor	r1, r1
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
     b54:	84 ec       	ldi	r24, 0xC4	; 196
     b56:	99 e0       	ldi	r25, 0x09	; 9
     b58:	90 93 89 00 	sts	0x0089, r25
     b5c:	80 93 88 00 	sts	0x0088, r24
     b60:	80 91 55 01 	lds	r24, 0x0155
     b64:	90 91 56 01 	lds	r25, 0x0156
     b68:	a0 91 57 01 	lds	r26, 0x0157
     b6c:	b0 91 58 01 	lds	r27, 0x0158
     b70:	0a 96       	adiw	r24, 0x0a	; 10
     b72:	a1 1d       	adc	r26, r1
     b74:	b1 1d       	adc	r27, r1
     b76:	80 93 55 01 	sts	0x0155, r24
     b7a:	90 93 56 01 	sts	0x0156, r25
     b7e:	a0 93 57 01 	sts	0x0157, r26
     b82:	b0 93 58 01 	sts	0x0158, r27
     b86:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <handle_10ms_tick>
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <systimer_10ms_restart>:
     bb0:	28 2f       	mov	r18, r24
     bb2:	10 92 85 00 	sts	0x0085, r1
     bb6:	10 92 84 00 	sts	0x0084, r1
     bba:	88 23       	and	r24, r24
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <systimer_10ms_restart+0x18>
     bbe:	8a ef       	ldi	r24, 0xFA	; 250
     bc0:	28 9f       	mul	r18, r24
     bc2:	c0 01       	movw	r24, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <systimer_10ms_restart+0x1c>
     bc8:	84 ec       	ldi	r24, 0xC4	; 196
     bca:	99 e0       	ldi	r25, 0x09	; 9
     bcc:	90 93 89 00 	sts	0x0089, r25
     bd0:	80 93 88 00 	sts	0x0088, r24
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	80 93 6f 00 	sts	0x006F, r24
     bda:	8b e0       	ldi	r24, 0x0B	; 11
     bdc:	80 93 81 00 	sts	0x0081, r24
     be0:	22 23       	and	r18, r18
     be2:	a9 f4       	brne	.+42     	; 0xc0e <systimer_10ms_restart+0x5e>
     be4:	80 91 55 01 	lds	r24, 0x0155
     be8:	90 91 56 01 	lds	r25, 0x0156
     bec:	a0 91 57 01 	lds	r26, 0x0157
     bf0:	b0 91 58 01 	lds	r27, 0x0158
     bf4:	0a 96       	adiw	r24, 0x0a	; 10
     bf6:	a1 1d       	adc	r26, r1
     bf8:	b1 1d       	adc	r27, r1
     bfa:	80 93 55 01 	sts	0x0155, r24
     bfe:	90 93 56 01 	sts	0x0156, r25
     c02:	a0 93 57 01 	sts	0x0157, r26
     c06:	b0 93 58 01 	sts	0x0158, r27
     c0a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <handle_10ms_tick>
     c0e:	08 95       	ret

00000c10 <temp_init>:

volatile uint8_t temps[12] = {255,255,255,255,255,255,255,255,255,255,255,255};

uint8_t temp_init(uint8_t addr)
{
	if(addr == 0) return 1;
     c10:	88 23       	and	r24, r24
     c12:	39 f0       	breq	.+14     	; 0xc22 <temp_init+0x12>

	if(i2c_start(addr+I2C_READ))
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>
     c1a:	88 23       	and	r24, r24
     c1c:	21 f0       	breq	.+8      	; 0xc26 <temp_init+0x16>
	{
		i2c_stop();
     c1e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	08 95       	ret
		return 1;
	}
	i2c_stop();
     c26:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
     c2c:	08 95       	ret

00000c2e <temp_get_value>:

uint8_t temp_get_value(uint8_t addr,uint8_t idx)
{
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	18 2f       	mov	r17, r24
     c36:	f6 2e       	mov	r15, r22
	uint8_t t0,t1,pec;

	int32_t t;

	if(addr == 0)	return(1);
     c38:	88 23       	and	r24, r24
     c3a:	31 f0       	breq	.+12     	; 0xc48 <temp_get_value+0x1a>

	if(i2c_start(addr+I2C_WRITE))
     c3c:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>
     c40:	88 23       	and	r24, r24
     c42:	21 f0       	breq	.+8      	; 0xc4c <temp_get_value+0x1e>
	{
		i2c_stop();
     c44:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	66 c0       	rjmp	.+204    	; 0xd18 <temp_get_value+0xea>
		return(1);
	}

	i2c_write(TMPSNSR_VAL);
     c4c:	87 e0       	ldi	r24, 0x07	; 7
     c4e:	0e 94 26 07 	call	0xe4c	; 0xe4c <i2c_write>

	if(i2c_rep_start(addr+I2C_READ))
     c52:	81 2f       	mov	r24, r17
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	0e 94 1b 07 	call	0xe36	; 0xe36 <i2c_rep_start>
     c5a:	88 23       	and	r24, r24
     c5c:	21 f0       	breq	.+8      	; 0xc66 <temp_get_value+0x38>
	{
		i2c_stop();
     c5e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	59 c0       	rjmp	.+178    	; 0xd18 <temp_get_value+0xea>
		return 2;
	}

	t0 = i2c_read(ACK);
     c66:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     c6a:	08 2f       	mov	r16, r24
	t1 = i2c_read(ACK);
     c6c:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
     c70:	18 2f       	mov	r17, r24
	pec = i2c_read(ACK);
     c72:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_readAck>
	i2c_stop();
     c76:	0e 94 1e 07 	call	0xe3c	; 0xe3c <i2c_stop>

	if(t1 & 0x80) // Error bit set
     c7a:	17 ff       	sbrs	r17, 7
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <temp_get_value+0x54>
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	4b c0       	rjmp	.+150    	; 0xd18 <temp_get_value+0xea>
	{
		return 3;
	}
	t = (int16_t)(((uint16_t)(t1 & 0x7F) << 8) + (uint16_t)t0);

	t = (9*(t/50 - 273))/5 + 32;
     c82:	61 2f       	mov	r22, r17
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	6f 77       	andi	r22, 0x7F	; 127
     c88:	70 70       	andi	r23, 0x00	; 0
     c8a:	76 2f       	mov	r23, r22
     c8c:	66 27       	eor	r22, r22
     c8e:	60 0f       	add	r22, r16
     c90:	71 1d       	adc	r23, r1
     c92:	88 27       	eor	r24, r24
     c94:	77 fd       	sbrc	r23, 7
     c96:	80 95       	com	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	22 e3       	ldi	r18, 0x32	; 50
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     ca6:	ca 01       	movw	r24, r20
     ca8:	b9 01       	movw	r22, r18
     caa:	e3 e0       	ldi	r30, 0x03	; 3
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	ea 95       	dec	r30
     cb6:	d1 f7       	brne	.-12     	; 0xcac <temp_get_value+0x7e>
     cb8:	62 0f       	add	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	84 1f       	adc	r24, r20
     cbe:	95 1f       	adc	r25, r21
     cc0:	69 59       	subi	r22, 0x99	; 153
     cc2:	79 40       	sbci	r23, 0x09	; 9
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	25 e0       	ldi	r18, 0x05	; 5
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	0e 94 a0 08 	call	0x1140	; 0x1140 <__divmodsi4>
     cd4:	c9 01       	movw	r24, r18
     cd6:	da 01       	movw	r26, r20
     cd8:	9c 01       	movw	r18, r24
     cda:	ad 01       	movw	r20, r26
     cdc:	20 5e       	subi	r18, 0xE0	; 224
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	4f 4f       	sbci	r20, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255

	if(t < 0)	t = 0;
     ce4:	57 ff       	sbrs	r21, 7
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <temp_get_value+0xc4>
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <temp_get_value+0xd8>
	if(t > 255) t = 255;
     cf2:	2f 3f       	cpi	r18, 0xFF	; 255
     cf4:	31 05       	cpc	r19, r1
     cf6:	41 05       	cpc	r20, r1
     cf8:	51 05       	cpc	r21, r1
     cfa:	29 f0       	breq	.+10     	; 0xd06 <temp_get_value+0xd8>
     cfc:	24 f0       	brlt	.+8      	; 0xd06 <temp_get_value+0xd8>
     cfe:	2f ef       	ldi	r18, 0xFF	; 255
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0

	// Guarantee atomic write
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     d06:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d08:	f8 94       	cli
	{
		temps[idx] = (uint8_t) (t & 0x000000FF);
     d0a:	ef 2d       	mov	r30, r15
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	ee 5c       	subi	r30, 0xCE	; 206
     d10:	fe 4f       	sbci	r31, 0xFE	; 254
     d12:	20 83       	st	Z, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d14:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     d16:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 0;
}
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	08 95       	ret

00000d20 <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
uint8_t i2c_init(uint32_t rate)
{
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	7b 01       	movw	r14, r22
     d2a:	8c 01       	movw	r16, r24
	uint32_t twsr = 0;
	uint32_t prescale = 1;
	uint32_t twbr = 0;

	twbr = ((F_CPU/rate)-16)/2;
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	74 e2       	ldi	r23, 0x24	; 36
     d30:	84 ef       	ldi	r24, 0xF4	; 244
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a8 01       	movw	r20, r16
     d36:	97 01       	movw	r18, r14
     d38:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     d3c:	20 51       	subi	r18, 0x10	; 16
     d3e:	30 40       	sbci	r19, 0x00	; 0
     d40:	40 40       	sbci	r20, 0x00	; 0
     d42:	50 40       	sbci	r21, 0x00	; 0
     d44:	56 95       	lsr	r21
     d46:	47 95       	ror	r20
     d48:	37 95       	ror	r19
     d4a:	27 95       	ror	r18

	while((twbr < 10)||(twbr > 255));
     d4c:	2a 50       	subi	r18, 0x0A	; 10
     d4e:	30 40       	sbci	r19, 0x00	; 0
     d50:	40 40       	sbci	r20, 0x00	; 0
     d52:	50 40       	sbci	r21, 0x00	; 0
     d54:	26 3f       	cpi	r18, 0xF6	; 246
     d56:	31 05       	cpc	r19, r1
     d58:	41 05       	cpc	r20, r1
     d5a:	51 05       	cpc	r21, r1
     d5c:	d8 f7       	brcc	.-10     	; 0xd54 <i2c_init+0x34>
		prescale = twsr*twsr*4;

		twbr = (((F_CPU/prescale)/rate)-16)/2;
	}
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
	TWSR = 0x03 & (uint8_t)twsr;                         /* prescaler */
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 b9 00 	sts	0x00B9, r24
  
	TWBR = (uint8_t)twbr;  /* must be > 10 for stable operation */
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	79 e0       	ldi	r23, 0x09	; 9
     d68:	8d e3       	ldi	r24, 0x3D	; 61
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a8 01       	movw	r20, r16
     d6e:	97 01       	movw	r18, r14
     d70:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     d74:	20 51       	subi	r18, 0x10	; 16
     d76:	30 40       	sbci	r19, 0x00	; 0
     d78:	40 40       	sbci	r20, 0x00	; 0
     d7a:	50 40       	sbci	r21, 0x00	; 0
     d7c:	56 95       	lsr	r21
     d7e:	47 95       	ror	r20
     d80:	37 95       	ror	r19
     d82:	27 95       	ror	r18
     d84:	20 93 b8 00 	sts	0x00B8, r18

	return (uint8_t)prescale;

}/* i2c_init */
     d88:	84 e0       	ldi	r24, 0x04	; 4
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
     d94:	98 2f       	mov	r25, r24
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     d96:	84 ea       	ldi	r24, 0xA4	; 164
     d98:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     d9c:	80 91 bc 00 	lds	r24, 0x00BC
     da0:	87 ff       	sbrs	r24, 7
     da2:	fc cf       	rjmp	.-8      	; 0xd9c <i2c_start+0x8>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     da4:	80 91 b9 00 	lds	r24, 0x00B9
     da8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     daa:	88 30       	cpi	r24, 0x08	; 8
     dac:	11 f0       	breq	.+4      	; 0xdb2 <i2c_start+0x1e>
     dae:	80 31       	cpi	r24, 0x10	; 16
     db0:	a1 f4       	brne	.+40     	; 0xdda <i2c_start+0x46>

	// send device address
	TWDR = address;
     db2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     db6:	84 e8       	ldi	r24, 0x84	; 132
     db8:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     dbc:	80 91 bc 00 	lds	r24, 0x00BC
     dc0:	87 ff       	sbrs	r24, 7
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <i2c_start+0x28>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     dc4:	80 91 b9 00 	lds	r24, 0x00B9
     dc8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) )
     dca:	88 31       	cpi	r24, 0x18	; 24
     dcc:	51 f0       	breq	.+20     	; 0xde2 <i2c_start+0x4e>
     dce:	80 34       	cpi	r24, 0x40	; 64
     dd0:	41 f0       	breq	.+16     	; 0xde2 <i2c_start+0x4e>
	{
		if((twst == TW_MT_SLA_NACK)||(twst == TW_MR_SLA_NACK))
     dd2:	80 32       	cpi	r24, 0x20	; 32
     dd4:	21 f0       	breq	.+8      	; 0xdde <i2c_start+0x4a>
     dd6:	88 34       	cpi	r24, 0x48	; 72
     dd8:	11 f0       	breq	.+4      	; 0xdde <i2c_start+0x4a>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	08 95       	ret
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	08 95       	ret
     de2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return 0;

}/* i2c_start */
     de4:	08 95       	ret

00000de6 <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     de6:	98 2f       	mov	r25, r24


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     de8:	44 ea       	ldi	r20, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     dea:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     dec:	24 e9       	ldi	r18, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     dee:	40 93 bc 00 	sts	0x00BC, r20
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     df2:	80 91 bc 00 	lds	r24, 0x00BC
     df6:	87 ff       	sbrs	r24, 7
     df8:	fc cf       	rjmp	.-8      	; 0xdf2 <i2c_start_wait+0xc>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     dfa:	80 91 b9 00 	lds	r24, 0x00B9
     dfe:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	11 f0       	breq	.+4      	; 0xe08 <i2c_start_wait+0x22>
     e04:	80 31       	cpi	r24, 0x10	; 16
     e06:	99 f7       	brne	.-26     	; 0xdee <i2c_start_wait+0x8>
    
    	// send device address
    	TWDR = address;
     e08:	90 93 bb 00 	sts	0x00BB, r25
    	TWCR = (1<<TWINT) | (1<<TWEN);
     e0c:	30 93 bc 00 	sts	0x00BC, r19
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     e10:	80 91 bc 00 	lds	r24, 0x00BC
     e14:	87 ff       	sbrs	r24, 7
     e16:	fc cf       	rjmp	.-8      	; 0xe10 <i2c_start_wait+0x2a>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     e18:	80 91 b9 00 	lds	r24, 0x00B9
     e1c:	88 7f       	andi	r24, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     e1e:	80 32       	cpi	r24, 0x20	; 32
     e20:	11 f0       	breq	.+4      	; 0xe26 <i2c_start_wait+0x40>
     e22:	88 35       	cpi	r24, 0x58	; 88
     e24:	39 f4       	brne	.+14     	; 0xe34 <i2c_start_wait+0x4e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e26:	20 93 bc 00 	sts	0x00BC, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     e2a:	80 91 bc 00 	lds	r24, 0x00BC
     e2e:	84 fd       	sbrc	r24, 4
     e30:	fc cf       	rjmp	.-8      	; 0xe2a <i2c_start_wait+0x44>
     e32:	dd cf       	rjmp	.-70     	; 0xdee <i2c_start_wait+0x8>
     e34:	08 95       	ret

00000e36 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     e36:	0e 94 ca 06 	call	0xd94	; 0xd94 <i2c_start>

}/* i2c_rep_start */
     e3a:	08 95       	ret

00000e3c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     e3c:	84 e9       	ldi	r24, 0x94	; 148
     e3e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     e42:	80 91 bc 00 	lds	r24, 0x00BC
     e46:	84 fd       	sbrc	r24, 4
     e48:	fc cf       	rjmp	.-8      	; 0xe42 <i2c_stop+0x6>

}/* i2c_stop */
     e4a:	08 95       	ret

00000e4c <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     e4c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     e50:	84 e8       	ldi	r24, 0x84	; 132
     e52:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     e56:	80 91 bc 00 	lds	r24, 0x00BC
     e5a:	87 ff       	sbrs	r24, 7
     e5c:	fc cf       	rjmp	.-8      	; 0xe56 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     e5e:	80 91 b9 00 	lds	r24, 0x00B9
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 7f       	andi	r24, 0xF8	; 248
     e66:	88 32       	cpi	r24, 0x28	; 40
     e68:	09 f0       	breq	.+2      	; 0xe6c <i2c_write+0x20>
     e6a:	91 e0       	ldi	r25, 0x01	; 1
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     e6c:	89 2f       	mov	r24, r25
     e6e:	08 95       	ret

00000e70 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     e70:	84 ec       	ldi	r24, 0xC4	; 196
     e72:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     e76:	80 91 bc 00 	lds	r24, 0x00BC
     e7a:	87 ff       	sbrs	r24, 7
     e7c:	fc cf       	rjmp	.-8      	; 0xe76 <i2c_readAck+0x6>

    return TWDR;
     e7e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     e82:	08 95       	ret

00000e84 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     e84:	84 e8       	ldi	r24, 0x84	; 132
     e86:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     e8a:	80 91 bc 00 	lds	r24, 0x00BC
     e8e:	87 ff       	sbrs	r24, 7
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <i2c_readNak+0x6>
	
    return TWDR;
     e92:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     e96:	08 95       	ret

00000e98 <uart_init>:

/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
void uart_init(uint32_t baud)
{
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
	//initialize UART1
	//initialize USART1
	UCSR1A=_BV(U2X1);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B=0x98;
     ea2:	88 e9       	ldi	r24, 0x98	; 152
     ea4:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C=0x06;
     ea8:	86 e0       	ldi	r24, 0x06	; 6
     eaa:	80 93 ca 00 	sts	0x00CA, r24
	UBRR1 = (F_CPU / (8UL * baud)) - 1;
     eae:	83 e0       	ldi	r24, 0x03	; 3
     eb0:	22 0f       	add	r18, r18
     eb2:	33 1f       	adc	r19, r19
     eb4:	44 1f       	adc	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	8a 95       	dec	r24
     eba:	d1 f7       	brne	.-12     	; 0xeb0 <uart_init+0x18>
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	74 e2       	ldi	r23, 0x24	; 36
     ec0:	84 ef       	ldi	r24, 0xF4	; 244
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__udivmodsi4>
     ec8:	21 50       	subi	r18, 0x01	; 1
     eca:	30 40       	sbci	r19, 0x00	; 0
     ecc:	30 93 cd 00 	sts	0x00CD, r19
     ed0:	20 93 cc 00 	sts	0x00CC, r18
}
     ed4:	08 95       	ret

00000ed6 <uart_Transmit>:

void uart_Transmit( unsigned char data )
{
     ed6:	98 2f       	mov	r25, r24

	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) ) ;
     ed8:	80 91 c8 00 	lds	r24, 0x00C8
     edc:	85 ff       	sbrs	r24, 5
     ede:	fc cf       	rjmp	.-8      	; 0xed8 <uart_Transmit+0x2>
	/* Put data into buffer, sends the data */
	UDR1 = data;
     ee0:	90 93 ce 00 	sts	0x00CE, r25

}
     ee4:	08 95       	ret

00000ee6 <uart_Receive>:

uint8_t uart_Receive( void )
{

/* Wait for data to be received */
while ( !(UCSR1A & (1<<RXC1)) );
     ee6:	80 91 c8 00 	lds	r24, 0x00C8
     eea:	87 ff       	sbrs	r24, 7
     eec:	fc cf       	rjmp	.-8      	; 0xee6 <uart_Receive>
/* Get and return received data from buffer */

return UDR1;
     eee:	80 91 ce 00 	lds	r24, 0x00CE
}
     ef2:	08 95       	ret

00000ef4 <uart_putchar>:
/*
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int uart_putchar(char c, FILE *stream)
{
     ef4:	1f 93       	push	r17
     ef6:	18 2f       	mov	r17, r24

  if (c == '\a')
     ef8:	87 30       	cpi	r24, 0x07	; 7
     efa:	49 f4       	brne	.+18     	; 0xf0e <uart_putchar+0x1a>
    {
      fputs("*ring*\n", stderr);
     efc:	60 91 0d 02 	lds	r22, 0x020D
     f00:	70 91 0e 02 	lds	r23, 0x020E
     f04:	8e e3       	ldi	r24, 0x3E	; 62
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputs>
     f0c:	0b c0       	rjmp	.+22     	; 0xf24 <uart_putchar+0x30>
      return 0;
    }

  if (c == '\n')
     f0e:	8a 30       	cpi	r24, 0x0A	; 10
     f10:	19 f4       	brne	.+6      	; 0xf18 <uart_putchar+0x24>
    uart_putchar('\r', stream);
     f12:	8d e0       	ldi	r24, 0x0D	; 13
     f14:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
  loop_until_bit_is_set(UCSR1A, UDRE1);
     f18:	80 91 c8 00 	lds	r24, 0x00C8
     f1c:	85 ff       	sbrs	r24, 5
     f1e:	fc cf       	rjmp	.-8      	; 0xf18 <uart_putchar+0x24>
  UDR1 = c;
     f20:	10 93 ce 00 	sts	0x00CE, r17

  return 0;
}
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret

00000f2c <uart_getchar>:
 *
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int uart_getchar(FILE *stream)
{
     f2c:	ef 92       	push	r14
     f2e:	ff 92       	push	r15
     f30:	0f 93       	push	r16
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	7c 01       	movw	r14, r24
  uint8_t c;
  char *cp, *cp2;
  static char b[RX_BUFSIZE];
  static char *rxp;

  if (rxp == 0)
     f3a:	80 91 59 01 	lds	r24, 0x0159
     f3e:	90 91 5a 01 	lds	r25, 0x015A
     f42:	89 2b       	or	r24, r25
     f44:	09 f0       	breq	.+2      	; 0xf48 <uart_getchar+0x1c>
     f46:	9f c0       	rjmp	.+318    	; 0x1086 <uart_getchar+0x15a>
     f48:	0b e5       	ldi	r16, 0x5B	; 91
     f4a:	11 e0       	ldi	r17, 0x01	; 1
    for (cp = b;;)
      {
	loop_until_bit_is_set(UCSR1A, RXC1);
     f4c:	80 91 c8 00 	lds	r24, 0x00C8
     f50:	87 ff       	sbrs	r24, 7
     f52:	fc cf       	rjmp	.-8      	; 0xf4c <uart_getchar+0x20>
	if (UCSR1A & _BV(FE1))
     f54:	80 91 c8 00 	lds	r24, 0x00C8
     f58:	84 ff       	sbrs	r24, 4
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <uart_getchar+0x36>
     f5c:	2e ef       	ldi	r18, 0xFE	; 254
     f5e:	3f ef       	ldi	r19, 0xFF	; 255
     f60:	a6 c0       	rjmp	.+332    	; 0x10ae <uart_getchar+0x182>
	  return _FDEV_EOF;
	if (UCSR1A & _BV(DOR1))
     f62:	80 91 c8 00 	lds	r24, 0x00C8
     f66:	83 fd       	sbrc	r24, 3
     f68:	a0 c0       	rjmp	.+320    	; 0x10aa <uart_getchar+0x17e>
	  return _FDEV_ERR;
	c = UDR1;
     f6a:	90 91 ce 00 	lds	r25, 0x00CE
	/* behaviour similar to Unix stty ICRNL */
	if (c == '\r')
     f6e:	9d 30       	cpi	r25, 0x0D	; 13
     f70:	11 f0       	breq	.+4      	; 0xf76 <uart_getchar+0x4a>
	  c = '\n';
	if (c == '\n')
     f72:	9a 30       	cpi	r25, 0x0A	; 10
     f74:	69 f4       	brne	.+26     	; 0xf90 <uart_getchar+0x64>
	  {
	    *cp = c;
     f76:	8a e0       	ldi	r24, 0x0A	; 10
     f78:	f8 01       	movw	r30, r16
     f7a:	80 83       	st	Z, r24
	    uart_putchar(c, stream);
     f7c:	b7 01       	movw	r22, r14
     f7e:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
	    rxp = b;
     f82:	8b e5       	ldi	r24, 0x5B	; 91
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	90 93 5a 01 	sts	0x015A, r25
     f8a:	80 93 59 01 	sts	0x0159, r24
     f8e:	7b c0       	rjmp	.+246    	; 0x1086 <uart_getchar+0x15a>
	    break;
	  }
	else if (c == '\t')
     f90:	99 30       	cpi	r25, 0x09	; 9
     f92:	09 f4       	brne	.+2      	; 0xf96 <uart_getchar+0x6a>
     f94:	90 e2       	ldi	r25, 0x20	; 32
	  c = ' ';

	if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0')
     f96:	89 2f       	mov	r24, r25
     f98:	80 52       	subi	r24, 0x20	; 32
     f9a:	8f 35       	cpi	r24, 0x5F	; 95
     f9c:	10 f0       	brcs	.+4      	; 0xfa2 <uart_getchar+0x76>
     f9e:	90 3a       	cpi	r25, 0xA0	; 160
     fa0:	70 f0       	brcs	.+28     	; 0xfbe <uart_getchar+0x92>
	  {
	    if (cp == b + RX_BUFSIZE - 1)
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	0a 3a       	cpi	r16, 0xAA	; 170
     fa6:	1f 07       	cpc	r17, r31
     fa8:	11 f4       	brne	.+4      	; 0xfae <uart_getchar+0x82>
	      uart_putchar('\a', stream);
     faa:	87 e0       	ldi	r24, 0x07	; 7
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <uart_getchar+0x8a>
	    else
	      {
		*cp++ = c;
     fae:	f8 01       	movw	r30, r16
     fb0:	91 93       	st	Z+, r25
     fb2:	8f 01       	movw	r16, r30
		uart_putchar(c, stream);
     fb4:	89 2f       	mov	r24, r25
     fb6:	b7 01       	movw	r22, r14
     fb8:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
     fbc:	c7 cf       	rjmp	.-114    	; 0xf4c <uart_getchar+0x20>
	      }
	    continue;
	  }

	switch (c)
     fbe:	92 31       	cpi	r25, 0x12	; 18
     fc0:	39 f1       	breq	.+78     	; 0x1010 <uart_getchar+0xe4>
     fc2:	93 31       	cpi	r25, 0x13	; 19
     fc4:	38 f4       	brcc	.+14     	; 0xfd4 <uart_getchar+0xa8>
     fc6:	93 30       	cpi	r25, 0x03	; 3
     fc8:	09 f4       	brne	.+2      	; 0xfcc <uart_getchar+0xa0>
     fca:	6f c0       	rjmp	.+222    	; 0x10aa <uart_getchar+0x17e>
     fcc:	98 30       	cpi	r25, 0x08	; 8
     fce:	09 f0       	breq	.+2      	; 0xfd2 <uart_getchar+0xa6>
     fd0:	bd cf       	rjmp	.-134    	; 0xf4c <uart_getchar+0x20>
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <uart_getchar+0xba>
     fd4:	97 31       	cpi	r25, 0x17	; 23
     fd6:	09 f4       	brne	.+2      	; 0xfda <uart_getchar+0xae>
     fd8:	4b c0       	rjmp	.+150    	; 0x1070 <uart_getchar+0x144>
     fda:	9f 37       	cpi	r25, 0x7F	; 127
     fdc:	21 f0       	breq	.+8      	; 0xfe6 <uart_getchar+0xba>
     fde:	95 31       	cpi	r25, 0x15	; 21
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <uart_getchar+0xb8>
     fe2:	b4 cf       	rjmp	.-152    	; 0xf4c <uart_getchar+0x20>
     fe4:	32 c0       	rjmp	.+100    	; 0x104a <uart_getchar+0x11e>
	  case 'c' & 0x1f:
	    return -1;

	  case '\b':
	  case '\x7f':
	    if (cp > b)
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	0b 35       	cpi	r16, 0x5B	; 91
     fea:	1f 07       	cpc	r17, r31
     fec:	09 f0       	breq	.+2      	; 0xff0 <uart_getchar+0xc4>
     fee:	08 f4       	brcc	.+2      	; 0xff2 <uart_getchar+0xc6>
     ff0:	ad cf       	rjmp	.-166    	; 0xf4c <uart_getchar+0x20>
	      {
		uart_putchar('\b', stream);
     ff2:	88 e0       	ldi	r24, 0x08	; 8
     ff4:	b7 01       	movw	r22, r14
     ff6:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar(' ', stream);
     ffa:	80 e2       	ldi	r24, 0x20	; 32
     ffc:	b7 01       	movw	r22, r14
     ffe:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar('\b', stream);
    1002:	88 e0       	ldi	r24, 0x08	; 8
    1004:	b7 01       	movw	r22, r14
    1006:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		cp--;
    100a:	01 50       	subi	r16, 0x01	; 1
    100c:	10 40       	sbci	r17, 0x00	; 0
    100e:	9e cf       	rjmp	.-196    	; 0xf4c <uart_getchar+0x20>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	b7 01       	movw	r22, r14
    1014:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
    1018:	cb e5       	ldi	r28, 0x5B	; 91
    101a:	d1 e0       	ldi	r29, 0x01	; 1
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <uart_getchar+0xfa>
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
    101e:	89 91       	ld	r24, Y+
    1020:	b7 01       	movw	r22, r14
    1022:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
	      }
	    break;

	  case 'r' & 0x1f:
	    uart_putchar('\r', stream);
	    for (cp2 = b; cp2 < cp; cp2++)
    1026:	c0 17       	cp	r28, r16
    1028:	d1 07       	cpc	r29, r17
    102a:	c8 f3       	brcs	.-14     	; 0x101e <uart_getchar+0xf2>
    102c:	8f cf       	rjmp	.-226    	; 0xf4c <uart_getchar+0x20>
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
	      {
		uart_putchar('\b', stream);
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	b7 01       	movw	r22, r14
    1032:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar(' ', stream);
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	b7 01       	movw	r22, r14
    103a:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar('\b', stream);
    103e:	88 e0       	ldi	r24, 0x08	; 8
    1040:	b7 01       	movw	r22, r14
    1042:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		cp--;
    1046:	01 50       	subi	r16, 0x01	; 1
    1048:	10 40       	sbci	r17, 0x00	; 0
	    for (cp2 = b; cp2 < cp; cp2++)
	      uart_putchar(*cp2, stream);
	    break;

	  case 'u' & 0x1f:
	    while (cp > b)
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	0b 35       	cpi	r16, 0x5B	; 91
    104e:	18 07       	cpc	r17, r24
    1050:	09 f0       	breq	.+2      	; 0x1054 <uart_getchar+0x128>
    1052:	68 f7       	brcc	.-38     	; 0x102e <uart_getchar+0x102>
    1054:	7b cf       	rjmp	.-266    	; 0xf4c <uart_getchar+0x20>
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
	      {
		uart_putchar('\b', stream);
    1056:	88 e0       	ldi	r24, 0x08	; 8
    1058:	b7 01       	movw	r22, r14
    105a:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar(' ', stream);
    105e:	80 e2       	ldi	r24, 0x20	; 32
    1060:	b7 01       	movw	r22, r14
    1062:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
		uart_putchar('\b', stream);
    1066:	88 e0       	ldi	r24, 0x08	; 8
    1068:	b7 01       	movw	r22, r14
    106a:	0e 94 7a 07 	call	0xef4	; 0xef4 <uart_putchar>
    106e:	8e 01       	movw	r16, r28
		cp--;
	      }
	    break;

	  case 'w' & 0x1f:
	    while (cp > b && cp[-1] != ' ')
    1070:	e1 e0       	ldi	r30, 0x01	; 1
    1072:	0b 35       	cpi	r16, 0x5B	; 91
    1074:	1e 07       	cpc	r17, r30
    1076:	09 f0       	breq	.+2      	; 0x107a <uart_getchar+0x14e>
    1078:	08 f4       	brcc	.+2      	; 0x107c <uart_getchar+0x150>
    107a:	68 cf       	rjmp	.-304    	; 0xf4c <uart_getchar+0x20>
    107c:	e8 01       	movw	r28, r16
    107e:	8a 91       	ld	r24, -Y
    1080:	80 32       	cpi	r24, 0x20	; 32
    1082:	49 f7       	brne	.-46     	; 0x1056 <uart_getchar+0x12a>
    1084:	63 cf       	rjmp	.-314    	; 0xf4c <uart_getchar+0x20>
	      }
	    break;
	  }
      }

  c = *rxp++;
    1086:	e0 91 59 01 	lds	r30, 0x0159
    108a:	f0 91 5a 01 	lds	r31, 0x015A
    108e:	81 91       	ld	r24, Z+
    1090:	f0 93 5a 01 	sts	0x015A, r31
    1094:	e0 93 59 01 	sts	0x0159, r30
  if (c == '\n')
    1098:	8a 30       	cpi	r24, 0x0A	; 10
    109a:	21 f4       	brne	.+8      	; 0x10a4 <uart_getchar+0x178>
    rxp = 0;
    109c:	10 92 5a 01 	sts	0x015A, r1
    10a0:	10 92 59 01 	sts	0x0159, r1

  return c;
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <uart_getchar+0x182>
    10aa:	2f ef       	ldi	r18, 0xFF	; 255
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
}
    10ae:	c9 01       	movw	r24, r18
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <__mulsi3>:
    10be:	62 9f       	mul	r22, r18
    10c0:	d0 01       	movw	r26, r0
    10c2:	73 9f       	mul	r23, r19
    10c4:	f0 01       	movw	r30, r0
    10c6:	82 9f       	mul	r24, r18
    10c8:	e0 0d       	add	r30, r0
    10ca:	f1 1d       	adc	r31, r1
    10cc:	64 9f       	mul	r22, r20
    10ce:	e0 0d       	add	r30, r0
    10d0:	f1 1d       	adc	r31, r1
    10d2:	92 9f       	mul	r25, r18
    10d4:	f0 0d       	add	r31, r0
    10d6:	83 9f       	mul	r24, r19
    10d8:	f0 0d       	add	r31, r0
    10da:	74 9f       	mul	r23, r20
    10dc:	f0 0d       	add	r31, r0
    10de:	65 9f       	mul	r22, r21
    10e0:	f0 0d       	add	r31, r0
    10e2:	99 27       	eor	r25, r25
    10e4:	72 9f       	mul	r23, r18
    10e6:	b0 0d       	add	r27, r0
    10e8:	e1 1d       	adc	r30, r1
    10ea:	f9 1f       	adc	r31, r25
    10ec:	63 9f       	mul	r22, r19
    10ee:	b0 0d       	add	r27, r0
    10f0:	e1 1d       	adc	r30, r1
    10f2:	f9 1f       	adc	r31, r25
    10f4:	bd 01       	movw	r22, r26
    10f6:	cf 01       	movw	r24, r30
    10f8:	11 24       	eor	r1, r1
    10fa:	08 95       	ret

000010fc <__udivmodsi4>:
    10fc:	a1 e2       	ldi	r26, 0x21	; 33
    10fe:	1a 2e       	mov	r1, r26
    1100:	aa 1b       	sub	r26, r26
    1102:	bb 1b       	sub	r27, r27
    1104:	fd 01       	movw	r30, r26
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <__udivmodsi4_ep>

00001108 <__udivmodsi4_loop>:
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	ee 1f       	adc	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	a2 17       	cp	r26, r18
    1112:	b3 07       	cpc	r27, r19
    1114:	e4 07       	cpc	r30, r20
    1116:	f5 07       	cpc	r31, r21
    1118:	20 f0       	brcs	.+8      	; 0x1122 <__udivmodsi4_ep>
    111a:	a2 1b       	sub	r26, r18
    111c:	b3 0b       	sbc	r27, r19
    111e:	e4 0b       	sbc	r30, r20
    1120:	f5 0b       	sbc	r31, r21

00001122 <__udivmodsi4_ep>:
    1122:	66 1f       	adc	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	1a 94       	dec	r1
    112c:	69 f7       	brne	.-38     	; 0x1108 <__udivmodsi4_loop>
    112e:	60 95       	com	r22
    1130:	70 95       	com	r23
    1132:	80 95       	com	r24
    1134:	90 95       	com	r25
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	bd 01       	movw	r22, r26
    113c:	cf 01       	movw	r24, r30
    113e:	08 95       	ret

00001140 <__divmodsi4>:
    1140:	97 fb       	bst	r25, 7
    1142:	09 2e       	mov	r0, r25
    1144:	05 26       	eor	r0, r21
    1146:	0e d0       	rcall	.+28     	; 0x1164 <__divmodsi4_neg1>
    1148:	57 fd       	sbrc	r21, 7
    114a:	04 d0       	rcall	.+8      	; 0x1154 <__divmodsi4_neg2>
    114c:	d7 df       	rcall	.-82     	; 0x10fc <__udivmodsi4>
    114e:	0a d0       	rcall	.+20     	; 0x1164 <__divmodsi4_neg1>
    1150:	00 1c       	adc	r0, r0
    1152:	38 f4       	brcc	.+14     	; 0x1162 <__divmodsi4_exit>

00001154 <__divmodsi4_neg2>:
    1154:	50 95       	com	r21
    1156:	40 95       	com	r20
    1158:	30 95       	com	r19
    115a:	21 95       	neg	r18
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	4f 4f       	sbci	r20, 0xFF	; 255
    1160:	5f 4f       	sbci	r21, 0xFF	; 255

00001162 <__divmodsi4_exit>:
    1162:	08 95       	ret

00001164 <__divmodsi4_neg1>:
    1164:	f6 f7       	brtc	.-4      	; 0x1162 <__divmodsi4_exit>
    1166:	90 95       	com	r25
    1168:	80 95       	com	r24
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	08 95       	ret

00001176 <fputs>:
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	7c 01       	movw	r14, r24
    1184:	8b 01       	movw	r16, r22
    1186:	db 01       	movw	r26, r22
    1188:	13 96       	adiw	r26, 0x03	; 3
    118a:	8c 91       	ld	r24, X
    118c:	81 fd       	sbrc	r24, 1
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <fputs+0x20>
    1190:	cf ef       	ldi	r28, 0xFF	; 255
    1192:	df ef       	ldi	r29, 0xFF	; 255
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <fputs+0x46>
    1196:	c0 e0       	ldi	r28, 0x00	; 0
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	0b c0       	rjmp	.+22     	; 0x11b2 <fputs+0x3c>
    119c:	d8 01       	movw	r26, r16
    119e:	18 96       	adiw	r26, 0x08	; 8
    11a0:	ed 91       	ld	r30, X+
    11a2:	fc 91       	ld	r31, X
    11a4:	19 97       	sbiw	r26, 0x09	; 9
    11a6:	b8 01       	movw	r22, r16
    11a8:	09 95       	icall
    11aa:	89 2b       	or	r24, r25
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <fputs+0x3c>
    11ae:	cf ef       	ldi	r28, 0xFF	; 255
    11b0:	df ef       	ldi	r29, 0xFF	; 255
    11b2:	f7 01       	movw	r30, r14
    11b4:	81 91       	ld	r24, Z+
    11b6:	7f 01       	movw	r14, r30
    11b8:	88 23       	and	r24, r24
    11ba:	81 f7       	brne	.-32     	; 0x119c <fputs+0x26>
    11bc:	ce 01       	movw	r24, r28
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	08 95       	ret

000011cc <printf>:
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	fe 01       	movw	r30, r28
    11d6:	35 96       	adiw	r30, 0x05	; 5
    11d8:	61 91       	ld	r22, Z+
    11da:	71 91       	ld	r23, Z+
    11dc:	80 91 0b 02 	lds	r24, 0x020B
    11e0:	90 91 0c 02 	lds	r25, 0x020C
    11e4:	af 01       	movw	r20, r30
    11e6:	0e 94 2d 09 	call	0x125a	; 0x125a <vfprintf>
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <puts>:
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	8c 01       	movw	r16, r24
    11fa:	e0 91 0b 02 	lds	r30, 0x020B
    11fe:	f0 91 0c 02 	lds	r31, 0x020C
    1202:	83 81       	ldd	r24, Z+3	; 0x03
    1204:	81 ff       	sbrs	r24, 1
    1206:	21 c0       	rjmp	.+66     	; 0x124a <puts+0x5a>
    1208:	c0 e0       	ldi	r28, 0x00	; 0
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    120c:	0d c0       	rjmp	.+26     	; 0x1228 <puts+0x38>
    120e:	e0 91 0b 02 	lds	r30, 0x020B
    1212:	f0 91 0c 02 	lds	r31, 0x020C
    1216:	20 85       	ldd	r18, Z+8	; 0x08
    1218:	31 85       	ldd	r19, Z+9	; 0x09
    121a:	bf 01       	movw	r22, r30
    121c:	f9 01       	movw	r30, r18
    121e:	09 95       	icall
    1220:	89 2b       	or	r24, r25
    1222:	11 f0       	breq	.+4      	; 0x1228 <puts+0x38>
    1224:	cf ef       	ldi	r28, 0xFF	; 255
    1226:	df ef       	ldi	r29, 0xFF	; 255
    1228:	f8 01       	movw	r30, r16
    122a:	81 91       	ld	r24, Z+
    122c:	8f 01       	movw	r16, r30
    122e:	88 23       	and	r24, r24
    1230:	71 f7       	brne	.-36     	; 0x120e <puts+0x1e>
    1232:	e0 91 0b 02 	lds	r30, 0x020B
    1236:	f0 91 0c 02 	lds	r31, 0x020C
    123a:	20 85       	ldd	r18, Z+8	; 0x08
    123c:	31 85       	ldd	r19, Z+9	; 0x09
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	bf 01       	movw	r22, r30
    1242:	f9 01       	movw	r30, r18
    1244:	09 95       	icall
    1246:	89 2b       	or	r24, r25
    1248:	11 f0       	breq	.+4      	; 0x124e <puts+0x5e>
    124a:	cf ef       	ldi	r28, 0xFF	; 255
    124c:	df ef       	ldi	r29, 0xFF	; 255
    124e:	ce 01       	movw	r24, r28
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <vfprintf>:
    125a:	2f 92       	push	r2
    125c:	3f 92       	push	r3
    125e:	4f 92       	push	r4
    1260:	5f 92       	push	r5
    1262:	6f 92       	push	r6
    1264:	7f 92       	push	r7
    1266:	8f 92       	push	r8
    1268:	9f 92       	push	r9
    126a:	af 92       	push	r10
    126c:	bf 92       	push	r11
    126e:	cf 92       	push	r12
    1270:	df 92       	push	r13
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	2b 97       	sbiw	r28, 0x0b	; 11
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	3c 01       	movw	r6, r24
    1290:	2b 01       	movw	r4, r22
    1292:	5a 01       	movw	r10, r20
    1294:	fc 01       	movw	r30, r24
    1296:	17 82       	std	Z+7, r1	; 0x07
    1298:	16 82       	std	Z+6, r1	; 0x06
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	81 fd       	sbrc	r24, 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <vfprintf+0x4c>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c6 c1       	rjmp	.+908    	; 0x1632 <vfprintf+0x3d8>
    12a6:	9a e0       	ldi	r25, 0x0A	; 10
    12a8:	89 2e       	mov	r8, r25
    12aa:	1e 01       	movw	r2, r28
    12ac:	08 94       	sec
    12ae:	21 1c       	adc	r2, r1
    12b0:	31 1c       	adc	r3, r1
    12b2:	f3 01       	movw	r30, r6
    12b4:	23 81       	ldd	r18, Z+3	; 0x03
    12b6:	f2 01       	movw	r30, r4
    12b8:	23 fd       	sbrc	r18, 3
    12ba:	85 91       	lpm	r24, Z+
    12bc:	23 ff       	sbrs	r18, 3
    12be:	81 91       	ld	r24, Z+
    12c0:	2f 01       	movw	r4, r30
    12c2:	88 23       	and	r24, r24
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <vfprintf+0x6e>
    12c6:	b2 c1       	rjmp	.+868    	; 0x162c <vfprintf+0x3d2>
    12c8:	85 32       	cpi	r24, 0x25	; 37
    12ca:	39 f4       	brne	.+14     	; 0x12da <vfprintf+0x80>
    12cc:	23 fd       	sbrc	r18, 3
    12ce:	85 91       	lpm	r24, Z+
    12d0:	23 ff       	sbrs	r18, 3
    12d2:	81 91       	ld	r24, Z+
    12d4:	2f 01       	movw	r4, r30
    12d6:	85 32       	cpi	r24, 0x25	; 37
    12d8:	29 f4       	brne	.+10     	; 0x12e4 <vfprintf+0x8a>
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	b3 01       	movw	r22, r6
    12de:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    12e2:	e7 cf       	rjmp	.-50     	; 0x12b2 <vfprintf+0x58>
    12e4:	98 2f       	mov	r25, r24
    12e6:	ff 24       	eor	r15, r15
    12e8:	ee 24       	eor	r14, r14
    12ea:	99 24       	eor	r9, r9
    12ec:	ff e1       	ldi	r31, 0x1F	; 31
    12ee:	ff 15       	cp	r31, r15
    12f0:	d0 f0       	brcs	.+52     	; 0x1326 <vfprintf+0xcc>
    12f2:	9b 32       	cpi	r25, 0x2B	; 43
    12f4:	69 f0       	breq	.+26     	; 0x1310 <vfprintf+0xb6>
    12f6:	9c 32       	cpi	r25, 0x2C	; 44
    12f8:	28 f4       	brcc	.+10     	; 0x1304 <vfprintf+0xaa>
    12fa:	90 32       	cpi	r25, 0x20	; 32
    12fc:	59 f0       	breq	.+22     	; 0x1314 <vfprintf+0xba>
    12fe:	93 32       	cpi	r25, 0x23	; 35
    1300:	91 f4       	brne	.+36     	; 0x1326 <vfprintf+0xcc>
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <vfprintf+0xc6>
    1304:	9d 32       	cpi	r25, 0x2D	; 45
    1306:	49 f0       	breq	.+18     	; 0x131a <vfprintf+0xc0>
    1308:	90 33       	cpi	r25, 0x30	; 48
    130a:	69 f4       	brne	.+26     	; 0x1326 <vfprintf+0xcc>
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	24 c0       	rjmp	.+72     	; 0x1358 <vfprintf+0xfe>
    1310:	52 e0       	ldi	r21, 0x02	; 2
    1312:	f5 2a       	or	r15, r21
    1314:	84 e0       	ldi	r24, 0x04	; 4
    1316:	f8 2a       	or	r15, r24
    1318:	28 c0       	rjmp	.+80     	; 0x136a <vfprintf+0x110>
    131a:	98 e0       	ldi	r25, 0x08	; 8
    131c:	f9 2a       	or	r15, r25
    131e:	25 c0       	rjmp	.+74     	; 0x136a <vfprintf+0x110>
    1320:	e0 e1       	ldi	r30, 0x10	; 16
    1322:	fe 2a       	or	r15, r30
    1324:	22 c0       	rjmp	.+68     	; 0x136a <vfprintf+0x110>
    1326:	f7 fc       	sbrc	r15, 7
    1328:	29 c0       	rjmp	.+82     	; 0x137c <vfprintf+0x122>
    132a:	89 2f       	mov	r24, r25
    132c:	80 53       	subi	r24, 0x30	; 48
    132e:	8a 30       	cpi	r24, 0x0A	; 10
    1330:	70 f4       	brcc	.+28     	; 0x134e <vfprintf+0xf4>
    1332:	f6 fe       	sbrs	r15, 6
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <vfprintf+0xe6>
    1336:	98 9c       	mul	r9, r8
    1338:	90 2c       	mov	r9, r0
    133a:	11 24       	eor	r1, r1
    133c:	98 0e       	add	r9, r24
    133e:	15 c0       	rjmp	.+42     	; 0x136a <vfprintf+0x110>
    1340:	e8 9c       	mul	r14, r8
    1342:	e0 2c       	mov	r14, r0
    1344:	11 24       	eor	r1, r1
    1346:	e8 0e       	add	r14, r24
    1348:	f0 e2       	ldi	r31, 0x20	; 32
    134a:	ff 2a       	or	r15, r31
    134c:	0e c0       	rjmp	.+28     	; 0x136a <vfprintf+0x110>
    134e:	9e 32       	cpi	r25, 0x2E	; 46
    1350:	29 f4       	brne	.+10     	; 0x135c <vfprintf+0x102>
    1352:	f6 fc       	sbrc	r15, 6
    1354:	6b c1       	rjmp	.+726    	; 0x162c <vfprintf+0x3d2>
    1356:	40 e4       	ldi	r20, 0x40	; 64
    1358:	f4 2a       	or	r15, r20
    135a:	07 c0       	rjmp	.+14     	; 0x136a <vfprintf+0x110>
    135c:	9c 36       	cpi	r25, 0x6C	; 108
    135e:	19 f4       	brne	.+6      	; 0x1366 <vfprintf+0x10c>
    1360:	50 e8       	ldi	r21, 0x80	; 128
    1362:	f5 2a       	or	r15, r21
    1364:	02 c0       	rjmp	.+4      	; 0x136a <vfprintf+0x110>
    1366:	98 36       	cpi	r25, 0x68	; 104
    1368:	49 f4       	brne	.+18     	; 0x137c <vfprintf+0x122>
    136a:	f2 01       	movw	r30, r4
    136c:	23 fd       	sbrc	r18, 3
    136e:	95 91       	lpm	r25, Z+
    1370:	23 ff       	sbrs	r18, 3
    1372:	91 91       	ld	r25, Z+
    1374:	2f 01       	movw	r4, r30
    1376:	99 23       	and	r25, r25
    1378:	09 f0       	breq	.+2      	; 0x137c <vfprintf+0x122>
    137a:	b8 cf       	rjmp	.-144    	; 0x12ec <vfprintf+0x92>
    137c:	89 2f       	mov	r24, r25
    137e:	85 54       	subi	r24, 0x45	; 69
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	18 f0       	brcs	.+6      	; 0x138a <vfprintf+0x130>
    1384:	80 52       	subi	r24, 0x20	; 32
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	38 f4       	brcc	.+14     	; 0x1398 <vfprintf+0x13e>
    138a:	44 e0       	ldi	r20, 0x04	; 4
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	a4 0e       	add	r10, r20
    1390:	b5 1e       	adc	r11, r21
    1392:	5f e3       	ldi	r21, 0x3F	; 63
    1394:	59 83       	std	Y+1, r21	; 0x01
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <vfprintf+0x15c>
    1398:	93 36       	cpi	r25, 0x63	; 99
    139a:	31 f0       	breq	.+12     	; 0x13a8 <vfprintf+0x14e>
    139c:	93 37       	cpi	r25, 0x73	; 115
    139e:	79 f0       	breq	.+30     	; 0x13be <vfprintf+0x164>
    13a0:	93 35       	cpi	r25, 0x53	; 83
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <vfprintf+0x14c>
    13a4:	56 c0       	rjmp	.+172    	; 0x1452 <vfprintf+0x1f8>
    13a6:	20 c0       	rjmp	.+64     	; 0x13e8 <vfprintf+0x18e>
    13a8:	f5 01       	movw	r30, r10
    13aa:	80 81       	ld	r24, Z
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	42 e0       	ldi	r20, 0x02	; 2
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	a4 0e       	add	r10, r20
    13b4:	b5 1e       	adc	r11, r21
    13b6:	61 01       	movw	r12, r2
    13b8:	01 e0       	ldi	r16, 0x01	; 1
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	12 c0       	rjmp	.+36     	; 0x13e2 <vfprintf+0x188>
    13be:	f5 01       	movw	r30, r10
    13c0:	c0 80       	ld	r12, Z
    13c2:	d1 80       	ldd	r13, Z+1	; 0x01
    13c4:	f6 fc       	sbrc	r15, 6
    13c6:	03 c0       	rjmp	.+6      	; 0x13ce <vfprintf+0x174>
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	7f ef       	ldi	r23, 0xFF	; 255
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <vfprintf+0x178>
    13ce:	69 2d       	mov	r22, r9
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	42 e0       	ldi	r20, 0x02	; 2
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	a4 0e       	add	r10, r20
    13d8:	b5 1e       	adc	r11, r21
    13da:	c6 01       	movw	r24, r12
    13dc:	0e 94 3e 0b 	call	0x167c	; 0x167c <strnlen>
    13e0:	8c 01       	movw	r16, r24
    13e2:	5f e7       	ldi	r21, 0x7F	; 127
    13e4:	f5 22       	and	r15, r21
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <vfprintf+0x1b6>
    13e8:	f5 01       	movw	r30, r10
    13ea:	c0 80       	ld	r12, Z
    13ec:	d1 80       	ldd	r13, Z+1	; 0x01
    13ee:	f6 fc       	sbrc	r15, 6
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x19e>
    13f2:	6f ef       	ldi	r22, 0xFF	; 255
    13f4:	7f ef       	ldi	r23, 0xFF	; 255
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfprintf+0x1a2>
    13f8:	69 2d       	mov	r22, r9
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	42 e0       	ldi	r20, 0x02	; 2
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	a4 0e       	add	r10, r20
    1402:	b5 1e       	adc	r11, r21
    1404:	c6 01       	movw	r24, r12
    1406:	0e 94 33 0b 	call	0x1666	; 0x1666 <strnlen_P>
    140a:	8c 01       	movw	r16, r24
    140c:	50 e8       	ldi	r21, 0x80	; 128
    140e:	f5 2a       	or	r15, r21
    1410:	f3 fe       	sbrs	r15, 3
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <vfprintf+0x1c8>
    1414:	1a c0       	rjmp	.+52     	; 0x144a <vfprintf+0x1f0>
    1416:	80 e2       	ldi	r24, 0x20	; 32
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b3 01       	movw	r22, r6
    141c:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    1420:	ea 94       	dec	r14
    1422:	8e 2d       	mov	r24, r14
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	08 17       	cp	r16, r24
    1428:	19 07       	cpc	r17, r25
    142a:	a8 f3       	brcs	.-22     	; 0x1416 <vfprintf+0x1bc>
    142c:	0e c0       	rjmp	.+28     	; 0x144a <vfprintf+0x1f0>
    142e:	f6 01       	movw	r30, r12
    1430:	f7 fc       	sbrc	r15, 7
    1432:	85 91       	lpm	r24, Z+
    1434:	f7 fe       	sbrs	r15, 7
    1436:	81 91       	ld	r24, Z+
    1438:	6f 01       	movw	r12, r30
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	b3 01       	movw	r22, r6
    143e:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    1442:	e1 10       	cpse	r14, r1
    1444:	ea 94       	dec	r14
    1446:	01 50       	subi	r16, 0x01	; 1
    1448:	10 40       	sbci	r17, 0x00	; 0
    144a:	01 15       	cp	r16, r1
    144c:	11 05       	cpc	r17, r1
    144e:	79 f7       	brne	.-34     	; 0x142e <vfprintf+0x1d4>
    1450:	ea c0       	rjmp	.+468    	; 0x1626 <vfprintf+0x3cc>
    1452:	94 36       	cpi	r25, 0x64	; 100
    1454:	11 f0       	breq	.+4      	; 0x145a <vfprintf+0x200>
    1456:	99 36       	cpi	r25, 0x69	; 105
    1458:	69 f5       	brne	.+90     	; 0x14b4 <vfprintf+0x25a>
    145a:	f7 fe       	sbrs	r15, 7
    145c:	08 c0       	rjmp	.+16     	; 0x146e <vfprintf+0x214>
    145e:	f5 01       	movw	r30, r10
    1460:	20 81       	ld	r18, Z
    1462:	31 81       	ldd	r19, Z+1	; 0x01
    1464:	42 81       	ldd	r20, Z+2	; 0x02
    1466:	53 81       	ldd	r21, Z+3	; 0x03
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0a c0       	rjmp	.+20     	; 0x1482 <vfprintf+0x228>
    146e:	f5 01       	movw	r30, r10
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	9c 01       	movw	r18, r24
    1476:	44 27       	eor	r20, r20
    1478:	37 fd       	sbrc	r19, 7
    147a:	40 95       	com	r20
    147c:	54 2f       	mov	r21, r20
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a8 0e       	add	r10, r24
    1484:	b9 1e       	adc	r11, r25
    1486:	9f e6       	ldi	r25, 0x6F	; 111
    1488:	f9 22       	and	r15, r25
    148a:	57 ff       	sbrs	r21, 7
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x246>
    148e:	50 95       	com	r21
    1490:	40 95       	com	r20
    1492:	30 95       	com	r19
    1494:	21 95       	neg	r18
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	4f 4f       	sbci	r20, 0xFF	; 255
    149a:	5f 4f       	sbci	r21, 0xFF	; 255
    149c:	e0 e8       	ldi	r30, 0x80	; 128
    149e:	fe 2a       	or	r15, r30
    14a0:	ca 01       	movw	r24, r20
    14a2:	b9 01       	movw	r22, r18
    14a4:	a1 01       	movw	r20, r2
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__ultoa_invert>
    14ae:	d8 2e       	mov	r13, r24
    14b0:	d2 18       	sub	r13, r2
    14b2:	40 c0       	rjmp	.+128    	; 0x1534 <vfprintf+0x2da>
    14b4:	95 37       	cpi	r25, 0x75	; 117
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <vfprintf+0x268>
    14b8:	1f 2d       	mov	r17, r15
    14ba:	1f 7e       	andi	r17, 0xEF	; 239
    14bc:	2a e0       	ldi	r18, 0x0A	; 10
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	1d c0       	rjmp	.+58     	; 0x14fc <vfprintf+0x2a2>
    14c2:	1f 2d       	mov	r17, r15
    14c4:	19 7f       	andi	r17, 0xF9	; 249
    14c6:	9f 36       	cpi	r25, 0x6F	; 111
    14c8:	61 f0       	breq	.+24     	; 0x14e2 <vfprintf+0x288>
    14ca:	90 37       	cpi	r25, 0x70	; 112
    14cc:	20 f4       	brcc	.+8      	; 0x14d6 <vfprintf+0x27c>
    14ce:	98 35       	cpi	r25, 0x58	; 88
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <vfprintf+0x27a>
    14d2:	ac c0       	rjmp	.+344    	; 0x162c <vfprintf+0x3d2>
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <vfprintf+0x29a>
    14d6:	90 37       	cpi	r25, 0x70	; 112
    14d8:	39 f0       	breq	.+14     	; 0x14e8 <vfprintf+0x28e>
    14da:	98 37       	cpi	r25, 0x78	; 120
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <vfprintf+0x286>
    14de:	a6 c0       	rjmp	.+332    	; 0x162c <vfprintf+0x3d2>
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <vfprintf+0x290>
    14e2:	28 e0       	ldi	r18, 0x08	; 8
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	0a c0       	rjmp	.+20     	; 0x14fc <vfprintf+0x2a2>
    14e8:	10 61       	ori	r17, 0x10	; 16
    14ea:	14 fd       	sbrc	r17, 4
    14ec:	14 60       	ori	r17, 0x04	; 4
    14ee:	20 e1       	ldi	r18, 0x10	; 16
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <vfprintf+0x2a2>
    14f4:	14 fd       	sbrc	r17, 4
    14f6:	16 60       	ori	r17, 0x06	; 6
    14f8:	20 e1       	ldi	r18, 0x10	; 16
    14fa:	32 e0       	ldi	r19, 0x02	; 2
    14fc:	17 ff       	sbrs	r17, 7
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <vfprintf+0x2b6>
    1500:	f5 01       	movw	r30, r10
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	44 e0       	ldi	r20, 0x04	; 4
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <vfprintf+0x2c6>
    1510:	f5 01       	movw	r30, r10
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	bc 01       	movw	r22, r24
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	42 e0       	ldi	r20, 0x02	; 2
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	a4 0e       	add	r10, r20
    1522:	b5 1e       	adc	r11, r21
    1524:	a1 01       	movw	r20, r2
    1526:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__ultoa_invert>
    152a:	d8 2e       	mov	r13, r24
    152c:	d2 18       	sub	r13, r2
    152e:	8f e7       	ldi	r24, 0x7F	; 127
    1530:	f8 2e       	mov	r15, r24
    1532:	f1 22       	and	r15, r17
    1534:	f6 fe       	sbrs	r15, 6
    1536:	0b c0       	rjmp	.+22     	; 0x154e <vfprintf+0x2f4>
    1538:	5e ef       	ldi	r21, 0xFE	; 254
    153a:	f5 22       	and	r15, r21
    153c:	d9 14       	cp	r13, r9
    153e:	38 f4       	brcc	.+14     	; 0x154e <vfprintf+0x2f4>
    1540:	f4 fe       	sbrs	r15, 4
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <vfprintf+0x2f8>
    1544:	f2 fc       	sbrc	r15, 2
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <vfprintf+0x2f8>
    1548:	8f ee       	ldi	r24, 0xEF	; 239
    154a:	f8 22       	and	r15, r24
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0x2f8>
    154e:	1d 2d       	mov	r17, r13
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <vfprintf+0x2fa>
    1552:	19 2d       	mov	r17, r9
    1554:	f4 fe       	sbrs	r15, 4
    1556:	0d c0       	rjmp	.+26     	; 0x1572 <vfprintf+0x318>
    1558:	fe 01       	movw	r30, r28
    155a:	ed 0d       	add	r30, r13
    155c:	f1 1d       	adc	r31, r1
    155e:	80 81       	ld	r24, Z
    1560:	80 33       	cpi	r24, 0x30	; 48
    1562:	19 f4       	brne	.+6      	; 0x156a <vfprintf+0x310>
    1564:	99 ee       	ldi	r25, 0xE9	; 233
    1566:	f9 22       	and	r15, r25
    1568:	08 c0       	rjmp	.+16     	; 0x157a <vfprintf+0x320>
    156a:	1f 5f       	subi	r17, 0xFF	; 255
    156c:	f2 fe       	sbrs	r15, 2
    156e:	05 c0       	rjmp	.+10     	; 0x157a <vfprintf+0x320>
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x31e>
    1572:	8f 2d       	mov	r24, r15
    1574:	86 78       	andi	r24, 0x86	; 134
    1576:	09 f0       	breq	.+2      	; 0x157a <vfprintf+0x320>
    1578:	1f 5f       	subi	r17, 0xFF	; 255
    157a:	0f 2d       	mov	r16, r15
    157c:	f3 fc       	sbrc	r15, 3
    157e:	14 c0       	rjmp	.+40     	; 0x15a8 <vfprintf+0x34e>
    1580:	f0 fe       	sbrs	r15, 0
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <vfprintf+0x348>
    1584:	1e 15       	cp	r17, r14
    1586:	10 f0       	brcs	.+4      	; 0x158c <vfprintf+0x332>
    1588:	9d 2c       	mov	r9, r13
    158a:	0b c0       	rjmp	.+22     	; 0x15a2 <vfprintf+0x348>
    158c:	9d 2c       	mov	r9, r13
    158e:	9e 0c       	add	r9, r14
    1590:	91 1a       	sub	r9, r17
    1592:	1e 2d       	mov	r17, r14
    1594:	06 c0       	rjmp	.+12     	; 0x15a2 <vfprintf+0x348>
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	b3 01       	movw	r22, r6
    159c:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    15a0:	1f 5f       	subi	r17, 0xFF	; 255
    15a2:	1e 15       	cp	r17, r14
    15a4:	c0 f3       	brcs	.-16     	; 0x1596 <vfprintf+0x33c>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <vfprintf+0x356>
    15a8:	1e 15       	cp	r17, r14
    15aa:	10 f4       	brcc	.+4      	; 0x15b0 <vfprintf+0x356>
    15ac:	e1 1a       	sub	r14, r17
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <vfprintf+0x358>
    15b0:	ee 24       	eor	r14, r14
    15b2:	04 ff       	sbrs	r16, 4
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <vfprintf+0x37a>
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	b3 01       	movw	r22, r6
    15bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    15c0:	02 ff       	sbrs	r16, 2
    15c2:	1d c0       	rjmp	.+58     	; 0x15fe <vfprintf+0x3a4>
    15c4:	01 fd       	sbrc	r16, 1
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <vfprintf+0x374>
    15c8:	88 e7       	ldi	r24, 0x78	; 120
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <vfprintf+0x390>
    15ce:	88 e5       	ldi	r24, 0x58	; 88
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0b c0       	rjmp	.+22     	; 0x15ea <vfprintf+0x390>
    15d4:	80 2f       	mov	r24, r16
    15d6:	86 78       	andi	r24, 0x86	; 134
    15d8:	91 f0       	breq	.+36     	; 0x15fe <vfprintf+0x3a4>
    15da:	01 ff       	sbrs	r16, 1
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <vfprintf+0x388>
    15de:	8b e2       	ldi	r24, 0x2B	; 43
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <vfprintf+0x38a>
    15e2:	80 e2       	ldi	r24, 0x20	; 32
    15e4:	f7 fc       	sbrc	r15, 7
    15e6:	8d e2       	ldi	r24, 0x2D	; 45
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b3 01       	movw	r22, r6
    15ec:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x3a4>
    15f2:	80 e3       	ldi	r24, 0x30	; 48
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	b3 01       	movw	r22, r6
    15f8:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    15fc:	9a 94       	dec	r9
    15fe:	d9 14       	cp	r13, r9
    1600:	c0 f3       	brcs	.-16     	; 0x15f2 <vfprintf+0x398>
    1602:	da 94       	dec	r13
    1604:	f1 01       	movw	r30, r2
    1606:	ed 0d       	add	r30, r13
    1608:	f1 1d       	adc	r31, r1
    160a:	80 81       	ld	r24, Z
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	b3 01       	movw	r22, r6
    1610:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    1614:	dd 20       	and	r13, r13
    1616:	a9 f7       	brne	.-22     	; 0x1602 <vfprintf+0x3a8>
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <vfprintf+0x3cc>
    161a:	80 e2       	ldi	r24, 0x20	; 32
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	b3 01       	movw	r22, r6
    1620:	0e 94 49 0b 	call	0x1692	; 0x1692 <fputc>
    1624:	ea 94       	dec	r14
    1626:	ee 20       	and	r14, r14
    1628:	c1 f7       	brne	.-16     	; 0x161a <vfprintf+0x3c0>
    162a:	43 ce       	rjmp	.-890    	; 0x12b2 <vfprintf+0x58>
    162c:	f3 01       	movw	r30, r6
    162e:	66 81       	ldd	r22, Z+6	; 0x06
    1630:	77 81       	ldd	r23, Z+7	; 0x07
    1632:	cb 01       	movw	r24, r22
    1634:	2b 96       	adiw	r28, 0x0b	; 11
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	ef 90       	pop	r14
    164c:	df 90       	pop	r13
    164e:	cf 90       	pop	r12
    1650:	bf 90       	pop	r11
    1652:	af 90       	pop	r10
    1654:	9f 90       	pop	r9
    1656:	8f 90       	pop	r8
    1658:	7f 90       	pop	r7
    165a:	6f 90       	pop	r6
    165c:	5f 90       	pop	r5
    165e:	4f 90       	pop	r4
    1660:	3f 90       	pop	r3
    1662:	2f 90       	pop	r2
    1664:	08 95       	ret

00001666 <strnlen_P>:
    1666:	fc 01       	movw	r30, r24
    1668:	05 90       	lpm	r0, Z+
    166a:	61 50       	subi	r22, 0x01	; 1
    166c:	70 40       	sbci	r23, 0x00	; 0
    166e:	01 10       	cpse	r0, r1
    1670:	d8 f7       	brcc	.-10     	; 0x1668 <strnlen_P+0x2>
    1672:	80 95       	com	r24
    1674:	90 95       	com	r25
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	08 95       	ret

0000167c <strnlen>:
    167c:	fc 01       	movw	r30, r24
    167e:	61 50       	subi	r22, 0x01	; 1
    1680:	70 40       	sbci	r23, 0x00	; 0
    1682:	01 90       	ld	r0, Z+
    1684:	01 10       	cpse	r0, r1
    1686:	d8 f7       	brcc	.-10     	; 0x167e <strnlen+0x2>
    1688:	80 95       	com	r24
    168a:	90 95       	com	r25
    168c:	8e 0f       	add	r24, r30
    168e:	9f 1f       	adc	r25, r31
    1690:	08 95       	ret

00001692 <fputc>:
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	8c 01       	movw	r16, r24
    169c:	eb 01       	movw	r28, r22
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 ff       	sbrs	r24, 1
    16a2:	1b c0       	rjmp	.+54     	; 0x16da <fputc+0x48>
    16a4:	82 ff       	sbrs	r24, 2
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <fputc+0x30>
    16a8:	2e 81       	ldd	r18, Y+6	; 0x06
    16aa:	3f 81       	ldd	r19, Y+7	; 0x07
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	28 17       	cp	r18, r24
    16b2:	39 07       	cpc	r19, r25
    16b4:	64 f4       	brge	.+24     	; 0x16ce <fputc+0x3c>
    16b6:	e8 81       	ld	r30, Y
    16b8:	f9 81       	ldd	r31, Y+1	; 0x01
    16ba:	01 93       	st	Z+, r16
    16bc:	f9 83       	std	Y+1, r31	; 0x01
    16be:	e8 83       	st	Y, r30
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <fputc+0x3c>
    16c2:	e8 85       	ldd	r30, Y+8	; 0x08
    16c4:	f9 85       	ldd	r31, Y+9	; 0x09
    16c6:	80 2f       	mov	r24, r16
    16c8:	09 95       	icall
    16ca:	89 2b       	or	r24, r25
    16cc:	31 f4       	brne	.+12     	; 0x16da <fputc+0x48>
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	01 96       	adiw	r24, 0x01	; 1
    16d4:	9f 83       	std	Y+7, r25	; 0x07
    16d6:	8e 83       	std	Y+6, r24	; 0x06
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <fputc+0x4c>
    16da:	0f ef       	ldi	r16, 0xFF	; 255
    16dc:	1f ef       	ldi	r17, 0xFF	; 255
    16de:	c8 01       	movw	r24, r16
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	08 95       	ret

000016ea <__ultoa_invert>:
    16ea:	fa 01       	movw	r30, r20
    16ec:	aa 27       	eor	r26, r26
    16ee:	28 30       	cpi	r18, 0x08	; 8
    16f0:	51 f1       	breq	.+84     	; 0x1746 <__ultoa_invert+0x5c>
    16f2:	20 31       	cpi	r18, 0x10	; 16
    16f4:	81 f1       	breq	.+96     	; 0x1756 <__ultoa_invert+0x6c>
    16f6:	e8 94       	clt
    16f8:	6f 93       	push	r22
    16fa:	6e 7f       	andi	r22, 0xFE	; 254
    16fc:	6e 5f       	subi	r22, 0xFE	; 254
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	8f 4f       	sbci	r24, 0xFF	; 255
    1702:	9f 4f       	sbci	r25, 0xFF	; 255
    1704:	af 4f       	sbci	r26, 0xFF	; 255
    1706:	b1 e0       	ldi	r27, 0x01	; 1
    1708:	3e d0       	rcall	.+124    	; 0x1786 <__ultoa_invert+0x9c>
    170a:	b4 e0       	ldi	r27, 0x04	; 4
    170c:	3c d0       	rcall	.+120    	; 0x1786 <__ultoa_invert+0x9c>
    170e:	67 0f       	add	r22, r23
    1710:	78 1f       	adc	r23, r24
    1712:	89 1f       	adc	r24, r25
    1714:	9a 1f       	adc	r25, r26
    1716:	a1 1d       	adc	r26, r1
    1718:	68 0f       	add	r22, r24
    171a:	79 1f       	adc	r23, r25
    171c:	8a 1f       	adc	r24, r26
    171e:	91 1d       	adc	r25, r1
    1720:	a1 1d       	adc	r26, r1
    1722:	6a 0f       	add	r22, r26
    1724:	71 1d       	adc	r23, r1
    1726:	81 1d       	adc	r24, r1
    1728:	91 1d       	adc	r25, r1
    172a:	a1 1d       	adc	r26, r1
    172c:	20 d0       	rcall	.+64     	; 0x176e <__ultoa_invert+0x84>
    172e:	09 f4       	brne	.+2      	; 0x1732 <__ultoa_invert+0x48>
    1730:	68 94       	set
    1732:	3f 91       	pop	r19
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	26 9f       	mul	r18, r22
    1738:	11 24       	eor	r1, r1
    173a:	30 19       	sub	r19, r0
    173c:	30 5d       	subi	r19, 0xD0	; 208
    173e:	31 93       	st	Z+, r19
    1740:	de f6       	brtc	.-74     	; 0x16f8 <__ultoa_invert+0xe>
    1742:	cf 01       	movw	r24, r30
    1744:	08 95       	ret
    1746:	46 2f       	mov	r20, r22
    1748:	47 70       	andi	r20, 0x07	; 7
    174a:	40 5d       	subi	r20, 0xD0	; 208
    174c:	41 93       	st	Z+, r20
    174e:	b3 e0       	ldi	r27, 0x03	; 3
    1750:	0f d0       	rcall	.+30     	; 0x1770 <__ultoa_invert+0x86>
    1752:	c9 f7       	brne	.-14     	; 0x1746 <__ultoa_invert+0x5c>
    1754:	f6 cf       	rjmp	.-20     	; 0x1742 <__ultoa_invert+0x58>
    1756:	46 2f       	mov	r20, r22
    1758:	4f 70       	andi	r20, 0x0F	; 15
    175a:	40 5d       	subi	r20, 0xD0	; 208
    175c:	4a 33       	cpi	r20, 0x3A	; 58
    175e:	18 f0       	brcs	.+6      	; 0x1766 <__ultoa_invert+0x7c>
    1760:	49 5d       	subi	r20, 0xD9	; 217
    1762:	31 fd       	sbrc	r19, 1
    1764:	40 52       	subi	r20, 0x20	; 32
    1766:	41 93       	st	Z+, r20
    1768:	02 d0       	rcall	.+4      	; 0x176e <__ultoa_invert+0x84>
    176a:	a9 f7       	brne	.-22     	; 0x1756 <__ultoa_invert+0x6c>
    176c:	ea cf       	rjmp	.-44     	; 0x1742 <__ultoa_invert+0x58>
    176e:	b4 e0       	ldi	r27, 0x04	; 4
    1770:	a6 95       	lsr	r26
    1772:	97 95       	ror	r25
    1774:	87 95       	ror	r24
    1776:	77 95       	ror	r23
    1778:	67 95       	ror	r22
    177a:	ba 95       	dec	r27
    177c:	c9 f7       	brne	.-14     	; 0x1770 <__ultoa_invert+0x86>
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	61 05       	cpc	r22, r1
    1782:	71 05       	cpc	r23, r1
    1784:	08 95       	ret
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	0a 2e       	mov	r0, r26
    178c:	06 94       	lsr	r0
    178e:	57 95       	ror	r21
    1790:	47 95       	ror	r20
    1792:	37 95       	ror	r19
    1794:	27 95       	ror	r18
    1796:	ba 95       	dec	r27
    1798:	c9 f7       	brne	.-14     	; 0x178c <__ultoa_invert+0xa2>
    179a:	62 0f       	add	r22, r18
    179c:	73 1f       	adc	r23, r19
    179e:	84 1f       	adc	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	a0 1d       	adc	r26, r0
    17a4:	08 95       	ret

000017a6 <_exit>:
    17a6:	f8 94       	cli

000017a8 <__stop_program>:
    17a8:	ff cf       	rjmp	.-2      	; 0x17a8 <__stop_program>
